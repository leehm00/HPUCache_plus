!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
02_crash_and_failover	tests/sentinel/tests/02-slaves-reconf.tcl	/^proc 02_crash_and_failover {} {$/;"	p
02_test_slaves_replication	tests/sentinel/tests/02-slaves-reconf.tcl	/^proc 02_test_slaves_replication {} {$/;"	p
1	deps/lua/doc/manual.html	/^<h1>1 - <a name="1">Introduction<\/a><\/h1>$/;"	a
10_set_replica_announced	tests/sentinel/tests/10-replica-priority.tcl	/^proc 10_set_replica_announced {master_id announced n_replicas} {$/;"	p
10_test_number_of_replicas	tests/sentinel/tests/10-replica-priority.tcl	/^proc 10_test_number_of_replicas {n_replicas_expected} {$/;"	p
2	deps/lua/doc/manual.html	/^<h1>2 - <a name="2">The Language<\/a><\/h1>$/;"	a
2.1	deps/lua/doc/manual.html	/^<h2>2.1 - <a name="2.1">Lexical Conventions<\/a><\/h2>$/;"	a
2.10	deps/lua/doc/manual.html	/^<h2>2.10 - <a name="2.10">Garbage Collection<\/a><\/h2>$/;"	a
2.10.1	deps/lua/doc/manual.html	/^<h3>2.10.1 - <a name="2.10.1">Garbage-Collection Metamethods<\/a><\/h3>$/;"	a
2.10.2	deps/lua/doc/manual.html	/^<h3>2.10.2 - <a name="2.10.2">Weak Tables<\/a><\/h3>$/;"	a
2.11	deps/lua/doc/manual.html	/^<h2>2.11 - <a name="2.11">Coroutines<\/a><\/h2>$/;"	a
2.2	deps/lua/doc/manual.html	/^<h2>2.2 - <a name="2.2">Values and Types<\/a><\/h2>$/;"	a
2.2.1	deps/lua/doc/manual.html	/^<h3>2.2.1 - <a name="2.2.1">Coercion<\/a><\/h3>$/;"	a
2.3	deps/lua/doc/manual.html	/^<h2>2.3 - <a name="2.3">Variables<\/a><\/h2>$/;"	a
2.4	deps/lua/doc/manual.html	/^<h2>2.4 - <a name="2.4">Statements<\/a><\/h2>$/;"	a
2.4.1	deps/lua/doc/manual.html	/^<h3>2.4.1 - <a name="2.4.1">Chunks<\/a><\/h3>$/;"	a
2.4.2	deps/lua/doc/manual.html	/^<h3>2.4.2 - <a name="2.4.2">Blocks<\/a><\/h3><p>$/;"	a
2.4.3	deps/lua/doc/manual.html	/^<h3>2.4.3 - <a name="2.4.3">Assignment<\/a><\/h3>$/;"	a
2.4.4	deps/lua/doc/manual.html	/^<h3>2.4.4 - <a name="2.4.4">Control Structures<\/a><\/h3><p>$/;"	a
2.4.5	deps/lua/doc/manual.html	/^<h3>2.4.5 - <a name="2.4.5">For Statement<\/a><\/h3>$/;"	a
2.4.6	deps/lua/doc/manual.html	/^<h3>2.4.6 - <a name="2.4.6">Function Calls as Statements<\/a><\/h3><p>$/;"	a
2.4.7	deps/lua/doc/manual.html	/^<h3>2.4.7 - <a name="2.4.7">Local Declarations<\/a><\/h3><p>$/;"	a
2.5	deps/lua/doc/manual.html	/^<h2>2.5 - <a name="2.5">Expressions<\/a><\/h2>$/;"	a
2.5.1	deps/lua/doc/manual.html	/^<h3>2.5.1 - <a name="2.5.1">Arithmetic Operators<\/a><\/h3><p>$/;"	a
2.5.2	deps/lua/doc/manual.html	/^<h3>2.5.2 - <a name="2.5.2">Relational Operators<\/a><\/h3><p>$/;"	a
2.5.3	deps/lua/doc/manual.html	/^<h3>2.5.3 - <a name="2.5.3">Logical Operators<\/a><\/h3><p>$/;"	a
2.5.4	deps/lua/doc/manual.html	/^<h3>2.5.4 - <a name="2.5.4">Concatenation<\/a><\/h3><p>$/;"	a
2.5.5	deps/lua/doc/manual.html	/^<h3>2.5.5 - <a name="2.5.5">The Length Operator<\/a><\/h3>$/;"	a
2.5.6	deps/lua/doc/manual.html	/^<h3>2.5.6 - <a name="2.5.6">Precedence<\/a><\/h3><p>$/;"	a
2.5.7	deps/lua/doc/manual.html	/^<h3>2.5.7 - <a name="2.5.7">Table Constructors<\/a><\/h3><p>$/;"	a
2.5.8	deps/lua/doc/manual.html	/^<h3>2.5.8 - <a name="2.5.8">Function Calls<\/a><\/h3><p>$/;"	a
2.5.9	deps/lua/doc/manual.html	/^<h3>2.5.9 - <a name="2.5.9">Function Definitions<\/a><\/h3>$/;"	a
2.6	deps/lua/doc/manual.html	/^<h2>2.6 - <a name="2.6">Visibility Rules<\/a><\/h2>$/;"	a
2.7	deps/lua/doc/manual.html	/^<h2>2.7 - <a name="2.7">Error Handling<\/a><\/h2>$/;"	a
2.8	deps/lua/doc/manual.html	/^<h2>2.8 - <a name="2.8">Metatables<\/a><\/h2>$/;"	a
2.9	deps/lua/doc/manual.html	/^<h2>2.9 - <a name="2.9">Environments<\/a><\/h2>$/;"	a
3	deps/lua/doc/manual.html	/^<h1>3 - <a name="3">The Application Program Interface<\/a><\/h1>$/;"	a
3.1	deps/lua/doc/manual.html	/^<h2>3.1 - <a name="3.1">The Stack<\/a><\/h2>$/;"	a
3.2	deps/lua/doc/manual.html	/^<h2>3.2 - <a name="3.2">Stack Size<\/a><\/h2>$/;"	a
3.3	deps/lua/doc/manual.html	/^<h2>3.3 - <a name="3.3">Pseudo-Indices<\/a><\/h2>$/;"	a
3.4	deps/lua/doc/manual.html	/^<h2>3.4 - <a name="3.4">C Closures<\/a><\/h2>$/;"	a
3.5	deps/lua/doc/manual.html	/^<h2>3.5 - <a name="3.5">Registry<\/a><\/h2>$/;"	a
3.6	deps/lua/doc/manual.html	/^<h2>3.6 - <a name="3.6">Error Handling in C<\/a><\/h2>$/;"	a
3.7	deps/lua/doc/manual.html	/^<h2>3.7 - <a name="3.7">Functions and Types<\/a><\/h2>$/;"	a
3.8	deps/lua/doc/manual.html	/^<h2>3.8 - <a name="3.8">The Debug Interface<\/a><\/h2>$/;"	a
4	deps/lua/doc/manual.html	/^<h1>4 - <a name="4">The Auxiliary Library<\/a><\/h1>$/;"	a
4.1	deps/lua/doc/manual.html	/^<h2>4.1 - <a name="4.1">Functions and Types<\/a><\/h2>$/;"	a
5	deps/lua/doc/manual.html	/^<h1>5 - <a name="5">Standard Libraries<\/a><\/h1>$/;"	a
5.1	deps/lua/doc/manual.html	/^<h2>5.1 - <a name="5.1">Basic Functions<\/a><\/h2>$/;"	a
5.2	deps/lua/doc/manual.html	/^<h2>5.2 - <a name="5.2">Coroutine Manipulation<\/a><\/h2>$/;"	a
5.3	deps/lua/doc/manual.html	/^<h2>5.3 - <a name="5.3">Modules<\/a><\/h2>$/;"	a
5.4	deps/lua/doc/manual.html	/^<h2>5.4 - <a name="5.4">String Manipulation<\/a><\/h2>$/;"	a
5.4.1	deps/lua/doc/manual.html	/^<h3>5.4.1 - <a name="5.4.1">Patterns<\/a><\/h3>$/;"	a
5.5	deps/lua/doc/manual.html	/^<h2>5.5 - <a name="5.5">Table Manipulation<\/a><\/h2><p>$/;"	a
5.6	deps/lua/doc/manual.html	/^<h2>5.6 - <a name="5.6">Mathematical Functions<\/a><\/h2>$/;"	a
5.7	deps/lua/doc/manual.html	/^<h2>5.7 - <a name="5.7">Input and Output Facilities<\/a><\/h2>$/;"	a
5.8	deps/lua/doc/manual.html	/^<h2>5.8 - <a name="5.8">Operating System Facilities<\/a><\/h2>$/;"	a
5.9	deps/lua/doc/manual.html	/^<h2>5.9 - <a name="5.9">The Debug Library<\/a><\/h2>$/;"	a
6	deps/lua/doc/manual.html	/^<h1>6 - <a name="6">Lua Stand-alone<\/a><\/h1>$/;"	a
7	deps/lua/doc/manual.html	/^<h1>7 - <a name="7">Incompatibilities with the Previous Version<\/a><\/h1>$/;"	a
7.1	deps/lua/doc/manual.html	/^<h2>7.1 - <a name="7.1">Changes in the Language<\/a><\/h2>$/;"	a
7.2	deps/lua/doc/manual.html	/^<h2>7.2 - <a name="7.2">Changes in the Libraries<\/a><\/h2>$/;"	a
7.3	deps/lua/doc/manual.html	/^<h2>7.3 - <a name="7.3">Changes in the API<\/a><\/h2>$/;"	a
8	deps/lua/doc/manual.html	/^<h1>8 - <a name="8">The Complete Syntax of Lua<\/a><\/h1>$/;"	a
::redis::__dispatch__	tests/support/redis.tcl	/^proc ::redis::__dispatch__ {id method args} {$/;"	p
::redis::__dispatch__raw__	tests/support/redis.tcl	/^proc ::redis::__dispatch__raw__ {id method argv} {$/;"	p
::redis::__method__blocking	tests/support/redis.tcl	/^proc ::redis::__method__blocking {id fd val} {$/;"	p
::redis::__method__channel	tests/support/redis.tcl	/^proc ::redis::__method__channel {id fd} {$/;"	p
::redis::__method__close	tests/support/redis.tcl	/^proc ::redis::__method__close {id fd} {$/;"	p
::redis::__method__deferred	tests/support/redis.tcl	/^proc ::redis::__method__deferred {id fd val} {$/;"	p
::redis::__method__flush	tests/support/redis.tcl	/^proc ::redis::__method__flush {id fd} {$/;"	p
::redis::__method__read	tests/support/redis.tcl	/^proc ::redis::__method__read {id fd} {$/;"	p
::redis::__method__reconnect	tests/support/redis.tcl	/^proc ::redis::__method__reconnect {id fd val} {$/;"	p
::redis::__method__write	tests/support/redis.tcl	/^proc ::redis::__method__write {id fd buf} {$/;"	p
::redis::redis_bulk_read	tests/support/redis.tcl	/^proc ::redis::redis_bulk_read {fd} {$/;"	p
::redis::redis_call_callback	tests/support/redis.tcl	/^proc ::redis::redis_call_callback {id type reply} {$/;"	p
::redis::redis_multi_bulk_read	tests/support/redis.tcl	/^proc ::redis::redis_multi_bulk_read {id fd} {$/;"	p
::redis::redis_read_line	tests/support/redis.tcl	/^proc ::redis::redis_read_line fd {$/;"	p
::redis::redis_read_map	tests/support/redis.tcl	/^proc ::redis::redis_read_map {id fd} {$/;"	p
::redis::redis_read_null	tests/support/redis.tcl	/^proc ::redis::redis_read_null fd {$/;"	p
::redis::redis_read_reply	tests/support/redis.tcl	/^proc ::redis::redis_read_reply {id fd} {$/;"	p
::redis::redis_readable	tests/support/redis.tcl	/^proc ::redis::redis_readable {fd id} {$/;"	p
::redis::redis_readnl	tests/support/redis.tcl	/^proc ::redis::redis_readnl {fd len} {$/;"	p
::redis::redis_reset_state	tests/support/redis.tcl	/^proc ::redis::redis_reset_state id {$/;"	p
::redis::redis_write	tests/support/redis.tcl	/^proc ::redis::redis_write {fd buf} {$/;"	p
::redis::redis_writenl	tests/support/redis.tcl	/^proc ::redis::redis_writenl {fd buf} {$/;"	p
::redis_cluster::__dispatch__	tests/support/cluster.tcl	/^proc ::redis_cluster::__dispatch__ {id method args} {$/;"	p
::redis_cluster::__method__close	tests/support/cluster.tcl	/^proc ::redis_cluster::__method__close {id} {$/;"	p
::redis_cluster::__method__masternode_for_slot	tests/support/cluster.tcl	/^proc ::redis_cluster::__method__masternode_for_slot {id slot} {$/;"	p
::redis_cluster::__method__masternode_notfor_slot	tests/support/cluster.tcl	/^proc ::redis_cluster::__method__masternode_notfor_slot {id slot} {$/;"	p
::redis_cluster::__method__refresh_nodes_map	tests/support/cluster.tcl	/^proc ::redis_cluster::__method__refresh_nodes_map {id} {$/;"	p
::redis_cluster::crc16	tests/support/cluster.tcl	/^proc ::redis_cluster::crc16 {s} {$/;"	p
::redis_cluster::get_keys_from_command	tests/support/cluster.tcl	/^proc ::redis_cluster::get_keys_from_command {cmd argv} {$/;"	p
::redis_cluster::get_slot_from_keys	tests/support/cluster.tcl	/^proc ::redis_cluster::get_slot_from_keys {keys} {$/;"	p
::redis_cluster::hash	tests/support/cluster.tcl	/^proc ::redis_cluster::hash {key} {$/;"	p
A	deps/jemalloc/Makefile	/^A := a$/;"	m
A0	src/rand.c	57;"	d	file:
A1	src/rand.c	58;"	d	file:
A2	src/rand.c	59;"	d	file:
ABI	deps/jemalloc/Makefile	/^ABI := elf$/;"	m
ACLAddAllowedSubcommand	src/acl.c	/^void ACLAddAllowedSubcommand(user *u, unsigned long id, const char *sub) {$/;"	f
ACLAppendUserForLoading	src/acl.c	/^int ACLAppendUserForLoading(sds *argv, int argc, int *argc_err) {$/;"	f
ACLAuthenticateUser	src/acl.c	/^int ACLAuthenticateUser(client *c, robj *username, robj *password) {$/;"	f
ACLCategoryItem	src/acl.c	/^struct ACLCategoryItem {$/;"	s	file:
ACLCheckAllPerm	src/acl.c	/^int ACLCheckAllPerm(client *c, int *idxptr) {$/;"	f
ACLCheckCommandPerm	src/acl.c	/^int ACLCheckCommandPerm(client *c, int *keyidxptr) {$/;"	f
ACLCheckPasswordHash	src/acl.c	/^int ACLCheckPasswordHash(unsigned char *hash, int hashlen) {$/;"	f
ACLCheckPubsubChannelPerm	src/acl.c	/^int ACLCheckPubsubChannelPerm(sds channel, list *allowed, int literal) {$/;"	f
ACLCheckPubsubPerm	src/acl.c	/^int ACLCheckPubsubPerm(client *c, int idx, int count, int literal, int *idxptr) {$/;"	f
ACLCheckUserCredentials	src/acl.c	/^int ACLCheckUserCredentials(robj *username, robj *password) {$/;"	f
ACLClearCommandID	src/acl.c	/^void ACLClearCommandID(void) {$/;"	f
ACLCommandCategories	src/acl.c	/^} ACLCommandCategories[] = {$/;"	v	typeref:struct:ACLCategoryItem
ACLCopyUser	src/acl.c	/^void ACLCopyUser(user *dst, user *src) {$/;"	f
ACLCountCategoryBitsForUser	src/acl.c	/^int ACLCountCategoryBitsForUser(user *u, unsigned long *on, unsigned long *off,$/;"	f
ACLCreateUnlinkedUser	src/acl.c	/^user *ACLCreateUnlinkedUser(void) {$/;"	f
ACLCreateUser	src/acl.c	/^user *ACLCreateUser(const char *name, size_t namelen) {$/;"	f
ACLDescribeUser	src/acl.c	/^sds ACLDescribeUser(user *u) {$/;"	f
ACLDescribeUserCommandRules	src/acl.c	/^sds ACLDescribeUserCommandRules(user *u) {$/;"	f
ACLFreeLogEntry	src/acl.c	/^void ACLFreeLogEntry(void *leptr) {$/;"	f
ACLFreeUser	src/acl.c	/^void ACLFreeUser(user *u) {$/;"	f
ACLFreeUserAndKillClients	src/acl.c	/^void ACLFreeUserAndKillClients(user *u) {$/;"	f
ACLFreeUsersSet	src/acl.c	/^void ACLFreeUsersSet(rax *users) {$/;"	f
ACLGetCommandBitCoordinates	src/acl.c	/^int ACLGetCommandBitCoordinates(uint64_t id, uint64_t *word, uint64_t *bit) {$/;"	f
ACLGetCommandCategoryFlagByName	src/acl.c	/^uint64_t ACLGetCommandCategoryFlagByName(const char *name) {$/;"	f
ACLGetCommandID	src/acl.c	/^unsigned long ACLGetCommandID(const char *cmdname) {$/;"	f
ACLGetUserByName	src/acl.c	/^user *ACLGetUserByName(const char *name, size_t namelen) {$/;"	f
ACLGetUserCommandBit	src/acl.c	/^int ACLGetUserCommandBit(user *u, unsigned long id) {$/;"	f
ACLHashPassword	src/acl.c	/^sds ACLHashPassword(unsigned char *cleartext, size_t len) {$/;"	f
ACLInit	src/acl.c	/^void ACLInit(void) {$/;"	f
ACLInitDefaultUser	src/acl.c	/^void ACLInitDefaultUser(void) {$/;"	f
ACLKillPubsubClientsIfNeeded	src/acl.c	/^void ACLKillPubsubClientsIfNeeded(user *u, list *upcoming) {$/;"	f
ACLListDupSds	src/acl.c	/^void *ACLListDupSds(void *item) {$/;"	f
ACLListFreeSds	src/acl.c	/^void ACLListFreeSds(void *item) {$/;"	f
ACLListMatchSds	src/acl.c	/^int ACLListMatchSds(void *a, void *b) {$/;"	f
ACLLoadConfiguredUsers	src/acl.c	/^int ACLLoadConfiguredUsers(void) {$/;"	f
ACLLoadFromFile	src/acl.c	/^sds ACLLoadFromFile(const char *filename) {$/;"	f
ACLLoadUsersAtStartup	src/acl.c	/^void ACLLoadUsersAtStartup(void) {$/;"	f
ACLLog	src/acl.c	/^list *ACLLog;       \/* Our security log, the user is able to inspect that$/;"	v
ACLLogEntry	src/acl.c	/^typedef struct ACLLogEntry {$/;"	s	file:
ACLLogEntry	src/acl.c	/^} ACLLogEntry;$/;"	t	typeref:struct:ACLLogEntry	file:
ACLLogMatchEntry	src/acl.c	/^int ACLLogMatchEntry(ACLLogEntry *a, ACLLogEntry *b) {$/;"	f
ACLLookupCommand	src/acl.c	/^struct redisCommand *ACLLookupCommand(const char *name) {$/;"	f
ACLResetSubcommands	src/acl.c	/^void ACLResetSubcommands(user *u) {$/;"	f
ACLResetSubcommandsForCommand	src/acl.c	/^void ACLResetSubcommandsForCommand(user *u, unsigned long id) {$/;"	f
ACLSaveToFile	src/acl.c	/^int ACLSaveToFile(const char *filename) {$/;"	f
ACLSetUser	src/acl.c	/^int ACLSetUser(user *u, const char *op, ssize_t oplen) {$/;"	f
ACLSetUserCommandBit	src/acl.c	/^void ACLSetUserCommandBit(user *u, unsigned long id, int value) {$/;"	f
ACLSetUserCommandBitsForCategory	src/acl.c	/^int ACLSetUserCommandBitsForCategory(user *u, const char *category, int value) {$/;"	f
ACLSetUserStringError	src/acl.c	/^const char *ACLSetUserStringError(void) {$/;"	f
ACLStringHasSpaces	src/acl.c	/^int ACLStringHasSpaces(const char *s, size_t len) {$/;"	f
ACLUpdateDefaultUserPassword	src/acl.c	/^void ACLUpdateDefaultUserPassword(sds password) {$/;"	f
ACLUserCanExecuteFutureCommands	src/acl.c	/^int ACLUserCanExecuteFutureCommands(user *u) {$/;"	f
ACLUserFlag	src/acl.c	/^struct ACLUserFlag {$/;"	s	file:
ACLUserFlags	src/acl.c	/^} ACLUserFlags[] = {$/;"	v	typeref:struct:ACLUserFlag
ACL_DENIED_AUTH	src/server.h	2135;"	d
ACL_DENIED_CHANNEL	src/server.h	2136;"	d
ACL_DENIED_CMD	src/server.h	2133;"	d
ACL_DENIED_KEY	src/server.h	2134;"	d
ACL_LOG_CTX_LUA	src/acl.c	1753;"	d	file:
ACL_LOG_CTX_MULTI	src/acl.c	1754;"	d	file:
ACL_LOG_CTX_TOPLEVEL	src/acl.c	1752;"	d	file:
ACL_LOG_GROUPING_MAX_TIME_DELTA	src/acl.c	1755;"	d	file:
ACL_OK	src/server.h	2132;"	d
ACTIVE_EXPIRE_CYCLE_ACCEPTABLE_STALE	src/expire.c	123;"	d	file:
ACTIVE_EXPIRE_CYCLE_FAST	src/server.h	130;"	d
ACTIVE_EXPIRE_CYCLE_FAST_DURATION	src/expire.c	121;"	d	file:
ACTIVE_EXPIRE_CYCLE_KEYS_PER_LOOP	src/expire.c	120;"	d	file:
ACTIVE_EXPIRE_CYCLE_SLOW	src/server.h	129;"	d
ACTIVE_EXPIRE_CYCLE_SLOW_TIME_PERC	src/expire.c	122;"	d	file:
ADDEQU	src/rand.c	53;"	d	file:
AE_ALL_EVENTS	src/ae.h	52;"	d
AE_BARRIER	src/ae.h	44;"	d
AE_CALL_AFTER_SLEEP	src/ae.h	55;"	d
AE_CALL_BEFORE_SLEEP	src/ae.h	54;"	d
AE_DELETED_EVENT_ID	src/ae.h	58;"	d
AE_DONT_WAIT	src/ae.h	53;"	d
AE_ERR	src/ae.h	39;"	d
AE_FILE_EVENTS	src/ae.h	50;"	d
AE_NOMORE	src/ae.h	57;"	d
AE_NONE	src/ae.h	41;"	d
AE_NOTUSED	src/ae.h	61;"	d
AE_OK	src/ae.h	38;"	d
AE_READABLE	src/ae.h	42;"	d
AE_TIME_EVENTS	src/ae.h	51;"	d
AE_WRITABLE	src/ae.h	43;"	d
AF_LOCAL	src/anet.h	45;"	d
ALIAS	deps/jemalloc/src/jemalloc.c	2509;"	d	file:
ALIAS	deps/jemalloc/src/jemalloc.c	2534;"	d	file:
ALIGNMENT_ADDR2BASE	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	156;"	d
ALIGNMENT_ADDR2OFFSET	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	160;"	d
ALIGNMENT_CEILING	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	164;"	d
ALLOC	src/Makefile	/^	echo MALLOC=$(MALLOC) >> .make-settings$/;"	m
ALLOW_EMPTY_STRING	src/config.c	1854;"	d	file:
ALL_A	deps/lua/src/Makefile	/^ALL_A= $(LUA_A)$/;"	m
ALL_O	deps/lua/src/Makefile	/^ALL_O= $(CORE_O) $(LIB_O) $(LUA_O) $(LUAC_O)$/;"	m
ALL_T	deps/lua/src/Makefile	/^ALL_T= $(LUA_A) $(LUA_T) $(LUAC_T)$/;"	m
ALTI_MSK	deps/jemalloc/test/include/test/SFMT-params11213.h	58;"	d
ALTI_MSK	deps/jemalloc/test/include/test/SFMT-params11213.h	72;"	d
ALTI_MSK	deps/jemalloc/test/include/test/SFMT-params1279.h	58;"	d
ALTI_MSK	deps/jemalloc/test/include/test/SFMT-params1279.h	72;"	d
ALTI_MSK	deps/jemalloc/test/include/test/SFMT-params132049.h	58;"	d
ALTI_MSK	deps/jemalloc/test/include/test/SFMT-params132049.h	72;"	d
ALTI_MSK	deps/jemalloc/test/include/test/SFMT-params19937.h	58;"	d
ALTI_MSK	deps/jemalloc/test/include/test/SFMT-params19937.h	72;"	d
ALTI_MSK	deps/jemalloc/test/include/test/SFMT-params216091.h	58;"	d
ALTI_MSK	deps/jemalloc/test/include/test/SFMT-params216091.h	72;"	d
ALTI_MSK	deps/jemalloc/test/include/test/SFMT-params2281.h	58;"	d
ALTI_MSK	deps/jemalloc/test/include/test/SFMT-params2281.h	72;"	d
ALTI_MSK	deps/jemalloc/test/include/test/SFMT-params4253.h	58;"	d
ALTI_MSK	deps/jemalloc/test/include/test/SFMT-params4253.h	72;"	d
ALTI_MSK	deps/jemalloc/test/include/test/SFMT-params44497.h	58;"	d
ALTI_MSK	deps/jemalloc/test/include/test/SFMT-params44497.h	72;"	d
ALTI_MSK	deps/jemalloc/test/include/test/SFMT-params607.h	58;"	d
ALTI_MSK	deps/jemalloc/test/include/test/SFMT-params607.h	72;"	d
ALTI_MSK	deps/jemalloc/test/include/test/SFMT-params86243.h	58;"	d
ALTI_MSK	deps/jemalloc/test/include/test/SFMT-params86243.h	72;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params11213.h	59;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params11213.h	73;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params1279.h	59;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params1279.h	73;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params132049.h	59;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params132049.h	73;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params19937.h	59;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params19937.h	73;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params216091.h	59;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params216091.h	73;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params2281.h	59;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params2281.h	73;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params4253.h	59;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params4253.h	73;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params44497.h	59;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params44497.h	73;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params607.h	59;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params607.h	73;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params86243.h	59;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params86243.h	73;"	d
ALTI_SL1	deps/jemalloc/test/include/test/SFMT-params11213.h	56;"	d
ALTI_SL1	deps/jemalloc/test/include/test/SFMT-params11213.h	70;"	d
ALTI_SL1	deps/jemalloc/test/include/test/SFMT-params1279.h	56;"	d
ALTI_SL1	deps/jemalloc/test/include/test/SFMT-params1279.h	70;"	d
ALTI_SL1	deps/jemalloc/test/include/test/SFMT-params132049.h	56;"	d
ALTI_SL1	deps/jemalloc/test/include/test/SFMT-params132049.h	70;"	d
ALTI_SL1	deps/jemalloc/test/include/test/SFMT-params19937.h	56;"	d
ALTI_SL1	deps/jemalloc/test/include/test/SFMT-params19937.h	70;"	d
ALTI_SL1	deps/jemalloc/test/include/test/SFMT-params216091.h	56;"	d
ALTI_SL1	deps/jemalloc/test/include/test/SFMT-params216091.h	70;"	d
ALTI_SL1	deps/jemalloc/test/include/test/SFMT-params2281.h	56;"	d
ALTI_SL1	deps/jemalloc/test/include/test/SFMT-params2281.h	70;"	d
ALTI_SL1	deps/jemalloc/test/include/test/SFMT-params4253.h	56;"	d
ALTI_SL1	deps/jemalloc/test/include/test/SFMT-params4253.h	70;"	d
ALTI_SL1	deps/jemalloc/test/include/test/SFMT-params44497.h	56;"	d
ALTI_SL1	deps/jemalloc/test/include/test/SFMT-params44497.h	70;"	d
ALTI_SL1	deps/jemalloc/test/include/test/SFMT-params607.h	56;"	d
ALTI_SL1	deps/jemalloc/test/include/test/SFMT-params607.h	70;"	d
ALTI_SL1	deps/jemalloc/test/include/test/SFMT-params86243.h	56;"	d
ALTI_SL1	deps/jemalloc/test/include/test/SFMT-params86243.h	70;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params11213.h	61;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params11213.h	74;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params1279.h	61;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params1279.h	74;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params132049.h	61;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params132049.h	74;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params19937.h	61;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params19937.h	74;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params216091.h	61;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params216091.h	74;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params2281.h	61;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params2281.h	74;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params4253.h	61;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params4253.h	74;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params44497.h	61;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params44497.h	74;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params607.h	61;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params607.h	74;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params86243.h	61;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params86243.h	74;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params11213.h	63;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params11213.h	75;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params1279.h	63;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params1279.h	75;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params132049.h	63;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params132049.h	75;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params19937.h	63;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params19937.h	75;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params216091.h	63;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params216091.h	75;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params2281.h	63;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params2281.h	75;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params4253.h	63;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params4253.h	75;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params44497.h	63;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params44497.h	75;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params607.h	63;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params607.h	75;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params86243.h	63;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params86243.h	75;"	d
ALTI_SR1	deps/jemalloc/test/include/test/SFMT-params11213.h	57;"	d
ALTI_SR1	deps/jemalloc/test/include/test/SFMT-params11213.h	71;"	d
ALTI_SR1	deps/jemalloc/test/include/test/SFMT-params1279.h	57;"	d
ALTI_SR1	deps/jemalloc/test/include/test/SFMT-params1279.h	71;"	d
ALTI_SR1	deps/jemalloc/test/include/test/SFMT-params132049.h	57;"	d
ALTI_SR1	deps/jemalloc/test/include/test/SFMT-params132049.h	71;"	d
ALTI_SR1	deps/jemalloc/test/include/test/SFMT-params19937.h	57;"	d
ALTI_SR1	deps/jemalloc/test/include/test/SFMT-params19937.h	71;"	d
ALTI_SR1	deps/jemalloc/test/include/test/SFMT-params216091.h	57;"	d
ALTI_SR1	deps/jemalloc/test/include/test/SFMT-params216091.h	71;"	d
ALTI_SR1	deps/jemalloc/test/include/test/SFMT-params2281.h	57;"	d
ALTI_SR1	deps/jemalloc/test/include/test/SFMT-params2281.h	71;"	d
ALTI_SR1	deps/jemalloc/test/include/test/SFMT-params4253.h	57;"	d
ALTI_SR1	deps/jemalloc/test/include/test/SFMT-params4253.h	71;"	d
ALTI_SR1	deps/jemalloc/test/include/test/SFMT-params44497.h	57;"	d
ALTI_SR1	deps/jemalloc/test/include/test/SFMT-params44497.h	71;"	d
ALTI_SR1	deps/jemalloc/test/include/test/SFMT-params607.h	57;"	d
ALTI_SR1	deps/jemalloc/test/include/test/SFMT-params607.h	71;"	d
ALTI_SR1	deps/jemalloc/test/include/test/SFMT-params86243.h	57;"	d
ALTI_SR1	deps/jemalloc/test/include/test/SFMT-params86243.h	71;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params11213.h	65;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params11213.h	76;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params1279.h	65;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params1279.h	76;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params132049.h	65;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params132049.h	76;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params19937.h	65;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params19937.h	76;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params216091.h	65;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params216091.h	76;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params2281.h	65;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params2281.h	76;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params4253.h	65;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params4253.h	76;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params44497.h	65;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params44497.h	76;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params607.h	65;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params607.h	76;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params86243.h	65;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params86243.h	76;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params11213.h	67;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params11213.h	77;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params1279.h	67;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params1279.h	77;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params132049.h	67;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params132049.h	77;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params19937.h	67;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params19937.h	77;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params216091.h	67;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params216091.h	77;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params2281.h	67;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params2281.h	77;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params4253.h	67;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params4253.h	77;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params44497.h	67;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params44497.h	77;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params607.h	67;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params607.h	77;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params86243.h	67;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params86243.h	77;"	d
ALTI_SWAP	deps/jemalloc/test/include/test/SFMT-alti.h	164;"	d
ALTI_SWAP	deps/jemalloc/test/include/test/SFMT-alti.h	167;"	d
AL_START_HEAD	src/adlist.h	93;"	d
AL_START_HEAD	src/quicklist.h	206;"	d
AL_START_TAIL	src/adlist.h	94;"	d
AL_START_TAIL	src/quicklist.h	207;"	d
ANET_CONNECT_BE_BINDING	src/anet.c	279;"	d	file:
ANET_CONNECT_NONBLOCK	src/anet.c	278;"	d	file:
ANET_CONNECT_NONE	src/anet.c	277;"	d	file:
ANET_ERR	src/anet.h	37;"	d
ANET_ERR_LEN	src/anet.h	38;"	d
ANET_H	src/anet.h	32;"	d
ANET_IP_ONLY	src/anet.h	42;"	d
ANET_NONE	src/anet.h	41;"	d
ANET_OK	src/anet.h	36;"	d
ANNOTATE_HAPPENS_AFTER	src/atomicvar.h	81;"	d
ANNOTATE_HAPPENS_BEFORE	src/atomicvar.h	80;"	d
AOF_FSYNC_ALWAYS	src/server.h	395;"	d
AOF_FSYNC_EVERYSEC	src/server.h	396;"	d
AOF_FSYNC_NO	src/server.h	394;"	d
AOF_OFF	src/server.h	228;"	d
AOF_ON	src/server.h	229;"	d
AOF_READ_DIFF_INTERVAL_BYTES	src/server.h	111;"	d
AOF_REWRITE_ITEMS_PER_CMD	src/server.h	110;"	d
AOF_RW_BUF_BLOCK_SIZE	src/aof.c	60;"	d	file:
AOF_WAIT_REWRITE	src/server.h	230;"	d
AOF_WRITE_LOG_ERROR_RATE	src/aof.c	357;"	d	file:
APPEND_C	deps/jemalloc/src/malloc_io.c	331;"	d	file:
APPEND_C	deps/jemalloc/src/malloc_io.c	602;"	d	file:
APPEND_PADDED_S	deps/jemalloc/src/malloc_io.c	344;"	d	file:
APPEND_PADDED_S	deps/jemalloc/src/malloc_io.c	604;"	d	file:
APPEND_S	deps/jemalloc/src/malloc_io.c	337;"	d	file:
APPEND_S	deps/jemalloc/src/malloc_io.c	603;"	d	file:
AR	deps/Makefile	/^AR=ar$/;"	m
AR	deps/jemalloc/Makefile	/^AR = ar$/;"	m
AR	deps/lua/src/Makefile	/^AR= ar rcu$/;"	m
ARENA_IND_AUTOMATIC	deps/jemalloc/src/jemalloc.c	1646;"	d	file:
ARENA_RESET_PROF_C_	deps/jemalloc/test/unit/arena_reset_prof.c	2;"	d	file:
ARFLAGS	deps/Makefile	/^ARFLAGS=rc$/;"	m
ARFLAGS	deps/jemalloc/Makefile	/^ARFLAGS = crs$/;"	m
ARN	src/Makefile	/^	echo WARN=$(WARN) >> .make-settings$/;"	m
ARRAY2D	deps/lua/test/life.lua	/^function ARRAY2D(w,h)$/;"	f
ASSERT_BUFSIZE	deps/jemalloc/test/include/test/test.h	1;"	d
ASSERT_INTEGRITY	src/listpack.c	124;"	d	file:
ASSERT_INTEGRITY_LEN	src/listpack.c	130;"	d	file:
ASSERT_NO_SIZE_OVERFLOW	src/zmalloc.c	53;"	d	file:
ASSERT_NO_SIZE_OVERFLOW	src/zmalloc.c	60;"	d	file:
ATOMIC_ACQUIRE	deps/jemalloc/include/jemalloc/internal/atomic.h	42;"	d
ATOMIC_ACQ_REL	deps/jemalloc/include/jemalloc/internal/atomic.h	44;"	d
ATOMIC_CONCAT	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	40;"	d
ATOMIC_INIT	deps/jemalloc/include/jemalloc/internal/atomic_c11.h	6;"	d
ATOMIC_INIT	deps/jemalloc/include/jemalloc/internal/atomic_gcc_atomic.h	6;"	d
ATOMIC_INIT	deps/jemalloc/include/jemalloc/internal/atomic_gcc_sync.h	4;"	d
ATOMIC_INIT	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	4;"	d
ATOMIC_INLINE	deps/jemalloc/include/jemalloc/internal/atomic.h	4;"	d
ATOMIC_INLINE	deps/jemalloc/include/jemalloc/internal/atomic.h	75;"	d
ATOMIC_INTERLOCKED_NAME	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	43;"	d
ATOMIC_INTERLOCKED_REPR	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	38;"	d
ATOMIC_INTERLOCKED_SUFFIX	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	46;"	d
ATOMIC_INTERLOCKED_SUFFIX_0	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	49;"	d
ATOMIC_INTERLOCKED_SUFFIX_1	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	50;"	d
ATOMIC_INTERLOCKED_SUFFIX_2	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	51;"	d
ATOMIC_INTERLOCKED_SUFFIX_3	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	52;"	d
ATOMIC_RAW_CONCAT	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	41;"	d
ATOMIC_RELAXED	deps/jemalloc/include/jemalloc/internal/atomic.h	41;"	d
ATOMIC_RELEASE	deps/jemalloc/include/jemalloc/internal/atomic.h	43;"	d
ATOMIC_SEQ_CST	deps/jemalloc/include/jemalloc/internal/atomic.h	45;"	d
AUTOCONF	deps/jemalloc/Makefile	/^AUTOCONF := \/usr\/bin\/autoconf$/;"	m
AUXMARK	deps/lua/src/loadlib.c	590;"	d	file:
AVOID_ERRNO	src/lzfP.h	104;"	d
AWK	deps/jemalloc/Makefile	/^AWK := gawk$/;"	m
AddReplyFromClient	src/networking.c	/^void AddReplyFromClient(client *dst, client *src) {$/;"	f
Arith	deps/lua/src/lvm.c	/^static void Arith (lua_State *L, StkId ra, const TValue *rb,$/;"	f	file:
AuthAsyncCommand_RedisCommand	src/modules/helloacl.c	/^int AuthAsyncCommand_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
AuthGlobalCommand_RedisCommand	src/modules/helloacl.c	/^int AuthGlobalCommand_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
Auth_AuthModuleUser	tests/modules/auth.c	/^int Auth_AuthModuleUser(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
Auth_AuthRealUser	tests/modules/auth.c	/^int Auth_AuthRealUser(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
Auth_ChangeCount	tests/modules/auth.c	/^int Auth_ChangeCount(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
Auth_CreateModuleUser	tests/modules/auth.c	/^int Auth_CreateModuleUser(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
AutoMemEntry	src/module.c	/^struct AutoMemEntry {$/;"	s	file:
BACKGROUND_THREAD_DEFAULT	deps/jemalloc/src/background_thread.c	11;"	d	file:
BACKGROUND_THREAD_INDEFINITE_SLEEP	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	10;"	d
BACKSPACE	deps/linenoise/linenoise.c	/^	BACKSPACE =  127    \/* Backspace *\/$/;"	e	enum:KEY_ACTION	file:
BAD_SAR	deps/lua/src/lua_bit.c	161;"	d	file:
BASELINE	src/cluster.c	3700;"	d	file:
BASELINE	src/server.c	1671;"	d	file:
BASE_AUTO_THP_THRESHOLD	deps/jemalloc/include/jemalloc/internal/base_types.h	15;"	d
BASE_AUTO_THP_THRESHOLD_A0	deps/jemalloc/include/jemalloc/internal/base_types.h	16;"	d
BASIC_CI_SIZE	deps/lua/src/lstate.h	32;"	d
BASIC_STACK_SIZE	deps/lua/src/lstate.h	34;"	d
BFOVERFLOW_FAIL	src/bitops.c	286;"	d	file:
BFOVERFLOW_SAT	src/bitops.c	285;"	d	file:
BFOVERFLOW_WRAP	src/bitops.c	284;"	d	file:
BIG	deps/lua/src/lua_struct.c	76;"	d	file:
BIG_ENDIAN	src/config.h	151;"	d
BIG_ENDIAN	src/config.h	185;"	d
BIG_ENDIAN64	deps/jemalloc/test/src/SFMT.c	53;"	d	file:
BIG_ENDIAN64	deps/jemalloc/test/src/SFMT.c	56;"	d	file:
BIG_ENDIAN64	deps/jemalloc/test/src/SFMT.c	59;"	d	file:
BILLION	deps/jemalloc/src/nstime.c	8;"	d	file:
BILLION	deps/jemalloc/test/unit/nstime.c	3;"	d	file:
BIN	deps/lua/etc/Makefile	/^BIN= $(TOP)\/src$/;"	m
BINCOLOR	deps/Makefile	/^BINCOLOR="\\033[37;1m"$/;"	m
BINCOLOR	src/Makefile	/^BINCOLOR="\\033[37;1m"$/;"	m
BINDIR	deps/jemalloc/Makefile	/^BINDIR := $(DESTDIR)\/usr\/local\/bin$/;"	m
BINS	deps/jemalloc/Makefile	/^BINS := $(objroot)bin\/jemalloc-config $(objroot)bin\/jemalloc.sh $(objroot)bin\/jeprof$/;"	m
BIN_INFO_bin_no	deps/jemalloc/src/bin.c	10;"	d	file:
BIN_INFO_bin_no	deps/jemalloc/src/bin.c	18;"	d	file:
BIN_INFO_bin_yes	deps/jemalloc/src/bin.c	17;"	d	file:
BIN_INFO_bin_yes	deps/jemalloc/src/bin.c	8;"	d	file:
BIO_AOF_FSYNC	src/bio.h	47;"	d
BIO_CLOSE_FILE	src/bio.h	46;"	d
BIO_LAZY_FREE	src/bio.h	48;"	d
BIO_NUM_OPS	src/bio.h	49;"	d
BITFIELDOP_GET	src/bitops.c	402;"	d	file:
BITFIELDOP_INCRBY	src/bitops.c	404;"	d	file:
BITFIELDOP_SET	src/bitops.c	403;"	d	file:
BITFIELD_FLAG_NONE	src/bitops.c	919;"	d	file:
BITFIELD_FLAG_READONLY	src/bitops.c	920;"	d	file:
BITMAP_BITS2GROUPS	deps/jemalloc/include/jemalloc/internal/bitmap.h	36;"	d
BITMAP_GROUPS	deps/jemalloc/include/jemalloc/internal/bitmap.h	135;"	d
BITMAP_GROUPS	deps/jemalloc/include/jemalloc/internal/bitmap.h	76;"	d
BITMAP_GROUPS	deps/jemalloc/include/jemalloc/internal/bitmap.h	79;"	d
BITMAP_GROUPS	deps/jemalloc/include/jemalloc/internal/bitmap.h	82;"	d
BITMAP_GROUPS	deps/jemalloc/include/jemalloc/internal/bitmap.h	85;"	d
BITMAP_GROUPS	deps/jemalloc/include/jemalloc/internal/bitmap.h	88;"	d
BITMAP_GROUPS_1_LEVEL	deps/jemalloc/include/jemalloc/internal/bitmap.h	59;"	d
BITMAP_GROUPS_2_LEVEL	deps/jemalloc/include/jemalloc/internal/bitmap.h	61;"	d
BITMAP_GROUPS_3_LEVEL	deps/jemalloc/include/jemalloc/internal/bitmap.h	63;"	d
BITMAP_GROUPS_4_LEVEL	deps/jemalloc/include/jemalloc/internal/bitmap.h	65;"	d
BITMAP_GROUPS_5_LEVEL	deps/jemalloc/include/jemalloc/internal/bitmap.h	67;"	d
BITMAP_GROUPS_L0	deps/jemalloc/include/jemalloc/internal/bitmap.h	42;"	d
BITMAP_GROUPS_L1	deps/jemalloc/include/jemalloc/internal/bitmap.h	44;"	d
BITMAP_GROUPS_L2	deps/jemalloc/include/jemalloc/internal/bitmap.h	46;"	d
BITMAP_GROUPS_L3	deps/jemalloc/include/jemalloc/internal/bitmap.h	48;"	d
BITMAP_GROUPS_L4	deps/jemalloc/include/jemalloc/internal/bitmap.h	51;"	d
BITMAP_GROUPS_MAX	deps/jemalloc/include/jemalloc/internal/bitmap.h	136;"	d
BITMAP_GROUPS_MAX	deps/jemalloc/include/jemalloc/internal/bitmap.h	77;"	d
BITMAP_GROUPS_MAX	deps/jemalloc/include/jemalloc/internal/bitmap.h	80;"	d
BITMAP_GROUPS_MAX	deps/jemalloc/include/jemalloc/internal/bitmap.h	83;"	d
BITMAP_GROUPS_MAX	deps/jemalloc/include/jemalloc/internal/bitmap.h	86;"	d
BITMAP_GROUPS_MAX	deps/jemalloc/include/jemalloc/internal/bitmap.h	89;"	d
BITMAP_GROUP_NBITS	deps/jemalloc/include/jemalloc/internal/bitmap.h	23;"	d
BITMAP_GROUP_NBITS_MASK	deps/jemalloc/include/jemalloc/internal/bitmap.h	24;"	d
BITMAP_INFO_INITIALIZER	deps/jemalloc/include/jemalloc/internal/bitmap.h	110;"	d
BITMAP_INFO_INITIALIZER	deps/jemalloc/include/jemalloc/internal/bitmap.h	138;"	d
BITMAP_MAXBITS	deps/jemalloc/include/jemalloc/internal/bitmap.h	19;"	d
BITMAP_MAX_LEVELS	deps/jemalloc/include/jemalloc/internal/bitmap.h	108;"	d
BITMAP_USE_TREE	deps/jemalloc/include/jemalloc/internal/bitmap.h	32;"	d
BITOP_AND	src/bitops.c	397;"	d	file:
BITOP_NOT	src/bitops.c	400;"	d	file:
BITOP_OR	src/bitops.c	398;"	d	file:
BITOP_XOR	src/bitops.c	399;"	d	file:
BITRK	deps/lua/src/lopcodes.h	119;"	d
BITS_32	deps/lua/src/lua_cmsgpack.c	29;"	d	file:
BITS_32	deps/lua/src/lua_cmsgpack.c	31;"	d	file:
BIT_OP	deps/lua/src/lua_bit.c	99;"	d	file:
BIT_SH	deps/lua/src/lua_bit.c	111;"	d	file:
BIT_UTIL_INLINE	deps/jemalloc/include/jemalloc/internal/bit_util.h	163;"	d
BIT_UTIL_INLINE	deps/jemalloc/include/jemalloc/internal/bit_util.h	6;"	d
BLACKBIT	deps/lua/src/lgc.h	56;"	d
BLOCKED_LIST	src/server.h	297;"	d
BLOCKED_MODULE	src/server.h	299;"	d
BLOCKED_NONE	src/server.h	296;"	d
BLOCKED_NUM	src/server.h	303;"	d
BLOCKED_PAUSE	src/server.h	302;"	d
BLOCKED_STREAM	src/server.h	300;"	d
BLOCKED_WAIT	src/server.h	298;"	d
BLOCKED_ZSET	src/server.h	301;"	d
BLOCK_SIZE	deps/jemalloc/test/unit/SFMT.c	38;"	d	file:
BLOCK_SIZE64	deps/jemalloc/test/unit/SFMT.c	39;"	d	file:
BRET	deps/lua/src/lua_bit.c	94;"	d	file:
BT_COUNT_CHECK_INTERVAL	deps/jemalloc/test/unit/prof_accum.c	6;"	d	file:
BT_FRAME	deps/jemalloc/src/prof.c	372;"	d	file:
BT_FRAME	deps/jemalloc/src/prof.c	530;"	d	file:
BUFERROR_BUF	deps/jemalloc/include/jemalloc/internal/malloc_io.h	35;"	d
BUFLEN	deps/jemalloc/test/unit/malloc_io.c	108;"	d	file:
BUFLEN	deps/jemalloc/test/unit/malloc_io.c	134;"	d	file:
BUFLEN	deps/jemalloc/test/unit/malloc_io.c	140;"	d	file:
BUFLEN	deps/jemalloc/test/unit/malloc_io.c	247;"	d	file:
BUFSIZE	src/sha1.c	201;"	d	file:
BUF_SIZE	deps/jemalloc/include/jemalloc/internal/emitter.h	147;"	d
BUF_SIZE	deps/jemalloc/include/jemalloc/internal/emitter.h	203;"	d
BUILD_WITH_SYSTEMD	src/Makefile	/^	BUILD_WITH_SYSTEMD=yes$/;"	m
BUILD_WITH_SYSTEMD	src/Makefile	/^BUILD_WITH_SYSTEMD=no$/;"	m
BYTE	src/sha256.h	/^typedef uint8_t BYTE;   \/\/ 8-bit byte$/;"	t
BYTE_ORDER	src/config.h	158;"	d
BYTE_ORDER	src/config.h	168;"	d
BYTE_ORDER	src/config.h	188;"	d
BYTE_ORDER	src/config.h	190;"	d
BenchmarkDictType	src/dict.c	/^dictType BenchmarkDictType = {$/;"	v
BinOpr	deps/lua/src/lcode.h	/^typedef enum BinOpr {$/;"	g
BinOpr	deps/lua/src/lcode.h	/^} BinOpr;$/;"	t	typeref:enum:BinOpr
BitNum	deps/lua/src/lua_bit.c	/^} BitNum;$/;"	t	typeref:union:__anon99	file:
BlockCnt	deps/lua/src/lparser.c	/^typedef struct BlockCnt {$/;"	s	file:
BlockCnt	deps/lua/src/lparser.c	/^} BlockCnt;$/;"	t	typeref:struct:BlockCnt	file:
BlockDebug_ThreadMain	tests/modules/blockonbackground.c	/^void *BlockDebug_ThreadMain(void *arg) {$/;"	f
C	src/rand.c	60;"	d	file:
C11_ATOMIC	src/Makefile	/^C11_ATOMIC := $(shell sh -c 'echo "\\#include <stdatomic.h>" > foo.c; \\$/;"	m
CACHELINE	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	148;"	d
CACHELINE_CEILING	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	152;"	d
CACHELINE_MASK	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	149;"	d
CAP_POSITION	deps/lua/src/lstrlib.c	168;"	d	file:
CAP_UNFINISHED	deps/lua/src/lstrlib.c	167;"	d	file:
CARRY	src/rand.c	52;"	d	file:
CC	deps/hiredis/Makefile	/^CC:=$(shell sh -c 'type $${CC%% *} >\/dev\/null 2>\/dev\/null && echo $(CC) || echo gcc')$/;"	m
CC	deps/jemalloc/Makefile	/^CC := gcc$/;"	m
CC	deps/lua/etc/Makefile	/^CC= gcc$/;"	m
CC	deps/lua/src/Makefile	/^CC?= gcc$/;"	m
CCCOLOR	deps/Makefile	/^CCCOLOR="\\033[34m"$/;"	m
CCCOLOR	src/Makefile	/^CCCOLOR="\\033[34m"$/;"	m
CC_FORCE	src/redis-cli.c	154;"	d	file:
CC_MM	deps/jemalloc/Makefile	/^CC_MM = 1$/;"	m
CC_QUIET	src/redis-cli.c	155;"	d	file:
CCallS	deps/lua/src/lapi.c	/^struct CCallS {  \/* data to `f_Ccall' *\/$/;"	s	file:
CClosure	deps/lua/src/lobject.h	/^typedef struct CClosure {$/;"	s
CClosure	deps/lua/src/lobject.h	/^} CClosure;$/;"	t	typeref:struct:CClosure
CELLS	deps/lua/test/life.lua	/^function CELLS(w,h)$/;"	f
CFLAGS	deps/jemalloc/Makefile	/^CFLAGS := $(strip $(CONFIGURE_CFLAGS) $(SPECIFIED_CFLAGS) $(EXTRA_CFLAGS))$/;"	m
CFLAGS	deps/lua/etc/Makefile	/^CFLAGS= -O2 -Wall -I$(INC) $(MYCFLAGS)$/;"	m
CFLAGS	deps/lua/src/Makefile	/^CFLAGS= -O2 -Wall $(MYCFLAGS)$/;"	m
CH	src/sha256.c	24;"	d	file:
CHECK_DELETED	deps/hiredis/adapters/libevent.h	58;"	d
CHECK_DELETED	deps/hiredis/adapters/libevent.h	79;"	d
CHECK_INPUT	src/lzfP.h	125;"	d
CHILD	deps/jemalloc/src/ctl.c	235;"	d	file:
CHILD	deps/jemalloc/src/ctl.c	558;"	d	file:
CHILD_COW_DUTY_CYCLE	src/server.h	143;"	d
CHILD_INFO_TYPE_AOF_COW_SIZE	src/server.h	/^    CHILD_INFO_TYPE_AOF_COW_SIZE,$/;"	e	enum:childInfoType
CHILD_INFO_TYPE_CURRENT_INFO	src/server.h	/^    CHILD_INFO_TYPE_CURRENT_INFO,$/;"	e	enum:childInfoType
CHILD_INFO_TYPE_MODULE_COW_SIZE	src/server.h	/^    CHILD_INFO_TYPE_MODULE_COW_SIZE$/;"	e	enum:childInfoType
CHILD_INFO_TYPE_RDB_COW_SIZE	src/server.h	/^    CHILD_INFO_TYPE_RDB_COW_SIZE,$/;"	e	enum:childInfoType
CHILD_TYPE_AOF	src/server.h	1165;"	d
CHILD_TYPE_LDB	src/server.h	1166;"	d
CHILD_TYPE_MODULE	src/server.h	1167;"	d
CHILD_TYPE_NONE	src/server.h	1163;"	d
CHILD_TYPE_RDB	src/server.h	1164;"	d
CI	tests/cluster/cluster.tcl	/^proc CI {n field} {$/;"	p
CIRCULAR_TYPE	src/geohash.h	93;"	d
CJSON_MODNAME	deps/lua/src/lua_cjson.c	52;"	d	file:
CJSON_VERSION	deps/lua/src/lua_cjson.c	56;"	d	file:
CLASSIC	deps/hdr_histogram/hdr_histogram.h	/^    CLASSIC,$/;"	e	enum:__anon118
CLASSIC_FOOTER	deps/hdr_histogram/hdr_histogram.c	/^static const char CLASSIC_FOOTER[] =$/;"	v	file:
CLIENTS_CRON_MIN_ITERATIONS	src/server.c	1848;"	d	file:
CLIENTS_PEAK_MEM_USAGE_SLOTS	src/server.c	1781;"	d	file:
CLIENT_ASKING	src/server.h	243;"	d
CLIENT_BLOCKED	src/server.h	237;"	d
CLIENT_CLOSE_AFTER_COMMAND	src/server.h	282;"	d
CLIENT_CLOSE_AFTER_REPLY	src/server.h	239;"	d
CLIENT_CLOSE_ASAP	src/server.h	244;"	d
CLIENT_DENY_BLOCKING	src/server.h	284;"	d
CLIENT_DIRTY_CAS	src/server.h	238;"	d
CLIENT_DIRTY_EXEC	src/server.h	246;"	d
CLIENT_FORCE_AOF	src/server.h	248;"	d
CLIENT_FORCE_REPL	src/server.h	249;"	d
CLIENT_GET_EVENTLOOP	src/redis-benchmark.c	74;"	d	file:
CLIENT_ID_AOF	src/server.h	865;"	d
CLIENT_IN_TO_TABLE	src/server.h	280;"	d
CLIENT_LUA	src/server.h	242;"	d
CLIENT_LUA_DEBUG	src/server.h	261;"	d
CLIENT_LUA_DEBUG_SYNC	src/server.h	262;"	d
CLIENT_MASTER	src/server.h	234;"	d
CLIENT_MASTER_FORCE_REPLY	src/server.h	247;"	d
CLIENT_MODULE	src/server.h	263;"	d
CLIENT_MONITOR	src/server.h	235;"	d
CLIENT_MULTI	src/server.h	236;"	d
CLIENT_NO_FORWARD	src/server.h	292;"	d
CLIENT_PAUSE_ALL	src/server.h	/^    CLIENT_PAUSE_ALL      \/* Pause all commands *\/$/;"	e	enum:__anon17
CLIENT_PAUSE_OFF	src/server.h	/^    CLIENT_PAUSE_OFF = 0, \/* Pause no commands *\/$/;"	e	enum:__anon17
CLIENT_PAUSE_WRITE	src/server.h	/^    CLIENT_PAUSE_WRITE,   \/* Pause write commands *\/$/;"	e	enum:__anon17
CLIENT_PENDING_COMMAND	src/server.h	268;"	d
CLIENT_PENDING_READ	src/server.h	265;"	d
CLIENT_PENDING_WRITE	src/server.h	256;"	d
CLIENT_PREVENT_AOF_PROP	src/server.h	253;"	d
CLIENT_PREVENT_LOGGING	src/server.h	289;"	d
CLIENT_PREVENT_PROP	src/server.h	255;"	d
CLIENT_PREVENT_REPL_PROP	src/server.h	254;"	d
CLIENT_PRE_PSYNC	src/server.h	250;"	d
CLIENT_PROTECTED	src/server.h	264;"	d
CLIENT_PROTOCOL_ERROR	src/server.h	281;"	d
CLIENT_PUBSUB	src/server.h	252;"	d
CLIENT_READONLY	src/server.h	251;"	d
CLIENT_REPLY_OFF	src/server.h	258;"	d
CLIENT_REPLY_SKIP	src/server.h	260;"	d
CLIENT_REPLY_SKIP_NEXT	src/server.h	259;"	d
CLIENT_REPL_RDBONLY	src/server.h	287;"	d
CLIENT_SLAVE	src/server.h	233;"	d
CLIENT_ST_KEYLEN	src/timeout.c	93;"	d	file:
CLIENT_SYNC	src/server.h	290;"	d
CLIENT_TRACKING	src/server.h	270;"	d
CLIENT_TRACKING_BCAST	src/server.h	273;"	d
CLIENT_TRACKING_BROKEN_REDIR	src/server.h	272;"	d
CLIENT_TRACKING_CACHING	src/server.h	276;"	d
CLIENT_TRACKING_NOLOOP	src/server.h	278;"	d
CLIENT_TRACKING_OPTIN	src/server.h	274;"	d
CLIENT_TRACKING_OPTOUT	src/server.h	275;"	d
CLIENT_TYPE_COUNT	src/server.h	315;"	d
CLIENT_TYPE_MASTER	src/server.h	314;"	d
CLIENT_TYPE_NORMAL	src/server.h	311;"	d
CLIENT_TYPE_OBUF_COUNT	src/server.h	316;"	d
CLIENT_TYPE_PUBSUB	src/server.h	313;"	d
CLIENT_TYPE_SLAVE	src/server.h	312;"	d
CLIENT_UNBLOCKED	src/server.h	240;"	d
CLIENT_UNIX_SOCKET	src/server.h	245;"	d
CLI_HELP_COMMAND	src/redis-cli.c	491;"	d	file:
CLI_HELP_GROUP	src/redis-cli.c	492;"	d	file:
CLUSTERMSG_FLAG0_FORCEACK	src/cluster.h	356;"	d
CLUSTERMSG_FLAG0_PAUSED	src/cluster.h	355;"	d
CLUSTERMSG_MIN_LEN	src/cluster.h	351;"	d
CLUSTERMSG_TYPE_COUNT	src/cluster.h	119;"	d
CLUSTERMSG_TYPE_FAIL	src/cluster.h	111;"	d
CLUSTERMSG_TYPE_FAILOVER_AUTH_ACK	src/cluster.h	114;"	d
CLUSTERMSG_TYPE_FAILOVER_AUTH_REQUEST	src/cluster.h	113;"	d
CLUSTERMSG_TYPE_HG	src/cluster.h	118;"	d
CLUSTERMSG_TYPE_MEET	src/cluster.h	110;"	d
CLUSTERMSG_TYPE_MFSTART	src/cluster.h	116;"	d
CLUSTERMSG_TYPE_MODULE	src/cluster.h	117;"	d
CLUSTERMSG_TYPE_PING	src/cluster.h	108;"	d
CLUSTERMSG_TYPE_PONG	src/cluster.h	109;"	d
CLUSTERMSG_TYPE_PUBLISH	src/cluster.h	112;"	d
CLUSTERMSG_TYPE_UPDATE	src/cluster.h	115;"	d
CLUSTER_BLACKLIST_TTL	src/cluster.c	1292;"	d	file:
CLUSTER_BROADCAST_ALL	src/cluster.c	2822;"	d	file:
CLUSTER_BROADCAST_LOCAL_SLAVES	src/cluster.c	2823;"	d	file:
CLUSTER_CANT_FAILOVER_DATA_AGE	src/cluster.h	89;"	d
CLUSTER_CANT_FAILOVER_EXPIRED	src/cluster.h	91;"	d
CLUSTER_CANT_FAILOVER_NONE	src/cluster.h	88;"	d
CLUSTER_CANT_FAILOVER_RELOG_PERIOD	src/cluster.h	93;"	d
CLUSTER_CANT_FAILOVER_WAITING_DELAY	src/cluster.h	90;"	d
CLUSTER_CANT_FAILOVER_WAITING_VOTES	src/cluster.h	92;"	d
CLUSTER_FAIL	src/cluster.h	12;"	d
CLUSTER_FAILOVER_DELAY	src/cluster.h	21;"	d
CLUSTER_FAIL_REPORT_VALIDITY_MULT	src/cluster.h	18;"	d
CLUSTER_FAIL_UNDO_TIME_ADD	src/cluster.h	20;"	d
CLUSTER_FAIL_UNDO_TIME_MULT	src/cluster.h	19;"	d
CLUSTER_JOIN_CHECK_AFTER	src/redis-cli.c	145;"	d	file:
CLUSTER_MANAGER_CMD_FLAG_AUTOWEIGHTS	src/redis-cli.c	123;"	d	file:
CLUSTER_MANAGER_CMD_FLAG_CHECK_OWNERS	src/redis-cli.c	129;"	d	file:
CLUSTER_MANAGER_CMD_FLAG_COLOR	src/redis-cli.c	128;"	d	file:
CLUSTER_MANAGER_CMD_FLAG_COPY	src/redis-cli.c	127;"	d	file:
CLUSTER_MANAGER_CMD_FLAG_EMPTYMASTER	src/redis-cli.c	124;"	d	file:
CLUSTER_MANAGER_CMD_FLAG_FIX	src/redis-cli.c	120;"	d	file:
CLUSTER_MANAGER_CMD_FLAG_FIX_WITH_UNREACHABLE_MASTERS	src/redis-cli.c	130;"	d	file:
CLUSTER_MANAGER_CMD_FLAG_MASTERS_ONLY	src/redis-cli.c	131;"	d	file:
CLUSTER_MANAGER_CMD_FLAG_REPLACE	src/redis-cli.c	126;"	d	file:
CLUSTER_MANAGER_CMD_FLAG_SIMULATE	src/redis-cli.c	125;"	d	file:
CLUSTER_MANAGER_CMD_FLAG_SLAVE	src/redis-cli.c	121;"	d	file:
CLUSTER_MANAGER_CMD_FLAG_SLAVES_ONLY	src/redis-cli.c	132;"	d	file:
CLUSTER_MANAGER_CMD_FLAG_YES	src/redis-cli.c	122;"	d	file:
CLUSTER_MANAGER_COMMAND	src/redis-cli.c	92;"	d	file:
CLUSTER_MANAGER_FLAG_DISCONNECT	src/redis-cli.c	117;"	d	file:
CLUSTER_MANAGER_FLAG_FAIL	src/redis-cli.c	118;"	d	file:
CLUSTER_MANAGER_FLAG_FRIEND	src/redis-cli.c	115;"	d	file:
CLUSTER_MANAGER_FLAG_MYSELF	src/redis-cli.c	113;"	d	file:
CLUSTER_MANAGER_FLAG_NOADDR	src/redis-cli.c	116;"	d	file:
CLUSTER_MANAGER_FLAG_SLAVE	src/redis-cli.c	114;"	d	file:
CLUSTER_MANAGER_INVALID_HOST_ARG	src/redis-cli.c	86;"	d	file:
CLUSTER_MANAGER_LOG_LVL_ERR	src/redis-cli.c	142;"	d	file:
CLUSTER_MANAGER_LOG_LVL_INFO	src/redis-cli.c	140;"	d	file:
CLUSTER_MANAGER_LOG_LVL_SUCCESS	src/redis-cli.c	143;"	d	file:
CLUSTER_MANAGER_LOG_LVL_WARN	src/redis-cli.c	141;"	d	file:
CLUSTER_MANAGER_MASTERS_COUNT	src/redis-cli.c	91;"	d	file:
CLUSTER_MANAGER_MIGRATE_PIPELINE	src/redis-cli.c	83;"	d	file:
CLUSTER_MANAGER_MIGRATE_TIMEOUT	src/redis-cli.c	82;"	d	file:
CLUSTER_MANAGER_MODE	src/redis-cli.c	90;"	d	file:
CLUSTER_MANAGER_NODE_ARRAY_FREE	src/redis-cli.c	95;"	d	file:
CLUSTER_MANAGER_OPT_COLD	src/redis-cli.c	135;"	d	file:
CLUSTER_MANAGER_OPT_GETFRIENDS	src/redis-cli.c	134;"	d	file:
CLUSTER_MANAGER_OPT_QUIET	src/redis-cli.c	137;"	d	file:
CLUSTER_MANAGER_OPT_UPDATE	src/redis-cli.c	136;"	d	file:
CLUSTER_MANAGER_OPT_VERBOSE	src/redis-cli.c	138;"	d	file:
CLUSTER_MANAGER_PRINT_REPLY_ERROR	src/redis-cli.c	97;"	d	file:
CLUSTER_MANAGER_REBALANCE_THRESHOLD	src/redis-cli.c	84;"	d	file:
CLUSTER_MANAGER_SLOTS	src/redis-cli.c	81;"	d	file:
CLUSTER_MAX_REJOIN_DELAY	src/cluster.c	4222;"	d	file:
CLUSTER_MF_PAUSE_MULT	src/cluster.h	23;"	d
CLUSTER_MF_TIMEOUT	src/cluster.h	22;"	d
CLUSTER_MIN_REJOIN_DELAY	src/cluster.c	4223;"	d	file:
CLUSTER_MODULE_FLAG_NONE	src/cluster.h	124;"	d
CLUSTER_MODULE_FLAG_NO_FAILOVER	src/cluster.h	125;"	d
CLUSTER_MODULE_FLAG_NO_REDIRECTION	src/cluster.h	126;"	d
CLUSTER_NAMELEN	src/cluster.h	13;"	d
CLUSTER_NODE_FAIL	src/cluster.h	67;"	d
CLUSTER_NODE_HANDSHAKE	src/cluster.h	69;"	d
CLUSTER_NODE_HG	src/cluster.h	74;"	d
CLUSTER_NODE_HG_MAIN	src/cluster.h	75;"	d
CLUSTER_NODE_MASTER	src/cluster.h	64;"	d
CLUSTER_NODE_MEET	src/cluster.h	71;"	d
CLUSTER_NODE_MIGRATE_TO	src/cluster.h	72;"	d
CLUSTER_NODE_MYSELF	src/cluster.h	68;"	d
CLUSTER_NODE_NOADDR	src/cluster.h	70;"	d
CLUSTER_NODE_NOFAILOVER	src/cluster.h	73;"	d
CLUSTER_NODE_NULL_NAME	src/cluster.h	76;"	d
CLUSTER_NODE_PFAIL	src/cluster.h	66;"	d
CLUSTER_NODE_SLAVE	src/cluster.h	65;"	d
CLUSTER_OK	src/cluster.h	11;"	d
CLUSTER_PORT_INCR	src/cluster.h	14;"	d
CLUSTER_PROTO_VER	src/cluster.h	321;"	d
CLUSTER_REDIR_ASK	src/cluster.h	30;"	d
CLUSTER_REDIR_CROSS_SLOT	src/cluster.h	28;"	d
CLUSTER_REDIR_DOWN_RO_STATE	src/cluster.h	34;"	d
CLUSTER_REDIR_DOWN_STATE	src/cluster.h	32;"	d
CLUSTER_REDIR_DOWN_UNBOUND	src/cluster.h	33;"	d
CLUSTER_REDIR_MOVED	src/cluster.h	31;"	d
CLUSTER_REDIR_NONE	src/cluster.h	27;"	d
CLUSTER_REDIR_UNSTABLE	src/cluster.h	29;"	d
CLUSTER_SLAVE_MIGRATION_DELAY	src/cluster.h	24;"	d
CLUSTER_SLOTS	src/cluster.h	10;"	d
CLUSTER_SLOTS	src/redis-benchmark.c	69;"	d	file:
CLUSTER_TODO_FSYNC_CONFIG	src/cluster.h	99;"	d
CLUSTER_TODO_HANDLE_FAILOVER	src/cluster.h	96;"	d
CLUSTER_TODO_HANDLE_MANUALFAILOVER	src/cluster.h	100;"	d
CLUSTER_TODO_SAVE_CONFIG	src/cluster.h	98;"	d
CLUSTER_TODO_UPDATE_STATE	src/cluster.h	97;"	d
CLUSTER_WRITABLE_DELAY	src/cluster.c	4224;"	d	file:
CMD_ADMIN	src/server.h	186;"	d
CMD_ASKING	src/server.h	195;"	d
CMD_CALL_FULL	src/server.h	458;"	d
CMD_CALL_NONE	src/server.h	452;"	d
CMD_CALL_NOWRAP	src/server.h	459;"	d
CMD_CALL_PROPAGATE	src/server.h	457;"	d
CMD_CALL_PROPAGATE_AOF	src/server.h	455;"	d
CMD_CALL_PROPAGATE_REPL	src/server.h	456;"	d
CMD_CALL_SLOWLOG	src/server.h	453;"	d
CMD_CALL_STATS	src/server.h	454;"	d
CMD_CATEGORY_ADMIN	src/server.h	218;"	d
CMD_CATEGORY_BITMAP	src/server.h	213;"	d
CMD_CATEGORY_BLOCKING	src/server.h	221;"	d
CMD_CATEGORY_CONNECTION	src/server.h	223;"	d
CMD_CATEGORY_DANGEROUS	src/server.h	222;"	d
CMD_CATEGORY_FAST	src/server.h	219;"	d
CMD_CATEGORY_GEO	src/server.h	215;"	d
CMD_CATEGORY_HASH	src/server.h	211;"	d
CMD_CATEGORY_HYPERLOGLOG	src/server.h	214;"	d
CMD_CATEGORY_KEYSPACE	src/server.h	205;"	d
CMD_CATEGORY_LIST	src/server.h	210;"	d
CMD_CATEGORY_PUBSUB	src/server.h	217;"	d
CMD_CATEGORY_READ	src/server.h	206;"	d
CMD_CATEGORY_SCRIPTING	src/server.h	225;"	d
CMD_CATEGORY_SET	src/server.h	208;"	d
CMD_CATEGORY_SLOW	src/server.h	220;"	d
CMD_CATEGORY_SORTEDSET	src/server.h	209;"	d
CMD_CATEGORY_STREAM	src/server.h	216;"	d
CMD_CATEGORY_STRING	src/server.h	212;"	d
CMD_CATEGORY_TRANSACTION	src/server.h	224;"	d
CMD_CATEGORY_WRITE	src/server.h	207;"	d
CMD_DENYOOM	src/server.h	184;"	d
CMD_FAST	src/server.h	196;"	d
CMD_LOADING	src/server.h	191;"	d
CMD_MAY_REPLICATE	src/server.h	198;"	d
CMD_MODULE	src/server.h	185;"	d
CMD_MODULE_GETKEYS	src/server.h	201;"	d
CMD_MODULE_NO_CLUSTER	src/server.h	202;"	d
CMD_NOSCRIPT	src/server.h	188;"	d
CMD_NO_AUTH	src/server.h	197;"	d
CMD_PUBSUB	src/server.h	187;"	d
CMD_RANDOM	src/server.h	189;"	d
CMD_READONLY	src/server.h	183;"	d
CMD_SKIP_MONITOR	src/server.h	193;"	d
CMD_SKIP_SLOWLOG	src/server.h	194;"	d
CMD_SORT_FOR_SCRIPT	src/server.h	190;"	d
CMD_STALE	src/server.h	192;"	d
CMD_WRITE	src/server.h	182;"	d
COL	deps/jemalloc/src/stats.c	233;"	d	file:
COL	deps/jemalloc/src/stats.c	263;"	d	file:
COL	deps/jemalloc/src/stats.c	423;"	d	file:
COL	deps/jemalloc/src/stats.c	444;"	d	file:
COLD_INSTANCE	src/server.c	1670;"	d	file:
COLD_SLOT	src/cluster.c	3699;"	d	file:
COM	src/geohash_helper.c	47;"	d	file:
COMMAND_GET	src/t_string.c	153;"	d	file:
COMMAND_SET	src/t_string.c	154;"	d	file:
COMPRESS_MAX	src/quicklist.c	107;"	d	file:
CONFIGURE_CFLAGS	deps/jemalloc/Makefile	/^CONFIGURE_CFLAGS := -std=gnu11 -Wall -Wsign-compare -Wundef -Wno-format-zero-length -pipe -g3 -fvisibility=hidden -O3 -funroll-loops$/;"	m
CONFIGURE_CXXFLAGS	deps/jemalloc/Makefile	/^CONFIGURE_CXXFLAGS := -Wall -g3 -fvisibility=hidden -O3$/;"	m
CONFIG_AUTHPASS_MAX_LEN	src/server.h	112;"	d
CONFIG_BGSAVE_RETRY_DELAY	src/server.h	116;"	d
CONFIG_BINDADDR_MAX	src/server.h	125;"	d
CONFIG_DEFAULT_CLUSTER_CONFIG_FILE	src/server.h	118;"	d
CONFIG_DEFAULT_HZ	src/server.h	99;"	d
CONFIG_DEFAULT_LOGFILE	src/server.h	120;"	d
CONFIG_DEFAULT_PID_FILE	src/server.h	117;"	d
CONFIG_DEFAULT_PROC_TITLE_TEMPLATE	src/server.h	127;"	d
CONFIG_DEFAULT_UNIX_SOCKET_PERM	src/server.h	119;"	d
CONFIG_FDSET_INCR	src/server.h	166;"	d
CONFIG_LATENCY_HISTOGRAM_INSTANT_MAX_VALUE	src/redis-benchmark.c	72;"	d	file:
CONFIG_LATENCY_HISTOGRAM_MAX_VALUE	src/redis-benchmark.c	71;"	d	file:
CONFIG_LATENCY_HISTOGRAM_MIN_VALUE	src/redis-benchmark.c	70;"	d	file:
CONFIG_MAX_HZ	src/server.h	101;"	d
CONFIG_MAX_LINE	src/server.h	103;"	d
CONFIG_MIN_HZ	src/server.h	100;"	d
CONFIG_MIN_RESERVED_FDS	src/server.h	126;"	d
CONFIG_OOM_BGCHILD	src/server.h	171;"	d
CONFIG_OOM_COUNT	src/server.h	172;"	d
CONFIG_OOM_MASTER	src/server.h	169;"	d
CONFIG_OOM_REPLICA	src/server.h	170;"	d
CONFIG_REPL_BACKLOG_MIN_SIZE	src/server.h	115;"	d
CONFIG_REPL_SYNCIO_TIMEOUT	src/server.h	363;"	d
CONFIG_RUN_ID_SIZE	src/server.h	113;"	d
CONFIG_WRITE_BOOL	deps/jemalloc/src/stats.c	846;"	d	file:
CONFIG_WRITE_BOOL	deps/jemalloc/src/stats.c	866;"	d	file:
CONF_HANDLE_BOOL	deps/jemalloc/src/jemalloc.c	1230;"	d	file:
CONF_HANDLE_BOOL	deps/jemalloc/src/jemalloc.c	957;"	d	file:
CONF_HANDLE_CHAR_P	deps/jemalloc/src/jemalloc.c	1041;"	d	file:
CONF_HANDLE_CHAR_P	deps/jemalloc/src/jemalloc.c	1239;"	d	file:
CONF_HANDLE_SIZE_T	deps/jemalloc/src/jemalloc.c	1016;"	d	file:
CONF_HANDLE_SIZE_T	deps/jemalloc/src/jemalloc.c	1237;"	d	file:
CONF_HANDLE_SSIZE_T	deps/jemalloc/src/jemalloc.c	1019;"	d	file:
CONF_HANDLE_SSIZE_T	deps/jemalloc/src/jemalloc.c	1238;"	d	file:
CONF_HANDLE_T_U	deps/jemalloc/src/jemalloc.c	1235;"	d	file:
CONF_HANDLE_T_U	deps/jemalloc/src/jemalloc.c	974;"	d	file:
CONF_HANDLE_UNSIGNED	deps/jemalloc/src/jemalloc.c	1012;"	d	file:
CONF_HANDLE_UNSIGNED	deps/jemalloc/src/jemalloc.c	1236;"	d	file:
CONF_MATCH	deps/jemalloc/src/jemalloc.c	1228;"	d	file:
CONF_MATCH	deps/jemalloc/src/jemalloc.c	953;"	d	file:
CONF_MATCH_VALUE	deps/jemalloc/src/jemalloc.c	1229;"	d	file:
CONF_MATCH_VALUE	deps/jemalloc/src/jemalloc.c	955;"	d	file:
CONF_MAX_no	deps/jemalloc/src/jemalloc.c	1233;"	d	file:
CONF_MAX_no	deps/jemalloc/src/jemalloc.c	972;"	d	file:
CONF_MAX_yes	deps/jemalloc/src/jemalloc.c	1234;"	d	file:
CONF_MAX_yes	deps/jemalloc/src/jemalloc.c	973;"	d	file:
CONF_MIN_no	deps/jemalloc/src/jemalloc.c	1231;"	d	file:
CONF_MIN_no	deps/jemalloc/src/jemalloc.c	970;"	d	file:
CONF_MIN_yes	deps/jemalloc/src/jemalloc.c	1232;"	d	file:
CONF_MIN_yes	deps/jemalloc/src/jemalloc.c	971;"	d	file:
CONN_FD	deps/hiredis/test.c	/^    CONN_FD,$/;"	e	enum:connection_type	file:
CONN_FLAG_CLOSE_SCHEDULED	src/connection.h	48;"	d
CONN_FLAG_WRITE_BARRIER	src/connection.h	49;"	d
CONN_INFO_LEN	src/connection.h	34;"	d
CONN_SSL	deps/hiredis/test.c	/^    CONN_SSL$/;"	e	enum:connection_type	file:
CONN_STATE_ACCEPTING	src/connection.h	/^    CONN_STATE_ACCEPTING,$/;"	e	enum:__anon74
CONN_STATE_CLOSED	src/connection.h	/^    CONN_STATE_CLOSED,$/;"	e	enum:__anon74
CONN_STATE_CONNECTED	src/connection.h	/^    CONN_STATE_CONNECTED,$/;"	e	enum:__anon74
CONN_STATE_CONNECTING	src/connection.h	/^    CONN_STATE_CONNECTING,$/;"	e	enum:__anon74
CONN_STATE_ERROR	src/connection.h	/^    CONN_STATE_ERROR$/;"	e	enum:__anon74
CONN_STATE_NONE	src/connection.h	/^    CONN_STATE_NONE = 0,$/;"	e	enum:__anon74
CONN_TCP	deps/hiredis/test.c	/^    CONN_TCP,$/;"	e	enum:connection_type	file:
CONN_TYPE_SOCKET	src/connection.h	51;"	d
CONN_TYPE_TLS	src/connection.h	52;"	d
CONN_UNIX	deps/hiredis/test.c	/^    CONN_UNIX,$/;"	e	enum:connection_type	file:
CONTROLLER_IP	src/cluster.c	47;"	d	file:
CONTROLLER_NAME	src/Makefile	/^CONTROLLER_NAME=controller$/;"	m
CONTROLLER_OBJ	src/Makefile	/^CONTROLLER_OBJ=ae.o anet.o controller.o sds.o zmalloc.o  monotonic.o$/;"	m
CONTROLLER_PORT	src/cluster.c	48;"	d	file:
CORE_O	deps/lua/src/Makefile	/^CORE_O=	lapi.o lcode.o ldebug.o ldo.o ldump.o lfunc.o lgc.o llex.o lmem.o \\$/;"	m
COUNTER_ENUM	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	55;"	d
COUNTER_ENUM	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	64;"	d
COUNTER_INIT_VAL	utils/lru/lfu-simulation.c	22;"	d	file:
COUNT_1	deps/jemalloc/test/unit/SFMT.c	40;"	d	file:
COUNT_2	deps/jemalloc/test/unit/SFMT.c	41;"	d	file:
CO_DEAD	deps/lua/src/lbaselib.c	485;"	d	file:
CO_NOR	deps/lua/src/lbaselib.c	484;"	d	file:
CO_RUN	deps/lua/src/lbaselib.c	482;"	d	file:
CO_SUS	deps/lua/src/lbaselib.c	483;"	d	file:
CPPFLAGS	deps/jemalloc/Makefile	/^CPPFLAGS := -D_GNU_SOURCE -D_REENTRANT -I$(objroot)include -I$(srcroot)include$/;"	m
CPP_OBJS	deps/jemalloc/Makefile	/^CPP_OBJS := $(CPP_SRCS:$(srcroot)%.cpp=$(objroot)%.$(O))$/;"	m
CPP_PIC_OBJS	deps/jemalloc/Makefile	/^CPP_PIC_OBJS := $(CPP_SRCS:$(srcroot)%.cpp=$(objroot)%.pic.$(O))$/;"	m
CPP_SRCS	deps/jemalloc/Makefile	/^CPP_SRCS := $(srcroot)src\/jemalloc_cpp.cpp$/;"	m
CPP_SRCS	deps/jemalloc/Makefile	/^CPP_SRCS :=$/;"	m
CRC64_H	src/crc64.h	2;"	d
CRCSPEED_H	src/crcspeed.h	29;"	d
CREATE_ABC	deps/lua/src/lopcodes.h	104;"	d
CREATE_ABx	deps/lua/src/lopcodes.h	109;"	d
CRON_DBS_PER_CALL	src/server.h	104;"	d
CSV	deps/hdr_histogram/hdr_histogram.h	/^    CSV$/;"	e	enum:__anon118
CTARGET	deps/jemalloc/Makefile	/^CTARGET = -o $@$/;"	m
CTL	deps/jemalloc/src/ctl.c	239;"	d	file:
CTL	deps/jemalloc/src/ctl.c	559;"	d	file:
CTL_GET	deps/jemalloc/src/stats.c	23;"	d	file:
CTL_M2_GET	deps/jemalloc/src/stats.c	28;"	d	file:
CTL_M2_M4_GET	deps/jemalloc/src/stats.c	37;"	d	file:
CTL_MAX_DEPTH	deps/jemalloc/include/jemalloc/internal/ctl.h	12;"	d
CTL_PROTO	deps/jemalloc/src/ctl.c	49;"	d	file:
CTL_RO_CGEN	deps/jemalloc/src/ctl.c	1379;"	d	file:
CTL_RO_CLGEN	deps/jemalloc/src/ctl.c	1354;"	d	file:
CTL_RO_CONFIG_GEN	deps/jemalloc/src/ctl.c	1476;"	d	file:
CTL_RO_GEN	deps/jemalloc/src/ctl.c	1400;"	d	file:
CTL_RO_NL_CGEN	deps/jemalloc/src/ctl.c	1422;"	d	file:
CTL_RO_NL_GEN	deps/jemalloc/src/ctl.c	1441;"	d	file:
CTL_TSD_RO_NL_CGEN	deps/jemalloc/src/ctl.c	1457;"	d	file:
CTRL_A	deps/linenoise/linenoise.c	/^	CTRL_A = 1,         \/* Ctrl+a *\/$/;"	e	enum:KEY_ACTION	file:
CTRL_B	deps/linenoise/linenoise.c	/^	CTRL_B = 2,         \/* Ctrl-b *\/$/;"	e	enum:KEY_ACTION	file:
CTRL_C	deps/linenoise/linenoise.c	/^	CTRL_C = 3,         \/* Ctrl-c *\/$/;"	e	enum:KEY_ACTION	file:
CTRL_D	deps/linenoise/linenoise.c	/^	CTRL_D = 4,         \/* Ctrl-d *\/$/;"	e	enum:KEY_ACTION	file:
CTRL_E	deps/linenoise/linenoise.c	/^	CTRL_E = 5,         \/* Ctrl-e *\/$/;"	e	enum:KEY_ACTION	file:
CTRL_F	deps/linenoise/linenoise.c	/^	CTRL_F = 6,         \/* Ctrl-f *\/$/;"	e	enum:KEY_ACTION	file:
CTRL_H	deps/linenoise/linenoise.c	/^	CTRL_H = 8,         \/* Ctrl-h *\/$/;"	e	enum:KEY_ACTION	file:
CTRL_K	deps/linenoise/linenoise.c	/^	CTRL_K = 11,        \/* Ctrl+k *\/$/;"	e	enum:KEY_ACTION	file:
CTRL_L	deps/linenoise/linenoise.c	/^	CTRL_L = 12,        \/* Ctrl+l *\/$/;"	e	enum:KEY_ACTION	file:
CTRL_N	deps/linenoise/linenoise.c	/^	CTRL_N = 14,        \/* Ctrl-n *\/$/;"	e	enum:KEY_ACTION	file:
CTRL_P	deps/linenoise/linenoise.c	/^	CTRL_P = 16,        \/* Ctrl-p *\/$/;"	e	enum:KEY_ACTION	file:
CTRL_T	deps/linenoise/linenoise.c	/^	CTRL_T = 20,        \/* Ctrl-t *\/$/;"	e	enum:KEY_ACTION	file:
CTRL_U	deps/linenoise/linenoise.c	/^	CTRL_U = 21,        \/* Ctrl+u *\/$/;"	e	enum:KEY_ACTION	file:
CTRL_W	deps/linenoise/linenoise.c	/^	CTRL_W = 23,        \/* Ctrl+w *\/$/;"	e	enum:KEY_ACTION	file:
CT_Socket	src/connection.c	/^ConnectionType CT_Socket = {$/;"	v
CT_Socket	src/connection.c	/^ConnectionType CT_Socket;$/;"	v
CT_TLS	src/tls.c	/^ConnectionType CT_TLS = {$/;"	v
CT_TLS	src/tls.c	/^ConnectionType CT_TLS;$/;"	v
CXX	deps/hiredis/Makefile	/^CXX:=$(shell sh -c 'type $${CXX%% *} >\/dev\/null 2>\/dev\/null && echo $(CXX) || echo g++')$/;"	m
CXX	deps/jemalloc/Makefile	/^CXX := g++$/;"	m
CXXFLAGS	deps/jemalloc/Makefile	/^CXXFLAGS := $(strip $(CONFIGURE_CXXFLAGS) $(SPECIFIED_CXXFLAGS) $(EXTRA_CXXFLAGS))$/;"	m
C_ERR	src/server.h	96;"	d
C_HDRS	deps/jemalloc/Makefile	/^C_HDRS := $(objroot)include\/jemalloc\/jemalloc$(install_suffix).h$/;"	m
C_JET_OBJS	deps/jemalloc/Makefile	/^C_JET_OBJS := $(C_SRCS:$(srcroot)%.c=$(objroot)%.jet.$(O))$/;"	m
C_JET_SYMS	deps/jemalloc/Makefile	/^C_JET_SYMS := $(C_SRCS:$(srcroot)%.c=$(objroot)%.jet.sym)$/;"	m
C_JET_SYM_OBJS	deps/jemalloc/Makefile	/^C_JET_SYM_OBJS := $(C_SRCS:$(srcroot)%.c=$(objroot)%.jet.sym.$(O))$/;"	m
C_OBJS	deps/jemalloc/Makefile	/^C_OBJS := $(C_SRCS:$(srcroot)%.c=$(objroot)%.$(O))$/;"	m
C_OK	src/server.h	95;"	d
C_PIC_OBJS	deps/jemalloc/Makefile	/^C_PIC_OBJS := $(C_SRCS:$(srcroot)%.c=$(objroot)%.pic.$(O))$/;"	m
C_SRCS	deps/jemalloc/Makefile	/^C_SRCS := $(srcroot)src\/jemalloc.c \\$/;"	m
C_SYMS	deps/jemalloc/Makefile	/^C_SYMS := $(C_SRCS:$(srcroot)%.c=$(objroot)%.sym)$/;"	m
C_SYM_OBJS	deps/jemalloc/Makefile	/^C_SYM_OBJS := $(C_SRCS:$(srcroot)%.c=$(objroot)%.sym.$(O))$/;"	m
C_TESTLIB_INTEGRATION_OBJS	deps/jemalloc/Makefile	/^C_TESTLIB_INTEGRATION_OBJS := $(C_TESTLIB_SRCS:$(srcroot)%.c=$(objroot)%.integration.$(O))$/;"	m
C_TESTLIB_OBJS	deps/jemalloc/Makefile	/^C_TESTLIB_OBJS := $(C_TESTLIB_UNIT_OBJS) $(C_TESTLIB_INTEGRATION_OBJS) $(C_UTIL_INTEGRATION_OBJS) $(C_TESTLIB_STRESS_OBJS)$/;"	m
C_TESTLIB_SRCS	deps/jemalloc/Makefile	/^C_TESTLIB_SRCS := $(srcroot)test\/src\/btalloc.c $(srcroot)test\/src\/btalloc_0.c \\$/;"	m
C_TESTLIB_STRESS_OBJS	deps/jemalloc/Makefile	/^C_TESTLIB_STRESS_OBJS := $(C_TESTLIB_SRCS:$(srcroot)%.c=$(objroot)%.stress.$(O))$/;"	m
C_TESTLIB_UNIT_OBJS	deps/jemalloc/Makefile	/^C_TESTLIB_UNIT_OBJS := $(C_TESTLIB_SRCS:$(srcroot)%.c=$(objroot)%.unit.$(O))$/;"	m
C_UTIL_CPP_SRCS	deps/jemalloc/Makefile	/^C_UTIL_CPP_SRCS := $(srcroot)src\/nstime.c $(srcroot)src\/malloc_io.c$/;"	m
C_UTIL_CPP_SRCS	deps/jemalloc/Makefile	/^C_UTIL_CPP_SRCS :=$/;"	m
C_UTIL_INTEGRATION_OBJS	deps/jemalloc/Makefile	/^C_UTIL_INTEGRATION_OBJS := $(C_UTIL_INTEGRATION_SRCS:$(srcroot)%.c=$(objroot)%.integration.$(O))$/;"	m
C_UTIL_INTEGRATION_SRCS	deps/jemalloc/Makefile	/^C_UTIL_INTEGRATION_SRCS := $(srcroot)src\/nstime.c $(srcroot)src\/malloc_io.c$/;"	m
C_UTIL_INTEGRATION_SRCS	deps/jemalloc/Makefile	/^C_UTIL_INTEGRATION_SRCS :=$/;"	m
CallInfo	deps/lua/src/lstate.h	/^typedef struct CallInfo {$/;"	s
CallInfo	deps/lua/src/lstate.h	/^} CallInfo;$/;"	t	typeref:struct:CallInfo
CallS	deps/lua/src/lapi.c	/^struct CallS {  \/* data to `f_call' *\/$/;"	s	file:
ClientsPeakMemInput	src/server.c	/^size_t ClientsPeakMemInput[CLIENTS_PEAK_MEM_USAGE_SLOTS] = {0};$/;"	v
ClientsPeakMemOutput	src/server.c	/^size_t ClientsPeakMemOutput[CLIENTS_PEAK_MEM_USAGE_SLOTS] = {0};$/;"	v
Closure	deps/lua/src/lobject.h	/^typedef union Closure {$/;"	u
Closure	deps/lua/src/lobject.h	/^} Closure;$/;"	t	typeref:union:Closure
ClosureHeader	deps/lua/src/lobject.h	/^  ClosureHeader;$/;"	m	struct:CClosure
ClosureHeader	deps/lua/src/lobject.h	/^  ClosureHeader;$/;"	m	struct:LClosure
ClosureHeader	deps/lua/src/lobject.h	291;"	d
CommandFilter_CommandFilter	tests/modules/commandfilter.c	/^void CommandFilter_CommandFilter(RedisModuleCommandFilterCtx *filter)$/;"	f
CommandFilter_LogCommand	tests/modules/commandfilter.c	/^int CommandFilter_LogCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
CommandFilter_PingCommand	tests/modules/commandfilter.c	/^int CommandFilter_PingCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
CommandFilter_UnregisterCommand	tests/modules/commandfilter.c	/^int CommandFilter_UnregisterCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
CommonHeader	deps/lua/src/lobject.h	/^    CommonHeader;$/;"	m	struct:TString::__anon107
CommonHeader	deps/lua/src/lobject.h	/^    CommonHeader;$/;"	m	struct:Udata::__anon108
CommonHeader	deps/lua/src/lobject.h	/^  CommonHeader;$/;"	m	struct:GCheader
CommonHeader	deps/lua/src/lobject.h	/^  CommonHeader;$/;"	m	struct:Proto
CommonHeader	deps/lua/src/lobject.h	/^  CommonHeader;$/;"	m	struct:Table
CommonHeader	deps/lua/src/lobject.h	/^  CommonHeader;$/;"	m	struct:UpVal
CommonHeader	deps/lua/src/lobject.h	43;"	d
CommonHeader	deps/lua/src/lstate.h	/^  CommonHeader;$/;"	m	struct:lua_State
ConnectionCallbackFunc	src/connection.h	/^typedef void (*ConnectionCallbackFunc)(struct connection *conn);$/;"	t
ConnectionState	src/connection.h	/^} ConnectionState;$/;"	t	typeref:enum:__anon74
ConnectionType	src/connection.h	/^typedef struct ConnectionType {$/;"	s
ConnectionType	src/connection.h	/^} ConnectionType;$/;"	t	typeref:struct:ConnectionType
ConsControl	deps/lua/src/lparser.c	/^struct ConsControl {$/;"	s	file:
D	src/debugmacro.h	34;"	d
D	src/quicklist.c	65;"	d	file:
D	src/quicklist.c	67;"	d	file:
D2S_BUFSIZE	deps/jemalloc/src/malloc_io.c	60;"	d	file:
DATADIR	deps/jemalloc/Makefile	/^DATADIR := $(DESTDIR)\/usr\/local\/share$/;"	m
DEBUG	deps/hdr_histogram/Makefile	/^DEBUG= -g$/;"	m
DEBUG	deps/linenoise/Makefile	/^DEBUG= -g$/;"	m
DEBUG	src/Makefile	/^	DEBUG=-g$/;"	m
DEBUG	src/Makefile	/^DEBUG=-g -ggdb$/;"	m
DEBUG	src/controller.c	25;"	d	file:
DEBUG_FLAGS	deps/hiredis/Makefile	/^DEBUG_FLAGS?= -g -ggdb$/;"	m
DEBUG_FLAGS	src/Makefile	/^	DEBUG_FLAGS=-g$/;"	m
DECAY_NTICKS_PER_UPDATE	deps/jemalloc/include/jemalloc/internal/arena_types.h	12;"	d
DEFAULT_DECODE_INVALID_NUMBERS	deps/lua/src/lua_cjson.c	70;"	d	file:
DEFAULT_DECODE_INVALID_NUMBERS	deps/lua/src/lua_cjson.c	75;"	d	file:
DEFAULT_DECODE_INVALID_NUMBERS	deps/lua/src/lua_cjson.c	76;"	d	file:
DEFAULT_DECODE_MAX_DEPTH	deps/lua/src/lua_cjson.c	68;"	d	file:
DEFAULT_ENCODE_INVALID_NUMBERS	deps/lua/src/lua_cjson.c	69;"	d	file:
DEFAULT_ENCODE_KEEP_BUFFER	deps/lua/src/lua_cjson.c	71;"	d	file:
DEFAULT_ENCODE_MAX_DEPTH	deps/lua/src/lua_cjson.c	67;"	d	file:
DEFAULT_ENCODE_NUMBER_PRECISION	deps/lua/src/lua_cjson.c	72;"	d	file:
DEFAULT_LATENCY_PRECISION	src/redis-benchmark.c	66;"	d	file:
DEFAULT_SPARSE_CONVERT	deps/lua/src/lua_cjson.c	64;"	d	file:
DEFAULT_SPARSE_RATIO	deps/lua/src/lua_cjson.c	65;"	d	file:
DEFAULT_SPARSE_SAFE	deps/lua/src/lua_cjson.c	66;"	d	file:
DEFRAG_SDS_DICT_NO_VAL	src/defrag.c	256;"	d	file:
DEFRAG_SDS_DICT_VAL_IS_SDS	src/defrag.c	257;"	d	file:
DEFRAG_SDS_DICT_VAL_IS_STROB	src/defrag.c	258;"	d	file:
DEFRAG_SDS_DICT_VAL_VOID_PTR	src/defrag.c	259;"	d	file:
DEG_TO_RAD	src/geohash_helper.c	/^const double DEG_TO_RAD = 0.017453292519943295769236907684886;$/;"	v
DEP	src/Makefile	/^DEP = $(REDIS_SERVER_OBJ:%.o=%.d) $(REDIS_CLI_OBJ:%.o=%.d) $(REDIS_BENCHMARK_OBJ:%.o=%.d)$/;"	m
DEPENDENCY_TARGETS	src/Makefile	/^DEPENDENCY_TARGETS=hiredis linenoise lua hdr_histogram$/;"	m
DESTDIR	deps/jemalloc/Makefile	/^DESTDIR =$/;"	m
DFLAGS	src/Makefile	/^	echo LDFLAGS=$(LDFLAGS) >> .make-settings$/;"	m
DICT_ERR	deps/hiredis/dict.h	40;"	d
DICT_ERR	src/dict.h	45;"	d
DICT_HT_INITIAL_SIZE	deps/hiredis/dict.h	76;"	d
DICT_HT_INITIAL_SIZE	src/dict.h	105;"	d
DICT_NOTUSED	deps/hiredis/dict.h	43;"	d
DICT_NOTUSED	src/dict.h	48;"	d
DICT_OK	deps/hiredis/dict.h	39;"	d
DICT_OK	src/dict.h	44;"	d
DICT_STATS_VECTLEN	src/dict.c	1095;"	d	file:
DIRTY_DECAY_MS_DEFAULT	deps/jemalloc/include/jemalloc/internal/arena_types.h	9;"	d
DISK_ERROR_TYPE_AOF	src/server.h	2088;"	d
DISK_ERROR_TYPE_NONE	src/server.h	2090;"	d
DISK_ERROR_TYPE_RDB	src/server.h	2089;"	d
DLMSG	deps/lua/src/loadlib.c	236;"	d	file:
DOCS	deps/jemalloc/Makefile	/^DOCS := $(DOCS_HTML) $(DOCS_MAN3)$/;"	m
DOCS_HTML	deps/jemalloc/Makefile	/^DOCS_HTML := $(DOCS_XML:$(objroot)%.xml=$(objroot)%.html)$/;"	m
DOCS_MAN3	deps/jemalloc/Makefile	/^DOCS_MAN3 := $(DOCS_XML:$(objroot)%.xml=$(objroot)%.3)$/;"	m
DOCS_XML	deps/jemalloc/Makefile	/^DOCS_XML := $(objroot)doc\/jemalloc$(install_suffix).xml$/;"	m
DO_INTEGER_TESTS	deps/jemalloc/test/unit/atomic.c	85;"	d	file:
DO_TESTS	deps/jemalloc/test/unit/atomic.c	18;"	d	file:
DSOS	deps/jemalloc/Makefile	/^DSOS := $(objroot)lib\/$(LIBJEMALLOC).$(SOREV)$/;"	m
DSO_LDFLAGS	deps/jemalloc/Makefile	/^DSO_LDFLAGS = -shared -Wl,-soname,$(@F)$/;"	m
DSS_DEFAULT	deps/jemalloc/include/jemalloc/internal/extent_dss.h	12;"	d
DSS_PREC_DEFAULT	deps/jemalloc/include/jemalloc/internal/extent_dss.h	11;"	d
DUMP_FILENAME_BUFSIZE	deps/jemalloc/src/prof.c	1720;"	d	file:
DUMP_INTERVAL	deps/jemalloc/test/unit/prof_accum.c	5;"	d	file:
DUMP_INTERVAL	deps/jemalloc/test/unit/prof_reset.c	137;"	d	file:
DUMP_INTERVAL	deps/jemalloc/test/unit/prof_reset.c	223;"	d	file:
DUMP_SYMS	deps/jemalloc/Makefile	/^DUMP_SYMS = nm -a$/;"	m
DYLIBNAME	deps/hiredis/Makefile	/^DYLIBNAME=$(LIBNAME).$(DYLIBSUFFIX)$/;"	m
DYLIBSUFFIX	deps/hiredis/Makefile	/^  DYLIBSUFFIX=dylib$/;"	m
DYLIBSUFFIX	deps/hiredis/Makefile	/^DYLIBSUFFIX=so$/;"	m
DYLIB_MAJOR_NAME	deps/hiredis/Makefile	/^DYLIB_MAJOR_NAME=$(LIBNAME).$(DYLIBSUFFIX).$(HIREDIS_MAJOR)$/;"	m
DYLIB_MAKE_CMD	deps/hiredis/Makefile	/^  DYLIB_MAKE_CMD=$(CC) $(SUN_SHARED_FLAG) -o $(DYLIBNAME) -h $(DYLIB_MINOR_NAME) $(LDFLAGS)$/;"	m
DYLIB_MAKE_CMD	deps/hiredis/Makefile	/^  DYLIB_MAKE_CMD=$(CC) -dynamiclib -Wl,-install_name,$(PREFIX)\/$(LIBRARY_PATH)\/$(DYLIB_MINOR_NAME) -o $(DYLIBNAME) $(LDFLAGS)$/;"	m
DYLIB_MAKE_CMD	deps/hiredis/Makefile	/^DYLIB_MAKE_CMD=$(CC) -shared -Wl,-soname,$(DYLIB_MINOR_NAME)$/;"	m
DYLIB_MINOR_NAME	deps/hiredis/Makefile	/^  DYLIB_MINOR_NAME=$(LIBNAME).$(HIREDIS_SONAME).$(DYLIBSUFFIX)$/;"	m
DYLIB_MINOR_NAME	deps/hiredis/Makefile	/^DYLIB_MINOR_NAME=$(LIBNAME).$(DYLIBSUFFIX).$(HIREDIS_SONAME)$/;"	m
DYLIB_PLUGIN	deps/hiredis/Makefile	/^  DYLIB_PLUGIN=-Wl,-undefined -Wl,dynamic_lookup$/;"	m
D_R	src/geohash_helper.c	42;"	d	file:
DataType	tests/modules/datatype.c	/^} DataType;$/;"	t	typeref:struct:__anon79	file:
DefaultUser	src/acl.c	/^user *DefaultUser;  \/* Global reference to the default user.$/;"	v
DoubleBlock_ThreadMain	tests/modules/blockonbackground.c	/^void *DoubleBlock_ThreadMain(void *arg) {$/;"	f
DumpBlock	deps/lua/src/ldump.c	/^static void DumpBlock(const void* b, size_t size, DumpState* D)$/;"	f	file:
DumpChar	deps/lua/src/ldump.c	/^static void DumpChar(int y, DumpState* D)$/;"	f	file:
DumpCode	deps/lua/src/ldump.c	76;"	d	file:
DumpConstants	deps/lua/src/ldump.c	/^static void DumpConstants(const Proto* f, DumpState* D)$/;"	f	file:
DumpDebug	deps/lua/src/ldump.c	/^static void DumpDebug(const Proto* f, DumpState* D)$/;"	f	file:
DumpFunction	deps/lua/src/ldump.c	/^static void DumpFunction(const Proto* f, const TString* p, DumpState* D)$/;"	f	file:
DumpHeader	deps/lua/src/ldump.c	/^static void DumpHeader(DumpState* D)$/;"	f	file:
DumpInt	deps/lua/src/ldump.c	/^static void DumpInt(int x, DumpState* D)$/;"	f	file:
DumpMem	deps/lua/src/ldump.c	26;"	d	file:
DumpNumber	deps/lua/src/ldump.c	/^static void DumpNumber(lua_Number x, DumpState* D)$/;"	f	file:
DumpState	deps/lua/src/ldump.c	/^} DumpState;$/;"	t	typeref:struct:__anon115	file:
DumpString	deps/lua/src/ldump.c	/^static void DumpString(const TString* s, DumpState* D)$/;"	f	file:
DumpVar	deps/lua/src/ldump.c	27;"	d	file:
DumpVector	deps/lua/src/ldump.c	/^static void DumpVector(const void* b, int n, size_t size, DumpState* D)$/;"	f	file:
EARTH_RADIUS_IN_METERS	src/geohash_helper.c	/^const double EARTH_RADIUS_IN_METERS = 6372797.560856;$/;"	v
ECCENT	src/geohash_helper.c	46;"	d	file:
EDIS_CFLAGS	src/Makefile	/^	echo REDIS_CFLAGS=$(REDIS_CFLAGS) >> .make-settings$/;"	m
EDIS_LDFLAGS	src/Makefile	/^	echo REDIS_LDFLAGS=$(REDIS_LDFLAGS) >> .make-settings$/;"	m
EMITTER_TYPE_uint32_t	deps/jemalloc/src/stats.c	130;"	d	file:
EMITTER_TYPE_uint32_t	deps/jemalloc/src/stats.c	140;"	d	file:
EMITTER_TYPE_uint32_t	deps/jemalloc/src/stats.c	154;"	d	file:
EMITTER_TYPE_uint32_t	deps/jemalloc/src/stats.c	165;"	d	file:
EMITTER_TYPE_uint32_t	deps/jemalloc/src/stats.c	176;"	d	file:
EMITTER_TYPE_uint32_t	deps/jemalloc/src/stats.c	187;"	d	file:
EMITTER_TYPE_uint32_t	deps/jemalloc/src/stats.c	205;"	d	file:
EMITTER_TYPE_uint32_t	deps/jemalloc/src/stats.c	214;"	d	file:
EMITTER_TYPE_uint64_t	deps/jemalloc/src/stats.c	131;"	d	file:
EMITTER_TYPE_uint64_t	deps/jemalloc/src/stats.c	141;"	d	file:
EMITTER_TYPE_uint64_t	deps/jemalloc/src/stats.c	155;"	d	file:
EMITTER_TYPE_uint64_t	deps/jemalloc/src/stats.c	166;"	d	file:
EMITTER_TYPE_uint64_t	deps/jemalloc/src/stats.c	177;"	d	file:
EMITTER_TYPE_uint64_t	deps/jemalloc/src/stats.c	188;"	d	file:
EMITTER_TYPE_uint64_t	deps/jemalloc/src/stats.c	206;"	d	file:
EMITTER_TYPE_uint64_t	deps/jemalloc/src/stats.c	215;"	d	file:
EMIT_SIMPLE	deps/jemalloc/include/jemalloc/internal/emitter.h	158;"	d
EMPTYDB_ASYNC	src/server.h	2378;"	d
EMPTYDB_NO_FLAGS	src/server.h	2377;"	d
EMPTY_STRING_IS_NULL	src/config.c	1855;"	d	file:
ENDCOLOR	deps/Makefile	/^ENDCOLOR="\\033[0m"$/;"	m
ENDCOLOR	src/Makefile	/^ENDCOLOR="\\033[0m"$/;"	m
ENTER	deps/linenoise/linenoise.c	/^	ENTER = 13,         \/* Enter *\/$/;"	e	enum:KEY_ACTION	file:
EOZ	deps/lua/src/lzio.h	16;"	d
EP0	src/sha256.c	26;"	d	file:
EP1	src/sha256.c	27;"	d	file:
ERR	deps/jemalloc/test/unit/malloc_io.c	22;"	d	file:
ERR	deps/jemalloc/test/unit/malloc_io.c	78;"	d	file:
ERR	src/quicklist.c	1529;"	d	file:
ERRFUNC	deps/lua/src/loadlib.c	40;"	d	file:
ERRLIB	deps/lua/src/loadlib.c	39;"	d	file:
ERROR	src/quicklist.c	1523;"	d	file:
ERROR	src/redis-check-aof.c	34;"	d	file:
ESC	deps/linenoise/linenoise.c	/^	ESC = 27,           \/* Escape *\/$/;"	e	enum:KEY_ACTION	file:
ESOCKTNOSUPPORT	src/config.h	130;"	d
EVICT_FAIL	src/server.h	2490;"	d
EVICT_OK	src/server.h	2488;"	d
EVICT_RUNNING	src/server.h	2489;"	d
EVPOOL_CACHED_SDS_SIZE	src/evict.c	54;"	d	file:
EVPOOL_SIZE	src/evict.c	53;"	d	file:
EXAMPLES	deps/hiredis/Makefile	/^EXAMPLES=hiredis-example hiredis-example-libevent hiredis-example-libev hiredis-example-glib hiredis-example-push$/;"	m
EXE	deps/jemalloc/Makefile	/^EXE := $/;"	m
EXP1	exp/exp1.sh	/^EXP1() {$/;"	f
EXP2	exp/exp1.sh	/^EXP2() {$/;"	f
EXTENT_BITS_ARENA_MASK	deps/jemalloc/include/jemalloc/internal/extent_structs.h	93;"	d
EXTENT_BITS_ARENA_SHIFT	deps/jemalloc/include/jemalloc/internal/extent_structs.h	92;"	d
EXTENT_BITS_ARENA_WIDTH	deps/jemalloc/include/jemalloc/internal/extent_structs.h	91;"	d
EXTENT_BITS_COMMITTED_MASK	deps/jemalloc/include/jemalloc/internal/extent_structs.h	101;"	d
EXTENT_BITS_COMMITTED_SHIFT	deps/jemalloc/include/jemalloc/internal/extent_structs.h	100;"	d
EXTENT_BITS_COMMITTED_WIDTH	deps/jemalloc/include/jemalloc/internal/extent_structs.h	99;"	d
EXTENT_BITS_DUMPABLE_MASK	deps/jemalloc/include/jemalloc/internal/extent_structs.h	105;"	d
EXTENT_BITS_DUMPABLE_SHIFT	deps/jemalloc/include/jemalloc/internal/extent_structs.h	104;"	d
EXTENT_BITS_DUMPABLE_WIDTH	deps/jemalloc/include/jemalloc/internal/extent_structs.h	103;"	d
EXTENT_BITS_NFREE_MASK	deps/jemalloc/include/jemalloc/internal/extent_structs.h	121;"	d
EXTENT_BITS_NFREE_SHIFT	deps/jemalloc/include/jemalloc/internal/extent_structs.h	120;"	d
EXTENT_BITS_NFREE_WIDTH	deps/jemalloc/include/jemalloc/internal/extent_structs.h	119;"	d
EXTENT_BITS_SLAB_MASK	deps/jemalloc/include/jemalloc/internal/extent_structs.h	97;"	d
EXTENT_BITS_SLAB_SHIFT	deps/jemalloc/include/jemalloc/internal/extent_structs.h	96;"	d
EXTENT_BITS_SLAB_WIDTH	deps/jemalloc/include/jemalloc/internal/extent_structs.h	95;"	d
EXTENT_BITS_SN_MASK	deps/jemalloc/include/jemalloc/internal/extent_structs.h	124;"	d
EXTENT_BITS_SN_SHIFT	deps/jemalloc/include/jemalloc/internal/extent_structs.h	123;"	d
EXTENT_BITS_STATE_MASK	deps/jemalloc/include/jemalloc/internal/extent_structs.h	113;"	d
EXTENT_BITS_STATE_SHIFT	deps/jemalloc/include/jemalloc/internal/extent_structs.h	112;"	d
EXTENT_BITS_STATE_WIDTH	deps/jemalloc/include/jemalloc/internal/extent_structs.h	111;"	d
EXTENT_BITS_SZIND_MASK	deps/jemalloc/include/jemalloc/internal/extent_structs.h	117;"	d
EXTENT_BITS_SZIND_SHIFT	deps/jemalloc/include/jemalloc/internal/extent_structs.h	116;"	d
EXTENT_BITS_SZIND_WIDTH	deps/jemalloc/include/jemalloc/internal/extent_structs.h	115;"	d
EXTENT_BITS_ZEROED_MASK	deps/jemalloc/include/jemalloc/internal/extent_structs.h	109;"	d
EXTENT_BITS_ZEROED_SHIFT	deps/jemalloc/include/jemalloc/internal/extent_structs.h	108;"	d
EXTENT_BITS_ZEROED_WIDTH	deps/jemalloc/include/jemalloc/internal/extent_structs.h	107;"	d
EXTENT_ESN_MASK	deps/jemalloc/include/jemalloc/internal/extent_structs.h	139;"	d
EXTENT_GROW_MAX_PIND	deps/jemalloc/include/jemalloc/internal/extent_types.h	9;"	d
EXTENT_HOOKS_INITIALIZER	deps/jemalloc/include/jemalloc/internal/extent_types.h	7;"	d
EXTENT_SIZE_MASK	deps/jemalloc/include/jemalloc/internal/extent_structs.h	138;"	d
EXTRA_CFLAGS	deps/jemalloc/Makefile	/^EXTRA_CFLAGS := $/;"	m
EXTRA_CXXFLAGS	deps/jemalloc/Makefile	/^EXTRA_CXXFLAGS := $/;"	m
EXTRA_LDFLAGS	deps/jemalloc/Makefile	/^EXTRA_LDFLAGS := $/;"	m
EXTRA_STACK	deps/lua/src/lstate.h	29;"	d
EventElement	tests/modules/hooks.c	/^typedef struct EventElement {$/;"	s	file:
EventElement	tests/modules/hooks.c	/^} EventElement;$/;"	t	typeref:struct:EventElement	file:
EvictionPoolLRU	src/evict.c	/^static struct evictionPoolEntry *EvictionPoolLRU;$/;"	v	typeref:struct:evictionPoolEntry	file:
ExampleQt	deps/hiredis/examples/example-qt.h	/^        ExampleQt(const char * value, QObject * parent = 0)$/;"	f	class:ExampleQt
ExampleQt	deps/hiredis/examples/example-qt.h	/^class ExampleQt : public QObject {$/;"	c
F 	deps/lua/test/factorial.lua	/^F = function (f)$/;"	f
FAIL	src/modules/testmodule.c	174;"	d	file:
FAIL	src/modules/testmodule.c	260;"	d	file:
FAIL	src/modules/testmodule.c	261;"	d	file:
FAILOVER_IN_PROGRESS	src/server.h	/^    FAILOVER_IN_PROGRESS    \/* Waiting for target replica to accept$/;"	e	enum:__anon16
FAILOVER_WAIT_FOR_SYNC	src/server.h	/^    FAILOVER_WAIT_FOR_SYNC, \/* Waiting for target replica to catch up *\/$/;"	e	enum:__anon16
FD_TO_PEER_NAME	src/anet.h	53;"	d
FD_TO_SOCK_NAME	src/anet.h	54;"	d
FILL_BYTE	deps/jemalloc/test/integration/rallocx.c	110;"	d	file:
FILL_BYTE	deps/jemalloc/test/integration/rallocx.c	146;"	d	file:
FILL_BYTE	deps/jemalloc/test/integration/xallocx.c	319;"	d	file:
FILL_MAX	src/quicklist.c	117;"	d	file:
FINALIZEDBIT	deps/lua/src/lgc.h	57;"	d
FINAL_CFLAGS	src/Makefile	/^FINAL_CFLAGS=$(STD) $(WARN) $(OPT) $(DEBUG) $(CFLAGS) $(REDIS_CFLAGS)$/;"	m
FINAL_LDFLAGS	src/Makefile	/^FINAL_LDFLAGS=$(LDFLAGS) $(REDIS_LDFLAGS) $(DEBUG) $/;"	m
FINAL_LIBS	src/Makefile	/^	FINAL_LIBS := ..\/deps\/jemalloc\/lib\/libjemalloc.a $(FINAL_LIBS)$/;"	m
FINAL_LIBS	src/Makefile	/^FINAL_LIBS=-lm$/;"	m
FIRST_RESERVED	deps/lua/src/llex.h	14;"	d
FIXEDBIT	deps/lua/src/lgc.h	60;"	d
FLAGS	deps/lua/src/lstrlib.c	688;"	d	file:
FLAGS	src/Makefile	/^	echo CFLAGS=$(CFLAGS) >> .make-settings$/;"	m
FLOAT_WIDTH_TEST	deps/hiredis/test.c	303;"	d	file:
FMT64_PREFIX	deps/jemalloc/include/jemalloc/internal/malloc_io.h	6;"	d
FMT64_PREFIX	deps/jemalloc/include/jemalloc/internal/malloc_io.h	9;"	d
FMTPTR_PREFIX	deps/jemalloc/include/jemalloc/internal/malloc_io.h	10;"	d
FMTPTR_PREFIX	deps/jemalloc/include/jemalloc/internal/malloc_io.h	7;"	d
FMT_SIZE	deps/jemalloc/include/jemalloc/internal/emitter.h	148;"	d
FMT_SIZE	deps/jemalloc/include/jemalloc/internal/emitter.h	204;"	d
FMTd32	deps/jemalloc/include/jemalloc/internal/malloc_io.h	12;"	d
FMTd32	deps/jemalloc/include/jemalloc/internal/malloc_io.h	23;"	d
FMTd64	deps/jemalloc/include/jemalloc/internal/malloc_io.h	15;"	d
FMTd64	deps/jemalloc/include/jemalloc/internal/malloc_io.h	26;"	d
FMTdPTR	deps/jemalloc/include/jemalloc/internal/malloc_io.h	18;"	d
FMTdPTR	deps/jemalloc/include/jemalloc/internal/malloc_io.h	29;"	d
FMTu32	deps/jemalloc/include/jemalloc/internal/malloc_io.h	13;"	d
FMTu32	deps/jemalloc/include/jemalloc/internal/malloc_io.h	24;"	d
FMTu64	deps/jemalloc/include/jemalloc/internal/malloc_io.h	16;"	d
FMTu64	deps/jemalloc/include/jemalloc/internal/malloc_io.h	27;"	d
FMTuPTR	deps/jemalloc/include/jemalloc/internal/malloc_io.h	19;"	d
FMTuPTR	deps/jemalloc/include/jemalloc/internal/malloc_io.h	30;"	d
FMTx32	deps/jemalloc/include/jemalloc/internal/malloc_io.h	14;"	d
FMTx32	deps/jemalloc/include/jemalloc/internal/malloc_io.h	25;"	d
FMTx64	deps/jemalloc/include/jemalloc/internal/malloc_io.h	17;"	d
FMTx64	deps/jemalloc/include/jemalloc/internal/malloc_io.h	28;"	d
FMTxPTR	deps/jemalloc/include/jemalloc/internal/malloc_io.h	20;"	d
FMTxPTR	deps/jemalloc/include/jemalloc/internal/malloc_io.h	31;"	d
FPCONV_G_FMT_BUFSIZE	deps/lua/src/fpconv.h	7;"	d
FREELIST_REF	deps/lua/src/lauxlib.c	28;"	d	file:
FRST	src/lzf_c.c	48;"	d	file:
FragDefrag	tests/modules/defragtest.c	/^int FragDefrag(RedisModuleDefragCtx *ctx, RedisModuleString *key, void **value) {$/;"	f
FragFree	tests/modules/defragtest.c	/^void FragFree(void *value) {$/;"	f
FragFreeEffort	tests/modules/defragtest.c	/^size_t FragFreeEffort(RedisModuleString *key, const void *value) {$/;"	f
FragInfo	tests/modules/defragtest.c	/^static void FragInfo(RedisModuleInfoCtx *ctx, int for_crash_report) {$/;"	f	file:
FragObject	tests/modules/defragtest.c	/^struct FragObject {$/;"	s	file:
FragType	tests/modules/defragtest.c	/^static RedisModuleType *FragType;$/;"	v	file:
FreeEvent	tests/modules/hooks.c	/^void FreeEvent(RedisModuleCtx *ctx, EventElement *event) {$/;"	f
FuncState	deps/lua/src/lparser.h	/^typedef struct FuncState {$/;"	s
FuncState	deps/lua/src/lparser.h	/^} FuncState;$/;"	t	typeref:struct:FuncState
G	deps/lua/src/lstate.h	130;"	d
GCFINALIZECOST	deps/lua/src/lgc.c	29;"	d	file:
GCObject	deps/lua/src/lobject.h	/^typedef union GCObject GCObject;$/;"	t	typeref:union:GCObject
GCObject	deps/lua/src/lstate.h	/^union GCObject {$/;"	u
GCSTEPSIZE	deps/lua/src/lgc.c	26;"	d	file:
GCSWEEPCOST	deps/lua/src/lgc.c	28;"	d	file:
GCSWEEPMAX	deps/lua/src/lgc.c	27;"	d	file:
GCSfinalize	deps/lua/src/lgc.h	21;"	d
GCSpause	deps/lua/src/lgc.h	17;"	d
GCSpropagate	deps/lua/src/lgc.h	18;"	d
GCSsweep	deps/lua/src/lgc.h	20;"	d
GCSsweepstring	deps/lua/src/lgc.h	19;"	d
GCTM	deps/lua/src/lgc.c	/^static void GCTM (lua_State *L) {$/;"	f	file:
GCheader	deps/lua/src/lobject.h	/^typedef struct GCheader {$/;"	s
GCheader	deps/lua/src/lobject.h	/^} GCheader;$/;"	t	typeref:struct:GCheader
GCthreshold	deps/lua/src/lstate.h	/^  lu_mem GCthreshold;$/;"	m	struct:global_State
GENPASS_MAX_BITS	src/acl.c	2106;"	d	file:
GEOHASH_EAST	src/geohash.h	/^    GEOHASH_EAST,$/;"	e	enum:__anon46
GEOHASH_HELPER_HPP_	src/geohash_helper.h	33;"	d
GEOHASH_H_	src/geohash.h	33;"	d
GEOHASH_NORTH	src/geohash.h	/^    GEOHASH_NORTH = 0,$/;"	e	enum:__anon46
GEOHASH_NORT_EAST	src/geohash.h	/^    GEOHASH_NORT_EAST$/;"	e	enum:__anon46
GEOHASH_NORT_WEST	src/geohash.h	/^    GEOHASH_NORT_WEST,$/;"	e	enum:__anon46
GEOHASH_SOUTH	src/geohash.h	/^    GEOHASH_SOUTH,$/;"	e	enum:__anon46
GEOHASH_SOUTH_EAST	src/geohash.h	/^    GEOHASH_SOUTH_EAST,$/;"	e	enum:__anon46
GEOHASH_SOUTH_WEST	src/geohash.h	/^    GEOHASH_SOUTH_WEST,$/;"	e	enum:__anon46
GEOHASH_WEST	src/geohash.h	/^    GEOHASH_WEST,$/;"	e	enum:__anon46
GEOSEARCH	src/geo.c	505;"	d	file:
GEOSEARCHSTORE	src/geo.c	506;"	d	file:
GEO_LAT_MAX	src/geohash.h	51;"	d
GEO_LAT_MIN	src/geohash.h	50;"	d
GEO_LONG_MAX	src/geohash.h	53;"	d
GEO_LONG_MIN	src/geohash.h	52;"	d
GEO_STEP_MAX	src/geohash.h	47;"	d
GETARG_A	deps/lua/src/lopcodes.h	84;"	d
GETARG_B	deps/lua/src/lopcodes.h	88;"	d
GETARG_Bx	deps/lua/src/lopcodes.h	96;"	d
GETARG_C	deps/lua/src/lopcodes.h	92;"	d
GETARG_sBx	deps/lua/src/lopcodes.h	100;"	d
GETFAIR_NUM_ENTRIES	src/dict.c	774;"	d	file:
GETKEYS_RESULT_INIT	src/server.h	1669;"	d
GET_AND_EMIT_ALLOC_STAT	deps/jemalloc/src/stats.c	733;"	d	file:
GET_AND_EMIT_ALLOC_STAT	deps/jemalloc/src/stats.c	763;"	d	file:
GET_AND_EMIT_MEM_STAT	deps/jemalloc/src/stats.c	798;"	d	file:
GET_AND_EMIT_MEM_STAT	deps/jemalloc/src/stats.c	812;"	d	file:
GET_ARG_NUMERIC	deps/jemalloc/src/malloc_io.c	364;"	d	file:
GET_ARG_NUMERIC	deps/jemalloc/src/malloc_io.c	605;"	d	file:
GET_NUMERIC_TYPE	src/config.c	1964;"	d	file:
GET_OPCODE	deps/lua/src/lopcodes.h	80;"	d
GISNOTZERO	src/geohash_helper.h	39;"	d
GISZERO	src/geohash_helper.h	38;"	d
GNUC_VERSION	src/config.h	207;"	d
GZERO	src/geohash_helper.h	37;"	d
GeoDirection	src/geohash.h	/^} GeoDirection;$/;"	t	typeref:enum:__anon46
GeoHashArea	src/geohash.h	/^} GeoHashArea;$/;"	t	typeref:struct:__anon49
GeoHashBits	src/geohash.h	/^} GeoHashBits;$/;"	t	typeref:struct:__anon47
GeoHashFix52Bits	src/geohash_helper.h	/^typedef uint64_t GeoHashFix52Bits;$/;"	t
GeoHashNeighbors	src/geohash.h	/^} GeoHashNeighbors;$/;"	t	typeref:struct:__anon50
GeoHashRadius	src/geohash_helper.h	/^} GeoHashRadius;$/;"	t	typeref:struct:__anon59
GeoHashRange	src/geohash.h	/^} GeoHashRange;$/;"	t	typeref:struct:__anon48
GeoHashVarBits	src/geohash_helper.h	/^typedef uint64_t GeoHashVarBits;$/;"	t
GeoShape	src/geohash.h	/^} GeoShape;$/;"	t	typeref:struct:__anon51
GetCpuUsageRatio	tmp/getcpu.cpp	/^inline float GetCpuUsageRatio(int pid)$/;"	f
GetCurrentPid	tmp/getcpu.cpp	/^inline int GetCurrentPid()$/;"	f
GetMemoryUsage	tmp/getcpu.cpp	/^inline float GetMemoryUsage(int pid)$/;"	f
HASHISZERO	src/geohash.h	43;"	d
HASHTABLE_MAX_LOAD_FACTOR	src/server.h	178;"	d
HASHTABLE_MIN_FILL	src/server.h	177;"	d
HASH_PASSWORD_LEN	src/acl.c	110;"	d	file:
HASH_SET_COPY	src/server.h	2302;"	d
HASH_SET_COPY	src/t_hash.c	201;"	d	file:
HASH_SET_TAKE_FIELD	src/server.h	2300;"	d
HASH_SET_TAKE_FIELD	src/t_hash.c	199;"	d	file:
HASH_SET_TAKE_VALUE	src/server.h	2301;"	d
HASH_SET_TAKE_VALUE	src/t_hash.c	200;"	d	file:
HAVE_ATOMIC	src/config.h	209;"	d
HAVE_ATOMIC	src/config.h	213;"	d
HAVE_BACKTRACE	src/config.h	68;"	d
HAVE_CLEARENV	src/setproctitle.c	54;"	d	file:
HAVE_DEFRAG	src/zmalloc.h	96;"	d
HAVE_EPOLL	src/config.h	78;"	d
HAVE_EVPORT	src/config.h	88;"	d
HAVE_KQUEUE	src/config.h	82;"	d
HAVE_MALLOC_SIZE	src/zmalloc.h	42;"	d
HAVE_MALLOC_SIZE	src/zmalloc.h	52;"	d
HAVE_MALLOC_SIZE	src/zmalloc.h	60;"	d
HAVE_MALLOC_SIZE	src/zmalloc.h	86;"	d
HAVE_MSG_NOSIGNAL	src/config.h	73;"	d
HAVE_PROC_MAPS	src/config.h	53;"	d
HAVE_PROC_OOM_SCORE_ADJ	src/config.h	56;"	d
HAVE_PROC_SMAPS	src/config.h	54;"	d
HAVE_PROC_SOMAXCONN	src/config.h	55;"	d
HAVE_PROC_STAT	src/config.h	52;"	d
HAVE_PSINFO	src/config.h	89;"	d
HAVE_SETPROCTITLE	src/setproctitle.c	43;"	d	file:
HAVE_SETPROCTITLE	src/setproctitle.c	45;"	d	file:
HAVE_TASKINFO	src/config.h	61;"	d
HDR_ATOMIC_H__	deps/hdr_histogram/hdr_atomic.h	8;"	d
HDR_HISTOGRAM_H	deps/hdr_histogram/hdr_histogram.h	11;"	d
HEADERS	deps/jemalloc/Makefile	/^HEADERS = $(filter-out $(PRIVATE_NAMESPACE_HDRS),$(wildcard $(foreach dir,$(HEADER_DIRS),$(dir)\/*.h)))$/;"	m
HEADER_DIRS	deps/jemalloc/Makefile	/^HEADER_DIRS = $(srcroot)include\/jemalloc\/internal \\$/;"	m
HIGH	src/rand.c	49;"	d	file:
HIREDIS_ALLOC_H	deps/hiredis/alloc.h	32;"	d
HIREDIS_BAD_DOMAIN	deps/hiredis/test.c	642;"	d	file:
HIREDIS_MAJOR	deps/hiredis/Makefile	/^HIREDIS_MAJOR=$(shell grep HIREDIS_MAJOR hiredis.h | awk '{print $$3}')$/;"	m
HIREDIS_MAJOR	deps/hiredis/hiredis.h	48;"	d
HIREDIS_MAKE_FLAGS	deps/Makefile	/^    HIREDIS_MAKE_FLAGS = USE_SSL=1$/;"	m
HIREDIS_MINOR	deps/hiredis/Makefile	/^HIREDIS_MINOR=$(shell grep HIREDIS_MINOR hiredis.h | awk '{print $$3}')$/;"	m
HIREDIS_MINOR	deps/hiredis/hiredis.h	49;"	d
HIREDIS_PATCH	deps/hiredis/Makefile	/^HIREDIS_PATCH=$(shell grep HIREDIS_PATCH hiredis.h | awk '{print $$3}')$/;"	m
HIREDIS_PATCH	deps/hiredis/hiredis.h	50;"	d
HIREDIS_SDS_COMPAT	deps/hiredis/sdscompat.h	43;"	d
HIREDIS_SDS_H	deps/hiredis/sds.h	34;"	d
HIREDIS_SONAME	deps/hiredis/Makefile	/^HIREDIS_SONAME=$(shell grep HIREDIS_SONAME hiredis.h | awk '{print $$3}')$/;"	m
HIREDIS_SONAME	deps/hiredis/hiredis.h	51;"	d
HIREDIS_USE_CRYPTO_LOCKS	deps/hiredis/ssl.c	94;"	d	file:
HI_BIT	src/rand.c	66;"	d	file:
HI_SDS_HDR	deps/hiredis/sds.h	88;"	d
HI_SDS_HDR_VAR	deps/hiredis/sds.h	87;"	d
HI_SDS_LLSTR_SIZE	deps/hiredis/sds.c	430;"	d	file:
HI_SDS_MAX_PREALLOC	deps/hiredis/sds.h	36;"	d
HI_SDS_TYPE_16	deps/hiredis/sds.h	82;"	d
HI_SDS_TYPE_32	deps/hiredis/sds.h	83;"	d
HI_SDS_TYPE_5	deps/hiredis/sds.h	80;"	d
HI_SDS_TYPE_5_LEN	deps/hiredis/sds.h	89;"	d
HI_SDS_TYPE_64	deps/hiredis/sds.h	84;"	d
HI_SDS_TYPE_8	deps/hiredis/sds.h	81;"	d
HI_SDS_TYPE_BITS	deps/hiredis/sds.h	86;"	d
HI_SDS_TYPE_MASK	deps/hiredis/sds.h	85;"	d
HLL_ALPHA_INF	src/hyperloglog.c	389;"	d	file:
HLL_BITS	src/hyperloglog.c	199;"	d	file:
HLL_DENSE	src/hyperloglog.c	203;"	d	file:
HLL_DENSE_GET_REGISTER	src/hyperloglog.c	339;"	d	file:
HLL_DENSE_SET_REGISTER	src/hyperloglog.c	351;"	d	file:
HLL_DENSE_SIZE	src/hyperloglog.c	202;"	d	file:
HLL_HDR_SIZE	src/hyperloglog.c	201;"	d	file:
HLL_INVALIDATE_CACHE	src/hyperloglog.c	191;"	d	file:
HLL_MAX_ENCODING	src/hyperloglog.c	206;"	d	file:
HLL_P	src/hyperloglog.c	194;"	d	file:
HLL_P_MASK	src/hyperloglog.c	198;"	d	file:
HLL_Q	src/hyperloglog.c	195;"	d	file:
HLL_RAW	src/hyperloglog.c	205;"	d	file:
HLL_REGISTERS	src/hyperloglog.c	197;"	d	file:
HLL_REGISTER_MAX	src/hyperloglog.c	200;"	d	file:
HLL_SPARSE	src/hyperloglog.c	204;"	d	file:
HLL_SPARSE_IS_VAL	src/hyperloglog.c	369;"	d	file:
HLL_SPARSE_IS_XZERO	src/hyperloglog.c	368;"	d	file:
HLL_SPARSE_IS_ZERO	src/hyperloglog.c	367;"	d	file:
HLL_SPARSE_VAL_BIT	src/hyperloglog.c	366;"	d	file:
HLL_SPARSE_VAL_LEN	src/hyperloglog.c	373;"	d	file:
HLL_SPARSE_VAL_MAX_LEN	src/hyperloglog.c	375;"	d	file:
HLL_SPARSE_VAL_MAX_VALUE	src/hyperloglog.c	374;"	d	file:
HLL_SPARSE_VAL_SET	src/hyperloglog.c	378;"	d	file:
HLL_SPARSE_VAL_VALUE	src/hyperloglog.c	372;"	d	file:
HLL_SPARSE_XZERO_BIT	src/hyperloglog.c	365;"	d	file:
HLL_SPARSE_XZERO_LEN	src/hyperloglog.c	371;"	d	file:
HLL_SPARSE_XZERO_MAX_LEN	src/hyperloglog.c	377;"	d	file:
HLL_SPARSE_XZERO_SET	src/hyperloglog.c	384;"	d	file:
HLL_SPARSE_ZERO_LEN	src/hyperloglog.c	370;"	d	file:
HLL_SPARSE_ZERO_MAX_LEN	src/hyperloglog.c	376;"	d	file:
HLL_SPARSE_ZERO_SET	src/hyperloglog.c	381;"	d	file:
HLL_TEST_CYCLES	src/hyperloglog.c	1388;"	d	file:
HLL_VALID_CACHE	src/hyperloglog.c	192;"	d	file:
HLOG	src/lzfP.h	55;"	d
HOTFILE	exp/merge.py	/^HOTFILE=".\/hotness.log"$/;"	v
HOTKEYS_SAMPLE	src/redis-cli.c	8002;"	d	file:
HOT_INSTANCE	src/server.c	1669;"	d	file:
HOT_SLOT	src/cluster.c	3698;"	d	file:
HOT_THRESHOLD	exp/merge.py	/^HOT_THRESHOLD=100$/;"	v
HRANDFIELD_RANDOM_SAMPLE_LIMIT	src/t_hash.c	982;"	d	file:
HRANDFIELD_SUB_STRATEGY_MUL	src/t_hash.c	977;"	d	file:
HSIZE	src/lzf_c.c	39;"	d	file:
HUGEPAGE	deps/jemalloc/include/jemalloc/internal/pages.h	18;"	d
HUGEPAGE_ADDR2BASE	deps/jemalloc/include/jemalloc/internal/pages.h	21;"	d
HUGEPAGE_CEILING	deps/jemalloc/include/jemalloc/internal/pages.h	24;"	d
HUGEPAGE_MASK	deps/jemalloc/include/jemalloc/internal/pages.h	19;"	d
Header	deps/lua/src/lua_struct.c	/^typedef struct Header {$/;"	s	file:
Header	deps/lua/src/lua_struct.c	/^} Header;$/;"	t	typeref:struct:Header	file:
HelloACL_FreeData	src/modules/helloacl.c	/^void HelloACL_FreeData(RedisModuleCtx *ctx, void *privdata) {$/;"	f
HelloACL_Reply	src/modules/helloacl.c	/^int HelloACL_Reply(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
HelloACL_ThreadMain	src/modules/helloacl.c	/^void *HelloACL_ThreadMain(void *args) {$/;"	f
HelloACL_Timeout	src/modules/helloacl.c	/^int HelloACL_Timeout(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
HelloACL_UserChanged	src/modules/helloacl.c	/^void HelloACL_UserChanged(uint64_t client_id, void *privdata) {$/;"	f
HelloBlockNoTracking_RedisCommand	tests/modules/blockonbackground.c	/^int HelloBlockNoTracking_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
HelloBlock_Disconnected	src/modules/helloblock.c	/^void HelloBlock_Disconnected(RedisModuleCtx *ctx, RedisModuleBlockedClient *bc) {$/;"	f
HelloBlock_Disconnected	tests/modules/blockonbackground.c	/^void HelloBlock_Disconnected(RedisModuleCtx *ctx, RedisModuleBlockedClient *bc) {$/;"	f
HelloBlock_FreeData	src/modules/helloblock.c	/^void HelloBlock_FreeData(RedisModuleCtx *ctx, void *privdata) {$/;"	f
HelloBlock_FreeData	src/modules/hellotype.c	/^void HelloBlock_FreeData(RedisModuleCtx *ctx, void *privdata) {$/;"	f
HelloBlock_FreeData	tests/modules/blockonbackground.c	/^void HelloBlock_FreeData(RedisModuleCtx *ctx, void *privdata) {$/;"	f
HelloBlock_RedisCommand	src/modules/helloblock.c	/^int HelloBlock_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
HelloBlock_RedisCommand	tests/modules/blockonbackground.c	/^int HelloBlock_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
HelloBlock_Reply	src/modules/helloblock.c	/^int HelloBlock_Reply(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
HelloBlock_Reply	src/modules/hellotype.c	/^int HelloBlock_Reply(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
HelloBlock_Reply	tests/modules/blockonbackground.c	/^int HelloBlock_Reply(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
HelloBlock_ThreadMain	src/modules/helloblock.c	/^void *HelloBlock_ThreadMain(void *arg) {$/;"	f
HelloBlock_Timeout	src/modules/helloblock.c	/^int HelloBlock_Timeout(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
HelloBlock_Timeout	src/modules/hellotype.c	/^int HelloBlock_Timeout(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
HelloBlock_Timeout	tests/modules/blockonbackground.c	/^int HelloBlock_Timeout(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
HelloDoubleBlock_RedisCommand	tests/modules/blockonbackground.c	/^int HelloDoubleBlock_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
HelloHCopy_RedisCommand	src/modules/helloworld.c	/^int HelloHCopy_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
HelloKeys_RedisCommand	src/modules/helloblock.c	/^int HelloKeys_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
HelloKeys_ThreadMain	src/modules/helloblock.c	/^void *HelloKeys_ThreadMain(void *arg) {$/;"	f
HelloLeftPad_RedisCommand	src/modules/helloworld.c	/^int HelloLeftPad_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
HelloLexRange_RedisCommand	src/modules/helloworld.c	/^int HelloLexRange_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
HelloListSpliceAuto_RedisCommand	src/modules/helloworld.c	/^int HelloListSpliceAuto_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
HelloListSplice_RedisCommand	src/modules/helloworld.c	/^int HelloListSplice_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
HelloListSumLen_RedisCommand	src/modules/helloworld.c	/^int HelloListSumLen_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
HelloMoreExpire_RedisCommand	src/modules/helloworld.c	/^int HelloMoreExpire_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
HelloPushCall2_RedisCommand	src/modules/helloworld.c	/^int HelloPushCall2_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
HelloPushCall_RedisCommand	src/modules/helloworld.c	/^int HelloPushCall_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
HelloPushNative_RedisCommand	src/modules/helloworld.c	/^int HelloPushNative_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
HelloRandArray_RedisCommand	src/modules/helloworld.c	/^int HelloRandArray_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
HelloRepl1_RedisCommand	src/modules/helloworld.c	/^int HelloRepl1_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
HelloRepl2_RedisCommand	src/modules/helloworld.c	/^int HelloRepl2_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
HelloSimple_RedisCommand	src/modules/helloworld.c	/^int HelloSimple_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
HelloToggleCase_RedisCommand	src/modules/helloworld.c	/^int HelloToggleCase_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
HelloType	src/modules/hellotype.c	/^static RedisModuleType *HelloType;$/;"	v	file:
HelloTypeAofRewrite	src/modules/hellotype.c	/^void HelloTypeAofRewrite(RedisModuleIO *aof, RedisModuleString *key, void *value) {$/;"	f
HelloTypeBRange_RedisCommand	src/modules/hellotype.c	/^int HelloTypeBRange_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
HelloTypeDigest	src/modules/hellotype.c	/^void HelloTypeDigest(RedisModuleDigest *md, void *value) {$/;"	f
HelloTypeFree	src/modules/hellotype.c	/^void HelloTypeFree(void *value) {$/;"	f
HelloTypeInsert	src/modules/hellotype.c	/^void HelloTypeInsert(struct HelloTypeObject *o, int64_t ele) {$/;"	f
HelloTypeInsert_RedisCommand	src/modules/hellotype.c	/^int HelloTypeInsert_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
HelloTypeLen_RedisCommand	src/modules/hellotype.c	/^int HelloTypeLen_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
HelloTypeMemUsage	src/modules/hellotype.c	/^size_t HelloTypeMemUsage(const void *value) {$/;"	f
HelloTypeNode	src/modules/hellotype.c	/^struct HelloTypeNode {$/;"	s	file:
HelloTypeObject	src/modules/hellotype.c	/^struct HelloTypeObject {$/;"	s	file:
HelloTypeRange_RedisCommand	src/modules/hellotype.c	/^int HelloTypeRange_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
HelloTypeRdbLoad	src/modules/hellotype.c	/^void *HelloTypeRdbLoad(RedisModuleIO *rdb, int encver) {$/;"	f
HelloTypeRdbSave	src/modules/hellotype.c	/^void HelloTypeRdbSave(RedisModuleIO *rdb, void *value) {$/;"	f
HelloTypeReleaseObject	src/modules/hellotype.c	/^void HelloTypeReleaseObject(struct HelloTypeObject *o) {$/;"	f
HelloZsumRange_RedisCommand	src/modules/helloworld.c	/^int HelloZsumRange_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
HotGroupNode	exp/exp2_micro.c	/^typedef struct HotGroupNode {$/;"	s	file:
HotGroupNode	exp/exp2_micro.c	/^} HotGroupNode;$/;"	t	typeref:struct:HotGroupNode	file:
IDSTR	deps/jemalloc/test/include/test/SFMT-params11213.h	79;"	d
IDSTR	deps/jemalloc/test/include/test/SFMT-params1279.h	79;"	d
IDSTR	deps/jemalloc/test/include/test/SFMT-params132049.h	79;"	d
IDSTR	deps/jemalloc/test/include/test/SFMT-params19937.h	79;"	d
IDSTR	deps/jemalloc/test/include/test/SFMT-params216091.h	79;"	d
IDSTR	deps/jemalloc/test/include/test/SFMT-params2281.h	79;"	d
IDSTR	deps/jemalloc/test/include/test/SFMT-params4253.h	79;"	d
IDSTR	deps/jemalloc/test/include/test/SFMT-params44497.h	79;"	d
IDSTR	deps/jemalloc/test/include/test/SFMT-params607.h	79;"	d
IDSTR	deps/jemalloc/test/include/test/SFMT-params86243.h	79;"	d
IDX	src/lzf_c.c	51;"	d	file:
IDX	src/lzf_c.c	53;"	d	file:
IDX	src/lzf_c.c	55;"	d	file:
IF	deps/lua/src/lundump.c	31;"	d	file:
IF	deps/lua/src/lundump.c	34;"	d	file:
IMMI_SYNC_AVG	src/cluster.h	41;"	d
IMMI_SYNC_SKEW	src/cluster.h	42;"	d
IMMUTABLE_CONFIG	src/config.c	251;"	d	file:
IMPORTLIB	deps/jemalloc/Makefile	/^IMPORTLIB := so$/;"	m
INC	deps/lua/etc/Makefile	/^INC= $(TOP)\/src$/;"	m
INCLUDEDIR	deps/jemalloc/Makefile	/^INCLUDEDIR := $(DESTDIR)\/usr\/local\/include$/;"	m
INCLUDE_PATH	deps/hiredis/Makefile	/^INCLUDE_PATH?=include\/hiredis$/;"	m
INDEX	deps/jemalloc/src/ctl.c	245;"	d	file:
INDEX	deps/jemalloc/src/ctl.c	560;"	d	file:
INDEXK	deps/lua/src/lopcodes.h	125;"	d
INDEX_PROTO	deps/jemalloc/src/ctl.c	53;"	d	file:
INFINITY	deps/jemalloc/test/unit/math.c	13;"	d	file:
INFINITY	deps/jemalloc/test/unit/math.c	9;"	d	file:
INITIALIZER	deps/jemalloc/src/jemalloc.c	115;"	d	file:
INITIALIZER	deps/jemalloc/src/jemalloc.c	120;"	d	file:
INIT_HTAB	src/lzfP.h	95;"	d
INIT_SETPROCTITLE_REPLACEMENT	src/config.h	135;"	d
INSTALL	deps/hiredis/Makefile	/^INSTALL?= cp -pPR$/;"	m
INSTALL	deps/jemalloc/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	deps/lua/Makefile	/^INSTALL= install -p$/;"	m
INSTALL	src/Makefile	/^	INSTALL=cp -pf$/;"	m
INSTALL	src/Makefile	/^INSTALL=install$/;"	m
INSTALL_BIN	deps/lua/Makefile	/^INSTALL_BIN= $(INSTALL_TOP)\/bin$/;"	m
INSTALL_BIN	src/Makefile	/^INSTALL_BIN=$(PREFIX)\/bin$/;"	m
INSTALL_CMOD	deps/lua/Makefile	/^INSTALL_CMOD= $(INSTALL_TOP)\/lib\/lua\/$V$/;"	m
INSTALL_DATA	deps/lua/Makefile	/^INSTALL_DATA= $(INSTALL) -m 0644$/;"	m
INSTALL_EXEC	deps/lua/Makefile	/^INSTALL_EXEC= $(INSTALL) -m 0755$/;"	m
INSTALL_INC	deps/lua/Makefile	/^INSTALL_INC= $(INSTALL_TOP)\/include$/;"	m
INSTALL_INCLUDE_PATH	deps/hiredis/Makefile	/^INSTALL_INCLUDE_PATH= $(DESTDIR)$(PREFIX)\/$(INCLUDE_PATH)$/;"	m
INSTALL_LIB	deps/lua/Makefile	/^INSTALL_LIB= $(INSTALL_TOP)\/lib$/;"	m
INSTALL_LIBRARY_PATH	deps/hiredis/Makefile	/^INSTALL_LIBRARY_PATH= $(DESTDIR)$(PREFIX)\/$(LIBRARY_PATH)$/;"	m
INSTALL_LMOD	deps/lua/Makefile	/^INSTALL_LMOD= $(INSTALL_TOP)\/share\/lua\/$V$/;"	m
INSTALL_MAN	deps/lua/Makefile	/^INSTALL_MAN= $(INSTALL_TOP)\/man\/man1$/;"	m
INSTALL_PKGCONF_PATH	deps/hiredis/Makefile	/^INSTALL_PKGCONF_PATH= $(INSTALL_LIBRARY_PATH)\/$(PKGCONF_PATH)$/;"	m
INSTALL_TOP	deps/lua/Makefile	/^INSTALL_TOP= \/usr\/local$/;"	m
INT16_C	deps/jemalloc/include/msvc_compat/C99/stdint.h	231;"	d
INT16_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	135;"	d
INT16_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	134;"	d
INT24_MAX	src/ziplist.c	222;"	d	file:
INT24_MIN	src/ziplist.c	223;"	d	file:
INT32_C	deps/jemalloc/include/msvc_compat/C99/stdint.h	232;"	d
INT32_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	137;"	d
INT32_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	136;"	d
INT64_C	deps/jemalloc/include/msvc_compat/C99/stdint.h	233;"	d
INT64_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	139;"	d
INT64_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	138;"	d
INT8_C	deps/jemalloc/include/msvc_compat/C99/stdint.h	230;"	d
INT8_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	133;"	d
INT8_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	132;"	d
INTEGER_CONFIG	src/config.c	2076;"	d	file:
INTEGER_TEST_BODY	deps/jemalloc/test/unit/atomic.c	169;"	d	file:
INTEGER_WIDTH_TEST	deps/hiredis/test.c	294;"	d	file:
INTERPOLATE	src/defrag.c	1042;"	d	file:
INTMAX_C	deps/jemalloc/include/msvc_compat/C99/stdint.h	241;"	d
INTMAX_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	186;"	d
INTMAX_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	185;"	d
INTPTR_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	176;"	d
INTPTR_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	180;"	d
INTPTR_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	175;"	d
INTPTR_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	179;"	d
INTSET_ENC_INT16	src/intset.c	41;"	d	file:
INTSET_ENC_INT32	src/intset.c	42;"	d	file:
INTSET_ENC_INT64	src/intset.c	43;"	d	file:
INT_FAST16_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	163;"	d
INT_FAST16_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	162;"	d
INT_FAST32_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	165;"	d
INT_FAST32_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	164;"	d
INT_FAST64_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	167;"	d
INT_FAST64_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	166;"	d
INT_FAST8_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	161;"	d
INT_FAST8_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	160;"	d
INT_LEAST16_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	149;"	d
INT_LEAST16_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	148;"	d
INT_LEAST32_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	151;"	d
INT_LEAST32_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	150;"	d
INT_LEAST64_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	153;"	d
INT_LEAST64_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	152;"	d
INT_LEAST8_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	147;"	d
INT_LEAST8_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	146;"	d
IOThreadMain	src/networking.c	/^void *IOThreadMain(void *myid) {$/;"	f
IO_INPUT	deps/lua/src/liolib.c	23;"	d	file:
IO_OUTPUT	deps/lua/src/liolib.c	24;"	d	file:
IO_THREADS_MAX_NUM	src/networking.c	3435;"	d	file:
IO_THREADS_OP_READ	src/networking.c	3436;"	d	file:
IO_THREADS_OP_WRITE	src/networking.c	3437;"	d	file:
IS	deps/lua/src/luac.c	68;"	d	file:
ISK	deps/lua/src/lopcodes.h	122;"	d
IS_INITIALIZER	deps/jemalloc/src/jemalloc.c	116;"	d	file:
IS_INITIALIZER	deps/jemalloc/src/jemalloc.c	121;"	d	file:
IS_INT64_EQUIVALENT	deps/lua/src/lua_cmsgpack.c	24;"	d	file:
IS_INT_EQUIVALENT	deps/lua/src/lua_cmsgpack.c	25;"	d	file:
IS_INT_TYPE_EQUIVALENT	deps/lua/src/lua_cmsgpack.c	22;"	d	file:
IS_LAT	src/server.h	91;"	d
IS_SUN_CC	deps/hiredis/Makefile	/^  IS_SUN_CC=$(shell sh -c '$(CC) -V 2>&1 |egrep -i -c "sun|studio"')$/;"	m
InfoFunc	tests/modules/infotest.c	/^void InfoFunc(RedisModuleInfoCtx *ctx, int for_crash_report) {$/;"	f
InitServerLast	src/server.c	/^void InitServerLast() {$/;"	f
Instruction	deps/lua/src/llimits.h	/^typedef lu_int32 Instruction;$/;"	t
IntPoint	deps/lua/src/llimits.h	42;"	d
Inttype	deps/lua/src/lua_struct.c	/^typedef STRUCT_INT Inttype;$/;"	t	file:
JEMALLOC_ALIGNED	deps/jemalloc/include/jemalloc/jemalloc_macros.h	112;"	d
JEMALLOC_ALIGNED	deps/jemalloc/include/jemalloc/jemalloc_macros.h	61;"	d
JEMALLOC_ALIGNED	deps/jemalloc/include/jemalloc/jemalloc_macros.h	87;"	d
JEMALLOC_ALLOCATOR	deps/jemalloc/include/jemalloc/jemalloc_macros.h	109;"	d
JEMALLOC_ALLOCATOR	deps/jemalloc/include/jemalloc/jemalloc_macros.h	121;"	d
JEMALLOC_ALLOCATOR	deps/jemalloc/include/jemalloc/jemalloc_macros.h	81;"	d
JEMALLOC_ALLOCATOR	deps/jemalloc/include/jemalloc/jemalloc_macros.h	83;"	d
JEMALLOC_ALLOC_JUNK	deps/jemalloc/include/jemalloc/internal/util.h	8;"	d
JEMALLOC_ALLOC_SIZE	deps/jemalloc/include/jemalloc/jemalloc_macros.h	113;"	d
JEMALLOC_ALLOC_SIZE	deps/jemalloc/include/jemalloc/jemalloc_macros.h	62;"	d
JEMALLOC_ALLOC_SIZE	deps/jemalloc/include/jemalloc/jemalloc_macros.h	89;"	d
JEMALLOC_ALLOC_SIZE	deps/jemalloc/include/jemalloc/jemalloc_macros.h	92;"	d
JEMALLOC_ALLOC_SIZE2	deps/jemalloc/include/jemalloc/jemalloc_macros.h	114;"	d
JEMALLOC_ALLOC_SIZE2	deps/jemalloc/include/jemalloc/jemalloc_macros.h	63;"	d
JEMALLOC_ALLOC_SIZE2	deps/jemalloc/include/jemalloc/jemalloc_macros.h	90;"	d
JEMALLOC_ALLOC_SIZE2	deps/jemalloc/include/jemalloc/jemalloc_macros.h	93;"	d
JEMALLOC_ALWAYS_INLINE	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	5;"	d
JEMALLOC_ALWAYS_INLINE	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	7;"	d
JEMALLOC_ARENA_C_	deps/jemalloc/src/arena.c	1;"	d	file:
JEMALLOC_ARG_CONCAT	deps/jemalloc/include/jemalloc/internal/util.h	18;"	d
JEMALLOC_ATOMIC_U64	deps/jemalloc/include/jemalloc/internal/atomic.h	52;"	d
JEMALLOC_ATTR	deps/jemalloc/include/jemalloc/jemalloc_macros.h	111;"	d
JEMALLOC_ATTR	deps/jemalloc/include/jemalloc/jemalloc_macros.h	60;"	d
JEMALLOC_ATTR	deps/jemalloc/include/jemalloc/jemalloc_macros.h	86;"	d
JEMALLOC_ATTR	deps/jemalloc/src/jemalloc.c	/^JEMALLOC_ATTR(malloc) JEMALLOC_ALLOC_SIZE(1)$/;"	f
JEMALLOC_ATTR	deps/jemalloc/src/jemalloc.c	/^JEMALLOC_ATTR(malloc) JEMALLOC_ALLOC_SIZE(2)$/;"	f
JEMALLOC_ATTR	deps/jemalloc/src/jemalloc.c	/^JEMALLOC_ATTR(malloc) JEMALLOC_ALLOC_SIZE2(1, 2)$/;"	f
JEMALLOC_ATTR	deps/jemalloc/src/jemalloc.c	/^JEMALLOC_ATTR(malloc)$/;"	f
JEMALLOC_ATTR	deps/jemalloc/src/jemalloc.c	/^JEMALLOC_ATTR(pure)$/;"	f
JEMALLOC_ATTR	deps/jemalloc/src/zone.c	/^JEMALLOC_ATTR(constructor)$/;"	f
JEMALLOC_BACKGROUND_THREAD_C_	deps/jemalloc/src/background_thread.c	1;"	d	file:
JEMALLOC_BASE_C_	deps/jemalloc/src/base.c	1;"	d	file:
JEMALLOC_BITMAP_C_	deps/jemalloc/src/bitmap.c	1;"	d	file:
JEMALLOC_CC_SILENCE_INIT	deps/jemalloc/include/jemalloc/internal/util.h	29;"	d
JEMALLOC_CFLAGS	deps/Makefile	/^JEMALLOC_CFLAGS= -std=gnu99 -Wall -pipe -g3 -O3 -funroll-loops $(CFLAGS)$/;"	m
JEMALLOC_CKH_C_	deps/jemalloc/src/ckh.c	37;"	d	file:
JEMALLOC_CPP_CPP_	deps/jemalloc/src/jemalloc_cpp.cpp	4;"	d	file:
JEMALLOC_CTL_C_	deps/jemalloc/src/ctl.c	1;"	d	file:
JEMALLOC_CXX_THROW	deps/jemalloc/include/jemalloc/jemalloc_macros.h	54;"	d
JEMALLOC_CXX_THROW	deps/jemalloc/include/jemalloc/jemalloc_macros.h	56;"	d
JEMALLOC_C_	deps/jemalloc/src/jemalloc.c	1;"	d	file:
JEMALLOC_EXPORT	deps/jemalloc/include/jemalloc/jemalloc_macros.h	115;"	d
JEMALLOC_EXPORT	deps/jemalloc/include/jemalloc/jemalloc_macros.h	66;"	d
JEMALLOC_EXPORT	deps/jemalloc/include/jemalloc/jemalloc_macros.h	68;"	d
JEMALLOC_EXPORT	deps/jemalloc/include/jemalloc/jemalloc_macros.h	96;"	d
JEMALLOC_EXTENT_C_	deps/jemalloc/src/extent.c	1;"	d	file:
JEMALLOC_EXTENT_DSS_C_	deps/jemalloc/src/extent_dss.c	1;"	d	file:
JEMALLOC_EXTENT_MMAP_C_	deps/jemalloc/src/extent_mmap.c	1;"	d	file:
JEMALLOC_FORMAT_PRINTF	deps/jemalloc/include/jemalloc/jemalloc_macros.h	101;"	d
JEMALLOC_FORMAT_PRINTF	deps/jemalloc/include/jemalloc/jemalloc_macros.h	103;"	d
JEMALLOC_FORMAT_PRINTF	deps/jemalloc/include/jemalloc/jemalloc_macros.h	116;"	d
JEMALLOC_FORMAT_PRINTF	deps/jemalloc/include/jemalloc/jemalloc_macros.h	71;"	d
JEMALLOC_FORMAT_PRINTF	deps/jemalloc/include/jemalloc/jemalloc_macros.h	99;"	d
JEMALLOC_FRAG_HINT	deps/jemalloc/include/jemalloc/jemalloc_macros.h	126;"	d
JEMALLOC_FREE_JUNK	deps/jemalloc/include/jemalloc/internal/util.h	11;"	d
JEMALLOC_GENERATE_ATOMICS	deps/jemalloc/include/jemalloc/internal/atomic_c11.h	17;"	d
JEMALLOC_GENERATE_ATOMICS	deps/jemalloc/include/jemalloc/internal/atomic_gcc_atomic.h	39;"	d
JEMALLOC_GENERATE_ATOMICS	deps/jemalloc/include/jemalloc/internal/atomic_gcc_sync.h	84;"	d
JEMALLOC_GENERATE_ATOMICS	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	54;"	d
JEMALLOC_GENERATE_INT_ATOMICS	deps/jemalloc/include/jemalloc/internal/atomic_c11.h	66;"	d
JEMALLOC_GENERATE_INT_ATOMICS	deps/jemalloc/include/jemalloc/internal/atomic_gcc_atomic.h	88;"	d
JEMALLOC_GENERATE_INT_ATOMICS	deps/jemalloc/include/jemalloc/internal/atomic_gcc_sync.h	157;"	d
JEMALLOC_GENERATE_INT_ATOMICS	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	117;"	d
JEMALLOC_HASH_C_	deps/jemalloc/src/hash.c	1;"	d	file:
JEMALLOC_HOOK	deps/jemalloc/include/jemalloc/internal/hooks.h	7;"	d
JEMALLOC_INTERNAL_ARENA_EXTERNS_H	deps/jemalloc/include/jemalloc/internal/arena_externs.h	2;"	d
JEMALLOC_INTERNAL_ARENA_INLINES_A_H	deps/jemalloc/include/jemalloc/internal/arena_inlines_a.h	2;"	d
JEMALLOC_INTERNAL_ARENA_INLINES_B_H	deps/jemalloc/include/jemalloc/internal/arena_inlines_b.h	2;"	d
JEMALLOC_INTERNAL_ARENA_STATS_H	deps/jemalloc/include/jemalloc/internal/arena_stats.h	2;"	d
JEMALLOC_INTERNAL_ARENA_STRUCTS_A_H	deps/jemalloc/include/jemalloc/internal/arena_structs_a.h	2;"	d
JEMALLOC_INTERNAL_ARENA_STRUCTS_B_H	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	2;"	d
JEMALLOC_INTERNAL_ARENA_TYPES_H	deps/jemalloc/include/jemalloc/internal/arena_types.h	2;"	d
JEMALLOC_INTERNAL_ATOMIC_C11_H	deps/jemalloc/include/jemalloc/internal/atomic_c11.h	2;"	d
JEMALLOC_INTERNAL_ATOMIC_GCC_ATOMIC_H	deps/jemalloc/include/jemalloc/internal/atomic_gcc_atomic.h	2;"	d
JEMALLOC_INTERNAL_ATOMIC_GCC_SYNC_H	deps/jemalloc/include/jemalloc/internal/atomic_gcc_sync.h	2;"	d
JEMALLOC_INTERNAL_ATOMIC_H	deps/jemalloc/include/jemalloc/internal/atomic.h	2;"	d
JEMALLOC_INTERNAL_ATOMIC_MSVC_H	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	2;"	d
JEMALLOC_INTERNAL_BACKGROUND_THREAD_EXTERNS_H	deps/jemalloc/include/jemalloc/internal/background_thread_externs.h	2;"	d
JEMALLOC_INTERNAL_BACKGROUND_THREAD_INLINES_H	deps/jemalloc/include/jemalloc/internal/background_thread_inlines.h	2;"	d
JEMALLOC_INTERNAL_BACKGROUND_THREAD_STRUCTS_H	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	2;"	d
JEMALLOC_INTERNAL_BASE_EXTERNS_H	deps/jemalloc/include/jemalloc/internal/base_externs.h	2;"	d
JEMALLOC_INTERNAL_BASE_INLINES_H	deps/jemalloc/include/jemalloc/internal/base_inlines.h	2;"	d
JEMALLOC_INTERNAL_BASE_STRUCTS_H	deps/jemalloc/include/jemalloc/internal/base_structs.h	2;"	d
JEMALLOC_INTERNAL_BASE_TYPES_H	deps/jemalloc/include/jemalloc/internal/base_types.h	2;"	d
JEMALLOC_INTERNAL_BIN_H	deps/jemalloc/include/jemalloc/internal/bin.h	2;"	d
JEMALLOC_INTERNAL_BIN_STATS_H	deps/jemalloc/include/jemalloc/internal/bin_stats.h	2;"	d
JEMALLOC_INTERNAL_BITMAP_H	deps/jemalloc/include/jemalloc/internal/bitmap.h	2;"	d
JEMALLOC_INTERNAL_BIT_UTIL_H	deps/jemalloc/include/jemalloc/internal/bit_util.h	2;"	d
JEMALLOC_INTERNAL_CACHE_BIN_H	deps/jemalloc/include/jemalloc/internal/cache_bin.h	2;"	d
JEMALLOC_INTERNAL_CKH_H	deps/jemalloc/include/jemalloc/internal/ckh.h	2;"	d
JEMALLOC_INTERNAL_CTL_H	deps/jemalloc/include/jemalloc/internal/ctl.h	2;"	d
JEMALLOC_INTERNAL_DECLS_H	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_decls.h	2;"	d
JEMALLOC_INTERNAL_DIV_H	deps/jemalloc/include/jemalloc/internal/div.h	2;"	d
JEMALLOC_INTERNAL_EMITTER_H	deps/jemalloc/include/jemalloc/internal/emitter.h	2;"	d
JEMALLOC_INTERNAL_EXTENT_DSS_H	deps/jemalloc/include/jemalloc/internal/extent_dss.h	2;"	d
JEMALLOC_INTERNAL_EXTENT_EXTERNS_H	deps/jemalloc/include/jemalloc/internal/extent_externs.h	2;"	d
JEMALLOC_INTERNAL_EXTENT_INLINES_H	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	2;"	d
JEMALLOC_INTERNAL_EXTENT_MMAP_EXTERNS_H	deps/jemalloc/include/jemalloc/internal/extent_mmap.h	2;"	d
JEMALLOC_INTERNAL_EXTENT_STRUCTS_H	deps/jemalloc/include/jemalloc/internal/extent_structs.h	2;"	d
JEMALLOC_INTERNAL_EXTENT_TYPES_H	deps/jemalloc/include/jemalloc/internal/extent_types.h	2;"	d
JEMALLOC_INTERNAL_EXTERNS_H	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_externs.h	2;"	d
JEMALLOC_INTERNAL_HASH_H	deps/jemalloc/include/jemalloc/internal/hash.h	2;"	d
JEMALLOC_INTERNAL_HOOKS_H	deps/jemalloc/include/jemalloc/internal/hooks.h	2;"	d
JEMALLOC_INTERNAL_INCLUDES_H	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_includes.h	2;"	d
JEMALLOC_INTERNAL_INLINES_A_H	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_a.h	2;"	d
JEMALLOC_INTERNAL_INLINES_B_H	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_b.h	2;"	d
JEMALLOC_INTERNAL_INLINES_C_H	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_c.h	2;"	d
JEMALLOC_INTERNAL_LARGE_EXTERNS_H	deps/jemalloc/include/jemalloc/internal/large_externs.h	2;"	d
JEMALLOC_INTERNAL_LOG_H	deps/jemalloc/include/jemalloc/internal/log.h	2;"	d
JEMALLOC_INTERNAL_MACROS_H	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	2;"	d
JEMALLOC_INTERNAL_MALLOC_IO_H	deps/jemalloc/include/jemalloc/internal/malloc_io.h	2;"	d
JEMALLOC_INTERNAL_MUTEX_H	deps/jemalloc/include/jemalloc/internal/mutex.h	2;"	d
JEMALLOC_INTERNAL_MUTEX_POOL_H	deps/jemalloc/include/jemalloc/internal/mutex_pool.h	2;"	d
JEMALLOC_INTERNAL_MUTEX_PROF_H	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	2;"	d
JEMALLOC_INTERNAL_NSTIME_H	deps/jemalloc/include/jemalloc/internal/nstime.h	2;"	d
JEMALLOC_INTERNAL_PAGES_EXTERNS_H	deps/jemalloc/include/jemalloc/internal/pages.h	2;"	d
JEMALLOC_INTERNAL_PRNG_H	deps/jemalloc/include/jemalloc/internal/prng.h	2;"	d
JEMALLOC_INTERNAL_PROF_EXTERNS_H	deps/jemalloc/include/jemalloc/internal/prof_externs.h	2;"	d
JEMALLOC_INTERNAL_PROF_INLINES_A_H	deps/jemalloc/include/jemalloc/internal/prof_inlines_a.h	2;"	d
JEMALLOC_INTERNAL_PROF_INLINES_B_H	deps/jemalloc/include/jemalloc/internal/prof_inlines_b.h	2;"	d
JEMALLOC_INTERNAL_PROF_STRUCTS_H	deps/jemalloc/include/jemalloc/internal/prof_structs.h	2;"	d
JEMALLOC_INTERNAL_PROF_TYPES_H	deps/jemalloc/include/jemalloc/internal/prof_types.h	2;"	d
JEMALLOC_INTERNAL_QL_H	deps/jemalloc/include/jemalloc/internal/ql.h	2;"	d
JEMALLOC_INTERNAL_QR_H	deps/jemalloc/include/jemalloc/internal/qr.h	2;"	d
JEMALLOC_INTERNAL_RTREE_CTX_H	deps/jemalloc/include/jemalloc/internal/rtree_tsd.h	2;"	d
JEMALLOC_INTERNAL_RTREE_H	deps/jemalloc/include/jemalloc/internal/rtree.h	2;"	d
JEMALLOC_INTERNAL_SIZE_H	deps/jemalloc/include/jemalloc/internal/sz.h	2;"	d
JEMALLOC_INTERNAL_SMOOTHSTEP_H	deps/jemalloc/include/jemalloc/internal/smoothstep.h	2;"	d
JEMALLOC_INTERNAL_SPIN_H	deps/jemalloc/include/jemalloc/internal/spin.h	2;"	d
JEMALLOC_INTERNAL_STATS_H	deps/jemalloc/include/jemalloc/internal/stats.h	2;"	d
JEMALLOC_INTERNAL_TCACHE_EXTERNS_H	deps/jemalloc/include/jemalloc/internal/tcache_externs.h	2;"	d
JEMALLOC_INTERNAL_TCACHE_INLINES_H	deps/jemalloc/include/jemalloc/internal/tcache_inlines.h	2;"	d
JEMALLOC_INTERNAL_TCACHE_STRUCTS_H	deps/jemalloc/include/jemalloc/internal/tcache_structs.h	2;"	d
JEMALLOC_INTERNAL_TCACHE_TYPES_H	deps/jemalloc/include/jemalloc/internal/tcache_types.h	2;"	d
JEMALLOC_INTERNAL_TICKER_H	deps/jemalloc/include/jemalloc/internal/ticker.h	2;"	d
JEMALLOC_INTERNAL_TSD_GENERIC_H	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	4;"	d
JEMALLOC_INTERNAL_TSD_H	deps/jemalloc/include/jemalloc/internal/tsd.h	2;"	d
JEMALLOC_INTERNAL_TSD_MALLOC_THREAD_CLEANUP_H	deps/jemalloc/include/jemalloc/internal/tsd_malloc_thread_cleanup.h	4;"	d
JEMALLOC_INTERNAL_TSD_TLS_H	deps/jemalloc/include/jemalloc/internal/tsd_tls.h	4;"	d
JEMALLOC_INTERNAL_TSD_TYPES_H	deps/jemalloc/include/jemalloc/internal/tsd_types.h	2;"	d
JEMALLOC_INTERNAL_TSD_WIN_H	deps/jemalloc/include/jemalloc/internal/tsd_win.h	4;"	d
JEMALLOC_INTERNAL_TYPES_H	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	2;"	d
JEMALLOC_INTERNAL_UTIL_H	deps/jemalloc/include/jemalloc/internal/util.h	2;"	d
JEMALLOC_INTERNAL_WITNESS_H	deps/jemalloc/include/jemalloc/internal/witness.h	2;"	d
JEMALLOC_IS_MALLOC	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	13;"	d
JEMALLOC_JET	deps/jemalloc/test/include/test/jemalloc_test.h	100;"	d
JEMALLOC_JET	deps/jemalloc/test/include/test/jemalloc_test.h	44;"	d
JEMALLOC_JET	deps/jemalloc/test/include/test/jemalloc_test.h	96;"	d
JEMALLOC_LARGE_C_	deps/jemalloc/src/large.c	1;"	d	file:
JEMALLOC_LDFLAGS	deps/Makefile	/^JEMALLOC_LDFLAGS= $(LDFLAGS)$/;"	m
JEMALLOC_LOG_BUFSIZE	deps/jemalloc/include/jemalloc/internal/log.h	14;"	d
JEMALLOC_LOG_VAR_BUFSIZE	deps/jemalloc/include/jemalloc/internal/log.h	11;"	d
JEMALLOC_LOG_VAR_BUFSIZE	deps/jemalloc/include/jemalloc/internal/log.h	9;"	d
JEMALLOC_MADV_FREE	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	51;"	d
JEMALLOC_MALLOC_IO_C_	deps/jemalloc/src/malloc_io.c	1;"	d	file:
JEMALLOC_MANGLE	deps/jemalloc/test/include/test/jemalloc_test.h	103;"	d
JEMALLOC_MANGLE	deps/jemalloc/test/include/test/jemalloc_test.h	45;"	d
JEMALLOC_MANGLE	deps/jemalloc/test/include/test/jemalloc_test.h	57;"	d
JEMALLOC_MUTEX_C_	deps/jemalloc/src/mutex.c	1;"	d	file:
JEMALLOC_MUTEX_POOL_C_	deps/jemalloc/src/mutex_pool.c	1;"	d	file:
JEMALLOC_N	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	14;"	d
JEMALLOC_N	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	20;"	d
JEMALLOC_N	deps/jemalloc/test/include/test/jemalloc_test.h	70;"	d
JEMALLOC_NOINLINE	deps/jemalloc/include/jemalloc/jemalloc_macros.h	105;"	d
JEMALLOC_NOINLINE	deps/jemalloc/include/jemalloc/jemalloc_macros.h	117;"	d
JEMALLOC_NOINLINE	deps/jemalloc/include/jemalloc/jemalloc_macros.h	72;"	d
JEMALLOC_NOTHROW	deps/jemalloc/include/jemalloc/jemalloc_macros.h	106;"	d
JEMALLOC_NOTHROW	deps/jemalloc/include/jemalloc/jemalloc_macros.h	118;"	d
JEMALLOC_NOTHROW	deps/jemalloc/include/jemalloc/jemalloc_macros.h	74;"	d
JEMALLOC_NOTHROW	deps/jemalloc/include/jemalloc/jemalloc_macros.h	76;"	d
JEMALLOC_NO_DEMANGLE	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	11;"	d
JEMALLOC_NO_RENAME	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	16;"	d
JEMALLOC_NO_RENAME	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	18;"	d
JEMALLOC_PAGES_C_	deps/jemalloc/src/pages.c	1;"	d	file:
JEMALLOC_PERCPU_ARENA	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	166;"	d
JEMALLOC_PREAMBLE_H	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	2;"	d
JEMALLOC_PRNG_C_	deps/jemalloc/src/prng.c	1;"	d	file:
JEMALLOC_PROF_C_	deps/jemalloc/src/prof.c	1;"	d	file:
JEMALLOC_PTHREAD_CREATE_WRAPPER	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	7;"	d
JEMALLOC_RESTRICT_RETURN	deps/jemalloc/include/jemalloc/jemalloc_macros.h	108;"	d
JEMALLOC_RESTRICT_RETURN	deps/jemalloc/include/jemalloc/jemalloc_macros.h	120;"	d
JEMALLOC_RESTRICT_RETURN	deps/jemalloc/include/jemalloc/jemalloc_macros.h	79;"	d
JEMALLOC_RTREE_C_	deps/jemalloc/src/rtree.c	1;"	d	file:
JEMALLOC_SECTION	deps/jemalloc/include/jemalloc/jemalloc_macros.h	107;"	d
JEMALLOC_SECTION	deps/jemalloc/include/jemalloc/jemalloc_macros.h	119;"	d
JEMALLOC_SECTION	deps/jemalloc/include/jemalloc/jemalloc_macros.h	78;"	d
JEMALLOC_STATS_C_	deps/jemalloc/src/stats.c	1;"	d	file:
JEMALLOC_TCACHE_C_	deps/jemalloc/src/tcache.c	1;"	d	file:
JEMALLOC_TICKER_C_	deps/jemalloc/src/ticker.c	1;"	d	file:
JEMALLOC_TSD_C_	deps/jemalloc/src/tsd.c	1;"	d	file:
JEMALLOC_VA_ARGS_HEAD	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	40;"	d
JEMALLOC_VA_ARGS_TAIL	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	41;"	d
JEMALLOC_VERSION	deps/jemalloc/include/jemalloc/jemalloc_macros.h	7;"	d
JEMALLOC_VERSION_BUGFIX	deps/jemalloc/include/jemalloc/jemalloc_macros.h	10;"	d
JEMALLOC_VERSION_GID	deps/jemalloc/include/jemalloc/jemalloc_macros.h	12;"	d
JEMALLOC_VERSION_MAJOR	deps/jemalloc/include/jemalloc/jemalloc_macros.h	8;"	d
JEMALLOC_VERSION_MINOR	deps/jemalloc/include/jemalloc/jemalloc_macros.h	9;"	d
JEMALLOC_VERSION_NREV	deps/jemalloc/include/jemalloc/jemalloc_macros.h	11;"	d
JEMALLOC_WITNESS_C_	deps/jemalloc/src/witness.c	1;"	d	file:
JET_MUTABLE	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	35;"	d
JET_MUTABLE	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	37;"	d
K	tests/support/util.tcl	/^proc K { x y } { set x } $/;"	p
KBx	deps/lua/src/lvm.c	355;"	d	file:
KEYWEAK	deps/lua/src/lgc.c	47;"	d	file:
KEYWEAKBIT	deps/lua/src/lgc.h	58;"	d
KEY_ACTION	deps/linenoise/linenoise.c	/^enum KEY_ACTION{$/;"	g	file:
KEY_COUNT	deps/hiredis/examples/example-push.c	36;"	d	file:
KEY_HOOK	deps/lua/src/ldblib.c	/^static const char KEY_HOOK = 'h';$/;"	v	file:
KEY_NULL	deps/linenoise/linenoise.c	/^	KEY_NULL = 0,	    \/* NULL *\/$/;"	e	enum:KEY_ACTION	file:
KEY_SIZE	deps/jemalloc/test/unit/hash.c	150;"	d	file:
KEY_SIZE	deps/jemalloc/test/unit/hash.c	59;"	d	file:
KQD	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	23;"	d
KQU	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	22;"	d
KSMAX	deps/jemalloc/test/unit/malloc_io.c	24;"	d	file:
KSMAX	deps/jemalloc/test/unit/malloc_io.c	80;"	d	file:
KUMAX	deps/jemalloc/test/unit/malloc_io.c	23;"	d	file:
KUMAX	deps/jemalloc/test/unit/malloc_io.c	79;"	d	file:
KZD	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	21;"	d
KZU	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	20;"	d
KeySpace_NotificationGeneric	tests/modules/keyspace_events.c	/^static int KeySpace_NotificationGeneric(RedisModuleCtx *ctx, int type, const char *event, RedisModuleString *key) {$/;"	f	file:
KeySpace_NotificationLoaded	tests/modules/keyspace_events.c	/^static int KeySpace_NotificationLoaded(RedisModuleCtx *ctx, int type, const char *event, RedisModuleString *key){$/;"	f	file:
KeySpace_NotificationModule	tests/modules/keyspace_events.c	/^static int KeySpace_NotificationModule(RedisModuleCtx *ctx, int type, const char *event, RedisModuleString *key) {$/;"	f	file:
Keyspace	src/modules/hellodict.c	/^static RedisModuleDict *Keyspace;$/;"	v	file:
L	deps/lua/src/lauxlib.h	/^  lua_State *L;$/;"	m	struct:luaL_Buffer
L	deps/lua/src/ldump.c	/^ lua_State* L;$/;"	m	struct:__anon115	file:
L	deps/lua/src/llex.h	/^  struct lua_State *L;$/;"	m	struct:LexState	typeref:struct:LexState::lua_State
L	deps/lua/src/lparser.h	/^  struct lua_State *L;  \/* copy of the Lua state *\/$/;"	m	struct:FuncState	typeref:struct:FuncState::lua_State
L	deps/lua/src/lstrlib.c	/^  lua_State *L;$/;"	m	struct:MatchState	file:
L	deps/lua/src/lundump.c	/^ lua_State* L;$/;"	m	struct:__anon97	file:
L	deps/lua/src/lzio.h	/^  lua_State *L;			\/* Lua state (for reader) *\/$/;"	m	struct:Zio
LAST_TAG	deps/lua/src/lobject.h	20;"	d
LATENCY_DIST_DEFAULT_INTERVAL	src/redis-cli.c	7091;"	d	file:
LATENCY_GRAPH_COLS	src/latency.c	533;"	d	file:
LATENCY_HISTORY_DEFAULT_INTERVAL	src/redis-cli.c	7026;"	d	file:
LATENCY_SAMPLE_RATE	src/redis-cli.c	7025;"	d	file:
LATENCY_TS_LEN	src/latency.h	37;"	d
LATT_SYNC_AVG	src/cluster.h	43;"	d
LATT_SYNC_SKEW	src/cluster.h	44;"	d
LAZYFREE_THRESHOLD	src/lazyfree.c	146;"	d	file:
LCS	src/t_string.c	809;"	d	file:
LClosure	deps/lua/src/lobject.h	/^typedef struct LClosure {$/;"	s
LClosure	deps/lua/src/lobject.h	/^} LClosure;$/;"	t	typeref:struct:LClosure
LDB_BREAKPOINTS_MAX	src/scripting.c	61;"	d	file:
LDB_MAX_LEN_DEFAULT	src/scripting.c	62;"	d	file:
LDB_MAX_VALUES_DEPTH	src/scripting.c	2162;"	d	file:
LDFLAGS	deps/jemalloc/Makefile	/^LDFLAGS := $/;"	m
LDTARGET	deps/jemalloc/Makefile	/^LDTARGET = -o $@$/;"	m
LD_STR_AUTO	src/util.h	/^    LD_STR_AUTO,     \/* %.17Lg *\/$/;"	e	enum:__anon12
LD_STR_HEX	src/util.h	/^    LD_STR_HEX       \/* %La *\/$/;"	e	enum:__anon12
LD_STR_HUMAN	src/util.h	/^    LD_STR_HUMAN,    \/* %.17Lf + Trimming of trailing zeros *\/$/;"	e	enum:__anon12
LEVELS1	deps/lua/src/ldblib.c	319;"	d	file:
LEVELS2	deps/lua/src/ldblib.c	320;"	d	file:
LFIELDS_PER_FLUSH	deps/lua/src/lopcodes.h	265;"	d
LFUDecrAndReturn	src/evict.c	/^unsigned long LFUDecrAndReturn(robj *o) {$/;"	f
LFUGetTimeInMinutes	src/evict.c	/^unsigned long LFUGetTimeInMinutes(void) {$/;"	f
LFULogIncr	src/evict.c	/^uint8_t LFULogIncr(uint8_t counter) {$/;"	f
LFUTimeElapsed	src/evict.c	/^unsigned long LFUTimeElapsed(unsigned long ldt) {$/;"	f
LFU_INIT_VAL	src/server.h	2484;"	d
LG	deps/lua/src/lstate.c	/^typedef struct LG {$/;"	s	file:
LG	deps/lua/src/lstate.c	/^} LG;$/;"	t	typeref:struct:LG	file:
LG_BITMAP_GROUP_NBITS	deps/jemalloc/include/jemalloc/internal/bitmap.h	22;"	d
LG_BITMAP_MAXBITS	deps/jemalloc/include/jemalloc/internal/bitmap.h	14;"	d
LG_BITMAP_MAXBITS	deps/jemalloc/include/jemalloc/internal/bitmap.h	17;"	d
LG_CACHELINE	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	147;"	d
LG_CKH_BUCKET_CELLS	deps/jemalloc/include/jemalloc/internal/ckh.h	21;"	d
LG_EXTENT_MAX_ACTIVE_FIT_DEFAULT	deps/jemalloc/include/jemalloc/internal/extent_types.h	15;"	d
LG_PROF_INTERVAL_DEFAULT	deps/jemalloc/include/jemalloc/internal/prof_types.h	18;"	d
LG_PROF_SAMPLE_DEFAULT	deps/jemalloc/include/jemalloc/internal/prof_types.h	17;"	d
LG_QUANTUM	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	101;"	d
LG_QUANTUM	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	105;"	d
LG_QUANTUM	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	108;"	d
LG_QUANTUM	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	111;"	d
LG_QUANTUM	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	59;"	d
LG_QUANTUM	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	62;"	d
LG_QUANTUM	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	65;"	d
LG_QUANTUM	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	68;"	d
LG_QUANTUM	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	71;"	d
LG_QUANTUM	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	74;"	d
LG_QUANTUM	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	77;"	d
LG_QUANTUM	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	80;"	d
LG_QUANTUM	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	83;"	d
LG_QUANTUM	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	86;"	d
LG_QUANTUM	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	89;"	d
LG_QUANTUM	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	92;"	d
LG_QUANTUM	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	95;"	d
LG_QUANTUM	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	98;"	d
LG_SIZEOF_BITMAP	deps/jemalloc/include/jemalloc/internal/bitmap.h	9;"	d
LG_SLAB_MAXREGS	deps/jemalloc/include/jemalloc/internal/arena_types.h	5;"	d
LG_TCACHE_MAXCLASS_DEFAULT	deps/jemalloc/include/jemalloc/internal/tcache_types.h	37;"	d
LG_VADDR	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_decls.h	14;"	d
LG_VADDR	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_decls.h	15;"	d
LHS_assign	deps/lua/src/lparser.c	/^struct LHS_assign {$/;"	s	file:
LIB	deps/lua/etc/Makefile	/^LIB= $(TOP)\/src$/;"	m
LIBCRYPTO_LIBS	src/Makefile	/^	LIBCRYPTO_LIBS=$(shell $(PKG_CONFIG) --libs libcrypto)$/;"	m
LIBCRYPTO_LIBS	src/Makefile	/^	LIBCRYPTO_LIBS=-lcrypto$/;"	m
LIBCRYPTO_PKGCONFIG	src/Makefile	/^	LIBCRYPTO_PKGCONFIG := $(shell $(PKG_CONFIG) --exists libcrypto && echo $$?)$/;"	m
LIBDIR	deps/jemalloc/Makefile	/^LIBDIR := $(DESTDIR)\/usr\/local\/lib$/;"	m
LIBJEMALLOC	deps/jemalloc/Makefile	/^LIBJEMALLOC := $(LIBPREFIX)jemalloc$(install_suffix)$/;"	m
LIBNAME	deps/hiredis/Makefile	/^LIBNAME=libhiredis$/;"	m
LIBPREFIX	deps/jemalloc/Makefile	/^LIBPREFIX := lib$/;"	m
LIBPREFIX	deps/lua/src/loadlib.c	32;"	d	file:
LIBRARY_PATH	deps/hiredis/Makefile	/^LIBRARY_PATH?=lib$/;"	m
LIBS	deps/jemalloc/Makefile	/^LIBS := -lm -lstdc++ -lpthread -ldl$/;"	m
LIBS	deps/lua/src/Makefile	/^LIBS= -lm $(MYLIBS)$/;"	m
LIBS	tests/modules/Makefile	/^    LIBS = -lc$/;"	m
LIBSSL_LIBS	src/Makefile	/^	LIBSSL_LIBS=$(shell $(PKG_CONFIG) --libs libssl)$/;"	m
LIBSSL_LIBS	src/Makefile	/^	LIBSSL_LIBS=-lssl$/;"	m
LIBSSL_PKGCONFIG	src/Makefile	/^	LIBSSL_PKGCONFIG := $(shell $(PKG_CONFIG) --exists libssl && echo $$?)$/;"	m
LIBSYSTEMD_LIBS	src/Makefile	/^	LIBSYSTEMD_LIBS=$(shell $(PKG_CONFIG) --libs libsystemd)$/;"	m
LIBSYSTEMD_LIBS	src/Makefile	/^LIBSYSTEMD_LIBS=-lsystemd$/;"	m
LIBSYSTEMD_PKGCONFIG	src/Makefile	/^	LIBSYSTEMD_PKGCONFIG := $(shell $(PKG_CONFIG) --exists libsystemd && echo $$?)$/;"	m
LIB_FAIL	deps/lua/src/loadlib.c	232;"	d	file:
LIB_FAIL	deps/lua/src/loadlib.c	233;"	d	file:
LIB_FAIL	deps/lua/src/loadlib.c	35;"	d	file:
LIB_O	deps/lua/src/Makefile	/^LIB_O=	lauxlib.o lbaselib.o ldblib.o liolib.o lmathlib.o loslib.o ltablib.o \\$/;"	m
LIFE	deps/lua/test/life.lua	/^function LIFE(w,h)$/;"	f
LIMIT	deps/lua/src/lauxlib.c	395;"	d	file:
LIMIT	src/defrag.c	1043;"	d	file:
LIMIT_PENDING_QUERYBUF	src/server.h	160;"	d
LINENOISE_DEFAULT_HISTORY_MAX_LEN	deps/linenoise/linenoise.c	120;"	d	file:
LINENOISE_HISTORY_NEXT	deps/linenoise/linenoise.c	724;"	d	file:
LINENOISE_HISTORY_PREV	deps/linenoise/linenoise.c	725;"	d	file:
LINENOISE_MAX_LINE	deps/linenoise/linenoise.c	121;"	d	file:
LINKCOLOR	deps/Makefile	/^LINKCOLOR="\\033[34;1m"$/;"	m
LINKCOLOR	src/Makefile	/^LINKCOLOR="\\033[34;1m"$/;"	m
LISTPACK_ALLOC_H	src/listpack_malloc.h	40;"	d
LIST_HEAD	src/server.h	366;"	d
LIST_SIZE	tests/modules/blockonkeys.c	9;"	d	file:
LIST_TAIL	src/server.h	367;"	d
LITTLE	deps/lua/src/lua_struct.c	77;"	d	file:
LITTLE_ENDIAN	src/config.h	150;"	d
LITTLE_ENDIAN	src/config.h	182;"	d
LJEMALLOC	deps/jemalloc/Makefile	/^LJEMALLOC := $(objroot)lib\/$(LIBJEMALLOC).$(IMPORTLIB)$/;"	m
LJEMALLOC	deps/jemalloc/Makefile	/^LJEMALLOC := -Wl,--whole-archive -L$(objroot)lib -l$(LIBJEMALLOC) -Wl,--no-whole-archive$/;"	m
LL_DEBUG	src/server.h	375;"	d
LL_NOTICE	src/server.h	377;"	d
LL_RAW	src/server.h	379;"	d
LL_VERBOSE	src/server.h	376;"	d
LL_WARNING	src/server.h	378;"	d
LM	deps/jemalloc/Makefile	/^LM := -lm$/;"	m
LM	src/mt19937-64.c	64;"	d	file:
LOADBUF_SIZE	src/config.c	1727;"	d	file:
LOCK_PROF_DATA_INITIALIZER	deps/jemalloc/include/jemalloc/internal/mutex.h	97;"	d
LOG	deps/jemalloc/include/jemalloc/internal/log.h	107;"	d
LOGSIZE	src/controller.c	22;"	d	file:
LOG_COLOR_BOLD	src/redis-cli.c	147;"	d	file:
LOG_COLOR_GREEN	src/redis-cli.c	149;"	d	file:
LOG_COLOR_RED	src/redis-cli.c	148;"	d	file:
LOG_COLOR_RESET	src/redis-cli.c	151;"	d	file:
LOG_COLOR_YELLOW	src/redis-cli.c	150;"	d	file:
LOG_ENABLED	deps/jemalloc/include/jemalloc/internal/log.h	53;"	d
LOG_INITIALIZED_NOT_ENABLED	deps/jemalloc/include/jemalloc/internal/log.h	52;"	d
LOG_MAX_LEN	src/server.h	109;"	d
LOG_NOT_INITIALIZED	deps/jemalloc/include/jemalloc/internal/log.h	51;"	d
LOG_VAR_INIT	deps/jemalloc/include/jemalloc/internal/log.h	55;"	d
LONG	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	126;"	d
LONG_CEILING	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	130;"	d
LONG_MASK	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	127;"	d
LONG_STR_SIZE	src/server.h	157;"	d
LOOKUP_NONE	src/server.h	2364;"	d
LOOKUP_NONOTIFY	src/server.h	2366;"	d
LOOKUP_NOTOUCH	src/server.h	2365;"	d
LOW	src/rand.c	48;"	d	file:
LP_AFTER	src/listpack.h	45;"	d
LP_BEFORE	src/listpack.h	44;"	d
LP_ENCODING_12BIT_STR	src/listpack.c	67;"	d	file:
LP_ENCODING_12BIT_STR_LEN	src/listpack.c	94;"	d	file:
LP_ENCODING_12BIT_STR_MASK	src/listpack.c	68;"	d	file:
LP_ENCODING_13BIT_INT	src/listpack.c	63;"	d	file:
LP_ENCODING_13BIT_INT_MASK	src/listpack.c	64;"	d	file:
LP_ENCODING_16BIT_INT	src/listpack.c	71;"	d	file:
LP_ENCODING_16BIT_INT_MASK	src/listpack.c	72;"	d	file:
LP_ENCODING_24BIT_INT	src/listpack.c	75;"	d	file:
LP_ENCODING_24BIT_INT_MASK	src/listpack.c	76;"	d	file:
LP_ENCODING_32BIT_INT	src/listpack.c	79;"	d	file:
LP_ENCODING_32BIT_INT_MASK	src/listpack.c	80;"	d	file:
LP_ENCODING_32BIT_STR	src/listpack.c	87;"	d	file:
LP_ENCODING_32BIT_STR_LEN	src/listpack.c	95;"	d	file:
LP_ENCODING_32BIT_STR_MASK	src/listpack.c	88;"	d	file:
LP_ENCODING_64BIT_INT	src/listpack.c	83;"	d	file:
LP_ENCODING_64BIT_INT_MASK	src/listpack.c	84;"	d	file:
LP_ENCODING_6BIT_STR	src/listpack.c	59;"	d	file:
LP_ENCODING_6BIT_STR_LEN	src/listpack.c	93;"	d	file:
LP_ENCODING_6BIT_STR_MASK	src/listpack.c	60;"	d	file:
LP_ENCODING_7BIT_UINT	src/listpack.c	55;"	d	file:
LP_ENCODING_7BIT_UINT_MASK	src/listpack.c	56;"	d	file:
LP_ENCODING_INT	src/listpack.c	52;"	d	file:
LP_ENCODING_IS_12BIT_STR	src/listpack.c	69;"	d	file:
LP_ENCODING_IS_13BIT_INT	src/listpack.c	65;"	d	file:
LP_ENCODING_IS_16BIT_INT	src/listpack.c	73;"	d	file:
LP_ENCODING_IS_24BIT_INT	src/listpack.c	77;"	d	file:
LP_ENCODING_IS_32BIT_INT	src/listpack.c	81;"	d	file:
LP_ENCODING_IS_32BIT_STR	src/listpack.c	89;"	d	file:
LP_ENCODING_IS_64BIT_INT	src/listpack.c	85;"	d	file:
LP_ENCODING_IS_6BIT_STR	src/listpack.c	61;"	d	file:
LP_ENCODING_IS_7BIT_UINT	src/listpack.c	57;"	d	file:
LP_ENCODING_STRING	src/listpack.c	53;"	d	file:
LP_EOF	src/listpack.c	91;"	d	file:
LP_HDR_NUMELE_UNKNOWN	src/listpack.c	48;"	d	file:
LP_HDR_SIZE	src/listpack.c	47;"	d	file:
LP_INTBUF_SIZE	src/listpack.h	41;"	d
LP_MAX_BACKLEN_SIZE	src/listpack.c	50;"	d	file:
LP_MAX_ENTRY_BACKLEN	src/listpack.c	51;"	d	file:
LP_MAX_INT_ENCODING_LEN	src/listpack.c	49;"	d	file:
LP_REPLACE	src/listpack.h	46;"	d
LRUTestGenKey	src/redis-cli.c	/^void LRUTestGenKey(char *buf, size_t buflen) {$/;"	f
LRUTestMode	src/redis-cli.c	/^static void LRUTestMode(void) {$/;"	f	file:
LRU_BITS	src/server.h	677;"	d
LRU_CLOCK	src/evict.c	/^unsigned int LRU_CLOCK(void) {$/;"	f
LRU_CLOCK_MAX	src/server.h	678;"	d
LRU_CLOCK_RESOLUTION	src/server.h	679;"	d
LRU_CYCLE_PERIOD	src/redis-cli.c	8296;"	d	file:
LRU_CYCLE_PIPELINE_SIZE	src/redis-cli.c	8297;"	d	file:
LUACMSGPACK_COPYRIGHT	deps/lua/src/lua_cmsgpack.c	13;"	d	file:
LUACMSGPACK_DESCRIPTION	deps/lua/src/lua_cmsgpack.c	14;"	d	file:
LUACMSGPACK_MAX_NESTING	deps/lua/src/lua_cmsgpack.c	18;"	d	file:
LUACMSGPACK_NAME	deps/lua/src/lua_cmsgpack.c	10;"	d	file:
LUACMSGPACK_SAFE_NAME	deps/lua/src/lua_cmsgpack.c	11;"	d	file:
LUACMSGPACK_VERSION	deps/lua/src/lua_cmsgpack.c	12;"	d	file:
LUAC_FORMAT	deps/lua/src/lundump.h	31;"	d
LUAC_HEADERSIZE	deps/lua/src/lundump.h	34;"	d
LUAC_O	deps/lua/src/Makefile	/^LUAC_O=	luac.o print.o$/;"	m
LUAC_T	deps/lua/src/Makefile	/^LUAC_T=	luac$/;"	m
LUAC_VERSION	deps/lua/src/lundump.h	28;"	d
LUAI_BITSINT	deps/lua/src/luaconf.h	392;"	d
LUAI_BITSINT	deps/lua/src/luaconf.h	395;"	d
LUAI_DATA	deps/lua/src/luaconf.h	183;"	d
LUAI_DATA	deps/lua/src/luaconf.h	188;"	d
LUAI_DATA	deps/lua/src/luaconf.h	192;"	d
LUAI_EXTRASPACE	deps/lua/src/luaconf.h	715;"	d
LUAI_FUNC	deps/lua/src/luaconf.h	182;"	d
LUAI_FUNC	deps/lua/src/luaconf.h	187;"	d
LUAI_FUNC	deps/lua/src/luaconf.h	191;"	d
LUAI_GCMUL	deps/lua/src/luaconf.h	313;"	d
LUAI_GCPAUSE	deps/lua/src/luaconf.h	302;"	d
LUAI_INT32	deps/lua/src/luaconf.h	415;"	d
LUAI_INT32	deps/lua/src/luaconf.h	422;"	d
LUAI_MAXCALLS	deps/lua/src/luaconf.h	435;"	d
LUAI_MAXCCALLS	deps/lua/src/luaconf.h	468;"	d
LUAI_MAXCSTACK	deps/lua/src/luaconf.h	446;"	d
LUAI_MAXINT32	deps/lua/src/luaconf.h	416;"	d
LUAI_MAXINT32	deps/lua/src/luaconf.h	423;"	d
LUAI_MAXNUMBER2STR	deps/lua/src/luaconf.h	524;"	d
LUAI_MAXUPVALUES	deps/lua/src/luaconf.h	482;"	d
LUAI_MAXVARS	deps/lua/src/luaconf.h	475;"	d
LUAI_MEM	deps/lua/src/luaconf.h	418;"	d
LUAI_MEM	deps/lua/src/luaconf.h	425;"	d
LUAI_THROW	deps/lua/src/luaconf.h	608;"	d
LUAI_THROW	deps/lua/src/luaconf.h	615;"	d
LUAI_THROW	deps/lua/src/luaconf.h	621;"	d
LUAI_TRY	deps/lua/src/luaconf.h	609;"	d
LUAI_TRY	deps/lua/src/luaconf.h	616;"	d
LUAI_TRY	deps/lua/src/luaconf.h	622;"	d
LUAI_UACNUMBER	deps/lua/src/luaconf.h	511;"	d
LUAI_UINT32	deps/lua/src/luaconf.h	414;"	d
LUAI_UINT32	deps/lua/src/luaconf.h	421;"	d
LUAI_UMEM	deps/lua/src/luaconf.h	417;"	d
LUAI_UMEM	deps/lua/src/luaconf.h	424;"	d
LUAI_USER_ALIGNMENT_T	deps/lua/src/luaconf.h	595;"	d
LUALIB_API	deps/lua/src/luaconf.h	169;"	d
LUAL_BUFFERSIZE	deps/lua/src/luaconf.h	488;"	d
LUA_A	deps/lua/src/Makefile	/^LUA_A=	liblua.a$/;"	m
LUA_ANSI	deps/lua/src/luaconf.h	28;"	d
LUA_API	deps/lua/src/luaconf.h	157;"	d
LUA_API	deps/lua/src/luaconf.h	159;"	d
LUA_API	deps/lua/src/luaconf.h	164;"	d
LUA_AUTHORS	deps/lua/src/lua.h	23;"	d
LUA_BITOP_VERSION	deps/lua/src/lua_bit.c	29;"	d	file:
LUA_CDIR	deps/lua/src/luaconf.h	89;"	d
LUA_CDIR	deps/lua/src/luaconf.h	99;"	d
LUA_CFLAGS	deps/Makefile	/^	LUA_CFLAGS= -D__C99FEATURES__=1$/;"	m
LUA_CMD_OBJCACHE_MAX_LEN	src/scripting.c	471;"	d	file:
LUA_CMD_OBJCACHE_SIZE	src/scripting.c	470;"	d	file:
LUA_COLIBNAME	deps/lua/src/lualib.h	18;"	d
LUA_COMPAT_GETN	deps/lua/src/luaconf.h	322;"	d
LUA_COMPAT_GFIND	deps/lua/src/luaconf.h	358;"	d
LUA_COMPAT_LOADLIB	deps/lua/src/luaconf.h	329;"	d
LUA_COMPAT_LSTR	deps/lua/src/luaconf.h	351;"	d
LUA_COMPAT_MOD	deps/lua/src/luaconf.h	343;"	d
LUA_COMPAT_OPENLIB	deps/lua/src/luaconf.h	366;"	d
LUA_COMPAT_VARARG	deps/lua/src/luaconf.h	336;"	d
LUA_COPYRIGHT	deps/lua/src/lua.h	22;"	d
LUA_CORE	deps/lua/etc/noparser.c	15;"	d	file:
LUA_CORE	deps/lua/src/lapi.c	14;"	d	file:
LUA_CORE	deps/lua/src/lcode.c	11;"	d	file:
LUA_CORE	deps/lua/src/ldebug.c	14;"	d	file:
LUA_CORE	deps/lua/src/ldo.c	13;"	d	file:
LUA_CORE	deps/lua/src/ldump.c	10;"	d	file:
LUA_CORE	deps/lua/src/lfunc.c	11;"	d	file:
LUA_CORE	deps/lua/src/lgc.c	10;"	d	file:
LUA_CORE	deps/lua/src/llex.c	13;"	d	file:
LUA_CORE	deps/lua/src/lmem.c	11;"	d	file:
LUA_CORE	deps/lua/src/lobject.c	14;"	d	file:
LUA_CORE	deps/lua/src/lopcodes.c	8;"	d	file:
LUA_CORE	deps/lua/src/lparser.c	11;"	d	file:
LUA_CORE	deps/lua/src/lstate.c	11;"	d	file:
LUA_CORE	deps/lua/src/lstring.c	11;"	d	file:
LUA_CORE	deps/lua/src/ltable.c	25;"	d	file:
LUA_CORE	deps/lua/src/ltm.c	11;"	d	file:
LUA_CORE	deps/lua/src/luac.c	13;"	d	file:
LUA_CORE	deps/lua/src/lundump.c	10;"	d	file:
LUA_CORE	deps/lua/src/lvm.c	13;"	d	file:
LUA_CORE	deps/lua/src/lzio.c	11;"	d	file:
LUA_CORE	deps/lua/src/print.c	11;"	d	file:
LUA_CPATH	deps/lua/src/luaconf.h	70;"	d
LUA_CPATH_DEFAULT	deps/lua/src/luaconf.h	103;"	d
LUA_CPATH_DEFAULT	deps/lua/src/luaconf.h	93;"	d
LUA_DBLIBNAME	deps/lua/src/lualib.h	36;"	d
LUA_DIRSEP	deps/lua/src/luaconf.h	114;"	d
LUA_DIRSEP	deps/lua/src/luaconf.h	116;"	d
LUA_DL_DLL	deps/lua/src/luaconf.h	705;"	d
LUA_DL_DLOPEN	deps/lua/src/luaconf.h	701;"	d
LUA_DL_DYLD	deps/lua/src/luaconf.h	44;"	d
LUA_ENVIRONINDEX	deps/lua/src/lua.h	37;"	d
LUA_ERRERR	deps/lua/src/lua.h	47;"	d
LUA_ERRFILE	deps/lua/src/lauxlib.h	32;"	d
LUA_ERRMEM	deps/lua/src/lua.h	46;"	d
LUA_ERRRUN	deps/lua/src/lua.h	44;"	d
LUA_ERRSYNTAX	deps/lua/src/lua.h	45;"	d
LUA_EXECDIR	deps/lua/src/luaconf.h	134;"	d
LUA_FILEHANDLE	deps/lua/src/lualib.h	15;"	d
LUA_GCCOLLECT	deps/lua/src/lua.h	223;"	d
LUA_GCCOUNT	deps/lua/src/lua.h	224;"	d
LUA_GCCOUNTB	deps/lua/src/lua.h	225;"	d
LUA_GCRESTART	deps/lua/src/lua.h	222;"	d
LUA_GCSETPAUSE	deps/lua/src/lua.h	227;"	d
LUA_GCSETSTEPMUL	deps/lua/src/lua.h	228;"	d
LUA_GCSTEP	deps/lua/src/lua.h	226;"	d
LUA_GCSTOP	deps/lua/src/lua.h	221;"	d
LUA_GC_CYCLE_PERIOD	src/scripting.c	1621;"	d	file:
LUA_GLOBALSINDEX	deps/lua/src/lua.h	38;"	d
LUA_HOOKCALL	deps/lua/src/lua.h	311;"	d
LUA_HOOKCOUNT	deps/lua/src/lua.h	314;"	d
LUA_HOOKLINE	deps/lua/src/lua.h	313;"	d
LUA_HOOKRET	deps/lua/src/lua.h	312;"	d
LUA_HOOKTAILRET	deps/lua/src/lua.h	315;"	d
LUA_IDSIZE	deps/lua/src/luaconf.h	210;"	d
LUA_IGMARK	deps/lua/src/luaconf.h	135;"	d
LUA_INIT	deps/lua/src/luaconf.h	71;"	d
LUA_INTEGER	deps/lua/src/luaconf.h	143;"	d
LUA_INTFRMLEN	deps/lua/src/luaconf.h	741;"	d
LUA_INTFRMLEN	deps/lua/src/luaconf.h	746;"	d
LUA_INTFRM_T	deps/lua/src/luaconf.h	742;"	d
LUA_INTFRM_T	deps/lua/src/luaconf.h	747;"	d
LUA_IOLIBNAME	deps/lua/src/lualib.h	24;"	d
LUA_LDIR	deps/lua/src/luaconf.h	88;"	d
LUA_LDIR	deps/lua/src/luaconf.h	98;"	d
LUA_LIB	deps/lua/src/lauxlib.c	21;"	d	file:
LUA_LIB	deps/lua/src/lbaselib.c	15;"	d	file:
LUA_LIB	deps/lua/src/ldblib.c	13;"	d	file:
LUA_LIB	deps/lua/src/linit.c	9;"	d	file:
LUA_LIB	deps/lua/src/liolib.c	14;"	d	file:
LUA_LIB	deps/lua/src/lmathlib.c	12;"	d	file:
LUA_LIB	deps/lua/src/loadlib.c	17;"	d	file:
LUA_LIB	deps/lua/src/loslib.c	15;"	d	file:
LUA_LIB	deps/lua/src/lstrlib.c	15;"	d	file:
LUA_LIB	deps/lua/src/ltablib.c	11;"	d	file:
LUA_LIB	deps/lua/src/lua_bit.c	31;"	d	file:
LUA_LOADLIBNAME	deps/lua/src/lualib.h	39;"	d
LUA_MASKCALL	deps/lua/src/lua.h	321;"	d
LUA_MASKCOUNT	deps/lua/src/lua.h	324;"	d
LUA_MASKLINE	deps/lua/src/lua.h	323;"	d
LUA_MASKRET	deps/lua/src/lua.h	322;"	d
LUA_MATHLIBNAME	deps/lua/src/lualib.h	33;"	d
LUA_MAXCAPTURES	deps/lua/src/luaconf.h	633;"	d
LUA_MAXINPUT	deps/lua/src/luaconf.h	262;"	d
LUA_MINBUFFER	deps/lua/src/llimits.h	105;"	d
LUA_MINSTACK	deps/lua/src/lua.h	87;"	d
LUA_MULTRET	deps/lua/src/lua.h	30;"	d
LUA_NOREF	deps/lua/src/lauxlib.h	159;"	d
LUA_NUMBER	deps/lua/src/luaconf.h	505;"	d
LUA_NUMBER_DOUBLE	deps/lua/src/luaconf.h	504;"	d
LUA_NUMBER_FMT	deps/lua/src/luaconf.h	522;"	d
LUA_NUMBER_SCAN	deps/lua/src/luaconf.h	521;"	d
LUA_O	deps/lua/src/Makefile	/^LUA_O=	lua.o$/;"	m
LUA_OFSEP	deps/lua/src/loadlib.c	29;"	d	file:
LUA_OSLIBNAME	deps/lua/src/lualib.h	27;"	d
LUA_PATH	deps/lua/src/luaconf.h	69;"	d
LUA_PATHSEP	deps/lua/src/luaconf.h	132;"	d
LUA_PATH_DEFAULT	deps/lua/src/luaconf.h	100;"	d
LUA_PATH_DEFAULT	deps/lua/src/luaconf.h	90;"	d
LUA_PATH_MARK	deps/lua/src/luaconf.h	133;"	d
LUA_POF	deps/lua/src/loadlib.c	26;"	d	file:
LUA_PROGNAME	deps/lua/src/luaconf.h	254;"	d
LUA_PROMPT	deps/lua/src/luaconf.h	245;"	d
LUA_PROMPT2	deps/lua/src/luaconf.h	246;"	d
LUA_QL	deps/lua/src/luaconf.h	201;"	d
LUA_QS	deps/lua/src/luaconf.h	202;"	d
LUA_REFNIL	deps/lua/src/lauxlib.h	160;"	d
LUA_REGISTRYINDEX	deps/lua/src/lua.h	36;"	d
LUA_RELEASE	deps/lua/src/lua.h	20;"	d
LUA_ROOT	deps/lua/src/luaconf.h	97;"	d
LUA_SIGNATURE	deps/lua/src/lua.h	27;"	d
LUA_STRLIBNAME	deps/lua/src/lualib.h	30;"	d
LUA_T	deps/lua/src/Makefile	/^LUA_T=	lua$/;"	m
LUA_TABLIBNAME	deps/lua/src/lualib.h	21;"	d
LUA_TBOOLEAN	deps/lua/src/lua.h	75;"	d
LUA_TDEADKEY	deps/lua/src/lobject.h	30;"	d
LUA_TFUNCTION	deps/lua/src/lua.h	80;"	d
LUA_TLIGHTUSERDATA	deps/lua/src/lua.h	76;"	d
LUA_TMPNAMBUFSIZE	deps/lua/src/luaconf.h	648;"	d
LUA_TMPNAMBUFSIZE	deps/lua/src/luaconf.h	656;"	d
LUA_TNIL	deps/lua/src/lua.h	74;"	d
LUA_TNONE	deps/lua/src/lua.h	72;"	d
LUA_TNUMBER	deps/lua/src/lua.h	77;"	d
LUA_TPROTO	deps/lua/src/lobject.h	28;"	d
LUA_TSTRING	deps/lua/src/lua.h	78;"	d
LUA_TTABLE	deps/lua/src/lua.h	79;"	d
LUA_TTHREAD	deps/lua/src/lua.h	82;"	d
LUA_TUPVAL	deps/lua/src/lobject.h	29;"	d
LUA_TUSERDATA	deps/lua/src/lua.h	81;"	d
LUA_USE_DLOPEN	deps/lua/src/luaconf.h	38;"	d
LUA_USE_ISATTY	deps/lua/src/luaconf.h	56;"	d
LUA_USE_MKSTEMP	deps/lua/src/luaconf.h	55;"	d
LUA_USE_POPEN	deps/lua/src/luaconf.h	57;"	d
LUA_USE_POSIX	deps/lua/src/luaconf.h	37;"	d
LUA_USE_POSIX	deps/lua/src/luaconf.h	43;"	d
LUA_USE_READLINE	deps/lua/src/luaconf.h	39;"	d
LUA_USE_ULONGJMP	deps/lua/src/luaconf.h	58;"	d
LUA_VERSION	deps/lua/src/lua.h	19;"	d
LUA_VERSION_NUM	deps/lua/src/lua.h	21;"	d
LUA_WIN	deps/lua/src/luaconf.h	33;"	d
LUA_YIELD	deps/lua/src/lua.h	43;"	d
LZFP_h	src/lzfP.h	38;"	d
LZF_H	src/lzf.h	38;"	d
LZF_HSLOT	src/lzfP.h	/^  typedef const u8 *LZF_HSLOT;$/;"	t
LZF_HSLOT	src/lzfP.h	/^  typedef unsigned int LZF_HSLOT;$/;"	t
LZF_HSLOT_BIAS	src/lzfP.h	163;"	d
LZF_HSLOT_BIAS	src/lzfP.h	166;"	d
LZF_STATE	src/lzfP.h	/^typedef LZF_HSLOT LZF_STATE[1 << (HLOG)];$/;"	t
LZF_STATE_ARG	src/lzfP.h	113;"	d
LZF_USE_OFFSETS	src/lzfP.h	149;"	d
LZF_VERSION	src/lzf.h	49;"	d
L_ESC	deps/lua/src/lstrlib.c	182;"	d	file:
L_UPD	src/server.h	1178;"	d
L_UPD_TIME	src/server.h	1181;"	d
L_Umaxalign	deps/lua/src/llimits.h	/^typedef LUAI_USER_ALIGNMENT_T L_Umaxalign;$/;"	t
LazyFreeLinkAofRewrite	tests/modules/test_lazyfree.c	/^void LazyFreeLinkAofRewrite(RedisModuleIO *aof, RedisModuleString *key, void *value) {$/;"	f
LazyFreeLinkFree	tests/modules/test_lazyfree.c	/^void LazyFreeLinkFree(void *value) {$/;"	f
LazyFreeLinkFreeEffort	tests/modules/test_lazyfree.c	/^size_t LazyFreeLinkFreeEffort(RedisModuleString *key, const void *value) {$/;"	f
LazyFreeLinkInsert	tests/modules/test_lazyfree.c	/^void LazyFreeLinkInsert(struct LazyFreeLinkObject *o, int64_t ele) {$/;"	f
LazyFreeLinkInsert_RedisCommand	tests/modules/test_lazyfree.c	/^int LazyFreeLinkInsert_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
LazyFreeLinkLen_RedisCommand	tests/modules/test_lazyfree.c	/^int LazyFreeLinkLen_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
LazyFreeLinkNode	tests/modules/test_lazyfree.c	/^struct LazyFreeLinkNode {$/;"	s	file:
LazyFreeLinkObject	tests/modules/test_lazyfree.c	/^struct LazyFreeLinkObject {$/;"	s	file:
LazyFreeLinkRdbLoad	tests/modules/test_lazyfree.c	/^void *LazyFreeLinkRdbLoad(RedisModuleIO *rdb, int encver) {$/;"	f
LazyFreeLinkRdbSave	tests/modules/test_lazyfree.c	/^void LazyFreeLinkRdbSave(RedisModuleIO *rdb, void *value) {$/;"	f
LazyFreeLinkReleaseObject	tests/modules/test_lazyfree.c	/^void LazyFreeLinkReleaseObject(struct LazyFreeLinkObject *o) {$/;"	f
LazyFreeLinkType	tests/modules/test_lazyfree.c	/^static RedisModuleType *LazyFreeLinkType;$/;"	v	file:
LazyFreeLinkUnlink	tests/modules/test_lazyfree.c	/^void LazyFreeLinkUnlink(RedisModuleString *key, const void *value) {$/;"	f
LexState	deps/lua/src/llex.h	/^typedef struct LexState {$/;"	s
LexState	deps/lua/src/llex.h	/^} LexState;$/;"	t	typeref:struct:LexState
ListCommand_RedisCommand	src/modules/hellocluster.c	/^int ListCommand_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
LoadBlock	deps/lua/src/lundump.c	/^static void LoadBlock(LoadState* S, void* b, size_t size)$/;"	f	file:
LoadByte	deps/lua/src/lundump.c	44;"	d	file:
LoadChar	deps/lua/src/lundump.c	/^static int LoadChar(LoadState* S)$/;"	f	file:
LoadCode	deps/lua/src/lundump.c	/^static void LoadCode(LoadState* S, Proto* f)$/;"	f	file:
LoadConstants	deps/lua/src/lundump.c	/^static void LoadConstants(LoadState* S, Proto* f)$/;"	f	file:
LoadDebug	deps/lua/src/lundump.c	/^static void LoadDebug(LoadState* S, Proto* f)$/;"	f	file:
LoadF	deps/lua/src/lauxlib.c	/^typedef struct LoadF {$/;"	s	file:
LoadF	deps/lua/src/lauxlib.c	/^} LoadF;$/;"	t	typeref:struct:LoadF	file:
LoadFunction	deps/lua/src/lundump.c	/^static Proto* LoadFunction(LoadState* S, TString* p)$/;"	f	file:
LoadHeader	deps/lua/src/lundump.c	/^static void LoadHeader(LoadState* S)$/;"	f	file:
LoadInt	deps/lua/src/lundump.c	/^static int LoadInt(LoadState* S)$/;"	f	file:
LoadMem	deps/lua/src/lundump.c	43;"	d	file:
LoadNumber	deps/lua/src/lundump.c	/^static lua_Number LoadNumber(LoadState* S)$/;"	f	file:
LoadS	deps/lua/src/lauxlib.c	/^typedef struct LoadS {$/;"	s	file:
LoadS	deps/lua/src/lauxlib.c	/^} LoadS;$/;"	t	typeref:struct:LoadS	file:
LoadState	deps/lua/src/lundump.c	/^} LoadState;$/;"	t	typeref:struct:__anon97	file:
LoadString	deps/lua/src/lundump.c	/^static TString* LoadString(LoadState* S)$/;"	f	file:
LoadVar	deps/lua/src/lundump.c	45;"	d	file:
LoadVector	deps/lua/src/lundump.c	46;"	d	file:
LocVar	deps/lua/src/lobject.h	/^typedef struct LocVar {$/;"	s
LocVar	deps/lua/src/lobject.h	/^} LocVar;$/;"	t	typeref:struct:LocVar
LogNumericEvent	tests/modules/hooks.c	/^void LogNumericEvent(RedisModuleCtx *ctx, const char* keyname, long data) {$/;"	f
LogStringEvent	tests/modules/hooks.c	/^void LogStringEvent(RedisModuleCtx *ctx, const char* keyname, const char* data) {$/;"	f
MADV_FREE	src/server.c	5759;"	d	file:
MAGIC	deps/jemalloc/test/unit/zero.c	39;"	d	file:
MAGIC	deps/jemalloc/test/unit/zero.c	7;"	d	file:
MAJ	src/sha256.c	25;"	d	file:
MAKECOLOR	deps/Makefile	/^MAKECOLOR="\\033[32;1m"$/;"	m
MAKECOLOR	src/Makefile	/^MAKECOLOR="\\033[32;1m"$/;"	m
MAKE_INSTALL	src/Makefile	/^    define MAKE_INSTALL$/;"	m
MALLCTL_ARENAS_ALL	deps/jemalloc/include/jemalloc/jemalloc_macros.h	46;"	d
MALLCTL_ARENAS_DESTROYED	deps/jemalloc/include/jemalloc/jemalloc_macros.h	51;"	d
MALLOC	src/Makefile	/^	MALLOC=jemalloc$/;"	m
MALLOC	src/Makefile	/^	MALLOC=libc$/;"	m
MALLOC	src/Makefile	/^	MALLOC=tcmalloc$/;"	m
MALLOC	src/Makefile	/^	MALLOC=tcmalloc_minimal$/;"	m
MALLOC	src/Makefile	/^MALLOC=libc$/;"	m
MALLOCX_ALIGN	deps/jemalloc/include/jemalloc/jemalloc_macros.h	16;"	d
MALLOCX_ALIGN	deps/jemalloc/include/jemalloc/jemalloc_macros.h	18;"	d
MALLOCX_ALIGN_GET	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	40;"	d
MALLOCX_ALIGN_GET_SPECIFIED	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	38;"	d
MALLOCX_ARENA	deps/jemalloc/include/jemalloc/jemalloc_macros.h	32;"	d
MALLOCX_ARENA_BITS	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	24;"	d
MALLOCX_ARENA_GET	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	47;"	d
MALLOCX_ARENA_LIMIT	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	32;"	d
MALLOCX_ARENA_MASK	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	29;"	d
MALLOCX_ARENA_SHIFT	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	27;"	d
MALLOCX_LG_ALIGN	deps/jemalloc/include/jemalloc/jemalloc_macros.h	14;"	d
MALLOCX_LG_ALIGN_BITS	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	26;"	d
MALLOCX_LG_ALIGN_MASK	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	36;"	d
MALLOCX_TCACHE	deps/jemalloc/include/jemalloc/jemalloc_macros.h	27;"	d
MALLOCX_TCACHE_BITS	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	25;"	d
MALLOCX_TCACHE_GET	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	45;"	d
MALLOCX_TCACHE_MASK	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	33;"	d
MALLOCX_TCACHE_MAX	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	35;"	d
MALLOCX_TCACHE_NONE	deps/jemalloc/include/jemalloc/jemalloc_macros.h	28;"	d
MALLOCX_TCACHE_SHIFT	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	28;"	d
MALLOCX_ZERO	deps/jemalloc/include/jemalloc/jemalloc_macros.h	22;"	d
MALLOCX_ZERO_GET	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	42;"	d
MALLOC_CONF	deps/jemalloc/Makefile	/^MALLOC_CONF := MALLOC_CONF$/;"	m
MALLOC_MIN_SIZE	src/zmalloc.c	66;"	d	file:
MALLOC_MUTEX_INITIALIZER	deps/jemalloc/include/jemalloc/internal/mutex.h	102;"	d
MALLOC_MUTEX_INITIALIZER	deps/jemalloc/include/jemalloc/internal/mutex.h	104;"	d
MALLOC_MUTEX_INITIALIZER	deps/jemalloc/include/jemalloc/internal/mutex.h	108;"	d
MALLOC_MUTEX_INITIALIZER	deps/jemalloc/include/jemalloc/internal/mutex.h	112;"	d
MALLOC_MUTEX_INITIALIZER	deps/jemalloc/include/jemalloc/internal/mutex.h	117;"	d
MALLOC_MUTEX_LOCK	deps/jemalloc/include/jemalloc/internal/mutex.h	75;"	d
MALLOC_MUTEX_LOCK	deps/jemalloc/include/jemalloc/internal/mutex.h	79;"	d
MALLOC_MUTEX_LOCK	deps/jemalloc/include/jemalloc/internal/mutex.h	84;"	d
MALLOC_MUTEX_LOCK	deps/jemalloc/include/jemalloc/internal/mutex.h	88;"	d
MALLOC_MUTEX_LOCK	deps/jemalloc/include/jemalloc/internal/mutex.h	92;"	d
MALLOC_MUTEX_MAX_SPIN	deps/jemalloc/include/jemalloc/internal/mutex.h	71;"	d
MALLOC_MUTEX_TRYLOCK	deps/jemalloc/include/jemalloc/internal/mutex.h	77;"	d
MALLOC_MUTEX_TRYLOCK	deps/jemalloc/include/jemalloc/internal/mutex.h	81;"	d
MALLOC_MUTEX_TRYLOCK	deps/jemalloc/include/jemalloc/internal/mutex.h	86;"	d
MALLOC_MUTEX_TRYLOCK	deps/jemalloc/include/jemalloc/internal/mutex.h	90;"	d
MALLOC_MUTEX_TRYLOCK	deps/jemalloc/include/jemalloc/internal/mutex.h	94;"	d
MALLOC_MUTEX_TYPE	deps/jemalloc/include/jemalloc/internal/mutex.h	116;"	d
MALLOC_MUTEX_UNLOCK	deps/jemalloc/include/jemalloc/internal/mutex.h	76;"	d
MALLOC_MUTEX_UNLOCK	deps/jemalloc/include/jemalloc/internal/mutex.h	80;"	d
MALLOC_MUTEX_UNLOCK	deps/jemalloc/include/jemalloc/internal/mutex.h	85;"	d
MALLOC_MUTEX_UNLOCK	deps/jemalloc/include/jemalloc/internal/mutex.h	89;"	d
MALLOC_MUTEX_UNLOCK	deps/jemalloc/include/jemalloc/internal/mutex.h	93;"	d
MALLOC_PRINTF_BUFSIZE	deps/jemalloc/include/jemalloc/internal/malloc_io.h	41;"	d
MALLOC_TEST_TSD	deps/jemalloc/include/jemalloc/internal/tsd.h	53;"	d
MALLOC_TEST_TSD	deps/jemalloc/include/jemalloc/internal/tsd.h	58;"	d
MALLOC_TEST_TSD_INITIALIZER	deps/jemalloc/include/jemalloc/internal/tsd.h	56;"	d
MALLOC_TEST_TSD_INITIALIZER	deps/jemalloc/include/jemalloc/internal/tsd.h	59;"	d
MALLOC_TSD	deps/jemalloc/include/jemalloc/internal/tsd.h	63;"	d
MALLOC_TSD_CLEANUPS_MAX	deps/jemalloc/include/jemalloc/internal/tsd_types.h	4;"	d
MALLOC_TSD_TEST_DATA_INIT	deps/jemalloc/include/jemalloc/internal/tsd.h	52;"	d
MAN3	deps/jemalloc/Makefile	/^MAN3 := $(objroot)doc\/jemalloc$(install_suffix).3$/;"	m
MANDIR	deps/jemalloc/Makefile	/^MANDIR := $(DESTDIR)\/usr\/local\/share\/man$/;"	m
MASK	deps/jemalloc/include/jemalloc/internal/extent_structs.h	89;"	d
MASK	src/rand.c	47;"	d	file:
MASK0	deps/lua/src/lopcodes.h	74;"	d
MASK1	deps/lua/src/lopcodes.h	71;"	d
MATH_C_	deps/jemalloc/test/src/math.c	1;"	d	file:
MATRIX_A	src/mt19937-64.c	62;"	d	file:
MAX1	utils/hashtable/rehashing.c	100;"	d	file:
MAX2	utils/hashtable/rehashing.c	101;"	d	file:
MAXALIGN	deps/jemalloc/test/integration/aligned_alloc.c	3;"	d	file:
MAXALIGN	deps/jemalloc/test/integration/mallocx.c	162;"	d	file:
MAXALIGN	deps/jemalloc/test/integration/mallocx.c	216;"	d	file:
MAXALIGN	deps/jemalloc/test/integration/posix_memalign.c	3;"	d	file:
MAXALIGN	deps/jemalloc/test/integration/sdallocx.c	3;"	d	file:
MAXALIGN	deps/lua/src/lua_struct.c	72;"	d	file:
MAXARG_A	deps/lua/src/lopcodes.h	65;"	d
MAXARG_B	deps/lua/src/lopcodes.h	66;"	d
MAXARG_Bx	deps/lua/src/lopcodes.h	57;"	d
MAXARG_Bx	deps/lua/src/lopcodes.h	60;"	d
MAXARG_C	deps/lua/src/lopcodes.h	67;"	d
MAXARG_sBx	deps/lua/src/lopcodes.h	58;"	d
MAXARG_sBx	deps/lua/src/lopcodes.h	61;"	d
MAXASIZE	deps/lua/src/ltable.c	47;"	d	file:
MAXBITS	deps/lua/src/ltable.c	42;"	d	file:
MAXBITS	deps/lua/src/ltable.c	44;"	d	file:
MAXINDEXRK	deps/lua/src/lopcodes.h	127;"	d
MAXINTSIZE	deps/lua/src/lua_struct.c	59;"	d	file:
MAXMEMORY_ALLKEYS_LFU	src/server.h	437;"	d
MAXMEMORY_ALLKEYS_LRU	src/server.h	436;"	d
MAXMEMORY_ALLKEYS_RANDOM	src/server.h	438;"	d
MAXMEMORY_FLAG_ALLKEYS	src/server.h	428;"	d
MAXMEMORY_FLAG_LFU	src/server.h	427;"	d
MAXMEMORY_FLAG_LRU	src/server.h	426;"	d
MAXMEMORY_FLAG_NO_SHARED_INTEGERS	src/server.h	429;"	d
MAXMEMORY_NO_EVICTION	src/server.h	439;"	d
MAXMEMORY_VOLATILE_LFU	src/server.h	433;"	d
MAXMEMORY_VOLATILE_LRU	src/server.h	432;"	d
MAXMEMORY_VOLATILE_RANDOM	src/server.h	435;"	d
MAXMEMORY_VOLATILE_TTL	src/server.h	434;"	d
MAXSIZE	src/controller.c	23;"	d	file:
MAXSRC	deps/lua/src/llex.c	75;"	d	file:
MAXSTACK	deps/lua/src/llimits.h	93;"	d
MAXSZ	deps/jemalloc/test/integration/mallocx.c	117;"	d	file:
MAXSZ	deps/jemalloc/test/integration/mallocx.c	149;"	d	file:
MAXSZ	deps/jemalloc/test/integration/rallocx.c	50;"	d	file:
MAXSZ	deps/jemalloc/test/integration/rallocx.c	81;"	d	file:
MAXTAGLOOP	deps/lua/src/lvm.c	32;"	d	file:
MAX_ABS_ERR	deps/jemalloc/test/unit/math.c	4;"	d	file:
MAX_ACCEPTS_PER_CALL	src/networking.c	1038;"	d	file:
MAX_ALIGN	deps/jemalloc/test/integration/rallocx.c	153;"	d	file:
MAX_ALIGN	deps/jemalloc/test/integration/rallocx.c	170;"	d	file:
MAX_ALIGN	deps/jemalloc/test/unit/hash.c	141;"	d	file:
MAX_ALIGN	deps/jemalloc/test/unit/hash.c	148;"	d	file:
MAX_BACKGROUND_THREAD_LIMIT	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	11;"	d
MAX_CLIENTS_PER_CLOCK_TICK	src/server.h	102;"	d
MAX_CLUSTER_ACCEPTS_PER_CALL	src/cluster.c	754;"	d	file:
MAX_EVENT_BATCHSZ	src/ae_evport.c	66;"	d	file:
MAX_FORMAT	deps/lua/src/lstrlib.c	693;"	d	file:
MAX_INT	deps/lua/src/llimits.h	35;"	d
MAX_ITEM	deps/lua/src/lstrlib.c	686;"	d	file:
MAX_KEYS_BUFFER	src/server.h	1658;"	d
MAX_LATENCY_PRECISION	src/redis-benchmark.c	67;"	d	file:
MAX_LG_ALIGN	deps/jemalloc/test/integration/rallocx.c	178;"	d	file:
MAX_LG_ALIGN	deps/jemalloc/test/integration/rallocx.c	207;"	d	file:
MAX_LIT	src/lzf_c.c	74;"	d	file:
MAX_LONG_DOUBLE_CHARS	src/util.h	39;"	d
MAX_LUMEM	deps/lua/src/llimits.h	32;"	d
MAX_OFF	src/lzf_c.c	75;"	d	file:
MAX_RANGE	deps/jemalloc/test/unit/prng.c	142;"	d	file:
MAX_RANGE	deps/jemalloc/test/unit/prng.c	162;"	d	file:
MAX_RANGE	deps/jemalloc/test/unit/prng.c	182;"	d	file:
MAX_REF	src/lzf_c.c	76;"	d	file:
MAX_REL_ERR	deps/jemalloc/test/unit/math.c	3;"	d	file:
MAX_SIZET	deps/lua/src/llimits.h	30;"	d
MAX_THREADS	src/redis-benchmark.c	68;"	d	file:
MAX_UNUSUAL_OPTIONS	deps/jemalloc/scripts/gen_travis.py	/^MAX_UNUSUAL_OPTIONS = 2$/;"	v
MAX_VALIDATE	deps/jemalloc/test/integration/rallocx.c	179;"	d	file:
MAX_VALIDATE	deps/jemalloc/test/integration/rallocx.c	206;"	d	file:
MEMERRMSG	deps/lua/src/lmem.h	16;"	d
MEMORY_CONFIG	src/config.c	2077;"	d	file:
MEMTEST_32BIT	src/memtest.c	44;"	d	file:
MEMTEST_64BIT	src/memtest.c	46;"	d	file:
MEMTEST_BACKUP_WORDS	src/memtest.c	275;"	d	file:
MEMTEST_DECACHE_SIZE	src/memtest.c	279;"	d	file:
MEMTEST_MAX_REGIONS	src/debug.c	1642;"	d	file:
MERCATOR_MAX	src/geohash_helper.c	/^const double MERCATOR_MAX = 20037726.37;$/;"	v
MERCATOR_MIN	src/geohash_helper.c	/^const double MERCATOR_MIN = -20037726.37;$/;"	v
METADATA_THP_DEFAULT	deps/jemalloc/include/jemalloc/internal/base_types.h	7;"	d
MEXP	deps/jemalloc/test/include/test/SFMT-params.h	125;"	d
MEXP	deps/jemalloc/test/include/test/SFMT-params.h	127;"	d
MEXP	deps/jemalloc/test/include/test/SFMT-params.h	43;"	d
MEXP	deps/jemalloc/test/include/test/jemalloc_test.h	130;"	d
MIB_UNSIGNED	deps/jemalloc/src/ctl.c	1342;"	d	file:
MIGRATE_SOCKET_CACHE_ITEMS	src/cluster.c	5860;"	d	file:
MIGRATE_SOCKET_CACHE_TTL	src/cluster.c	5861;"	d	file:
MILLION	deps/jemalloc/src/nstime.c	9;"	d	file:
MINSIZEARRAY	deps/lua/src/lmem.c	43;"	d	file:
MINSTRTABSIZE	deps/lua/src/llimits.h	99;"	d
MIN_COMPRESS_BYTES	src/quicklist.c	56;"	d	file:
MIN_COMPRESS_IMPROVE	src/quicklist.c	61;"	d	file:
MKDIR	deps/lua/Makefile	/^MKDIR= mkdir -p$/;"	m
MKLIB	deps/jemalloc/Makefile	/^MKLIB = $/;"	m
MM	src/mt19937-64.c	61;"	d	file:
MODIFIABLE_CONFIG	src/config.c	249;"	d	file:
MODULE_LOOKUP_CACHE_SIZE	src/module.c	4314;"	d	file:
MP_CUR_ERROR_BADFMT	deps/lua/src/lua_cmsgpack.c	146;"	d	file:
MP_CUR_ERROR_EOF	deps/lua/src/lua_cmsgpack.c	145;"	d	file:
MP_CUR_ERROR_NONE	deps/lua/src/lua_cmsgpack.c	144;"	d	file:
MSGTYPE_PING	src/modules/hellocluster.c	40;"	d	file:
MSGTYPE_PONG	src/modules/hellocluster.c	41;"	d	file:
MSK1	deps/jemalloc/test/include/test/SFMT-params11213.h	44;"	d
MSK1	deps/jemalloc/test/include/test/SFMT-params1279.h	44;"	d
MSK1	deps/jemalloc/test/include/test/SFMT-params132049.h	44;"	d
MSK1	deps/jemalloc/test/include/test/SFMT-params19937.h	44;"	d
MSK1	deps/jemalloc/test/include/test/SFMT-params216091.h	44;"	d
MSK1	deps/jemalloc/test/include/test/SFMT-params2281.h	44;"	d
MSK1	deps/jemalloc/test/include/test/SFMT-params4253.h	44;"	d
MSK1	deps/jemalloc/test/include/test/SFMT-params44497.h	44;"	d
MSK1	deps/jemalloc/test/include/test/SFMT-params607.h	44;"	d
MSK1	deps/jemalloc/test/include/test/SFMT-params86243.h	44;"	d
MSK2	deps/jemalloc/test/include/test/SFMT-params11213.h	45;"	d
MSK2	deps/jemalloc/test/include/test/SFMT-params1279.h	45;"	d
MSK2	deps/jemalloc/test/include/test/SFMT-params132049.h	45;"	d
MSK2	deps/jemalloc/test/include/test/SFMT-params19937.h	45;"	d
MSK2	deps/jemalloc/test/include/test/SFMT-params216091.h	45;"	d
MSK2	deps/jemalloc/test/include/test/SFMT-params2281.h	45;"	d
MSK2	deps/jemalloc/test/include/test/SFMT-params4253.h	45;"	d
MSK2	deps/jemalloc/test/include/test/SFMT-params44497.h	45;"	d
MSK2	deps/jemalloc/test/include/test/SFMT-params607.h	45;"	d
MSK2	deps/jemalloc/test/include/test/SFMT-params86243.h	45;"	d
MSK3	deps/jemalloc/test/include/test/SFMT-params11213.h	46;"	d
MSK3	deps/jemalloc/test/include/test/SFMT-params1279.h	46;"	d
MSK3	deps/jemalloc/test/include/test/SFMT-params132049.h	46;"	d
MSK3	deps/jemalloc/test/include/test/SFMT-params19937.h	46;"	d
MSK3	deps/jemalloc/test/include/test/SFMT-params216091.h	46;"	d
MSK3	deps/jemalloc/test/include/test/SFMT-params2281.h	46;"	d
MSK3	deps/jemalloc/test/include/test/SFMT-params4253.h	46;"	d
MSK3	deps/jemalloc/test/include/test/SFMT-params44497.h	46;"	d
MSK3	deps/jemalloc/test/include/test/SFMT-params607.h	46;"	d
MSK3	deps/jemalloc/test/include/test/SFMT-params86243.h	46;"	d
MSK4	deps/jemalloc/test/include/test/SFMT-params11213.h	47;"	d
MSK4	deps/jemalloc/test/include/test/SFMT-params1279.h	47;"	d
MSK4	deps/jemalloc/test/include/test/SFMT-params132049.h	47;"	d
MSK4	deps/jemalloc/test/include/test/SFMT-params19937.h	47;"	d
MSK4	deps/jemalloc/test/include/test/SFMT-params216091.h	47;"	d
MSK4	deps/jemalloc/test/include/test/SFMT-params2281.h	47;"	d
MSK4	deps/jemalloc/test/include/test/SFMT-params4253.h	47;"	d
MSK4	deps/jemalloc/test/include/test/SFMT-params44497.h	47;"	d
MSK4	deps/jemalloc/test/include/test/SFMT-params607.h	47;"	d
MSK4	deps/jemalloc/test/include/test/SFMT-params86243.h	47;"	d
MSVC_COMPAT_WINDOWS_EXTRA_H	deps/jemalloc/include/msvc_compat/windows_extra.h	2;"	d
MUL	src/rand.c	50;"	d	file:
MUTEX_CTL_STR_MAX_LENGTH	deps/jemalloc/src/stats.c	80;"	d	file:
MUTEX_POOL_SIZE	deps/jemalloc/include/jemalloc/internal/mutex_pool.h	9;"	d
MUTEX_PROF_ARENA_MUTEXES	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^	MUTEX_PROF_ARENA_MUTEXES$/;"	e	enum:__anon145
MUTEX_PROF_ARENA_MUTEXES	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	20;"	d
MUTEX_PROF_COUNTERS	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	49;"	d
MUTEX_PROF_DATA_NODE	deps/jemalloc/src/ctl.c	405;"	d	file:
MUTEX_PROF_DATA_NODE	deps/jemalloc/src/ctl.c	523;"	d	file:
MUTEX_PROF_GLOBAL_MUTEXES	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^	MUTEX_PROF_GLOBAL_MUTEXES$/;"	e	enum:__anon144
MUTEX_PROF_GLOBAL_MUTEXES	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	8;"	d
MUTEX_PROF_RESET	deps/jemalloc/src/ctl.c	2776;"	d	file:
MUTEX_PROF_RESET	deps/jemalloc/src/ctl.c	2814;"	d	file:
MUTEX_PROF_UINT32_COUNTERS	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	46;"	d
MUTEX_PROF_UINT64_COUNTERS	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	38;"	d
MUTEX_STATS_CTL_PROTO_GEN	deps/jemalloc/src/ctl.c	206;"	d	file:
MUTEX_STATS_CTL_PROTO_GEN	deps/jemalloc/src/ctl.c	227;"	d	file:
MUZZY_DECAY_MS_DEFAULT	deps/jemalloc/include/jemalloc/internal/arena_types.h	10;"	d
MYCFLAGS	deps/lua/etc/Makefile	/^MYCFLAGS= $/;"	m
MYCFLAGS	deps/lua/src/Makefile	/^MYCFLAGS=$/;"	m
MYCOMPILE	deps/lua/etc/luavs.bat	/^@set MYCOMPILE=cl \/nologo \/MD \/O2 \/W3 \/c \/D_CRT_SECURE_NO_DEPRECATE$/;"	v
MYLDFLAGS	deps/lua/etc/Makefile	/^MYLDFLAGS= -Wl,-E$/;"	m
MYLDFLAGS	deps/lua/src/Makefile	/^MYLDFLAGS=$/;"	m
MYLIBS	deps/lua/etc/Makefile	/^MYLIBS= -lm$/;"	m
MYLIBS	deps/lua/src/Makefile	/^MYLIBS=$/;"	m
MYLINK	deps/lua/etc/luavs.bat	/^@set MYLINK=link \/nologo$/;"	v
MYMT	deps/lua/etc/luavs.bat	/^@set MYMT=mt \/nologo$/;"	v
M_UPD	src/server.h	1177;"	d
M_UPD_TIME	src/server.h	1180;"	d
MatchState	deps/lua/src/lstrlib.c	/^typedef struct MatchState {$/;"	s	file:
MatchState	deps/lua/src/lstrlib.c	/^} MatchState;$/;"	t	typeref:struct:MatchState	file:
Mbuffer	deps/lua/src/lzio.h	/^typedef struct Mbuffer {$/;"	s
Mbuffer	deps/lua/src/lzio.h	/^} Mbuffer;$/;"	t	typeref:struct:Mbuffer
ModuleForkDoneHandler	src/module.c	/^void ModuleForkDoneHandler(int exitcode, int bysignal) {$/;"	f
ModuleTypeNameCharSet	src/module.c	/^const char *ModuleTypeNameCharSet =$/;"	v
ModulesInHooks	src/module.c	/^unsigned long long ModulesInHooks = 0; \/* Total number of modules in hooks$/;"	v
MurmurHash64A	src/hyperloglog.c	/^uint64_t MurmurHash64A (const void * key, int len, unsigned int seed) {$/;"	f
N	deps/jemalloc/test/include/test/SFMT-params.h	53;"	d
N	src/rand.c	46;"	d	file:
N32	deps/jemalloc/test/include/test/SFMT-params.h	56;"	d
N64	deps/jemalloc/test/include/test/SFMT-params.h	59;"	d
NALLOCS_PER_THREAD	deps/jemalloc/test/unit/prof_accum.c	4;"	d	file:
NALLOCS_PER_THREAD	deps/jemalloc/test/unit/prof_reset.c	134;"	d	file:
NALLOCS_PER_THREAD	deps/jemalloc/test/unit/prof_reset.c	220;"	d	file:
NAME	deps/jemalloc/src/ctl.c	234;"	d	file:
NAME	deps/jemalloc/src/ctl.c	557;"	d	file:
NB	deps/jemalloc/test/unit/bitmap.c	127;"	d	file:
NB	deps/jemalloc/test/unit/bitmap.c	135;"	d	file:
NB	deps/jemalloc/test/unit/bitmap.c	158;"	d	file:
NB	deps/jemalloc/test/unit/bitmap.c	165;"	d	file:
NB	deps/jemalloc/test/unit/bitmap.c	197;"	d	file:
NB	deps/jemalloc/test/unit/bitmap.c	202;"	d	file:
NB	deps/jemalloc/test/unit/bitmap.c	228;"	d	file:
NB	deps/jemalloc/test/unit/bitmap.c	233;"	d	file:
NB	deps/jemalloc/test/unit/bitmap.c	266;"	d	file:
NB	deps/jemalloc/test/unit/bitmap.c	271;"	d	file:
NB	deps/jemalloc/test/unit/bitmap.c	413;"	d	file:
NB	deps/jemalloc/test/unit/bitmap.c	418;"	d	file:
NBAGS	deps/jemalloc/test/unit/ph.c	174;"	d	file:
NBAGS	deps/jemalloc/test/unit/rb.c	229;"	d	file:
NBAGS	deps/jemalloc/test/unit/rb.c	345;"	d	file:
NBITS_TAB	deps/jemalloc/test/unit/bitmap.c	3;"	d	file:
NCYCLES	deps/jemalloc/test/integration/rallocx.c	46;"	d	file:
NCYCLES	deps/jemalloc/test/integration/rallocx.c	83;"	d	file:
NDEBUG	src/monotonic.c	7;"	d	file:
NENTRIES	deps/jemalloc/test/unit/ql.c	6;"	d	file:
NENTRIES	deps/jemalloc/test/unit/qr.c	6;"	d	file:
NEPOCHS	deps/jemalloc/test/unit/retained.c	8;"	d	file:
NET_ADDR_STR_LEN	src/server.h	123;"	d
NET_FIRST_BIND_ADDR	src/server.h	499;"	d
NET_HOST_PORT_STR_LEN	src/server.h	124;"	d
NET_HOST_STR_LEN	src/server.h	121;"	d
NET_IP_STR_LEN	src/server.h	122;"	d
NET_MAX_WRITES_PER_EVENT	src/server.h	105;"	d
NEXT	src/lzf_c.c	49;"	d	file:
NINCRS	deps/jemalloc/test/unit/mtx.c	4;"	d	file:
NINTERVALS	deps/jemalloc/test/unit/decay.c	378;"	d	file:
NINTERVALS	deps/jemalloc/test/unit/decay.c	418;"	d	file:
NITEMS	deps/jemalloc/test/unit/ckh.c	107;"	d	file:
NITEMS	deps/jemalloc/test/unit/ckh.c	201;"	d	file:
NITER	deps/jemalloc/test/integration/aligned_alloc.c	123;"	d	file:
NITER	deps/jemalloc/test/integration/aligned_alloc.c	82;"	d	file:
NITER	deps/jemalloc/test/integration/mallocx.c	163;"	d	file:
NITER	deps/jemalloc/test/integration/mallocx.c	217;"	d	file:
NITER	deps/jemalloc/test/integration/posix_memalign.c	117;"	d	file:
NITER	deps/jemalloc/test/integration/posix_memalign.c	74;"	d	file:
NITER	deps/jemalloc/test/integration/sdallocx.c	4;"	d	file:
NITER	deps/jemalloc/test/unit/prof_reset.c	226;"	d	file:
NITER	deps/jemalloc/test/unit/prof_reset.c	274;"	d	file:
NITERS	deps/jemalloc/test/unit/rtree.c	83;"	d	file:
NLARGE	deps/jemalloc/test/unit/arena_reset.c	99;"	d	file:
NMSGS	deps/jemalloc/test/unit/mq.c	4;"	d	file:
NN	src/mt19937-64.c	60;"	d	file:
NNODES	deps/jemalloc/test/unit/ph.c	173;"	d	file:
NNODES	deps/jemalloc/test/unit/ph.c	308;"	d	file:
NNODES	deps/jemalloc/test/unit/rb.c	228;"	d	file:
NNODES	deps/jemalloc/test/unit/rb.c	344;"	d	file:
NODEPS	src/Makefile	/^NODEPS:=clean distclean$/;"	m
NODE_MAGIC	deps/jemalloc/test/unit/ph.c	8;"	d	file:
NODE_MAGIC	deps/jemalloc/test/unit/rb.c	19;"	d	file:
NOTIFY_ALL	src/server.h	496;"	d
NOTIFY_EVICTED	src/server.h	491;"	d
NOTIFY_EXPIRED	src/server.h	490;"	d
NOTIFY_GENERIC	src/server.h	484;"	d
NOTIFY_HASH	src/server.h	488;"	d
NOTIFY_KEYEVENT	src/server.h	483;"	d
NOTIFY_KEYSPACE	src/server.h	482;"	d
NOTIFY_KEY_MISS	src/server.h	493;"	d
NOTIFY_LIST	src/server.h	486;"	d
NOTIFY_LOADED	src/server.h	494;"	d
NOTIFY_MODULE	src/server.h	495;"	d
NOTIFY_SET	src/server.h	487;"	d
NOTIFY_STREAM	src/server.h	492;"	d
NOTIFY_STRING	src/server.h	485;"	d
NOTIFY_ZSET	src/server.h	489;"	d
NOT_REACHED	deps/jemalloc/src/background_thread.c	55;"	d	file:
NOT_REACHED	deps/jemalloc/src/background_thread.c	68;"	d	file:
NO_FAILOVER	src/server.h	/^    NO_FAILOVER = 0,        \/* No failover in progress *\/$/;"	e	enum:__anon16
NO_INITIALIZER	deps/jemalloc/src/jemalloc.c	114;"	d	file:
NO_INITIALIZER	deps/jemalloc/src/jemalloc.c	119;"	d	file:
NO_JUMP	deps/lua/src/lcode.h	20;"	d
NO_REG	deps/lua/src/lopcodes.h	136;"	d
NO_SYNC_AVG	src/cluster.h	45;"	d
NO_SYNC_SKEW	src/cluster.h	46;"	d
NPS	deps/jemalloc/test/unit/decay.c	423;"	d	file:
NPS	deps/jemalloc/test/unit/decay.c	479;"	d	file:
NPS	deps/jemalloc/test/unit/decay.c	485;"	d	file:
NPS	deps/jemalloc/test/unit/decay.c	537;"	d	file:
NREPS	deps/jemalloc/test/unit/prng.c	144;"	d	file:
NREPS	deps/jemalloc/test/unit/prng.c	164;"	d	file:
NREPS	deps/jemalloc/test/unit/prng.c	184;"	d	file:
NREPS	deps/jemalloc/test/unit/ticker.c	6;"	d	file:
NRESET	deps/jemalloc/test/unit/prof_thread_name.c	113;"	d	file:
NRESET	deps/jemalloc/test/unit/prof_thread_name.c	72;"	d	file:
NSENDERS	deps/jemalloc/test/unit/mq.c	3;"	d	file:
NSET	deps/jemalloc/test/unit/rtree.c	159;"	d	file:
NSET	deps/jemalloc/test/unit/rtree.c	206;"	d	file:
NSLABS	deps/jemalloc/test/unit/pack.c	17;"	d	file:
NSTIME_MONOTONIC	deps/jemalloc/src/nstime.c	102;"	d	file:
NSTIME_MONOTONIC	deps/jemalloc/src/nstime.c	114;"	d	file:
NSTIME_MONOTONIC	deps/jemalloc/src/nstime.c	123;"	d	file:
NSTIME_MONOTONIC	deps/jemalloc/src/nstime.c	132;"	d	file:
NSTIME_MONOTONIC	deps/jemalloc/src/nstime.c	138;"	d	file:
NSTIME_MONOTONIC	deps/jemalloc/src/nstime.c	151;"	d	file:
NSTIME_SEC_MAX	deps/jemalloc/include/jemalloc/internal/nstime.h	5;"	d
NSTIME_ZERO_INITIALIZER	deps/jemalloc/include/jemalloc/internal/nstime.h	6;"	d
NSZS	deps/jemalloc/test/integration/rallocx.c	48;"	d	file:
NSZS	deps/jemalloc/test/integration/rallocx.c	82;"	d	file:
NTCACHES	deps/jemalloc/test/unit/mallctl.c	240;"	d	file:
NTHREADS	deps/jemalloc/test/integration/MALLOCX_ARENA.c	3;"	d	file:
NTHREADS	deps/jemalloc/test/integration/thread_arena.c	3;"	d	file:
NTHREADS	deps/jemalloc/test/unit/mtx.c	3;"	d	file:
NTHREADS	deps/jemalloc/test/unit/prof_accum.c	3;"	d	file:
NTHREADS	deps/jemalloc/test/unit/prof_reset.c	133;"	d	file:
NTHREADS	deps/jemalloc/test/unit/prof_reset.c	219;"	d	file:
NTHREADS	deps/jemalloc/test/unit/prof_thread_name.c	112;"	d	file:
NTHREADS	deps/jemalloc/test/unit/prof_thread_name.c	71;"	d	file:
NTHREADS	deps/jemalloc/test/unit/rtree.c	82;"	d	file:
NTICKS	deps/jemalloc/test/unit/ticker.c	26;"	d	file:
NTICKS	deps/jemalloc/test/unit/ticker.c	31;"	d	file:
NTICKS	deps/jemalloc/test/unit/ticker.c	44;"	d	file:
NTICKS	deps/jemalloc/test/unit/ticker.c	49;"	d	file:
NTICKS	deps/jemalloc/test/unit/ticker.c	63;"	d	file:
NTICKS	deps/jemalloc/test/unit/ticker.c	7;"	d	file:
NUMERIC_TYPE_INT	src/config.c	/^    NUMERIC_TYPE_INT,$/;"	e	enum:numericType	file:
NUMERIC_TYPE_LONG	src/config.c	/^    NUMERIC_TYPE_LONG,$/;"	e	enum:numericType	file:
NUMERIC_TYPE_LONG_LONG	src/config.c	/^    NUMERIC_TYPE_LONG_LONG,$/;"	e	enum:numericType	file:
NUMERIC_TYPE_OFF_T	src/config.c	/^    NUMERIC_TYPE_OFF_T,$/;"	e	enum:numericType	file:
NUMERIC_TYPE_SIZE_T	src/config.c	/^    NUMERIC_TYPE_SIZE_T,$/;"	e	enum:numericType	file:
NUMERIC_TYPE_SSIZE_T	src/config.c	/^    NUMERIC_TYPE_SSIZE_T,$/;"	e	enum:numericType	file:
NUMERIC_TYPE_TIME_T	src/config.c	/^    NUMERIC_TYPE_TIME_T,$/;"	e	enum:numericType	file:
NUMERIC_TYPE_UINT	src/config.c	/^    NUMERIC_TYPE_UINT,$/;"	e	enum:numericType	file:
NUMERIC_TYPE_ULONG	src/config.c	/^    NUMERIC_TYPE_ULONG,$/;"	e	enum:numericType	file:
NUMERIC_TYPE_ULONG_LONG	src/config.c	/^    NUMERIC_TYPE_ULONG_LONG,$/;"	e	enum:numericType	file:
NUM_OPCODES	deps/lua/src/lopcodes.h	211;"	d
NUM_REENTRANT_ALLOCS	deps/jemalloc/test/src/test.c	12;"	d	file:
NUM_RESERVED	deps/lua/src/llex.h	36;"	d
NUM_TAGS	deps/lua/src/lobject.h	22;"	d
Node	deps/lua/src/lobject.h	/^typedef struct Node {$/;"	s
Node	deps/lua/src/lobject.h	/^} Node;$/;"	t	typeref:struct:Node
NotifyCallback	src/modules/testmodule.c	/^int NotifyCallback(RedisModuleCtx *ctx, int type, const char *event,$/;"	f
O	deps/jemalloc/Makefile	/^O := o$/;"	m
O	deps/jemalloc/include/jemalloc/internal/tsd.h	121;"	d
O	deps/jemalloc/include/jemalloc/internal/tsd.h	124;"	d
O	deps/jemalloc/include/jemalloc/internal/tsd.h	182;"	d
O	deps/jemalloc/include/jemalloc/internal/tsd.h	188;"	d
O	deps/jemalloc/include/jemalloc/internal/tsd.h	191;"	d
O	deps/jemalloc/include/jemalloc/internal/tsd.h	201;"	d
O	deps/jemalloc/include/jemalloc/internal/tsd.h	207;"	d
O	deps/jemalloc/include/jemalloc/internal/tsd.h	217;"	d
O	deps/jemalloc/include/jemalloc/internal/tsd.h	220;"	d
O	deps/jemalloc/include/jemalloc/internal/tsd.h	226;"	d
O	deps/jemalloc/include/jemalloc/internal/tsd.h	229;"	d
O	deps/jemalloc/include/jemalloc/internal/tsd.h	237;"	d
O2S_BUFSIZE	deps/jemalloc/src/malloc_io.c	62;"	d	file:
OBJ	deps/hiredis/Makefile	/^OBJ=alloc.o net.o hiredis.o sds.o async.o read.o sockcompat.o$/;"	m
OBJ_COMPUTE_SIZE_DEF_SAMPLES	src/object.c	792;"	d	file:
OBJ_ENCODING_EMBSTR	src/server.h	673;"	d
OBJ_ENCODING_EMBSTR_SIZE_LIMIT	src/object.c	118;"	d	file:
OBJ_ENCODING_HT	src/server.h	667;"	d
OBJ_ENCODING_INT	src/server.h	666;"	d
OBJ_ENCODING_INTSET	src/server.h	671;"	d
OBJ_ENCODING_LINKEDLIST	src/server.h	669;"	d
OBJ_ENCODING_QUICKLIST	src/server.h	674;"	d
OBJ_ENCODING_RAW	src/server.h	665;"	d
OBJ_ENCODING_SKIPLIST	src/server.h	672;"	d
OBJ_ENCODING_STREAM	src/server.h	675;"	d
OBJ_ENCODING_ZIPLIST	src/server.h	670;"	d
OBJ_ENCODING_ZIPMAP	src/server.h	668;"	d
OBJ_EX	src/t_string.c	67;"	d	file:
OBJ_EXAT	src/t_string.c	71;"	d	file:
OBJ_FIRST_SPECIAL_REFCOUNT	src/server.h	683;"	d
OBJ_HASH	src/server.h	522;"	d
OBJ_HASH_KEY	src/server.h	1754;"	d
OBJ_HASH_VALUE	src/server.h	1755;"	d
OBJ_KEEPTTL	src/t_string.c	69;"	d	file:
OBJ_LIST	src/server.h	519;"	d
OBJ_MODULE	src/server.h	535;"	d
OBJ_NO_FLAGS	src/t_string.c	64;"	d	file:
OBJ_PERSIST	src/t_string.c	73;"	d	file:
OBJ_PX	src/t_string.c	68;"	d	file:
OBJ_PXAT	src/t_string.c	72;"	d	file:
OBJ_RING_BUF_COUNT	deps/jemalloc/test/unit/prof_reset.c	135;"	d	file:
OBJ_RING_BUF_COUNT	deps/jemalloc/test/unit/prof_reset.c	221;"	d	file:
OBJ_SET	src/server.h	520;"	d
OBJ_SET_GET	src/t_string.c	70;"	d	file:
OBJ_SET_NX	src/t_string.c	65;"	d	file:
OBJ_SET_XX	src/t_string.c	66;"	d	file:
OBJ_SHARED_BULKHDR_LEN	src/server.h	108;"	d
OBJ_SHARED_INTEGERS	src/server.h	107;"	d
OBJ_SHARED_REFCOUNT	src/server.h	681;"	d
OBJ_STATIC_REFCOUNT	src/server.h	682;"	d
OBJ_STREAM	src/server.h	536;"	d
OBJ_STRING	src/server.h	518;"	d
OBJ_ZSET	src/server.h	521;"	d
ONLY64	deps/jemalloc/test/src/SFMT.c	65;"	d	file:
OOM_SCORE_ADJ_ABSOLUTE	src/server.h	421;"	d
OOM_SCORE_ADJ_NO	src/server.h	419;"	d
OOM_SCORE_RELATIVE	src/server.h	420;"	d
OP	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	14;"	d
OP	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	16;"	d
OP	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	32;"	d
OP	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	34;"	d
OP	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	53;"	d
OP	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	65;"	d
OP	deps/jemalloc/src/ctl.c	216;"	d	file:
OP	deps/jemalloc/src/ctl.c	218;"	d	file:
OP	deps/jemalloc/src/ctl.c	221;"	d	file:
OP	deps/jemalloc/src/ctl.c	223;"	d	file:
OP	deps/jemalloc/src/ctl.c	2749;"	d	file:
OP	deps/jemalloc/src/ctl.c	2753;"	d	file:
OP	deps/jemalloc/src/ctl.c	2756;"	d	file:
OP	deps/jemalloc/src/ctl.c	2759;"	d	file:
OP	deps/jemalloc/src/ctl.c	461;"	d	file:
OP	deps/jemalloc/src/ctl.c	463;"	d	file:
OP	deps/jemalloc/src/ctl.c	466;"	d	file:
OP	deps/jemalloc/src/ctl.c	468;"	d	file:
OP	deps/jemalloc/src/ctl.c	513;"	d	file:
OP	deps/jemalloc/src/ctl.c	515;"	d	file:
OP	deps/jemalloc/src/ctl.c	518;"	d	file:
OP	deps/jemalloc/src/ctl.c	520;"	d	file:
OP	deps/jemalloc/src/ctl.c	779;"	d	file:
OP	deps/jemalloc/src/ctl.c	785;"	d	file:
OP	deps/jemalloc/src/stats.c	107;"	d	file:
OP	deps/jemalloc/src/stats.c	116;"	d	file:
OP	deps/jemalloc/src/stats.c	12;"	d	file:
OP	deps/jemalloc/src/stats.c	132;"	d	file:
OP	deps/jemalloc/src/stats.c	139;"	d	file:
OP	deps/jemalloc/src/stats.c	14;"	d	file:
OP	deps/jemalloc/src/stats.c	156;"	d	file:
OP	deps/jemalloc/src/stats.c	164;"	d	file:
OP	deps/jemalloc/src/stats.c	178;"	d	file:
OP	deps/jemalloc/src/stats.c	186;"	d	file:
OP	deps/jemalloc/src/stats.c	18;"	d	file:
OP	deps/jemalloc/src/stats.c	207;"	d	file:
OP	deps/jemalloc/src/stats.c	20;"	d	file:
OP	deps/jemalloc/src/stats.c	213;"	d	file:
OPENSSL_CFLAGS	src/Makefile	/^	OPENSSL_CFLAGS=-I\/opt\/homebrew\/opt\/openssl\/include$/;"	m
OPENSSL_CFLAGS	src/Makefile	/^	OPENSSL_CFLAGS=-I\/usr\/local\/opt\/openssl\/include$/;"	m
OPENSSL_LDFLAGS	src/Makefile	/^	OPENSSL_LDFLAGS=-L\/opt\/homebrew\/opt\/openssl\/lib$/;"	m
OPENSSL_LDFLAGS	src/Makefile	/^	OPENSSL_LDFLAGS=-L\/usr\/local\/opt\/openssl\/lib$/;"	m
OPENSSL_PREFIX	deps/hiredis/Makefile	/^  OPENSSL_PREFIX?=\/usr\/local\/opt\/openssl$/;"	m
OPR_ADD	deps/lua/src/lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_AND	deps/lua/src/lcode.h	/^  OPR_AND, OPR_OR,$/;"	e	enum:BinOpr
OPR_CONCAT	deps/lua/src/lcode.h	/^  OPR_CONCAT,$/;"	e	enum:BinOpr
OPR_DIV	deps/lua/src/lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_EQ	deps/lua/src/lcode.h	/^  OPR_NE, OPR_EQ,$/;"	e	enum:BinOpr
OPR_GE	deps/lua/src/lcode.h	/^  OPR_LT, OPR_LE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_GT	deps/lua/src/lcode.h	/^  OPR_LT, OPR_LE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_LE	deps/lua/src/lcode.h	/^  OPR_LT, OPR_LE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_LEN	deps/lua/src/lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_LT	deps/lua/src/lcode.h	/^  OPR_LT, OPR_LE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_MINUS	deps/lua/src/lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_MOD	deps/lua/src/lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_MUL	deps/lua/src/lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_NE	deps/lua/src/lcode.h	/^  OPR_NE, OPR_EQ,$/;"	e	enum:BinOpr
OPR_NOBINOPR	deps/lua/src/lcode.h	/^  OPR_NOBINOPR$/;"	e	enum:BinOpr
OPR_NOT	deps/lua/src/lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_NOUNOPR	deps/lua/src/lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_OR	deps/lua/src/lcode.h	/^  OPR_AND, OPR_OR,$/;"	e	enum:BinOpr
OPR_POW	deps/lua/src/lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_SUB	deps/lua/src/lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPT	deps/hdr_histogram/Makefile	/^OPT= -Os$/;"	m
OPT	deps/linenoise/Makefile	/^OPT= -Os$/;"	m
OPT	src/Makefile	/^OPT=$(OPTIMIZATION)$/;"	m
OPTIMIZATION	deps/hiredis/Makefile	/^OPTIMIZATION?=-O3$/;"	m
OPTIMIZATION	src/Makefile	/^OPTIMIZATION?=-O2$/;"	m
OPTION	deps/jemalloc/include/jemalloc/internal/stats.h	16;"	d
OPTION	deps/jemalloc/include/jemalloc/internal/stats.h	18;"	d
OPTION	deps/jemalloc/src/jemalloc.c	746;"	d	file:
OPTION	deps/jemalloc/src/jemalloc.c	748;"	d	file:
OPTION	deps/jemalloc/src/stats.c	1230;"	d	file:
OPTION	deps/jemalloc/src/stats.c	1232;"	d	file:
OPTION	deps/jemalloc/src/stats.c	1259;"	d	file:
OPTION	deps/jemalloc/src/stats.c	1261;"	d	file:
OPT_WRITE	deps/jemalloc/src/stats.c	870;"	d	file:
OPT_WRITE	deps/jemalloc/src/stats.c	939;"	d	file:
OPT_WRITE_BOOL	deps/jemalloc/src/stats.c	887;"	d	file:
OPT_WRITE_BOOL	deps/jemalloc/src/stats.c	941;"	d	file:
OPT_WRITE_BOOL_MUTABLE	deps/jemalloc/src/stats.c	888;"	d	file:
OPT_WRITE_BOOL_MUTABLE	deps/jemalloc/src/stats.c	942;"	d	file:
OPT_WRITE_CHAR_P	deps/jemalloc/src/stats.c	900;"	d	file:
OPT_WRITE_CHAR_P	deps/jemalloc/src/stats.c	946;"	d	file:
OPT_WRITE_MUTABLE	deps/jemalloc/src/stats.c	877;"	d	file:
OPT_WRITE_MUTABLE	deps/jemalloc/src/stats.c	940;"	d	file:
OPT_WRITE_SSIZE_T	deps/jemalloc/src/stats.c	894;"	d	file:
OPT_WRITE_SSIZE_T	deps/jemalloc/src/stats.c	944;"	d	file:
OPT_WRITE_SSIZE_T_MUTABLE	deps/jemalloc/src/stats.c	896;"	d	file:
OPT_WRITE_SSIZE_T_MUTABLE	deps/jemalloc/src/stats.c	945;"	d	file:
OPT_WRITE_UNSIGNED	deps/jemalloc/src/stats.c	891;"	d	file:
OPT_WRITE_UNSIGNED	deps/jemalloc/src/stats.c	943;"	d	file:
OPVAL_DIRTY_LL	src/t_zset.c	2041;"	d	file:
OPVAL_DIRTY_SDS	src/t_zset.c	2040;"	d	file:
OPVAL_VALID_LL	src/t_zset.c	2042;"	d	file:
OP_ADD	deps/lua/src/lopcodes.h	/^OP_ADD,\/*	A B C	R(A) := RK(B) + RK(C)				*\/$/;"	e	enum:__anon116
OP_CALL	deps/lua/src/lopcodes.h	/^OP_CALL,\/*	A B C	R(A), ... ,R(A+C-2) := R(A)(R(A+1), ... ,R(A+B-1)) *\/$/;"	e	enum:__anon116
OP_CLOSE	deps/lua/src/lopcodes.h	/^OP_CLOSE,\/*	A 	close all variables in the stack up to (>=) R(A)*\/$/;"	e	enum:__anon116
OP_CLOSURE	deps/lua/src/lopcodes.h	/^OP_CLOSURE,\/*	A Bx	R(A) := closure(KPROTO[Bx], R(A), ... ,R(A+n))	*\/$/;"	e	enum:__anon116
OP_CONCAT	deps/lua/src/lopcodes.h	/^OP_CONCAT,\/*	A B C	R(A) := R(B).. ... ..R(C)			*\/$/;"	e	enum:__anon116
OP_DIV	deps/lua/src/lopcodes.h	/^OP_DIV,\/*	A B C	R(A) := RK(B) \/ RK(C)				*\/$/;"	e	enum:__anon116
OP_EQ	deps/lua/src/lopcodes.h	/^OP_EQ,\/*	A B C	if ((RK(B) == RK(C)) ~= A) then pc++		*\/$/;"	e	enum:__anon116
OP_FORLOOP	deps/lua/src/lopcodes.h	/^OP_FORLOOP,\/*	A sBx	R(A)+=R(A+2);$/;"	e	enum:__anon116
OP_FORPREP	deps/lua/src/lopcodes.h	/^OP_FORPREP,\/*	A sBx	R(A)-=R(A+2); pc+=sBx				*\/$/;"	e	enum:__anon116
OP_GETGLOBAL	deps/lua/src/lopcodes.h	/^OP_GETGLOBAL,\/*	A Bx	R(A) := Gbl[Kst(Bx)]				*\/$/;"	e	enum:__anon116
OP_GETTABLE	deps/lua/src/lopcodes.h	/^OP_GETTABLE,\/*	A B C	R(A) := R(B)[RK(C)]				*\/$/;"	e	enum:__anon116
OP_GETUPVAL	deps/lua/src/lopcodes.h	/^OP_GETUPVAL,\/*	A B	R(A) := UpValue[B]				*\/$/;"	e	enum:__anon116
OP_JMP	deps/lua/src/lopcodes.h	/^OP_JMP,\/*	sBx	pc+=sBx					*\/$/;"	e	enum:__anon116
OP_LE	deps/lua/src/lopcodes.h	/^OP_LE,\/*	A B C	if ((RK(B) <= RK(C)) ~= A) then pc++  		*\/$/;"	e	enum:__anon116
OP_LEN	deps/lua/src/lopcodes.h	/^OP_LEN,\/*	A B	R(A) := length of R(B)				*\/$/;"	e	enum:__anon116
OP_LOADBOOL	deps/lua/src/lopcodes.h	/^OP_LOADBOOL,\/*	A B C	R(A) := (Bool)B; if (C) pc++			*\/$/;"	e	enum:__anon116
OP_LOADK	deps/lua/src/lopcodes.h	/^OP_LOADK,\/*	A Bx	R(A) := Kst(Bx)					*\/$/;"	e	enum:__anon116
OP_LOADNIL	deps/lua/src/lopcodes.h	/^OP_LOADNIL,\/*	A B	R(A) := ... := R(B) := nil			*\/$/;"	e	enum:__anon116
OP_LT	deps/lua/src/lopcodes.h	/^OP_LT,\/*	A B C	if ((RK(B) <  RK(C)) ~= A) then pc++  		*\/$/;"	e	enum:__anon116
OP_MOD	deps/lua/src/lopcodes.h	/^OP_MOD,\/*	A B C	R(A) := RK(B) % RK(C)				*\/$/;"	e	enum:__anon116
OP_MOVE	deps/lua/src/lopcodes.h	/^OP_MOVE,\/*	A B	R(A) := R(B)					*\/$/;"	e	enum:__anon116
OP_MUL	deps/lua/src/lopcodes.h	/^OP_MUL,\/*	A B C	R(A) := RK(B) * RK(C)				*\/$/;"	e	enum:__anon116
OP_NEWTABLE	deps/lua/src/lopcodes.h	/^OP_NEWTABLE,\/*	A B C	R(A) := {} (size = B,C)				*\/$/;"	e	enum:__anon116
OP_NOT	deps/lua/src/lopcodes.h	/^OP_NOT,\/*	A B	R(A) := not R(B)				*\/$/;"	e	enum:__anon116
OP_NUM	exp/exp2_micro.c	/^const int OP_NUM=1;$/;"	v
OP_POW	deps/lua/src/lopcodes.h	/^OP_POW,\/*	A B C	R(A) := RK(B) ^ RK(C)				*\/$/;"	e	enum:__anon116
OP_RETURN	deps/lua/src/lopcodes.h	/^OP_RETURN,\/*	A B	return R(A), ... ,R(A+B-2)	(see note)	*\/$/;"	e	enum:__anon116
OP_SELF	deps/lua/src/lopcodes.h	/^OP_SELF,\/*	A B C	R(A+1) := R(B); R(A) := R(B)[RK(C)]		*\/$/;"	e	enum:__anon116
OP_SETGLOBAL	deps/lua/src/lopcodes.h	/^OP_SETGLOBAL,\/*	A Bx	Gbl[Kst(Bx)] := R(A)				*\/$/;"	e	enum:__anon116
OP_SETLIST	deps/lua/src/lopcodes.h	/^OP_SETLIST,\/*	A B C	R(A)[(C-1)*FPF+i] := R(A+i), 1 <= i <= B	*\/$/;"	e	enum:__anon116
OP_SETTABLE	deps/lua/src/lopcodes.h	/^OP_SETTABLE,\/*	A B C	R(A)[RK(B)] := RK(C)				*\/$/;"	e	enum:__anon116
OP_SETUPVAL	deps/lua/src/lopcodes.h	/^OP_SETUPVAL,\/*	A B	UpValue[B] := R(A)				*\/$/;"	e	enum:__anon116
OP_SUB	deps/lua/src/lopcodes.h	/^OP_SUB,\/*	A B C	R(A) := RK(B) - RK(C)				*\/$/;"	e	enum:__anon116
OP_TAILCALL	deps/lua/src/lopcodes.h	/^OP_TAILCALL,\/*	A B C	return R(A)(R(A+1), ... ,R(A+B-1))		*\/$/;"	e	enum:__anon116
OP_TEST	deps/lua/src/lopcodes.h	/^OP_TEST,\/*	A C	if not (R(A) <=> C) then pc++			*\/ $/;"	e	enum:__anon116
OP_TESTSET	deps/lua/src/lopcodes.h	/^OP_TESTSET,\/*	A B C	if (R(B) <=> C) then R(A) := R(B) else pc++	*\/ $/;"	e	enum:__anon116
OP_TFORLOOP	deps/lua/src/lopcodes.h	/^OP_TFORLOOP,\/*	A C	R(A+3), ... ,R(A+2+C) := R(A)(R(A+1), R(A+2)); $/;"	e	enum:__anon116
OP_UNM	deps/lua/src/lopcodes.h	/^OP_UNM,\/*	A B	R(A) := -R(B)					*\/$/;"	e	enum:__anon116
OP_VARARG	deps/lua/src/lopcodes.h	/^OP_VARARG\/*	A B	R(A), R(A+1), ..., R(A+B-1) = vararg		*\/$/;"	e	enum:__anon116
OUTPUT	deps/lua/src/luac.c	27;"	d	file:
OUTPUT_CSV	src/redis-cli.c	71;"	d	file:
OUTPUT_RAW	src/redis-cli.c	70;"	d	file:
OUTPUT_STANDARD	src/redis-cli.c	69;"	d	file:
OUT_OF_RANGE	src/listpack.c	868;"	d	file:
OUT_OF_RANGE	src/listpack.c	908;"	d	file:
OUT_OF_RANGE	src/ziplist.c	621;"	d	file:
OUT_OF_RANGE	src/ziplist.c	677;"	d	file:
OUT_OF_RANGE	src/zipmap.c	381;"	d	file:
OUT_OF_RANGE	src/zipmap.c	438;"	d	file:
OpArgK	deps/lua/src/lopcodes.h	/^  OpArgK   \/* argument is a constant or register\/constant *\/$/;"	e	enum:OpArgMask
OpArgMask	deps/lua/src/lopcodes.h	/^enum OpArgMask {$/;"	g
OpArgN	deps/lua/src/lopcodes.h	/^  OpArgN,  \/* argument is not used *\/$/;"	e	enum:OpArgMask
OpArgR	deps/lua/src/lopcodes.h	/^  OpArgR,  \/* argument is a register or a jump offset *\/$/;"	e	enum:OpArgMask
OpArgU	deps/lua/src/lopcodes.h	/^  OpArgU,  \/* argument is used *\/$/;"	e	enum:OpArgMask
OpCode	deps/lua/src/lopcodes.h	/^} OpCode;$/;"	t	typeref:enum:__anon116
OpMode	deps/lua/src/lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx};  \/* basic instruction format *\/$/;"	g
Output	deps/lua/src/luac.c	/^static char Output[]={ OUTPUT };	\/* default output file name *\/$/;"	v	file:
PADDING	deps/lua/src/lua_struct.c	71;"	d	file:
PAGE	deps/jemalloc/include/jemalloc/internal/pages.h	8;"	d
PAGES_CAN_PURGE_FORCED	deps/jemalloc/include/jemalloc/internal/pages.h	43;"	d
PAGES_CAN_PURGE_LAZY	deps/jemalloc/include/jemalloc/internal/pages.h	29;"	d
PAGES_PROT_COMMIT	deps/jemalloc/src/pages.c	25;"	d	file:
PAGES_PROT_DECOMMIT	deps/jemalloc/src/pages.c	26;"	d	file:
PAGE_ADDR2BASE	deps/jemalloc/include/jemalloc/internal/pages.h	11;"	d
PAGE_CEILING	deps/jemalloc/include/jemalloc/internal/pages.h	14;"	d
PAGE_MASK	deps/jemalloc/include/jemalloc/internal/pages.h	6;"	d
PAGE_MASK	deps/jemalloc/include/jemalloc/internal/pages.h	9;"	d
PARITY1	deps/jemalloc/test/include/test/SFMT-params11213.h	48;"	d
PARITY1	deps/jemalloc/test/include/test/SFMT-params1279.h	48;"	d
PARITY1	deps/jemalloc/test/include/test/SFMT-params132049.h	48;"	d
PARITY1	deps/jemalloc/test/include/test/SFMT-params19937.h	48;"	d
PARITY1	deps/jemalloc/test/include/test/SFMT-params216091.h	48;"	d
PARITY1	deps/jemalloc/test/include/test/SFMT-params2281.h	48;"	d
PARITY1	deps/jemalloc/test/include/test/SFMT-params4253.h	48;"	d
PARITY1	deps/jemalloc/test/include/test/SFMT-params44497.h	48;"	d
PARITY1	deps/jemalloc/test/include/test/SFMT-params607.h	48;"	d
PARITY1	deps/jemalloc/test/include/test/SFMT-params86243.h	48;"	d
PARITY2	deps/jemalloc/test/include/test/SFMT-params11213.h	49;"	d
PARITY2	deps/jemalloc/test/include/test/SFMT-params1279.h	49;"	d
PARITY2	deps/jemalloc/test/include/test/SFMT-params132049.h	49;"	d
PARITY2	deps/jemalloc/test/include/test/SFMT-params19937.h	49;"	d
PARITY2	deps/jemalloc/test/include/test/SFMT-params216091.h	49;"	d
PARITY2	deps/jemalloc/test/include/test/SFMT-params2281.h	49;"	d
PARITY2	deps/jemalloc/test/include/test/SFMT-params4253.h	49;"	d
PARITY2	deps/jemalloc/test/include/test/SFMT-params44497.h	49;"	d
PARITY2	deps/jemalloc/test/include/test/SFMT-params607.h	49;"	d
PARITY2	deps/jemalloc/test/include/test/SFMT-params86243.h	49;"	d
PARITY3	deps/jemalloc/test/include/test/SFMT-params11213.h	50;"	d
PARITY3	deps/jemalloc/test/include/test/SFMT-params1279.h	50;"	d
PARITY3	deps/jemalloc/test/include/test/SFMT-params132049.h	50;"	d
PARITY3	deps/jemalloc/test/include/test/SFMT-params19937.h	50;"	d
PARITY3	deps/jemalloc/test/include/test/SFMT-params216091.h	50;"	d
PARITY3	deps/jemalloc/test/include/test/SFMT-params2281.h	50;"	d
PARITY3	deps/jemalloc/test/include/test/SFMT-params4253.h	50;"	d
PARITY3	deps/jemalloc/test/include/test/SFMT-params44497.h	50;"	d
PARITY3	deps/jemalloc/test/include/test/SFMT-params607.h	50;"	d
PARITY3	deps/jemalloc/test/include/test/SFMT-params86243.h	50;"	d
PARITY4	deps/jemalloc/test/include/test/SFMT-params11213.h	51;"	d
PARITY4	deps/jemalloc/test/include/test/SFMT-params1279.h	51;"	d
PARITY4	deps/jemalloc/test/include/test/SFMT-params132049.h	51;"	d
PARITY4	deps/jemalloc/test/include/test/SFMT-params19937.h	51;"	d
PARITY4	deps/jemalloc/test/include/test/SFMT-params216091.h	51;"	d
PARITY4	deps/jemalloc/test/include/test/SFMT-params2281.h	51;"	d
PARITY4	deps/jemalloc/test/include/test/SFMT-params4253.h	51;"	d
PARITY4	deps/jemalloc/test/include/test/SFMT-params44497.h	51;"	d
PARITY4	deps/jemalloc/test/include/test/SFMT-params607.h	51;"	d
PARITY4	deps/jemalloc/test/include/test/SFMT-params86243.h	51;"	d
PATH_MAX	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_decls.h	72;"	d
PC	deps/jemalloc/Makefile	/^PC := $(objroot)jemalloc.pc$/;"	m
PCRC	deps/lua/src/ldo.h	33;"	d
PCRLUA	deps/lua/src/ldo.h	32;"	d
PCRYIELD	deps/lua/src/ldo.h	34;"	d
PDP_ENDIAN	src/config.h	152;"	d
PERCPU_ARENA_DEFAULT	deps/jemalloc/include/jemalloc/internal/arena_types.h	41;"	d
PERCPU_ARENA_ENABLED	deps/jemalloc/include/jemalloc/internal/arena_types.h	40;"	d
PER_THD_NALLOCS	deps/jemalloc/test/unit/retained.c	9;"	d	file:
PH_H_	deps/jemalloc/include/jemalloc/internal/ph.h	16;"	d
PI	deps/lua/src/lmathlib.c	20;"	d	file:
PI	deps/lua/src/lmathlib.c	21;"	d	file:
PIC_CFLAGS	deps/jemalloc/Makefile	/^PIC_CFLAGS = -fPIC -DPIC$/;"	m
PIPEMODE_WRITE_LOOP_MAX_BYTES	src/redis-cli.c	7469;"	d	file:
PKGCONFNAME	deps/hiredis/Makefile	/^PKGCONFNAME=hiredis.pc$/;"	m
PKGCONF_PATH	deps/hiredis/Makefile	/^PKGCONF_PATH?=pkgconfig$/;"	m
PKG_CONFIG	src/Makefile	/^PKG_CONFIG?=pkg-config$/;"	m
PLAT	deps/lua/Makefile	/^PLAT= none$/;"	m
PLAT	deps/lua/src/Makefile	/^PLAT= none$/;"	m
PLATS	deps/lua/Makefile	/^PLATS= aix ansi bsd freebsd generic linux macosx mingw posix solaris$/;"	m
PLATS	deps/lua/src/Makefile	/^PLATS= aix ansi bsd freebsd generic linux macosx mingw posix solaris$/;"	m
POF	deps/lua/src/loadlib.c	155;"	d	file:
POF	deps/lua/src/loadlib.c	156;"	d	file:
POF	deps/lua/src/loadlib.c	34;"	d	file:
POLY	src/crc64.c	33;"	d	file:
PORT	src/controller.c	21;"	d	file:
POS1	deps/jemalloc/test/include/test/SFMT-params11213.h	39;"	d
POS1	deps/jemalloc/test/include/test/SFMT-params1279.h	39;"	d
POS1	deps/jemalloc/test/include/test/SFMT-params132049.h	39;"	d
POS1	deps/jemalloc/test/include/test/SFMT-params19937.h	39;"	d
POS1	deps/jemalloc/test/include/test/SFMT-params216091.h	39;"	d
POS1	deps/jemalloc/test/include/test/SFMT-params2281.h	39;"	d
POS1	deps/jemalloc/test/include/test/SFMT-params4253.h	39;"	d
POS1	deps/jemalloc/test/include/test/SFMT-params44497.h	39;"	d
POS1	deps/jemalloc/test/include/test/SFMT-params607.h	39;"	d
POS1	deps/jemalloc/test/include/test/SFMT-params86243.h	39;"	d
POS_A	deps/lua/src/lopcodes.h	45;"	d
POS_B	deps/lua/src/lopcodes.h	47;"	d
POS_Bx	deps/lua/src/lopcodes.h	48;"	d
POS_C	deps/lua/src/lopcodes.h	46;"	d
POS_OP	deps/lua/src/lopcodes.h	44;"	d
PREALIAS	deps/jemalloc/src/jemalloc.c	2511;"	d	file:
PREALIAS	deps/jemalloc/src/jemalloc.c	2533;"	d	file:
PREFIX	deps/hiredis/Makefile	/^PREFIX?=\/usr\/local$/;"	m
PREFIX	src/Makefile	/^PREFIX?=\/usr\/local$/;"	m
PREFIX_SIZE	src/zmalloc.c	52;"	d	file:
PREFIX_SIZE	src/zmalloc.c	56;"	d	file:
PREFIX_SIZE	src/zmalloc.c	58;"	d	file:
PRIVATE_NAMESPACE_GEN_HDRS	deps/jemalloc/Makefile	/^PRIVATE_NAMESPACE_GEN_HDRS := $(PRIVATE_NAMESPACE_HDRS:%.h=%.gen.h)$/;"	m
PRIVATE_NAMESPACE_HDRS	deps/jemalloc/Makefile	/^PRIVATE_NAMESPACE_HDRS := $(objroot)include\/jemalloc\/internal\/private_namespace.h $(objroot)include\/jemalloc\/internal\/private_namespace_jet.h$/;"	m
PRNG_A_32	deps/jemalloc/include/jemalloc/internal/prng.h	29;"	d
PRNG_A_64	deps/jemalloc/include/jemalloc/internal/prng.h	32;"	d
PRNG_C_32	deps/jemalloc/include/jemalloc/internal/prng.h	30;"	d
PRNG_C_64	deps/jemalloc/include/jemalloc/internal/prng.h	33;"	d
PROCESS_ITEM	tmp/getcpu.cpp	20;"	d	file:
PROF_BT_MAX	deps/jemalloc/include/jemalloc/internal/prof_types.h	25;"	d
PROF_CKH_MINITEMS	deps/jemalloc/include/jemalloc/internal/prof_types.h	28;"	d
PROF_DUMP_BUFSIZE	deps/jemalloc/include/jemalloc/internal/prof_types.h	31;"	d
PROF_NCTX_LOCKS	deps/jemalloc/include/jemalloc/internal/prof_types.h	40;"	d
PROF_NTDATA_LOCKS	deps/jemalloc/include/jemalloc/internal/prof_types.h	46;"	d
PROF_PREFIX_DEFAULT	deps/jemalloc/include/jemalloc/internal/prof_types.h	13;"	d
PROF_PREFIX_DEFAULT	deps/jemalloc/include/jemalloc/internal/prof_types.h	15;"	d
PROF_PRINTF_BUFSIZE	deps/jemalloc/include/jemalloc/internal/prof_types.h	34;"	d
PROF_TDATA_STATE_MAX	deps/jemalloc/include/jemalloc/internal/prof_types.h	54;"	d
PROF_TDATA_STATE_PURGATORY	deps/jemalloc/include/jemalloc/internal/prof_types.h	53;"	d
PROF_TDATA_STATE_REINCARNATED	deps/jemalloc/include/jemalloc/internal/prof_types.h	52;"	d
PROGNAME	deps/lua/src/luac.c	26;"	d	file:
PROPAGATE_AOF	src/server.h	464;"	d
PROPAGATE_NONE	src/server.h	463;"	d
PROPAGATE_REPL	src/server.h	465;"	d
PROTO_DUMP_LEN	src/networking.c	1811;"	d	file:
PROTO_INLINE_MAX_SIZE	src/server.h	155;"	d
PROTO_IOBUF_LEN	src/server.h	153;"	d
PROTO_MBULK_BIG_ARG	src/server.h	156;"	d
PROTO_REPLY_CHUNK_BYTES	src/server.h	154;"	d
PROTO_REQ_INLINE	src/server.h	306;"	d
PROTO_REQ_MULTIBULK	src/server.h	307;"	d
PROTO_SHARED_SELECT_CMDS	src/server.h	106;"	d
PSYNC_CONTINUE	src/replication.c	2066;"	d	file:
PSYNC_FULLRESYNC	src/replication.c	2067;"	d	file:
PSYNC_NOT_SUPPORTED	src/replication.c	2068;"	d	file:
PSYNC_TRY_LATER	src/replication.c	2069;"	d	file:
PSYNC_WAIT_REPLY	src/replication.c	2065;"	d	file:
PSYNC_WRITE_ERROR	src/replication.c	2064;"	d	file:
PSZ_no	deps/jemalloc/src/sz.c	13;"	d	file:
PSZ_no	deps/jemalloc/src/sz.c	8;"	d	file:
PSZ_yes	deps/jemalloc/src/sz.c	12;"	d	file:
PSZ_yes	deps/jemalloc/src/sz.c	6;"	d	file:
PT	src/Makefile	/^	echo OPT=$(OPT) >> .make-settings$/;"	m
PTRDIFF_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	193;"	d
PTRDIFF_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	196;"	d
PTRDIFF_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	192;"	d
PTRDIFF_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	195;"	d
PTR_CEILING	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	137;"	d
PTR_MASK	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	134;"	d
PendingEntryContext	src/defrag.c	/^} PendingEntryContext;$/;"	t	typeref:struct:__anon72	file:
Pfunc	deps/lua/src/ldo.h	/^typedef void (*Pfunc) (lua_State *L, void *ud);$/;"	t
PingReceiver	src/modules/hellocluster.c	/^void PingReceiver(RedisModuleCtx *ctx, const char *sender_id, uint8_t type, const unsigned char *payload, uint32_t len) {$/;"	f
PingallCommand_RedisCommand	src/modules/hellocluster.c	/^int PingallCommand_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
PongReceiver	src/modules/hellocluster.c	/^void PongReceiver(RedisModuleCtx *ctx, const char *sender_id, uint8_t type, const unsigned char *payload, uint32_t len) {$/;"	f
PrefixTable	src/tracking.c	/^rax *PrefixTable = NULL;$/;"	v
PrintCode	deps/lua/src/print.c	/^static void PrintCode(const Proto* f)$/;"	f	file:
PrintConstant	deps/lua/src/print.c	/^static void PrintConstant(const Proto* f, int i)$/;"	f	file:
PrintConstants	deps/lua/src/print.c	/^static void PrintConstants(const Proto* f)$/;"	f	file:
PrintFunction	deps/lua/src/print.c	/^void PrintFunction(const Proto* f, int full)$/;"	f
PrintFunction	deps/lua/src/print.c	18;"	d	file:
PrintHeader	deps/lua/src/print.c	/^static void PrintHeader(const Proto* f)$/;"	f	file:
PrintLocals	deps/lua/src/print.c	/^static void PrintLocals(const Proto* f)$/;"	f	file:
PrintString	deps/lua/src/print.c	/^static void PrintString(const TString* ts)$/;"	f	file:
PrintUpvalues	deps/lua/src/print.c	/^static void PrintUpvalues(const Proto* f)$/;"	f	file:
ProcessingEventsWhileBlocked	src/networking.c	/^int ProcessingEventsWhileBlocked = 0; \/* See processEventsWhileBlocked(). *\/$/;"	v
Protect	deps/lua/src/lvm.c	361;"	d	file:
Proto	deps/lua/src/lobject.h	/^typedef struct Proto {$/;"	s
Proto	deps/lua/src/lobject.h	/^} Proto;$/;"	t	typeref:struct:Proto
QD	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	18;"	d
QL_BM_BITS	src/quicklist.h	86;"	d
QL_BM_BITS	src/quicklist.h	91;"	d
QL_COMP_BITS	src/quicklist.h	85;"	d
QL_COMP_BITS	src/quicklist.h	90;"	d
QL_FILL_BITS	src/quicklist.h	84;"	d
QL_FILL_BITS	src/quicklist.h	89;"	d
QL_MAX_BM	src/quicklist.c	76;"	d	file:
QL_TEST_VERBOSE	src/quicklist.c	1539;"	d	file:
QU	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	17;"	d
QUANTUM	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	119;"	d
QUANTUM_CEILING	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	123;"	d
QUANTUM_MASK	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	120;"	d
QUICKLIST_HEAD	src/quicklist.h	134;"	d
QUICKLIST_NOCOMPRESS	src/quicklist.h	142;"	d
QUICKLIST_NODE_CONTAINER_NONE	src/quicklist.h	145;"	d
QUICKLIST_NODE_CONTAINER_ZIPLIST	src/quicklist.h	146;"	d
QUICKLIST_NODE_ENCODING_LZF	src/quicklist.h	139;"	d
QUICKLIST_NODE_ENCODING_RAW	src/quicklist.h	138;"	d
QUICKLIST_TAIL	src/quicklist.h	135;"	d
QUIET_CC	src/Makefile	/^QUIET_CC = @printf '    %b %b\\n' $(CCCOLOR)CC$(ENDCOLOR) $(SRCCOLOR)$@$(ENDCOLOR) 1>&2;$/;"	m
QUIET_INSTALL	src/Makefile	/^QUIET_INSTALL = @printf '    %b %b\\n' $(LINKCOLOR)INSTALL$(ENDCOLOR) $(BINCOLOR)$@$(ENDCOLOR) 1>&2;$/;"	m
QUIET_LINK	src/Makefile	/^QUIET_LINK = @printf '    %b %b\\n' $(LINKCOLOR)LINK$(ENDCOLOR) $(BINCOLOR)$@$(ENDCOLOR) 1>&2;$/;"	m
R	deps/lua/Makefile	/^R= 5.1.5$/;"	m
R	tests/instances.tcl	/^proc R {n args} {$/;"	p
R0	src/sha1.c	47;"	d	file:
R1	src/sha1.c	48;"	d	file:
R2	src/sha1.c	49;"	d	file:
R3	src/sha1.c	50;"	d	file:
R4	src/sha1.c	51;"	d	file:
RA	deps/lua/src/lvm.c	347;"	d	file:
RADIANS_PER_DEGREE	deps/lua/src/lmathlib.c	22;"	d	file:
RADIUS_COORDS	src/geo.c	502;"	d	file:
RADIUS_MEMBER	src/geo.c	503;"	d	file:
RADIUS_NOSTORE	src/geo.c	504;"	d	file:
RANDPTR_INITIAL_SIZE	src/redis-benchmark.c	65;"	d	file:
RANGE	deps/jemalloc/test/integration/rallocx.c	111;"	d	file:
RANGEISZERO	src/geohash.h	44;"	d
RANGEPISZERO	src/geohash.h	45;"	d
RANGE_STEP	deps/jemalloc/test/unit/prng.c	143;"	d	file:
RANGE_STEP	deps/jemalloc/test/unit/prng.c	163;"	d	file:
RANGE_STEP	deps/jemalloc/test/unit/prng.c	183;"	d	file:
RANLIB	deps/lua/Makefile	/^RANLIB= ranlib$/;"	m
RANLIB	deps/lua/src/Makefile	/^RANLIB= ranlib$/;"	m
RATIO	src/geohash_helper.c	45;"	d	file:
RAX_ALLOC_H	src/rax_malloc.h	39;"	d
RAX_H	src/rax.h	32;"	d
RAX_ITER_EOF	src/rax.h	172;"	d
RAX_ITER_JUST_SEEKED	src/rax.h	169;"	d
RAX_ITER_SAFE	src/rax.h	173;"	d
RAX_ITER_STATIC_LEN	src/rax.h	168;"	d
RAX_MALLOC_INCLUDE	src/rax.c	42;"	d	file:
RAX_NODE_MAX_SIZE	src/rax.h	97;"	d
RAX_STACK_STATIC_ITEMS	src/rax.h	142;"	d
RB	deps/lua/src/lvm.c	349;"	d	file:
RB_COMPACT	deps/jemalloc/include/jemalloc/internal/rb.h	26;"	d
RB_H_	deps/jemalloc/include/jemalloc/internal/rb.h	23;"	d
RC	deps/lua/src/lvm.c	350;"	d	file:
RCVBUF_INIT_LEN	src/cluster.c	140;"	d	file:
RCVBUF_MAX_PREALLOC	src/cluster.c	141;"	d	file:
RDBFLAGS_ALLOW_DUP	src/rdb.h	128;"	d
RDBFLAGS_AOF_PREAMBLE	src/rdb.h	126;"	d
RDBFLAGS_NONE	src/rdb.h	125;"	d
RDBFLAGS_REPLICATION	src/rdb.h	127;"	d
RDBGeneratedByReplication	src/replication.c	/^int RDBGeneratedByReplication = 0;$/;"	v
RDB_14BITLEN	src/rdb.h	58;"	d
RDB_32BITLEN	src/rdb.h	59;"	d
RDB_64BITLEN	src/rdb.h	60;"	d
RDB_6BITLEN	src/rdb.h	57;"	d
RDB_CHECK_DOING_CHECK_SUM	src/redis-check-rdb.c	61;"	d	file:
RDB_CHECK_DOING_READ_AUX	src/redis-check-rdb.c	63;"	d	file:
RDB_CHECK_DOING_READ_EXPIRE	src/redis-check-rdb.c	58;"	d	file:
RDB_CHECK_DOING_READ_KEY	src/redis-check-rdb.c	59;"	d	file:
RDB_CHECK_DOING_READ_LEN	src/redis-check-rdb.c	62;"	d	file:
RDB_CHECK_DOING_READ_MODULE_AUX	src/redis-check-rdb.c	64;"	d	file:
RDB_CHECK_DOING_READ_OBJECT_VALUE	src/redis-check-rdb.c	60;"	d	file:
RDB_CHECK_DOING_READ_TYPE	src/redis-check-rdb.c	57;"	d	file:
RDB_CHECK_DOING_START	src/redis-check-rdb.c	56;"	d	file:
RDB_CHILD_TYPE_DISK	src/server.h	477;"	d
RDB_CHILD_TYPE_NONE	src/server.h	476;"	d
RDB_CHILD_TYPE_SOCKET	src/server.h	478;"	d
RDB_ENCVAL	src/rdb.h	61;"	d
RDB_ENC_INT16	src/rdb.h	68;"	d
RDB_ENC_INT32	src/rdb.h	69;"	d
RDB_ENC_INT8	src/rdb.h	67;"	d
RDB_ENC_LZF	src/rdb.h	70;"	d
RDB_EOF_MARK_SIZE	src/redis-cli.c	7233;"	d	file:
RDB_EOF_MARK_SIZE	src/server.h	114;"	d
RDB_LENERR	src/rdb.h	62;"	d
RDB_LOAD_ENC	src/rdb.h	120;"	d
RDB_LOAD_NONE	src/rdb.h	119;"	d
RDB_LOAD_PLAIN	src/rdb.h	121;"	d
RDB_LOAD_SDS	src/rdb.h	122;"	d
RDB_MODULE_OPCODE_DOUBLE	src/rdb.h	115;"	d
RDB_MODULE_OPCODE_EOF	src/rdb.h	111;"	d
RDB_MODULE_OPCODE_FLOAT	src/rdb.h	114;"	d
RDB_MODULE_OPCODE_SINT	src/rdb.h	112;"	d
RDB_MODULE_OPCODE_STRING	src/rdb.h	116;"	d
RDB_MODULE_OPCODE_UINT	src/rdb.h	113;"	d
RDB_OPCODE_AUX	src/rdb.h	103;"	d
RDB_OPCODE_EOF	src/rdb.h	108;"	d
RDB_OPCODE_EXPIRETIME	src/rdb.h	106;"	d
RDB_OPCODE_EXPIRETIME_MS	src/rdb.h	105;"	d
RDB_OPCODE_FREQ	src/rdb.h	102;"	d
RDB_OPCODE_IDLE	src/rdb.h	101;"	d
RDB_OPCODE_MODULE_AUX	src/rdb.h	100;"	d
RDB_OPCODE_RESIZEDB	src/rdb.h	104;"	d
RDB_OPCODE_SELECTDB	src/rdb.h	107;"	d
RDB_SAVE_INFO_INIT	src/server.h	1113;"	d
RDB_TYPE_HASH	src/rdb.h	79;"	d
RDB_TYPE_HASH_ZIPLIST	src/rdb.h	91;"	d
RDB_TYPE_HASH_ZIPMAP	src/rdb.h	87;"	d
RDB_TYPE_LIST	src/rdb.h	76;"	d
RDB_TYPE_LIST_QUICKLIST	src/rdb.h	92;"	d
RDB_TYPE_LIST_ZIPLIST	src/rdb.h	88;"	d
RDB_TYPE_MODULE	src/rdb.h	81;"	d
RDB_TYPE_MODULE_2	src/rdb.h	82;"	d
RDB_TYPE_SET	src/rdb.h	77;"	d
RDB_TYPE_SET_INTSET	src/rdb.h	89;"	d
RDB_TYPE_STREAM_LISTPACKS	src/rdb.h	93;"	d
RDB_TYPE_STRING	src/rdb.h	75;"	d
RDB_TYPE_ZSET	src/rdb.h	78;"	d
RDB_TYPE_ZSET_2	src/rdb.h	80;"	d
RDB_TYPE_ZSET_ZIPLIST	src/rdb.h	90;"	d
RDB_VERSION	src/rdb.h	41;"	d
READ	deps/jemalloc/src/ctl.c	1319;"	d	file:
READONLY	deps/jemalloc/src/ctl.c	1297;"	d	file:
READ_ARENA_MUTEX_PROF_DATA	deps/jemalloc/src/arena.c	175;"	d	file:
READ_ARENA_MUTEX_PROF_DATA	deps/jemalloc/src/arena.c	197;"	d	file:
READ_GLOBAL_MUTEX_PROF_DATA	deps/jemalloc/src/ctl.c	971;"	d	file:
READ_GLOBAL_MUTEX_PROF_DATA	deps/jemalloc/src/ctl.c	993;"	d	file:
READ_XOR_WRITE	deps/jemalloc/src/ctl.c	1311;"	d	file:
REAL_CFLAGS	deps/hiredis/Makefile	/^REAL_CFLAGS=$(OPTIMIZATION) -fPIC $(CPPFLAGS) $(CFLAGS) $(WARNINGS) $(DEBUG_FLAGS)$/;"	m
REAL_LDFLAGS	deps/hiredis/Makefile	/^REAL_LDFLAGS=$(LDFLAGS)$/;"	m
RECTANGLE_TYPE	src/geohash.h	94;"	d
REDISMODULE_AM_DICT	src/module.c	124;"	d	file:
REDISMODULE_AM_FREED	src/module.c	123;"	d	file:
REDISMODULE_AM_INFO	src/module.c	125;"	d	file:
REDISMODULE_AM_KEY	src/module.c	120;"	d	file:
REDISMODULE_AM_REPLY	src/module.c	122;"	d	file:
REDISMODULE_AM_STRING	src/module.c	121;"	d	file:
REDISMODULE_API	src/redismodule.h	571;"	d
REDISMODULE_APIVER_1	src/redismodule.h	15;"	d
REDISMODULE_ARGV_NO_AOF	src/module.c	373;"	d	file:
REDISMODULE_ARGV_NO_REPLICAS	src/module.c	374;"	d	file:
REDISMODULE_ARGV_REPLICATE	src/module.c	372;"	d	file:
REDISMODULE_ATTR	src/redismodule.h	576;"	d
REDISMODULE_ATTR_COMMON	src/redismodule.h	498;"	d
REDISMODULE_ATTR_COMMON	src/redismodule.h	500;"	d
REDISMODULE_ATTR_PRINTF	src/redismodule.h	490;"	d
REDISMODULE_ATTR_PRINTF	src/redismodule.h	492;"	d
REDISMODULE_ATTR_UNUSED	src/redismodule.h	482;"	d
REDISMODULE_ATTR_UNUSED	src/redismodule.h	484;"	d
REDISMODULE_AUX_AFTER_RDB	src/redismodule.h	205;"	d
REDISMODULE_AUX_AFTER_RDB	src/server.h	546;"	d
REDISMODULE_AUX_BEFORE_RDB	src/redismodule.h	204;"	d
REDISMODULE_AUX_BEFORE_RDB	src/server.h	545;"	d
REDISMODULE_CLIENTINFO_FLAG_BLOCKED	src/redismodule.h	370;"	d
REDISMODULE_CLIENTINFO_FLAG_MULTI	src/redismodule.h	373;"	d
REDISMODULE_CLIENTINFO_FLAG_PUBSUB	src/redismodule.h	369;"	d
REDISMODULE_CLIENTINFO_FLAG_SSL	src/redismodule.h	368;"	d
REDISMODULE_CLIENTINFO_FLAG_TRACKING	src/redismodule.h	371;"	d
REDISMODULE_CLIENTINFO_FLAG_UNIXSOCKET	src/redismodule.h	372;"	d
REDISMODULE_CLIENTINFO_VERSION	src/redismodule.h	390;"	d
REDISMODULE_CLUSTER_FLAG_NONE	src/redismodule.h	191;"	d
REDISMODULE_CLUSTER_FLAG_NO_FAILOVER	src/redismodule.h	192;"	d
REDISMODULE_CLUSTER_FLAG_NO_REDIRECTION	src/redismodule.h	193;"	d
REDISMODULE_CMDFILTER_NOSELF	src/redismodule.h	216;"	d
REDISMODULE_CORE	src/server.h	78;"	d
REDISMODULE_CRON_LOOP_VERSION	src/redismodule.h	440;"	d
REDISMODULE_CTX_AUTO_MEMORY	src/module.c	189;"	d	file:
REDISMODULE_CTX_BLOCKED_DISCONNECTED	src/module.c	194;"	d	file:
REDISMODULE_CTX_BLOCKED_REPLY	src/module.c	191;"	d	file:
REDISMODULE_CTX_BLOCKED_TIMEOUT	src/module.c	192;"	d	file:
REDISMODULE_CTX_FLAGS_ACTIVE_CHILD	src/redismodule.h	133;"	d
REDISMODULE_CTX_FLAGS_AOF	src/redismodule.h	103;"	d
REDISMODULE_CTX_FLAGS_CLUSTER	src/redismodule.h	101;"	d
REDISMODULE_CTX_FLAGS_DENY_BLOCKING	src/redismodule.h	140;"	d
REDISMODULE_CTX_FLAGS_EVICT	src/redismodule.h	109;"	d
REDISMODULE_CTX_FLAGS_IS_CHILD	src/redismodule.h	137;"	d
REDISMODULE_CTX_FLAGS_LOADING	src/redismodule.h	117;"	d
REDISMODULE_CTX_FLAGS_LUA	src/redismodule.h	91;"	d
REDISMODULE_CTX_FLAGS_MASTER	src/redismodule.h	95;"	d
REDISMODULE_CTX_FLAGS_MAXMEMORY	src/redismodule.h	107;"	d
REDISMODULE_CTX_FLAGS_MULTI	src/redismodule.h	93;"	d
REDISMODULE_CTX_FLAGS_MULTI_DIRTY	src/redismodule.h	135;"	d
REDISMODULE_CTX_FLAGS_OOM	src/redismodule.h	111;"	d
REDISMODULE_CTX_FLAGS_OOM_WARNING	src/redismodule.h	113;"	d
REDISMODULE_CTX_FLAGS_RDB	src/redismodule.h	105;"	d
REDISMODULE_CTX_FLAGS_READONLY	src/redismodule.h	99;"	d
REDISMODULE_CTX_FLAGS_REPLICATED	src/redismodule.h	115;"	d
REDISMODULE_CTX_FLAGS_REPLICA_IS_CONNECTING	src/redismodule.h	127;"	d
REDISMODULE_CTX_FLAGS_REPLICA_IS_ONLINE	src/redismodule.h	131;"	d
REDISMODULE_CTX_FLAGS_REPLICA_IS_STALE	src/redismodule.h	124;"	d
REDISMODULE_CTX_FLAGS_REPLICA_IS_TRANSFERRING	src/redismodule.h	129;"	d
REDISMODULE_CTX_FLAGS_SLAVE	src/redismodule.h	97;"	d
REDISMODULE_CTX_INIT	src/module.c	188;"	d	file:
REDISMODULE_CTX_KEYS_POS_REQUEST	src/module.c	190;"	d	file:
REDISMODULE_CTX_MODULE_COMMAND_CALL	src/module.c	195;"	d	file:
REDISMODULE_CTX_MULTI_EMITTED	src/module.c	196;"	d	file:
REDISMODULE_CTX_THREAD_SAFE	src/module.c	193;"	d	file:
REDISMODULE_ERR	src/redismodule.h	12;"	d
REDISMODULE_ERRORMSG_WRONGTYPE	src/redismodule.h	177;"	d
REDISMODULE_EVENT_CLIENT_CHANGE	src/redismodule.h	232;"	d
REDISMODULE_EVENT_CRON_LOOP	src/redismodule.h	236;"	d
REDISMODULE_EVENT_FLUSHDB	src/redismodule.h	230;"	d
REDISMODULE_EVENT_FORK_CHILD	src/redismodule.h	241;"	d
REDISMODULE_EVENT_LOADING	src/redismodule.h	231;"	d
REDISMODULE_EVENT_LOADING_PROGRESS	src/redismodule.h	238;"	d
REDISMODULE_EVENT_MASTER_LINK_CHANGE	src/redismodule.h	235;"	d
REDISMODULE_EVENT_MODULE_CHANGE	src/redismodule.h	237;"	d
REDISMODULE_EVENT_PERSISTENCE	src/redismodule.h	229;"	d
REDISMODULE_EVENT_REPLICATION_ROLE_CHANGED	src/redismodule.h	228;"	d
REDISMODULE_EVENT_REPLICA_CHANGE	src/redismodule.h	234;"	d
REDISMODULE_EVENT_REPLROLECHANGED_NOW_MASTER	src/redismodule.h	338;"	d
REDISMODULE_EVENT_REPLROLECHANGED_NOW_REPLICA	src/redismodule.h	339;"	d
REDISMODULE_EVENT_REPL_BACKUP	src/redismodule.h	240;"	d
REDISMODULE_EVENT_SHUTDOWN	src/redismodule.h	233;"	d
REDISMODULE_EVENT_SWAPDB	src/redismodule.h	239;"	d
REDISMODULE_EXPERIMENTAL_API	src/modules/helloacl.c	34;"	d	file:
REDISMODULE_EXPERIMENTAL_API	src/modules/helloblock.c	34;"	d	file:
REDISMODULE_EXPERIMENTAL_API	src/modules/hellocluster.c	33;"	d	file:
REDISMODULE_EXPERIMENTAL_API	src/modules/hellodict.c	36;"	d	file:
REDISMODULE_EXPERIMENTAL_API	src/modules/hellohook.c	33;"	d	file:
REDISMODULE_EXPERIMENTAL_API	src/modules/hellotimer.c	33;"	d	file:
REDISMODULE_EXPERIMENTAL_API	src/modules/testmodule.c	33;"	d	file:
REDISMODULE_EXPERIMENTAL_API	tests/modules/auth.c	1;"	d	file:
REDISMODULE_EXPERIMENTAL_API	tests/modules/blockedclient.c	1;"	d	file:
REDISMODULE_EXPERIMENTAL_API	tests/modules/blockonbackground.c	1;"	d	file:
REDISMODULE_EXPERIMENTAL_API	tests/modules/blockonkeys.c	1;"	d	file:
REDISMODULE_EXPERIMENTAL_API	tests/modules/commandfilter.c	1;"	d	file:
REDISMODULE_EXPERIMENTAL_API	tests/modules/defragtest.c	4;"	d	file:
REDISMODULE_EXPERIMENTAL_API	tests/modules/fork.c	1;"	d	file:
REDISMODULE_EXPERIMENTAL_API	tests/modules/getkeys.c	1;"	d	file:
REDISMODULE_EXPERIMENTAL_API	tests/modules/keyspace_events.c	33;"	d	file:
REDISMODULE_EXPERIMENTAL_API	tests/modules/misc.c	1;"	d	file:
REDISMODULE_EXPERIMENTAL_API	tests/modules/propagate.c	40;"	d	file:
REDISMODULE_EXPERIMENTAL_API	tests/modules/timer.c	2;"	d	file:
REDISMODULE_EXPERIMENTAL_API_VERSION	src/redismodule.h	782;"	d
REDISMODULE_FLUSHINFO_VERSION	src/redismodule.h	418;"	d
REDISMODULE_GET_API	src/redismodule.h	566;"	d
REDISMODULE_H	src/redismodule.h	2;"	d
REDISMODULE_HASH_CFIELDS	src/redismodule.h	69;"	d
REDISMODULE_HASH_COUNT_ALL	src/redismodule.h	71;"	d
REDISMODULE_HASH_DELETE	src/redismodule.h	174;"	d
REDISMODULE_HASH_EXISTS	src/redismodule.h	70;"	d
REDISMODULE_HASH_NONE	src/redismodule.h	66;"	d
REDISMODULE_HASH_NX	src/redismodule.h	67;"	d
REDISMODULE_HASH_XX	src/redismodule.h	68;"	d
REDISMODULE_KEYTYPE_EMPTY	src/redismodule.h	33;"	d
REDISMODULE_KEYTYPE_HASH	src/redismodule.h	36;"	d
REDISMODULE_KEYTYPE_LIST	src/redismodule.h	35;"	d
REDISMODULE_KEYTYPE_MODULE	src/redismodule.h	39;"	d
REDISMODULE_KEYTYPE_SET	src/redismodule.h	37;"	d
REDISMODULE_KEYTYPE_STREAM	src/redismodule.h	40;"	d
REDISMODULE_KEYTYPE_STRING	src/redismodule.h	34;"	d
REDISMODULE_KEYTYPE_ZSET	src/redismodule.h	38;"	d
REDISMODULE_LIST_HEAD	src/redismodule.h	29;"	d
REDISMODULE_LIST_TAIL	src/redismodule.h	30;"	d
REDISMODULE_LOADING_PROGRESS_VERSION	src/redismodule.h	450;"	d
REDISMODULE_LOGLEVEL_DEBUG	src/redismodule.h	198;"	d
REDISMODULE_LOGLEVEL_NOTICE	src/redismodule.h	200;"	d
REDISMODULE_LOGLEVEL_VERBOSE	src/redismodule.h	199;"	d
REDISMODULE_LOGLEVEL_WARNING	src/redismodule.h	201;"	d
REDISMODULE_MODULE_CHANGE_VERSION	src/redismodule.h	429;"	d
REDISMODULE_NEGATIVE_INFINITE	src/redismodule.h	180;"	d
REDISMODULE_NODE_FAIL	src/redismodule.h	188;"	d
REDISMODULE_NODE_ID_LEN	src/redismodule.h	183;"	d
REDISMODULE_NODE_MASTER	src/redismodule.h	185;"	d
REDISMODULE_NODE_MYSELF	src/redismodule.h	184;"	d
REDISMODULE_NODE_NOFAILOVER	src/redismodule.h	189;"	d
REDISMODULE_NODE_PFAIL	src/redismodule.h	187;"	d
REDISMODULE_NODE_SLAVE	src/redismodule.h	186;"	d
REDISMODULE_NOTIFY_ALL	src/redismodule.h	170;"	d
REDISMODULE_NOTIFY_EVICTED	src/redismodule.h	159;"	d
REDISMODULE_NOTIFY_EXPIRED	src/redismodule.h	158;"	d
REDISMODULE_NOTIFY_GENERIC	src/redismodule.h	152;"	d
REDISMODULE_NOTIFY_HASH	src/redismodule.h	156;"	d
REDISMODULE_NOTIFY_KEYEVENT	src/redismodule.h	151;"	d
REDISMODULE_NOTIFY_KEYSPACE	src/redismodule.h	150;"	d
REDISMODULE_NOTIFY_KEY_MISS	src/redismodule.h	161;"	d
REDISMODULE_NOTIFY_LIST	src/redismodule.h	154;"	d
REDISMODULE_NOTIFY_LOADED	src/redismodule.h	162;"	d
REDISMODULE_NOTIFY_MODULE	src/redismodule.h	163;"	d
REDISMODULE_NOTIFY_SET	src/redismodule.h	155;"	d
REDISMODULE_NOTIFY_STREAM	src/redismodule.h	160;"	d
REDISMODULE_NOTIFY_STRING	src/redismodule.h	153;"	d
REDISMODULE_NOTIFY_ZSET	src/redismodule.h	157;"	d
REDISMODULE_NOT_USED	src/redismodule.h	195;"	d
REDISMODULE_NO_EXPIRE	src/redismodule.h	54;"	d
REDISMODULE_OK	src/redismodule.h	11;"	d
REDISMODULE_OPEN_KEY_NOTOUCH	src/redismodule.h	27;"	d
REDISMODULE_OPTIONS_HANDLE_IO_ERRORS	src/redismodule.h	219;"	d
REDISMODULE_OPTION_NO_IMPLICIT_SIGNAL_MODIFIED	src/redismodule.h	223;"	d
REDISMODULE_POOL_ALLOC_ALIGN	src/module.c	141;"	d	file:
REDISMODULE_POOL_ALLOC_MIN_SIZE	src/module.c	140;"	d	file:
REDISMODULE_POSITIVE_INFINITE	src/redismodule.h	179;"	d
REDISMODULE_POSTPONED_ARRAY_LEN	src/redismodule.h	51;"	d
REDISMODULE_READ	src/redismodule.h	22;"	d
REDISMODULE_REPLICATIONINFO_VERSION	src/redismodule.h	402;"	d
REDISMODULE_REPLYFLAG_NESTED	src/module.c	251;"	d	file:
REDISMODULE_REPLYFLAG_NONE	src/module.c	249;"	d	file:
REDISMODULE_REPLYFLAG_TOPARSE	src/module.c	250;"	d	file:
REDISMODULE_REPLY_ARRAY	src/redismodule.h	47;"	d
REDISMODULE_REPLY_ERROR	src/redismodule.h	45;"	d
REDISMODULE_REPLY_INTEGER	src/redismodule.h	46;"	d
REDISMODULE_REPLY_NULL	src/redismodule.h	48;"	d
REDISMODULE_REPLY_STRING	src/redismodule.h	44;"	d
REDISMODULE_REPLY_UNKNOWN	src/redismodule.h	43;"	d
REDISMODULE_STREAM_ADD_AUTOID	src/redismodule.h	80;"	d
REDISMODULE_STREAM_ITERATOR_EXCLUSIVE	src/redismodule.h	82;"	d
REDISMODULE_STREAM_ITERATOR_REVERSE	src/redismodule.h	83;"	d
REDISMODULE_STREAM_TRIM_APPROX	src/redismodule.h	85;"	d
REDISMODULE_SUBEVENT_CLIENT_CHANGE_CONNECTED	src/redismodule.h	326;"	d
REDISMODULE_SUBEVENT_CLIENT_CHANGE_DISCONNECTED	src/redismodule.h	327;"	d
REDISMODULE_SUBEVENT_FLUSHDB_END	src/redismodule.h	343;"	d
REDISMODULE_SUBEVENT_FLUSHDB_START	src/redismodule.h	342;"	d
REDISMODULE_SUBEVENT_FORK_CHILD_BORN	src/redismodule.h	359;"	d
REDISMODULE_SUBEVENT_FORK_CHILD_DIED	src/redismodule.h	360;"	d
REDISMODULE_SUBEVENT_LOADING_AOF_START	src/redismodule.h	320;"	d
REDISMODULE_SUBEVENT_LOADING_ENDED	src/redismodule.h	322;"	d
REDISMODULE_SUBEVENT_LOADING_FAILED	src/redismodule.h	323;"	d
REDISMODULE_SUBEVENT_LOADING_PROGRESS_AOF	src/redismodule.h	351;"	d
REDISMODULE_SUBEVENT_LOADING_PROGRESS_RDB	src/redismodule.h	350;"	d
REDISMODULE_SUBEVENT_LOADING_RDB_START	src/redismodule.h	319;"	d
REDISMODULE_SUBEVENT_LOADING_REPL_START	src/redismodule.h	321;"	d
REDISMODULE_SUBEVENT_MASTER_LINK_DOWN	src/redismodule.h	331;"	d
REDISMODULE_SUBEVENT_MASTER_LINK_UP	src/redismodule.h	330;"	d
REDISMODULE_SUBEVENT_MODULE_LOADED	src/redismodule.h	346;"	d
REDISMODULE_SUBEVENT_MODULE_UNLOADED	src/redismodule.h	347;"	d
REDISMODULE_SUBEVENT_PERSISTENCE_AOF_START	src/redismodule.h	313;"	d
REDISMODULE_SUBEVENT_PERSISTENCE_ENDED	src/redismodule.h	315;"	d
REDISMODULE_SUBEVENT_PERSISTENCE_FAILED	src/redismodule.h	316;"	d
REDISMODULE_SUBEVENT_PERSISTENCE_RDB_START	src/redismodule.h	312;"	d
REDISMODULE_SUBEVENT_PERSISTENCE_SYNC_RDB_START	src/redismodule.h	314;"	d
REDISMODULE_SUBEVENT_REPLICA_CHANGE_OFFLINE	src/redismodule.h	335;"	d
REDISMODULE_SUBEVENT_REPLICA_CHANGE_ONLINE	src/redismodule.h	334;"	d
REDISMODULE_SUBEVENT_REPL_BACKUP_CREATE	src/redismodule.h	354;"	d
REDISMODULE_SUBEVENT_REPL_BACKUP_DISCARD	src/redismodule.h	356;"	d
REDISMODULE_SUBEVENT_REPL_BACKUP_RESTORE	src/redismodule.h	355;"	d
REDISMODULE_SWAPDBINFO_VERSION	src/redismodule.h	462;"	d
REDISMODULE_TYPE_ENCVER	src/server.h	541;"	d
REDISMODULE_TYPE_ENCVER_BITS	src/server.h	539;"	d
REDISMODULE_TYPE_ENCVER_MASK	src/server.h	540;"	d
REDISMODULE_TYPE_METHOD_VERSION	src/redismodule.h	19;"	d
REDISMODULE_TYPE_SIGN	src/server.h	542;"	d
REDISMODULE_WRITE	src/redismodule.h	23;"	d
REDISMODULE_ZADD_ADDED	src/redismodule.h	59;"	d
REDISMODULE_ZADD_GT	src/redismodule.h	62;"	d
REDISMODULE_ZADD_LT	src/redismodule.h	63;"	d
REDISMODULE_ZADD_NOP	src/redismodule.h	61;"	d
REDISMODULE_ZADD_NX	src/redismodule.h	58;"	d
REDISMODULE_ZADD_UPDATED	src/redismodule.h	60;"	d
REDISMODULE_ZADD_XX	src/redismodule.h	57;"	d
REDISMODULE_ZSET_RANGE_LEX	src/module.c	231;"	d	file:
REDISMODULE_ZSET_RANGE_NONE	src/module.c	230;"	d	file:
REDISMODULE_ZSET_RANGE_POS	src/module.c	233;"	d	file:
REDISMODULE_ZSET_RANGE_SCORE	src/module.c	232;"	d	file:
REDIS_AGGR_MAX	src/t_zset.c	2344;"	d	file:
REDIS_AGGR_MIN	src/t_zset.c	2343;"	d	file:
REDIS_AGGR_SUM	src/t_zset.c	2342;"	d	file:
REDIS_ATOMIC_API	src/atomicvar.h	106;"	d
REDIS_ATOMIC_API	src/atomicvar.h	127;"	d
REDIS_ATOMIC_API	src/atomicvar.h	152;"	d
REDIS_AUTOSYNC_BYTES	src/server.h	158;"	d
REDIS_BENCHMARK_NAME	src/Makefile	/^REDIS_BENCHMARK_NAME=redis-benchmark$(PROG_SUFFIX)$/;"	m
REDIS_BENCHMARK_OBJ	src/Makefile	/^REDIS_BENCHMARK_OBJ=ae.o anet.o redis-benchmark.o adlist.o dict.o zmalloc.o release.o crcspeed.o crc64.o siphash.o crc16.o monotonic.o cli_common.o mt19937-64.o$/;"	m
REDIS_BLOCK	deps/hiredis/hiredis.h	55;"	d
REDIS_BUILD_ID	src/release.h	3;"	d
REDIS_CC	src/Makefile	/^REDIS_CC=$(QUIET_CC)$(CC) $(FINAL_CFLAGS)$/;"	m
REDIS_CHECK_AOF_NAME	src/Makefile	/^REDIS_CHECK_AOF_NAME=redis-check-aof$(PROG_SUFFIX)$/;"	m
REDIS_CHECK_RDB_NAME	src/Makefile	/^REDIS_CHECK_RDB_NAME=redis-check-rdb$(PROG_SUFFIX)$/;"	m
REDIS_CLI_AUTH_ENV	src/redis-cli.c	78;"	d	file:
REDIS_CLI_CLUSTER_YES_ENV	src/redis-cli.c	79;"	d	file:
REDIS_CLI_DEFAULT_PIPE_TIMEOUT	src/redis-cli.c	73;"	d	file:
REDIS_CLI_HISTFILE_DEFAULT	src/redis-cli.c	75;"	d	file:
REDIS_CLI_HISTFILE_ENV	src/redis-cli.c	74;"	d	file:
REDIS_CLI_KEEPALIVE_INTERVAL	src/redis-cli.c	72;"	d	file:
REDIS_CLI_NAME	src/Makefile	/^REDIS_CLI_NAME=redis-cli$(PROG_SUFFIX)$/;"	m
REDIS_CLI_OBJ	src/Makefile	/^REDIS_CLI_OBJ=anet.o adlist.o dict.o redis-cli.o zmalloc.o release.o ae.o crcspeed.o crc64.o siphash.o crc16.o monotonic.o cli_common.o mt19937-64.o$/;"	m
REDIS_CLI_RCFILE_DEFAULT	src/redis-cli.c	77;"	d	file:
REDIS_CLI_RCFILE_ENV	src/redis-cli.c	76;"	d	file:
REDIS_COMPARE_BINARY	src/object.c	530;"	d	file:
REDIS_COMPARE_COLL	src/object.c	531;"	d	file:
REDIS_CONFIG_REWRITE_SIGNATURE	src/config.c	1056;"	d	file:
REDIS_CONNECTED	deps/hiredis/hiredis.h	59;"	d
REDIS_CONNECT_RETRIES	deps/hiredis/hiredis.h	93;"	d
REDIS_CONN_TCP	deps/hiredis/hiredis.h	/^    REDIS_CONN_TCP,$/;"	e	enum:redisConnectionType
REDIS_CONN_UNIX	deps/hiredis/hiredis.h	/^    REDIS_CONN_UNIX,$/;"	e	enum:redisConnectionType
REDIS_CONN_USERFD	deps/hiredis/hiredis.h	/^    REDIS_CONN_USERFD$/;"	e	enum:redisConnectionType
REDIS_DISCONNECTING	deps/hiredis/hiredis.h	65;"	d
REDIS_EL_TIMER	deps/hiredis/async_private.h	60;"	d
REDIS_ERR	deps/hiredis/read.h	37;"	d
REDIS_ERR_EOF	deps/hiredis/read.h	45;"	d
REDIS_ERR_IO	deps/hiredis/read.h	44;"	d
REDIS_ERR_OOM	deps/hiredis/read.h	47;"	d
REDIS_ERR_OTHER	deps/hiredis/read.h	49;"	d
REDIS_ERR_PROTOCOL	deps/hiredis/read.h	46;"	d
REDIS_ERR_TIMEOUT	deps/hiredis/read.h	48;"	d
REDIS_FREEING	deps/hiredis/hiredis.h	69;"	d
REDIS_GIT_DIRTY	src/release.h	2;"	d
REDIS_GIT_SHA1	src/release.h	1;"	d
REDIS_INSTALL	src/Makefile	/^REDIS_INSTALL=$(QUIET_INSTALL)$(INSTALL)$/;"	m
REDIS_INVALID_FD	deps/hiredis/hiredis.h	161;"	d
REDIS_INVALID_FD	deps/hiredis/hiredis.h	168;"	d
REDIS_IN_CALLBACK	deps/hiredis/hiredis.h	72;"	d
REDIS_KEEPALIVE_INTERVAL	deps/hiredis/hiredis.h	89;"	d
REDIS_LD	src/Makefile	/^REDIS_LD=$(QUIET_LINK)$(CC) $(FINAL_LDFLAGS)$/;"	m
REDIS_LIBEVENT_DELETED	deps/hiredis/adapters/libevent.h	37;"	d
REDIS_LIBEVENT_ENTERED	deps/hiredis/adapters/libevent.h	38;"	d
REDIS_LRAND48_MAX	src/rand.h	36;"	d
REDIS_MONITORING	deps/hiredis/hiredis.h	78;"	d
REDIS_NO_AUTO_FREE	deps/hiredis/hiredis.h	87;"	d
REDIS_OK	deps/hiredis/read.h	38;"	d
REDIS_OPTIONS_SET_PRIVDATA	deps/hiredis/hiredis.h	220;"	d
REDIS_OPTIONS_SET_TCP	deps/hiredis/hiredis.h	211;"	d
REDIS_OPTIONS_SET_UNIX	deps/hiredis/hiredis.h	216;"	d
REDIS_OPT_NOAUTOFREE	deps/hiredis/hiredis.h	150;"	d
REDIS_OPT_NONBLOCK	deps/hiredis/hiredis.h	143;"	d
REDIS_OPT_NO_PUSH_AUTOFREE	deps/hiredis/hiredis.h	153;"	d
REDIS_OPT_REUSEADDR	deps/hiredis/hiredis.h	144;"	d
REDIS_PORT	deps/hiredis/Makefile	/^REDIS_PORT=56379$/;"	m
REDIS_RANDOM_H	src/rand.h	31;"	d
REDIS_READER_MAX_ARRAY_ELEMENTS	deps/hiredis/read.h	70;"	d
REDIS_READER_MAX_BUF	deps/hiredis/read.h	67;"	d
REDIS_READER_STACK_SIZE	deps/hiredis/read.c	51;"	d	file:
REDIS_REPLY_ARRAY	deps/hiredis/read.h	52;"	d
REDIS_REPLY_ATTR	deps/hiredis/read.h	61;"	d
REDIS_REPLY_BIGNUM	deps/hiredis/read.h	63;"	d
REDIS_REPLY_BOOL	deps/hiredis/read.h	58;"	d
REDIS_REPLY_DOUBLE	deps/hiredis/read.h	57;"	d
REDIS_REPLY_ERROR	deps/hiredis/read.h	56;"	d
REDIS_REPLY_INTEGER	deps/hiredis/read.h	53;"	d
REDIS_REPLY_MAP	deps/hiredis/read.h	59;"	d
REDIS_REPLY_NIL	deps/hiredis/read.h	54;"	d
REDIS_REPLY_PUSH	deps/hiredis/read.h	62;"	d
REDIS_REPLY_SET	deps/hiredis/read.h	60;"	d
REDIS_REPLY_STATUS	deps/hiredis/read.h	55;"	d
REDIS_REPLY_STRING	deps/hiredis/read.h	51;"	d
REDIS_REPLY_VERB	deps/hiredis/read.h	64;"	d
REDIS_REUSEADDR	deps/hiredis/hiredis.h	81;"	d
REDIS_SENTINEL_NAME	src/Makefile	/^REDIS_SENTINEL_NAME=redis-sentinel$(PROG_SUFFIX)$/;"	m
REDIS_SENTINEL_PORT	src/sentinel.c	52;"	d	file:
REDIS_SERVER	deps/hiredis/Makefile	/^REDIS_SERVER=redis-server$/;"	m
REDIS_SERVER_NAME	src/Makefile	/^REDIS_SERVER_NAME=redis-server$(PROG_SUFFIX)$/;"	m
REDIS_SERVER_OBJ	src/Makefile	/^REDIS_SERVER_OBJ=adlist.o quicklist.o ae.o anet.o dict.o server.o sds.o zmalloc.o lzf_c.o lzf_d.o pqsort.o zipmap.o sha1.o ziplist.o release.o networking.o util.o object.o db.o replication.o rdb.o t_string.o t_list.o t_set.o t_zset.o t_hash.o config.o aof.o pubsub.o multi.o debug.o sort.o intset.o syncio.o cluster.o crc16.o endianconv.o slowlog.o scripting.o bio.o rio.o rand.o memtest.o crcspeed.o crc64.o bitops.o sentinel.o notify.o setproctitle.o blocked.o hyperloglog.o latency.o sparkline.o redis-check-rdb.o redis-check-aof.o geo.o lazyfree.o module.o evict.o expire.o geohash.o geohash_helper.o childinfo.o defrag.o siphash.o rax.o t_stream.o listpack.o localtime.o lolwut.o lolwut5.o lolwut6.o acl.o gopher.o tracking.o connection.o tls.o sha256.o timeout.o setcpuaffinity.o monotonic.o mt19937-64.o$/;"	m
REDIS_SOCKCOMPAT_IMPLEMENTATION	deps/hiredis/sockcompat.c	31;"	d	file:
REDIS_SSL_CTX_CA_CERT_LOAD_FAILED	deps/hiredis/hiredis_ssl.h	/^    REDIS_SSL_CTX_CA_CERT_LOAD_FAILED,          \/* Failed to load CA Certificate or CA Path *\/$/;"	e	enum:__anon89
REDIS_SSL_CTX_CERT_KEY_REQUIRED	deps/hiredis/hiredis_ssl.h	/^    REDIS_SSL_CTX_CERT_KEY_REQUIRED,            \/* Client cert and key must both be specified or skipped *\/$/;"	e	enum:__anon89
REDIS_SSL_CTX_CLIENT_CERT_LOAD_FAILED	deps/hiredis/hiredis_ssl.h	/^    REDIS_SSL_CTX_CLIENT_CERT_LOAD_FAILED,      \/* Failed to load client certificate *\/$/;"	e	enum:__anon89
REDIS_SSL_CTX_CREATE_FAILED	deps/hiredis/hiredis_ssl.h	/^    REDIS_SSL_CTX_CREATE_FAILED,                \/* Failed to create OpenSSL SSL_CTX *\/$/;"	e	enum:__anon89
REDIS_SSL_CTX_NONE	deps/hiredis/hiredis_ssl.h	/^    REDIS_SSL_CTX_NONE = 0,                     \/* No Error *\/$/;"	e	enum:__anon89
REDIS_SSL_CTX_PRIVATE_KEY_LOAD_FAILED	deps/hiredis/hiredis_ssl.h	/^    REDIS_SSL_CTX_PRIVATE_KEY_LOAD_FAILED       \/* Failed to load private key *\/$/;"	e	enum:__anon89
REDIS_STATIC	src/quicklist.c	45;"	d	file:
REDIS_SUBSCRIBED	deps/hiredis/hiredis.h	75;"	d
REDIS_TEST_CONFIG	deps/hiredis/Makefile	/^define REDIS_TEST_CONFIG$/;"	m
REDIS_THREAD_STACK_SIZE	src/bio.c	91;"	d	file:
REDIS_TIMER_ISSET	deps/hiredis/async_private.h	57;"	d
REDIS_TLS_PROTO_DEFAULT	src/tls.c	50;"	d	file:
REDIS_TLS_PROTO_DEFAULT	src/tls.c	52;"	d	file:
REDIS_TLS_PROTO_TLSv1	src/tls.c	43;"	d	file:
REDIS_TLS_PROTO_TLSv1_1	src/tls.c	44;"	d	file:
REDIS_TLS_PROTO_TLSv1_2	src/tls.c	45;"	d	file:
REDIS_TLS_PROTO_TLSv1_3	src/tls.c	46;"	d	file:
REDIS_VERSION	src/version.h	1;"	d
REDIS_VERSION_FIELD	deps/hiredis/test.c	91;"	d	file:
REDIS_VERSION_NUM	src/version.h	2;"	d
REGIND_bin_no	deps/jemalloc/src/arena.c	1923;"	d	file:
REGIND_bin_no	deps/jemalloc/src/arena.c	1929;"	d	file:
REGIND_bin_yes	deps/jemalloc/src/arena.c	1921;"	d	file:
REGIND_bin_yes	deps/jemalloc/src/arena.c	1928;"	d	file:
REGISTER_API	src/module.c	8406;"	d	file:
REPL_DISKLESS_LOAD_DISABLED	src/server.h	399;"	d
REPL_DISKLESS_LOAD_SWAPDB	src/server.h	401;"	d
REPL_DISKLESS_LOAD_WHEN_DB_EMPTY	src/server.h	400;"	d
REPL_MAX_WRITTEN_BEFORE_FSYNC	src/replication.c	1542;"	d	file:
REPL_STATE_CONNECT	src/server.h	/^    REPL_STATE_CONNECT,             \/* Must connect to master *\/$/;"	e	enum:__anon15
REPL_STATE_CONNECTED	src/server.h	/^    REPL_STATE_CONNECTED,       \/* Connected to master *\/$/;"	e	enum:__anon15
REPL_STATE_CONNECTING	src/server.h	/^    REPL_STATE_CONNECTING,          \/* Connecting to master *\/$/;"	e	enum:__anon15
REPL_STATE_NONE	src/server.h	/^    REPL_STATE_NONE = 0,            \/* No active replication *\/$/;"	e	enum:__anon15
REPL_STATE_RECEIVE_AUTH_REPLY	src/server.h	/^    REPL_STATE_RECEIVE_AUTH_REPLY,  \/* Wait for AUTH reply *\/$/;"	e	enum:__anon15
REPL_STATE_RECEIVE_CAPA_REPLY	src/server.h	/^    REPL_STATE_RECEIVE_CAPA_REPLY,  \/* Wait for REPLCONF reply *\/$/;"	e	enum:__anon15
REPL_STATE_RECEIVE_IP_REPLY	src/server.h	/^    REPL_STATE_RECEIVE_IP_REPLY,    \/* Wait for REPLCONF reply *\/$/;"	e	enum:__anon15
REPL_STATE_RECEIVE_PING_REPLY	src/server.h	/^    REPL_STATE_RECEIVE_PING_REPLY,  \/* Wait for PING reply *\/$/;"	e	enum:__anon15
REPL_STATE_RECEIVE_PORT_REPLY	src/server.h	/^    REPL_STATE_RECEIVE_PORT_REPLY,  \/* Wait for REPLCONF reply *\/$/;"	e	enum:__anon15
REPL_STATE_RECEIVE_PSYNC_REPLY	src/server.h	/^    REPL_STATE_RECEIVE_PSYNC_REPLY, \/* Wait for PSYNC reply *\/$/;"	e	enum:__anon15
REPL_STATE_SEND_HANDSHAKE	src/server.h	/^    REPL_STATE_SEND_HANDSHAKE,      \/* Send handshake sequance to master *\/$/;"	e	enum:__anon15
REPL_STATE_SEND_PSYNC	src/server.h	/^    REPL_STATE_SEND_PSYNC,          \/* Send PSYNC *\/$/;"	e	enum:__anon15
REPL_STATE_TRANSFER	src/server.h	/^    REPL_STATE_TRANSFER,        \/* Receiving .rdb from master *\/$/;"	e	enum:__anon15
RESERVED	deps/lua/src/llex.h	/^enum RESERVED {$/;"	g
RESET_INTERVAL	deps/jemalloc/test/unit/prof_reset.c	136;"	d	file:
RESET_INTERVAL	deps/jemalloc/test/unit/prof_reset.c	222;"	d	file:
REST	src/rand.c	64;"	d	file:
RESTART_SERVER_CONFIG_REWRITE	src/server.h	2281;"	d
RESTART_SERVER_GRACEFULLY	src/server.h	2280;"	d
RESTART_SERVER_NONE	src/server.h	2279;"	d
REV	deps/jemalloc/Makefile	/^REV := 2$/;"	m
REV_FINAL_CFLAGS	src/Makefile	/^	echo PREV_FINAL_CFLAGS=$(FINAL_CFLAGS) >> .make-settings$/;"	m
REV_FINAL_LDFLAGS	src/Makefile	/^	echo PREV_FINAL_LDFLAGS=$(FINAL_LDFLAGS) >> .make-settings$/;"	m
RI	tests/instances.tcl	/^proc RI {n field} {$/;"	p
RIO_FLAG_READ_ERROR	src/rio.h	40;"	d
RIO_FLAG_WRITE_ERROR	src/rio.h	41;"	d
RKASK	deps/lua/src/lopcodes.h	130;"	d
RKB	deps/lua/src/lvm.c	351;"	d	file:
RKC	deps/lua/src/lvm.c	353;"	d	file:
RM	deps/lua/etc/Makefile	/^RM= rm -f$/;"	m
RM	deps/lua/src/Makefile	/^RM= rm -f$/;"	m
RMAPI_FUNC_SUPPORTED	src/redismodule.h	1126;"	d
RM_AbortBlock	src/module.c	/^int RM_AbortBlock(RedisModuleBlockedClient *bc) {$/;"	f
RM_Alloc	src/module.c	/^void *RM_Alloc(size_t bytes) {$/;"	f
RM_AuthenticateClientWithACLUser	src/module.c	/^int RM_AuthenticateClientWithACLUser(RedisModuleCtx *ctx, const char *name, size_t len, RedisModuleUserChangedFunc callback, void *privdata, uint64_t *client_id) {$/;"	f
RM_AuthenticateClientWithUser	src/module.c	/^int RM_AuthenticateClientWithUser(RedisModuleCtx *ctx, RedisModuleUser *module_user, RedisModuleUserChangedFunc callback, void *privdata, uint64_t *client_id) {$/;"	f
RM_AutoMemory	src/module.c	/^void RM_AutoMemory(RedisModuleCtx *ctx) {$/;"	f
RM_AvoidReplicaTraffic	src/module.c	/^int RM_AvoidReplicaTraffic() {$/;"	f
RM_BlockClient	src/module.c	/^RedisModuleBlockedClient *RM_BlockClient(RedisModuleCtx *ctx, RedisModuleCmdFunc reply_callback, RedisModuleCmdFunc timeout_callback, void (*free_privdata)(RedisModuleCtx*,void*), long long timeout_ms) {$/;"	f
RM_BlockClientOnKeys	src/module.c	/^RedisModuleBlockedClient *RM_BlockClientOnKeys(RedisModuleCtx *ctx, RedisModuleCmdFunc reply_callback, RedisModuleCmdFunc timeout_callback, void (*free_privdata)(RedisModuleCtx*,void*), long long timeout_ms, RedisModuleString **keys, int numkeys, void *privdata) {$/;"	f
RM_BlockedClientDisconnected	src/module.c	/^int RM_BlockedClientDisconnected(RedisModuleCtx *ctx) {$/;"	f
RM_BlockedClientMeasureTimeEnd	src/module.c	/^int RM_BlockedClientMeasureTimeEnd(RedisModuleBlockedClient *bc) {$/;"	f
RM_BlockedClientMeasureTimeStart	src/module.c	/^int RM_BlockedClientMeasureTimeStart(RedisModuleBlockedClient *bc) {$/;"	f
RM_Call	src/module.c	/^RedisModuleCallReply *RM_Call(RedisModuleCtx *ctx, const char *cmdname, const char *fmt, ...) {$/;"	f
RM_CallReplyArrayElement	src/module.c	/^RedisModuleCallReply *RM_CallReplyArrayElement(RedisModuleCallReply *reply, size_t idx) {$/;"	f
RM_CallReplyInteger	src/module.c	/^long long RM_CallReplyInteger(RedisModuleCallReply *reply) {$/;"	f
RM_CallReplyLength	src/module.c	/^size_t RM_CallReplyLength(RedisModuleCallReply *reply) {$/;"	f
RM_CallReplyProto	src/module.c	/^const char *RM_CallReplyProto(RedisModuleCallReply *reply, size_t *len) {$/;"	f
RM_CallReplyStringPtr	src/module.c	/^const char *RM_CallReplyStringPtr(RedisModuleCallReply *reply, size_t *len) {$/;"	f
RM_CallReplyType	src/module.c	/^int RM_CallReplyType(RedisModuleCallReply *reply) {$/;"	f
RM_Calloc	src/module.c	/^void *RM_Calloc(size_t nmemb, size_t size) {$/;"	f
RM_CloseKey	src/module.c	/^void RM_CloseKey(RedisModuleKey *key) {$/;"	f
RM_CommandFilterArgDelete	src/module.c	/^int RM_CommandFilterArgDelete(RedisModuleCommandFilterCtx *fctx, int pos)$/;"	f
RM_CommandFilterArgGet	src/module.c	/^const RedisModuleString *RM_CommandFilterArgGet(RedisModuleCommandFilterCtx *fctx, int pos)$/;"	f
RM_CommandFilterArgInsert	src/module.c	/^int RM_CommandFilterArgInsert(RedisModuleCommandFilterCtx *fctx, int pos, RedisModuleString *arg)$/;"	f
RM_CommandFilterArgReplace	src/module.c	/^int RM_CommandFilterArgReplace(RedisModuleCommandFilterCtx *fctx, int pos, RedisModuleString *arg)$/;"	f
RM_CommandFilterArgsCount	src/module.c	/^int RM_CommandFilterArgsCount(RedisModuleCommandFilterCtx *fctx)$/;"	f
RM_CreateCommand	src/module.c	/^int RM_CreateCommand(RedisModuleCtx *ctx, const char *name, RedisModuleCmdFunc cmdfunc, const char *strflags, int firstkey, int lastkey, int keystep) {$/;"	f
RM_CreateDataType	src/module.c	/^moduleType *RM_CreateDataType(RedisModuleCtx *ctx, const char *name, int encver, void *typemethods_ptr) {$/;"	f
RM_CreateDict	src/module.c	/^RedisModuleDict *RM_CreateDict(RedisModuleCtx *ctx) {$/;"	f
RM_CreateModuleUser	src/module.c	/^RedisModuleUser *RM_CreateModuleUser(const char *name) {$/;"	f
RM_CreateString	src/module.c	/^RedisModuleString *RM_CreateString(RedisModuleCtx *ctx, const char *ptr, size_t len) {$/;"	f
RM_CreateStringFromCallReply	src/module.c	/^RedisModuleString *RM_CreateStringFromCallReply(RedisModuleCallReply *reply) {$/;"	f
RM_CreateStringFromDouble	src/module.c	/^RedisModuleString *RM_CreateStringFromDouble(RedisModuleCtx *ctx, double d) {$/;"	f
RM_CreateStringFromLongDouble	src/module.c	/^RedisModuleString *RM_CreateStringFromLongDouble(RedisModuleCtx *ctx, long double ld, int humanfriendly) {$/;"	f
RM_CreateStringFromLongLong	src/module.c	/^RedisModuleString *RM_CreateStringFromLongLong(RedisModuleCtx *ctx, long long ll) {$/;"	f
RM_CreateStringFromStreamID	src/module.c	/^RedisModuleString *RM_CreateStringFromStreamID(RedisModuleCtx *ctx, const RedisModuleStreamID *id) {$/;"	f
RM_CreateStringFromString	src/module.c	/^RedisModuleString *RM_CreateStringFromString(RedisModuleCtx *ctx, const RedisModuleString *str) {$/;"	f
RM_CreateStringPrintf	src/module.c	/^RedisModuleString *RM_CreateStringPrintf(RedisModuleCtx *ctx, const char *fmt, ...) {$/;"	f
RM_CreateTimer	src/module.c	/^RedisModuleTimerID RM_CreateTimer(RedisModuleCtx *ctx, mstime_t period, RedisModuleTimerProc callback, void *data) {$/;"	f
RM_DbSize	src/module.c	/^unsigned long long RM_DbSize(RedisModuleCtx *ctx) {$/;"	f
RM_DeauthenticateAndCloseClient	src/module.c	/^int RM_DeauthenticateAndCloseClient(RedisModuleCtx *ctx, uint64_t client_id) {$/;"	f
RM_DefragAlloc	src/module.c	/^void *RM_DefragAlloc(RedisModuleDefragCtx *ctx, void *ptr) {$/;"	f
RM_DefragCursorGet	src/module.c	/^int RM_DefragCursorGet(RedisModuleDefragCtx *ctx, unsigned long *cursor) {$/;"	f
RM_DefragCursorSet	src/module.c	/^int RM_DefragCursorSet(RedisModuleDefragCtx *ctx, unsigned long cursor) {$/;"	f
RM_DefragRedisModuleString	src/module.c	/^RedisModuleString *RM_DefragRedisModuleString(RedisModuleDefragCtx *ctx, RedisModuleString *str) {$/;"	f
RM_DefragShouldStop	src/module.c	/^int RM_DefragShouldStop(RedisModuleDefragCtx *ctx) {$/;"	f
RM_DeleteKey	src/module.c	/^int RM_DeleteKey(RedisModuleKey *key) {$/;"	f
RM_DictCompare	src/module.c	/^int RM_DictCompare(RedisModuleDictIter *di, const char *op, RedisModuleString *key) {$/;"	f
RM_DictCompareC	src/module.c	/^int RM_DictCompareC(RedisModuleDictIter *di, const char *op, void *key, size_t keylen) {$/;"	f
RM_DictDel	src/module.c	/^int RM_DictDel(RedisModuleDict *d, RedisModuleString *key, void *oldval) {$/;"	f
RM_DictDelC	src/module.c	/^int RM_DictDelC(RedisModuleDict *d, void *key, size_t keylen, void *oldval) {$/;"	f
RM_DictGet	src/module.c	/^void *RM_DictGet(RedisModuleDict *d, RedisModuleString *key, int *nokey) {$/;"	f
RM_DictGetC	src/module.c	/^void *RM_DictGetC(RedisModuleDict *d, void *key, size_t keylen, int *nokey) {$/;"	f
RM_DictIteratorReseek	src/module.c	/^int RM_DictIteratorReseek(RedisModuleDictIter *di, const char *op, RedisModuleString *key) {$/;"	f
RM_DictIteratorReseekC	src/module.c	/^int RM_DictIteratorReseekC(RedisModuleDictIter *di, const char *op, void *key, size_t keylen) {$/;"	f
RM_DictIteratorStart	src/module.c	/^RedisModuleDictIter *RM_DictIteratorStart(RedisModuleDict *d, const char *op, RedisModuleString *key) {$/;"	f
RM_DictIteratorStartC	src/module.c	/^RedisModuleDictIter *RM_DictIteratorStartC(RedisModuleDict *d, const char *op, void *key, size_t keylen) {$/;"	f
RM_DictIteratorStop	src/module.c	/^void RM_DictIteratorStop(RedisModuleDictIter *di) {$/;"	f
RM_DictNext	src/module.c	/^RedisModuleString *RM_DictNext(RedisModuleCtx *ctx, RedisModuleDictIter *di, void **dataptr) {$/;"	f
RM_DictNextC	src/module.c	/^void *RM_DictNextC(RedisModuleDictIter *di, size_t *keylen, void **dataptr) {$/;"	f
RM_DictPrev	src/module.c	/^RedisModuleString *RM_DictPrev(RedisModuleCtx *ctx, RedisModuleDictIter *di, void **dataptr) {$/;"	f
RM_DictPrevC	src/module.c	/^void *RM_DictPrevC(RedisModuleDictIter *di, size_t *keylen, void **dataptr) {$/;"	f
RM_DictReplace	src/module.c	/^int RM_DictReplace(RedisModuleDict *d, RedisModuleString *key, void *ptr) {$/;"	f
RM_DictReplaceC	src/module.c	/^int RM_DictReplaceC(RedisModuleDict *d, void *key, size_t keylen, void *ptr) {$/;"	f
RM_DictSet	src/module.c	/^int RM_DictSet(RedisModuleDict *d, RedisModuleString *key, void *ptr) {$/;"	f
RM_DictSetC	src/module.c	/^int RM_DictSetC(RedisModuleDict *d, void *key, size_t keylen, void *ptr) {$/;"	f
RM_DictSize	src/module.c	/^uint64_t RM_DictSize(RedisModuleDict *d) {$/;"	f
RM_DigestAddLongLong	src/module.c	/^void RM_DigestAddLongLong(RedisModuleDigest *md, long long ll) {$/;"	f
RM_DigestAddStringBuffer	src/module.c	/^void RM_DigestAddStringBuffer(RedisModuleDigest *md, unsigned char *ele, size_t len) {$/;"	f
RM_DigestEndSequence	src/module.c	/^void RM_DigestEndSequence(RedisModuleDigest *md) {$/;"	f
RM_EmitAOF	src/module.c	/^void RM_EmitAOF(RedisModuleIO *io, const char *cmdname, const char *fmt, ...) {$/;"	f
RM_ExitFromChild	src/module.c	/^int RM_ExitFromChild(int retcode) {$/;"	f
RM_ExportSharedAPI	src/module.c	/^int RM_ExportSharedAPI(RedisModuleCtx *ctx, const char *apiname, void *func) {$/;"	f
RM_Fork	src/module.c	/^int RM_Fork(RedisModuleForkDoneHandler cb, void *user_data) {$/;"	f
RM_Free	src/module.c	/^void RM_Free(void *ptr) {$/;"	f
RM_FreeCallReply	src/module.c	/^void RM_FreeCallReply(RedisModuleCallReply *reply) {$/;"	f
RM_FreeClusterNodesList	src/module.c	/^void RM_FreeClusterNodesList(char **ids) {$/;"	f
RM_FreeDict	src/module.c	/^void RM_FreeDict(RedisModuleCtx *ctx, RedisModuleDict *d) {$/;"	f
RM_FreeModuleUser	src/module.c	/^int RM_FreeModuleUser(RedisModuleUser *user) {$/;"	f
RM_FreeServerInfo	src/module.c	/^void RM_FreeServerInfo(RedisModuleCtx *ctx, RedisModuleServerInfoData *data) {$/;"	f
RM_FreeString	src/module.c	/^void RM_FreeString(RedisModuleCtx *ctx, RedisModuleString *str) {$/;"	f
RM_FreeThreadSafeContext	src/module.c	/^void RM_FreeThreadSafeContext(RedisModuleCtx *ctx) {$/;"	f
RM_GetAbsExpire	src/module.c	/^mstime_t RM_GetAbsExpire(RedisModuleKey *key) {$/;"	f
RM_GetApi	src/module.c	/^int RM_GetApi(const char *funcname, void **targetPtrPtr) {$/;"	f
RM_GetBlockedClientHandle	src/module.c	/^RedisModuleBlockedClient *RM_GetBlockedClientHandle(RedisModuleCtx *ctx) {$/;"	f
RM_GetBlockedClientPrivateData	src/module.c	/^void *RM_GetBlockedClientPrivateData(RedisModuleCtx *ctx) {$/;"	f
RM_GetBlockedClientReadyKey	src/module.c	/^RedisModuleString *RM_GetBlockedClientReadyKey(RedisModuleCtx *ctx) {$/;"	f
RM_GetClientCertificate	src/module.c	/^RedisModuleString *RM_GetClientCertificate(RedisModuleCtx *ctx, uint64_t client_id) {$/;"	f
RM_GetClientId	src/module.c	/^unsigned long long RM_GetClientId(RedisModuleCtx *ctx) {$/;"	f
RM_GetClientInfoById	src/module.c	/^int RM_GetClientInfoById(void *ci, uint64_t id) {$/;"	f
RM_GetClientUserNameById	src/module.c	/^RedisModuleString *RM_GetClientUserNameById(RedisModuleCtx *ctx, uint64_t id) {$/;"	f
RM_GetClusterNodeInfo	src/module.c	/^int RM_GetClusterNodeInfo(RedisModuleCtx *ctx, const char *id, char *ip, char *master_id, int *port, int *flags) {$/;"	f
RM_GetClusterNodesList	src/module.c	/^char **RM_GetClusterNodesList(RedisModuleCtx *ctx, size_t *numnodes) {$/;"	f
RM_GetClusterSize	src/module.c	/^size_t RM_GetClusterSize(void) {$/;"	f
RM_GetCommandKeys	src/module.c	/^int *RM_GetCommandKeys(RedisModuleCtx *ctx, RedisModuleString **argv, int argc, int *num_keys) {$/;"	f
RM_GetContextFlags	src/module.c	/^int RM_GetContextFlags(RedisModuleCtx *ctx) {$/;"	f
RM_GetContextFlagsAll	src/module.c	/^int RM_GetContextFlagsAll() {$/;"	f
RM_GetContextFromIO	src/module.c	/^RedisModuleCtx *RM_GetContextFromIO(RedisModuleIO *io) {$/;"	f
RM_GetDetachedThreadSafeContext	src/module.c	/^RedisModuleCtx *RM_GetDetachedThreadSafeContext(RedisModuleCtx *ctx) {$/;"	f
RM_GetExpire	src/module.c	/^mstime_t RM_GetExpire(RedisModuleKey *key) {$/;"	f
RM_GetKeyNameFromIO	src/module.c	/^const RedisModuleString *RM_GetKeyNameFromIO(RedisModuleIO *io) {$/;"	f
RM_GetKeyNameFromModuleKey	src/module.c	/^const RedisModuleString *RM_GetKeyNameFromModuleKey(RedisModuleKey *key) {$/;"	f
RM_GetKeyspaceNotificationFlagsAll	src/module.c	/^int RM_GetKeyspaceNotificationFlagsAll() {$/;"	f
RM_GetLFU	src/module.c	/^int RM_GetLFU(RedisModuleKey *key, long long *lfu_freq) {$/;"	f
RM_GetLRU	src/module.c	/^int RM_GetLRU(RedisModuleKey *key, mstime_t *lru_idle) {$/;"	f
RM_GetMyClusterID	src/module.c	/^const char *RM_GetMyClusterID(void) {$/;"	f
RM_GetNotifyKeyspaceEvents	src/module.c	/^int RM_GetNotifyKeyspaceEvents() {$/;"	f
RM_GetRandomBytes	src/module.c	/^void RM_GetRandomBytes(unsigned char *dst, size_t len) {$/;"	f
RM_GetRandomHexChars	src/module.c	/^void RM_GetRandomHexChars(char *dst, size_t len) {$/;"	f
RM_GetSelectedDb	src/module.c	/^int RM_GetSelectedDb(RedisModuleCtx *ctx) {$/;"	f
RM_GetServerInfo	src/module.c	/^RedisModuleServerInfoData *RM_GetServerInfo(RedisModuleCtx *ctx, const char *section) {$/;"	f
RM_GetServerVersion	src/module.c	/^int RM_GetServerVersion() {$/;"	f
RM_GetSharedAPI	src/module.c	/^void *RM_GetSharedAPI(RedisModuleCtx *ctx, const char *apiname) {$/;"	f
RM_GetThreadSafeContext	src/module.c	/^RedisModuleCtx *RM_GetThreadSafeContext(RedisModuleBlockedClient *bc) {$/;"	f
RM_GetTimerInfo	src/module.c	/^int RM_GetTimerInfo(RedisModuleCtx *ctx, RedisModuleTimerID id, uint64_t *remaining, void **data) {$/;"	f
RM_GetTypeMethodVersion	src/module.c	/^int RM_GetTypeMethodVersion() {$/;"	f
RM_GetUsedMemoryRatio	src/module.c	/^float RM_GetUsedMemoryRatio(){$/;"	f
RM_HashGet	src/module.c	/^int RM_HashGet(RedisModuleKey *key, int flags, ...) {$/;"	f
RM_HashSet	src/module.c	/^int RM_HashSet(RedisModuleKey *key, int flags, ...) {$/;"	f
RM_HoldString	src/module.c	/^RedisModuleString* RM_HoldString(RedisModuleCtx *ctx, RedisModuleString *str) {$/;"	f
RM_InfoAddFieldCString	src/module.c	/^int RM_InfoAddFieldCString(RedisModuleInfoCtx *ctx, char *field, char *value) {$/;"	f
RM_InfoAddFieldDouble	src/module.c	/^int RM_InfoAddFieldDouble(RedisModuleInfoCtx *ctx, char *field, double value) {$/;"	f
RM_InfoAddFieldLongLong	src/module.c	/^int RM_InfoAddFieldLongLong(RedisModuleInfoCtx *ctx, char *field, long long value) {$/;"	f
RM_InfoAddFieldString	src/module.c	/^int RM_InfoAddFieldString(RedisModuleInfoCtx *ctx, char *field, RedisModuleString *value) {$/;"	f
RM_InfoAddFieldULongLong	src/module.c	/^int RM_InfoAddFieldULongLong(RedisModuleInfoCtx *ctx, char *field, unsigned long long value) {$/;"	f
RM_InfoAddSection	src/module.c	/^int RM_InfoAddSection(RedisModuleInfoCtx *ctx, char *name) {$/;"	f
RM_InfoBeginDictField	src/module.c	/^int RM_InfoBeginDictField(RedisModuleInfoCtx *ctx, char *name) {$/;"	f
RM_InfoEndDictField	src/module.c	/^int RM_InfoEndDictField(RedisModuleInfoCtx *ctx) {$/;"	f
RM_IsBlockedReplyRequest	src/module.c	/^int RM_IsBlockedReplyRequest(RedisModuleCtx *ctx) {$/;"	f
RM_IsBlockedTimeoutRequest	src/module.c	/^int RM_IsBlockedTimeoutRequest(RedisModuleCtx *ctx) {$/;"	f
RM_IsIOError	src/module.c	/^int RM_IsIOError(RedisModuleIO *io) {$/;"	f
RM_IsKeysPositionRequest	src/module.c	/^int RM_IsKeysPositionRequest(RedisModuleCtx *ctx) {$/;"	f
RM_IsModuleNameBusy	src/module.c	/^int RM_IsModuleNameBusy(const char *name) {$/;"	f
RM_IsSubEventSupported	src/module.c	/^int RM_IsSubEventSupported(RedisModuleEvent event, int64_t subevent) {$/;"	f
RM_KeyAtPos	src/module.c	/^void RM_KeyAtPos(RedisModuleCtx *ctx, int pos) {$/;"	f
RM_KeyType	src/module.c	/^int RM_KeyType(RedisModuleKey *key) {$/;"	f
RM_KillForkChild	src/module.c	/^int RM_KillForkChild(int child_pid) {$/;"	f
RM_LatencyAddSample	src/module.c	/^void RM_LatencyAddSample(const char *event, mstime_t latency) {$/;"	f
RM_ListPop	src/module.c	/^RedisModuleString *RM_ListPop(RedisModuleKey *key, int where) {$/;"	f
RM_ListPush	src/module.c	/^int RM_ListPush(RedisModuleKey *key, int where, RedisModuleString *ele) {$/;"	f
RM_LoadDataTypeFromString	src/module.c	/^void *RM_LoadDataTypeFromString(const RedisModuleString *str, const moduleType *mt) {$/;"	f
RM_LoadDouble	src/module.c	/^double RM_LoadDouble(RedisModuleIO *io) {$/;"	f
RM_LoadFloat	src/module.c	/^float RM_LoadFloat(RedisModuleIO *io) {$/;"	f
RM_LoadLongDouble	src/module.c	/^long double RM_LoadLongDouble(RedisModuleIO *io) {$/;"	f
RM_LoadSigned	src/module.c	/^int64_t RM_LoadSigned(RedisModuleIO *io) {$/;"	f
RM_LoadString	src/module.c	/^RedisModuleString *RM_LoadString(RedisModuleIO *io) {$/;"	f
RM_LoadStringBuffer	src/module.c	/^char *RM_LoadStringBuffer(RedisModuleIO *io, size_t *lenptr) {$/;"	f
RM_LoadUnsigned	src/module.c	/^uint64_t RM_LoadUnsigned(RedisModuleIO *io) {$/;"	f
RM_Log	src/module.c	/^void RM_Log(RedisModuleCtx *ctx, const char *levelstr, const char *fmt, ...) {$/;"	f
RM_LogIOError	src/module.c	/^void RM_LogIOError(RedisModuleIO *io, const char *levelstr, const char *fmt, ...) {$/;"	f
RM_MallocSize	src/module.c	/^size_t RM_MallocSize(void* ptr){$/;"	f
RM_Milliseconds	src/module.c	/^long long RM_Milliseconds(void) {$/;"	f
RM_ModuleTypeGetType	src/module.c	/^moduleType *RM_ModuleTypeGetType(RedisModuleKey *key) {$/;"	f
RM_ModuleTypeGetValue	src/module.c	/^void *RM_ModuleTypeGetValue(RedisModuleKey *key) {$/;"	f
RM_ModuleTypeReplaceValue	src/module.c	/^int RM_ModuleTypeReplaceValue(RedisModuleKey *key, moduleType *mt, void *new_value, void **old_value) {$/;"	f
RM_ModuleTypeSetValue	src/module.c	/^int RM_ModuleTypeSetValue(RedisModuleKey *key, moduleType *mt, void *value) {$/;"	f
RM_NotifyKeyspaceEvent	src/module.c	/^int RM_NotifyKeyspaceEvent(RedisModuleCtx *ctx, int type, const char *event, RedisModuleString *key) {$/;"	f
RM_OpenKey	src/module.c	/^void *RM_OpenKey(RedisModuleCtx *ctx, robj *keyname, int mode) {$/;"	f
RM_PoolAlloc	src/module.c	/^void *RM_PoolAlloc(RedisModuleCtx *ctx, size_t bytes) {$/;"	f
RM_PublishMessage	src/module.c	/^int RM_PublishMessage(RedisModuleCtx *ctx, RedisModuleString *channel, RedisModuleString *message) {$/;"	f
RM_RandomKey	src/module.c	/^RedisModuleString *RM_RandomKey(RedisModuleCtx *ctx) {$/;"	f
RM_Realloc	src/module.c	/^void* RM_Realloc(void *ptr, size_t bytes) {$/;"	f
RM_RegisterClusterMessageReceiver	src/module.c	/^void RM_RegisterClusterMessageReceiver(RedisModuleCtx *ctx, uint8_t type, RedisModuleClusterMessageReceiver callback) {$/;"	f
RM_RegisterCommandFilter	src/module.c	/^RedisModuleCommandFilter *RM_RegisterCommandFilter(RedisModuleCtx *ctx, RedisModuleCommandFilterFunc callback, int flags) {$/;"	f
RM_RegisterDefragFunc	src/module.c	/^int RM_RegisterDefragFunc(RedisModuleCtx *ctx, RedisModuleDefragFunc cb) {$/;"	f
RM_RegisterInfoFunc	src/module.c	/^int RM_RegisterInfoFunc(RedisModuleCtx *ctx, RedisModuleInfoFunc cb) {$/;"	f
RM_Replicate	src/module.c	/^int RM_Replicate(RedisModuleCtx *ctx, const char *cmdname, const char *fmt, ...) {$/;"	f
RM_ReplicateVerbatim	src/module.c	/^int RM_ReplicateVerbatim(RedisModuleCtx *ctx) {$/;"	f
RM_ReplySetArrayLength	src/module.c	/^void RM_ReplySetArrayLength(RedisModuleCtx *ctx, long len) {$/;"	f
RM_ReplyWithArray	src/module.c	/^int RM_ReplyWithArray(RedisModuleCtx *ctx, long len) {$/;"	f
RM_ReplyWithCString	src/module.c	/^int RM_ReplyWithCString(RedisModuleCtx *ctx, const char *buf) {$/;"	f
RM_ReplyWithCallReply	src/module.c	/^int RM_ReplyWithCallReply(RedisModuleCtx *ctx, RedisModuleCallReply *reply) {$/;"	f
RM_ReplyWithDouble	src/module.c	/^int RM_ReplyWithDouble(RedisModuleCtx *ctx, double d) {$/;"	f
RM_ReplyWithEmptyArray	src/module.c	/^int RM_ReplyWithEmptyArray(RedisModuleCtx *ctx) {$/;"	f
RM_ReplyWithEmptyString	src/module.c	/^int RM_ReplyWithEmptyString(RedisModuleCtx *ctx) {$/;"	f
RM_ReplyWithError	src/module.c	/^int RM_ReplyWithError(RedisModuleCtx *ctx, const char *err) {$/;"	f
RM_ReplyWithLongDouble	src/module.c	/^int RM_ReplyWithLongDouble(RedisModuleCtx *ctx, long double ld) {$/;"	f
RM_ReplyWithLongLong	src/module.c	/^int RM_ReplyWithLongLong(RedisModuleCtx *ctx, long long ll) {$/;"	f
RM_ReplyWithNull	src/module.c	/^int RM_ReplyWithNull(RedisModuleCtx *ctx) {$/;"	f
RM_ReplyWithNullArray	src/module.c	/^int RM_ReplyWithNullArray(RedisModuleCtx *ctx) {$/;"	f
RM_ReplyWithSimpleString	src/module.c	/^int RM_ReplyWithSimpleString(RedisModuleCtx *ctx, const char *msg) {$/;"	f
RM_ReplyWithString	src/module.c	/^int RM_ReplyWithString(RedisModuleCtx *ctx, RedisModuleString *str) {$/;"	f
RM_ReplyWithStringBuffer	src/module.c	/^int RM_ReplyWithStringBuffer(RedisModuleCtx *ctx, const char *buf, size_t len) {$/;"	f
RM_ReplyWithVerbatimString	src/module.c	/^int RM_ReplyWithVerbatimString(RedisModuleCtx *ctx, const char *buf, size_t len) {$/;"	f
RM_ResetDataset	src/module.c	/^void RM_ResetDataset(int restart_aof, int async) {$/;"	f
RM_RetainString	src/module.c	/^void RM_RetainString(RedisModuleCtx *ctx, RedisModuleString *str) {$/;"	f
RM_SaveDataTypeToString	src/module.c	/^RedisModuleString *RM_SaveDataTypeToString(RedisModuleCtx *ctx, void *data, const moduleType *mt) {$/;"	f
RM_SaveDouble	src/module.c	/^void RM_SaveDouble(RedisModuleIO *io, double value) {$/;"	f
RM_SaveFloat	src/module.c	/^void RM_SaveFloat(RedisModuleIO *io, float value) {$/;"	f
RM_SaveLongDouble	src/module.c	/^void RM_SaveLongDouble(RedisModuleIO *io, long double value) {$/;"	f
RM_SaveSigned	src/module.c	/^void RM_SaveSigned(RedisModuleIO *io, int64_t value) {$/;"	f
RM_SaveString	src/module.c	/^void RM_SaveString(RedisModuleIO *io, RedisModuleString *s) {$/;"	f
RM_SaveStringBuffer	src/module.c	/^void RM_SaveStringBuffer(RedisModuleIO *io, const char *str, size_t len) {$/;"	f
RM_SaveUnsigned	src/module.c	/^void RM_SaveUnsigned(RedisModuleIO *io, uint64_t value) {$/;"	f
RM_Scan	src/module.c	/^int RM_Scan(RedisModuleCtx *ctx, RedisModuleScanCursor *cursor, RedisModuleScanCB fn, void *privdata) {$/;"	f
RM_ScanCursorCreate	src/module.c	/^RedisModuleScanCursor *RM_ScanCursorCreate() {$/;"	f
RM_ScanCursorDestroy	src/module.c	/^void RM_ScanCursorDestroy(RedisModuleScanCursor *cursor) {$/;"	f
RM_ScanCursorRestart	src/module.c	/^void RM_ScanCursorRestart(RedisModuleScanCursor *cursor) {$/;"	f
RM_ScanKey	src/module.c	/^int RM_ScanKey(RedisModuleKey *key, RedisModuleScanCursor *cursor, RedisModuleScanKeyCB fn, void *privdata) {$/;"	f
RM_SelectDb	src/module.c	/^int RM_SelectDb(RedisModuleCtx *ctx, int newid) {$/;"	f
RM_SendChildHeartbeat	src/module.c	/^void RM_SendChildHeartbeat(double progress) {$/;"	f
RM_SendClusterMessage	src/module.c	/^int RM_SendClusterMessage(RedisModuleCtx *ctx, char *target_id, uint8_t type, unsigned char *msg, uint32_t len) {$/;"	f
RM_ServerInfoGetField	src/module.c	/^RedisModuleString *RM_ServerInfoGetField(RedisModuleCtx *ctx, RedisModuleServerInfoData *data, const char* field) {$/;"	f
RM_ServerInfoGetFieldC	src/module.c	/^const char *RM_ServerInfoGetFieldC(RedisModuleServerInfoData *data, const char* field) {$/;"	f
RM_ServerInfoGetFieldDouble	src/module.c	/^double RM_ServerInfoGetFieldDouble(RedisModuleServerInfoData *data, const char* field, int *out_err) {$/;"	f
RM_ServerInfoGetFieldSigned	src/module.c	/^long long RM_ServerInfoGetFieldSigned(RedisModuleServerInfoData *data, const char* field, int *out_err) {$/;"	f
RM_ServerInfoGetFieldUnsigned	src/module.c	/^unsigned long long RM_ServerInfoGetFieldUnsigned(RedisModuleServerInfoData *data, const char* field, int *out_err) {$/;"	f
RM_SetAbsExpire	src/module.c	/^int RM_SetAbsExpire(RedisModuleKey *key, mstime_t expire) {$/;"	f
RM_SetClusterFlags	src/module.c	/^void RM_SetClusterFlags(RedisModuleCtx *ctx, uint64_t flags) {$/;"	f
RM_SetDisconnectCallback	src/module.c	/^void RM_SetDisconnectCallback(RedisModuleBlockedClient *bc, RedisModuleDisconnectFunc callback) {$/;"	f
RM_SetExpire	src/module.c	/^int RM_SetExpire(RedisModuleKey *key, mstime_t expire) {$/;"	f
RM_SetLFU	src/module.c	/^int RM_SetLFU(RedisModuleKey *key, long long lfu_freq) {$/;"	f
RM_SetLRU	src/module.c	/^int RM_SetLRU(RedisModuleKey *key, mstime_t lru_idle) {$/;"	f
RM_SetModuleAttribs	src/module.c	/^void RM_SetModuleAttribs(RedisModuleCtx *ctx, const char *name, int ver, int apiver) {$/;"	f
RM_SetModuleOptions	src/module.c	/^void RM_SetModuleOptions(RedisModuleCtx *ctx, int options) {$/;"	f
RM_SetModuleUserACL	src/module.c	/^int RM_SetModuleUserACL(RedisModuleUser *user, const char* acl) {$/;"	f
RM_SignalKeyAsReady	src/module.c	/^void RM_SignalKeyAsReady(RedisModuleCtx *ctx, RedisModuleString *key) {$/;"	f
RM_SignalModifiedKey	src/module.c	/^int RM_SignalModifiedKey(RedisModuleCtx *ctx, RedisModuleString *keyname) {$/;"	f
RM_StopTimer	src/module.c	/^int RM_StopTimer(RedisModuleCtx *ctx, RedisModuleTimerID id, void **data) {$/;"	f
RM_Strdup	src/module.c	/^char *RM_Strdup(const char *str) {$/;"	f
RM_StreamAdd	src/module.c	/^int RM_StreamAdd(RedisModuleKey *key, int flags, RedisModuleStreamID *id, RedisModuleString **argv, long numfields) {$/;"	f
RM_StreamDelete	src/module.c	/^int RM_StreamDelete(RedisModuleKey *key, RedisModuleStreamID *id) {$/;"	f
RM_StreamIteratorDelete	src/module.c	/^int RM_StreamIteratorDelete(RedisModuleKey *key) {$/;"	f
RM_StreamIteratorNextField	src/module.c	/^int RM_StreamIteratorNextField(RedisModuleKey *key, RedisModuleString **field_ptr, RedisModuleString **value_ptr) {$/;"	f
RM_StreamIteratorNextID	src/module.c	/^int RM_StreamIteratorNextID(RedisModuleKey *key, RedisModuleStreamID *id, long *numfields) {$/;"	f
RM_StreamIteratorStart	src/module.c	/^int RM_StreamIteratorStart(RedisModuleKey *key, int flags, RedisModuleStreamID *start, RedisModuleStreamID *end) {$/;"	f
RM_StreamIteratorStop	src/module.c	/^int RM_StreamIteratorStop(RedisModuleKey *key) {$/;"	f
RM_StreamTrimByID	src/module.c	/^long long RM_StreamTrimByID(RedisModuleKey *key, int flags, RedisModuleStreamID *id) {$/;"	f
RM_StreamTrimByLength	src/module.c	/^long long RM_StreamTrimByLength(RedisModuleKey *key, int flags, long long length) {$/;"	f
RM_StringAppendBuffer	src/module.c	/^int RM_StringAppendBuffer(RedisModuleCtx *ctx, RedisModuleString *str, const char *buf, size_t len) {$/;"	f
RM_StringCompare	src/module.c	/^int RM_StringCompare(RedisModuleString *a, RedisModuleString *b) {$/;"	f
RM_StringDMA	src/module.c	/^char *RM_StringDMA(RedisModuleKey *key, size_t *len, int mode) {$/;"	f
RM_StringPtrLen	src/module.c	/^const char *RM_StringPtrLen(const RedisModuleString *str, size_t *len) {$/;"	f
RM_StringSet	src/module.c	/^int RM_StringSet(RedisModuleKey *key, RedisModuleString *str) {$/;"	f
RM_StringToDouble	src/module.c	/^int RM_StringToDouble(const RedisModuleString *str, double *d) {$/;"	f
RM_StringToLongDouble	src/module.c	/^int RM_StringToLongDouble(const RedisModuleString *str, long double *ld) {$/;"	f
RM_StringToLongLong	src/module.c	/^int RM_StringToLongLong(const RedisModuleString *str, long long *ll) {$/;"	f
RM_StringToStreamID	src/module.c	/^int RM_StringToStreamID(const RedisModuleString *str, RedisModuleStreamID *id) {$/;"	f
RM_StringTruncate	src/module.c	/^int RM_StringTruncate(RedisModuleKey *key, size_t newlen) {$/;"	f
RM_SubscribeToKeyspaceEvents	src/module.c	/^int RM_SubscribeToKeyspaceEvents(RedisModuleCtx *ctx, int types, RedisModuleNotificationFunc callback) {$/;"	f
RM_SubscribeToServerEvent	src/module.c	/^int RM_SubscribeToServerEvent(RedisModuleCtx *ctx, RedisModuleEvent event, RedisModuleEventCallback callback) {$/;"	f
RM_ThreadSafeContextLock	src/module.c	/^void RM_ThreadSafeContextLock(RedisModuleCtx *ctx) {$/;"	f
RM_ThreadSafeContextTryLock	src/module.c	/^int RM_ThreadSafeContextTryLock(RedisModuleCtx *ctx) {$/;"	f
RM_ThreadSafeContextUnlock	src/module.c	/^void RM_ThreadSafeContextUnlock(RedisModuleCtx *ctx) {$/;"	f
RM_UnblockClient	src/module.c	/^int RM_UnblockClient(RedisModuleBlockedClient *bc, void *privdata) {$/;"	f
RM_UnlinkKey	src/module.c	/^int RM_UnlinkKey(RedisModuleKey *key) {$/;"	f
RM_UnregisterCommandFilter	src/module.c	/^int RM_UnregisterCommandFilter(RedisModuleCtx *ctx, RedisModuleCommandFilter *filter) {$/;"	f
RM_ValueLength	src/module.c	/^size_t RM_ValueLength(RedisModuleKey *key) {$/;"	f
RM_WrongArity	src/module.c	/^int RM_WrongArity(RedisModuleCtx *ctx) {$/;"	f
RM_ZsetAdd	src/module.c	/^int RM_ZsetAdd(RedisModuleKey *key, double score, RedisModuleString *ele, int *flagsptr) {$/;"	f
RM_ZsetFirstInLexRange	src/module.c	/^int RM_ZsetFirstInLexRange(RedisModuleKey *key, RedisModuleString *min, RedisModuleString *max) {$/;"	f
RM_ZsetFirstInScoreRange	src/module.c	/^int RM_ZsetFirstInScoreRange(RedisModuleKey *key, double min, double max, int minex, int maxex) {$/;"	f
RM_ZsetIncrby	src/module.c	/^int RM_ZsetIncrby(RedisModuleKey *key, double score, RedisModuleString *ele, int *flagsptr, double *newscore) {$/;"	f
RM_ZsetLastInLexRange	src/module.c	/^int RM_ZsetLastInLexRange(RedisModuleKey *key, RedisModuleString *min, RedisModuleString *max) {$/;"	f
RM_ZsetLastInScoreRange	src/module.c	/^int RM_ZsetLastInScoreRange(RedisModuleKey *key, double min, double max, int minex, int maxex) {$/;"	f
RM_ZsetRangeCurrentElement	src/module.c	/^RedisModuleString *RM_ZsetRangeCurrentElement(RedisModuleKey *key, double *score) {$/;"	f
RM_ZsetRangeEndReached	src/module.c	/^int RM_ZsetRangeEndReached(RedisModuleKey *key) {$/;"	f
RM_ZsetRangeNext	src/module.c	/^int RM_ZsetRangeNext(RedisModuleKey *key) {$/;"	f
RM_ZsetRangePrev	src/module.c	/^int RM_ZsetRangePrev(RedisModuleKey *key) {$/;"	f
RM_ZsetRangeStop	src/module.c	/^void RM_ZsetRangeStop(RedisModuleKey *key) {$/;"	f
RM_ZsetRem	src/module.c	/^int RM_ZsetRem(RedisModuleKey *key, RedisModuleString *ele, int *deleted) {$/;"	f
RM_ZsetScore	src/module.c	/^int RM_ZsetScore(RedisModuleKey *key, RedisModuleString *ele, double *score) {$/;"	f
RM__Assert	src/module.c	/^void RM__Assert(const char *estr, const char *file, int line) {$/;"	f
ROTL	src/siphash.c	66;"	d	file:
ROTLEFT	src/sha256.c	21;"	d	file:
ROTRIGHT	src/sha256.c	22;"	d	file:
RO_MUTEX_CTL_GEN	deps/jemalloc/src/ctl.c	2732;"	d	file:
RO_MUTEX_CTL_GEN	deps/jemalloc/src/ctl.c	2764;"	d	file:
RPATH	deps/jemalloc/Makefile	/^RPATH = $(if $(1),$(call _RPATH,$(1)))$/;"	m
RPATH_EXTRA	deps/jemalloc/Makefile	/^RPATH_EXTRA := $/;"	m
RPort	tests/instances.tcl	/^proc RPort {n} {$/;"	p
RTREE_CACHE_CHECK_L2	deps/jemalloc/include/jemalloc/internal/rtree.h	347;"	d
RTREE_CACHE_CHECK_L2	deps/jemalloc/include/jemalloc/internal/rtree.h	379;"	d
RTREE_CTX_LG_NCACHE	deps/jemalloc/include/jemalloc/internal/rtree_tsd.h	21;"	d
RTREE_CTX_NCACHE	deps/jemalloc/include/jemalloc/internal/rtree_tsd.h	22;"	d
RTREE_CTX_NCACHE_L2	deps/jemalloc/include/jemalloc/internal/rtree_tsd.h	23;"	d
RTREE_CTX_ZERO_INITIALIZER	deps/jemalloc/include/jemalloc/internal/rtree_tsd.h	29;"	d
RTREE_GET_CHILD	deps/jemalloc/src/rtree.c	243;"	d	file:
RTREE_GET_CHILD	deps/jemalloc/src/rtree.c	303;"	d	file:
RTREE_GET_LEAF	deps/jemalloc/src/rtree.c	269;"	d	file:
RTREE_GET_LEAF	deps/jemalloc/src/rtree.c	304;"	d	file:
RTREE_HEIGHT	deps/jemalloc/include/jemalloc/internal/rtree.h	25;"	d
RTREE_HEIGHT	deps/jemalloc/include/jemalloc/internal/rtree.h	27;"	d
RTREE_HEIGHT	deps/jemalloc/include/jemalloc/internal/rtree.h	29;"	d
RTREE_LEAFKEY_INVALID	deps/jemalloc/include/jemalloc/internal/rtree.h	39;"	d
RTREE_LEAF_COMPACT	deps/jemalloc/include/jemalloc/internal/rtree.h	35;"	d
RTREE_NHIB	deps/jemalloc/include/jemalloc/internal/rtree.h	18;"	d
RTREE_NLIB	deps/jemalloc/include/jemalloc/internal/rtree.h	20;"	d
RTREE_NSB	deps/jemalloc/include/jemalloc/internal/rtree.h	22;"	d
R_CC	deps/hdr_histogram/Makefile	/^R_CC=$(CC) $(R_CFLAGS)$/;"	m
R_CC	deps/linenoise/Makefile	/^R_CC=$(CC) $(R_CFLAGS)$/;"	m
R_CFLAGS	deps/hdr_histogram/Makefile	/^R_CFLAGS= $(STD) $(WARN) $(OPT) $(DEBUG) $(CFLAGS)$/;"	m
R_CFLAGS	deps/linenoise/Makefile	/^R_CFLAGS= $(STD) $(WARN) $(OPT) $(DEBUG) $(CFLAGS)$/;"	m
R_LD	deps/hdr_histogram/Makefile	/^R_LD=$(CC) $(R_LDFLAGS)$/;"	m
R_LD	deps/linenoise/Makefile	/^R_LD=$(CC) $(R_LDFLAGS)$/;"	m
R_LDFLAGS	deps/hdr_histogram/Makefile	/^R_LDFLAGS= $(LDFLAGS)$/;"	m
R_LDFLAGS	deps/linenoise/Makefile	/^R_LDFLAGS= $(LDFLAGS)$/;"	m
R_MAJOR	src/geohash_helper.c	43;"	d	file:
R_MINOR	src/geohash_helper.c	44;"	d	file:
R_Nan	src/server.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v
R_NegInf	src/server.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v
R_PosInf	src/server.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v
R_Zero	src/server.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v
RedisModule	src/module.c	/^struct RedisModule {$/;"	s	file:
RedisModule	src/module.c	/^typedef struct RedisModule RedisModule;$/;"	t	typeref:struct:RedisModule	file:
RedisModuleBlockedClient	src/module.c	/^typedef struct RedisModuleBlockedClient {$/;"	s	file:
RedisModuleBlockedClient	src/module.c	/^} RedisModuleBlockedClient;$/;"	t	typeref:struct:RedisModuleBlockedClient	file:
RedisModuleBlockedClient	src/redismodule.h	/^typedef struct RedisModuleBlockedClient RedisModuleBlockedClient;$/;"	t	typeref:struct:RedisModuleBlockedClient
RedisModuleCallReply	src/module.c	/^typedef struct RedisModuleCallReply {$/;"	s	file:
RedisModuleCallReply	src/module.c	/^} RedisModuleCallReply;$/;"	t	typeref:struct:RedisModuleCallReply	file:
RedisModuleCallReply	src/redismodule.h	/^typedef struct RedisModuleCallReply RedisModuleCallReply;$/;"	t	typeref:struct:RedisModuleCallReply
RedisModuleClientInfo	src/redismodule.h	/^typedef struct RedisModuleClientInfo {$/;"	s
RedisModuleClientInfo	src/redismodule.h	400;"	d
RedisModuleClientInfoV1	src/redismodule.h	/^} RedisModuleClientInfoV1;$/;"	t	typeref:struct:RedisModuleClientInfo
RedisModuleClusterInfo	src/redismodule.h	/^typedef struct RedisModuleClusterInfo RedisModuleClusterInfo;$/;"	t	typeref:struct:RedisModuleClusterInfo
RedisModuleClusterMessageReceiver	src/module.c	/^typedef void (*RedisModuleClusterMessageReceiver)(RedisModuleCtx *ctx, const char *sender_id, uint8_t type, const unsigned char *payload, uint32_t len);$/;"	t	file:
RedisModuleClusterMessageReceiver	src/redismodule.h	/^typedef void (*RedisModuleClusterMessageReceiver)(RedisModuleCtx *ctx, const char *sender_id, uint8_t type, const unsigned char *payload, uint32_t len);$/;"	t
RedisModuleCmdFunc	src/module.c	/^typedef int (*RedisModuleCmdFunc) (RedisModuleCtx *ctx, void **argv, int argc);$/;"	t	file:
RedisModuleCmdFunc	src/redismodule.h	/^typedef int (*RedisModuleCmdFunc)(RedisModuleCtx *ctx, RedisModuleString **argv, int argc);$/;"	t
RedisModuleCommandDispatcher	src/module.c	/^void RedisModuleCommandDispatcher(client *c) {$/;"	f
RedisModuleCommandFilter	src/module.c	/^typedef struct RedisModuleCommandFilter {$/;"	s	file:
RedisModuleCommandFilter	src/module.c	/^} RedisModuleCommandFilter;$/;"	t	typeref:struct:RedisModuleCommandFilter	file:
RedisModuleCommandFilter	src/redismodule.h	/^typedef struct RedisModuleCommandFilter RedisModuleCommandFilter;$/;"	t	typeref:struct:RedisModuleCommandFilter
RedisModuleCommandFilterCtx	src/module.c	/^typedef struct RedisModuleCommandFilterCtx {$/;"	s	file:
RedisModuleCommandFilterCtx	src/module.c	/^} RedisModuleCommandFilterCtx;$/;"	t	typeref:struct:RedisModuleCommandFilterCtx	file:
RedisModuleCommandFilterCtx	src/redismodule.h	/^typedef struct RedisModuleCommandFilterCtx RedisModuleCommandFilterCtx;$/;"	t	typeref:struct:RedisModuleCommandFilterCtx
RedisModuleCommandFilterFunc	src/module.c	/^typedef void (*RedisModuleCommandFilterFunc) (RedisModuleCommandFilterCtx *filter);$/;"	t	file:
RedisModuleCommandFilterFunc	src/redismodule.h	/^typedef void (*RedisModuleCommandFilterFunc) (RedisModuleCommandFilterCtx *filter);$/;"	t
RedisModuleCommandProxy	src/module.c	/^struct RedisModuleCommandProxy {$/;"	s	file:
RedisModuleCommandProxy	src/module.c	/^typedef struct RedisModuleCommandProxy RedisModuleCommandProxy;$/;"	t	typeref:struct:RedisModuleCommandProxy	file:
RedisModuleCronLoop	src/redismodule.h	448;"	d
RedisModuleCronLoopInfo	src/redismodule.h	/^typedef struct RedisModuleCronLoopInfo {$/;"	s
RedisModuleCronLoopV1	src/redismodule.h	/^} RedisModuleCronLoopV1;$/;"	t	typeref:struct:RedisModuleCronLoopInfo
RedisModuleCtx	src/module.c	/^struct RedisModuleCtx {$/;"	s	file:
RedisModuleCtx	src/module.c	/^typedef struct RedisModuleCtx RedisModuleCtx;$/;"	t	typeref:struct:RedisModuleCtx	file:
RedisModuleCtx	src/redismodule.h	/^typedef struct RedisModuleCtx RedisModuleCtx;$/;"	t	typeref:struct:RedisModuleCtx
RedisModuleDefragCtx	src/module.c	/^typedef struct RedisModuleDefragCtx {$/;"	s	file:
RedisModuleDefragCtx	src/module.c	/^} RedisModuleDefragCtx;$/;"	t	typeref:struct:RedisModuleDefragCtx	file:
RedisModuleDefragCtx	src/redismodule.h	/^typedef struct RedisModuleDefragCtx RedisModuleDefragCtx;$/;"	t	typeref:struct:RedisModuleDefragCtx
RedisModuleDefragFunc	src/module.c	/^typedef void (*RedisModuleDefragFunc)(struct RedisModuleDefragCtx *ctx);$/;"	t	file:
RedisModuleDefragFunc	src/redismodule.h	/^typedef int (*RedisModuleDefragFunc)(RedisModuleDefragCtx *ctx);$/;"	t
RedisModuleDict	src/module.c	/^typedef struct RedisModuleDict {$/;"	s	file:
RedisModuleDict	src/module.c	/^} RedisModuleDict;$/;"	t	typeref:struct:RedisModuleDict	file:
RedisModuleDict	src/redismodule.h	/^typedef struct RedisModuleDict RedisModuleDict;$/;"	t	typeref:struct:RedisModuleDict
RedisModuleDictIter	src/module.c	/^typedef struct RedisModuleDictIter {$/;"	s	file:
RedisModuleDictIter	src/module.c	/^} RedisModuleDictIter;$/;"	t	typeref:struct:RedisModuleDictIter	file:
RedisModuleDictIter	src/redismodule.h	/^typedef struct RedisModuleDictIter RedisModuleDictIter;$/;"	t	typeref:struct:RedisModuleDictIter
RedisModuleDigest	src/redismodule.h	/^typedef struct RedisModuleDigest RedisModuleDigest;$/;"	t	typeref:struct:RedisModuleDigest
RedisModuleDigest	src/server.h	/^typedef struct RedisModuleDigest {$/;"	s
RedisModuleDigest	src/server.h	/^} RedisModuleDigest;$/;"	t	typeref:struct:RedisModuleDigest
RedisModuleDisconnectFunc	src/module.c	/^typedef void (*RedisModuleDisconnectFunc) (RedisModuleCtx *ctx, struct RedisModuleBlockedClient *bc);$/;"	t	file:
RedisModuleDisconnectFunc	src/redismodule.h	/^typedef void (*RedisModuleDisconnectFunc)(RedisModuleCtx *ctx, RedisModuleBlockedClient *bc);$/;"	t
RedisModuleEvent	src/redismodule.h	/^typedef struct RedisModuleEvent {$/;"	s
RedisModuleEvent	src/redismodule.h	/^} RedisModuleEvent;$/;"	t	typeref:struct:RedisModuleEvent
RedisModuleEventCallback	src/redismodule.h	/^typedef void (*RedisModuleEventCallback)(struct RedisModuleCtx *ctx, RedisModuleEvent eid, uint64_t subevent, void *data);$/;"	t
RedisModuleEventListener	src/module.c	/^typedef struct RedisModuleEventListener {$/;"	s	file:
RedisModuleEventListener	src/module.c	/^} RedisModuleEventListener;$/;"	t	typeref:struct:RedisModuleEventListener	file:
RedisModuleEvent_ClientChange	src/redismodule.h	/^    RedisModuleEvent_ClientChange = {$/;"	v
RedisModuleEvent_CronLoop	src/redismodule.h	/^    RedisModuleEvent_CronLoop = {$/;"	v
RedisModuleEvent_FlushDB	src/redismodule.h	/^    RedisModuleEvent_FlushDB = {$/;"	v
RedisModuleEvent_ForkChild	src/redismodule.h	/^    RedisModuleEvent_ForkChild = {$/;"	v
RedisModuleEvent_Loading	src/redismodule.h	/^    RedisModuleEvent_Loading = {$/;"	v
RedisModuleEvent_LoadingProgress	src/redismodule.h	/^    RedisModuleEvent_LoadingProgress = {$/;"	v
RedisModuleEvent_MasterLinkChange	src/redismodule.h	/^    RedisModuleEvent_MasterLinkChange = {$/;"	v
RedisModuleEvent_ModuleChange	src/redismodule.h	/^    RedisModuleEvent_ModuleChange = {$/;"	v
RedisModuleEvent_Persistence	src/redismodule.h	/^    RedisModuleEvent_Persistence = {$/;"	v
RedisModuleEvent_ReplBackup	src/redismodule.h	/^    RedisModuleEvent_ReplBackup = {$/;"	v
RedisModuleEvent_ReplicaChange	src/redismodule.h	/^    RedisModuleEvent_ReplicaChange = {$/;"	v
RedisModuleEvent_ReplicationRoleChanged	src/redismodule.h	/^    RedisModuleEvent_ReplicationRoleChanged = {$/;"	v
RedisModuleEvent_Shutdown	src/redismodule.h	/^    RedisModuleEvent_Shutdown = {$/;"	v
RedisModuleEvent_SwapDB	src/redismodule.h	/^    RedisModuleEvent_SwapDB = {$/;"	v
RedisModuleFlushInfo	src/redismodule.h	/^typedef struct RedisModuleFlushInfo {$/;"	s
RedisModuleFlushInfo	src/redismodule.h	427;"	d
RedisModuleFlushInfoV1	src/redismodule.h	/^} RedisModuleFlushInfoV1;$/;"	t	typeref:struct:RedisModuleFlushInfo
RedisModuleForkDoneHandler	src/module.c	/^typedef void (*RedisModuleForkDoneHandler) (int exitcode, int bysignal, void *user_data);$/;"	t	file:
RedisModuleForkDoneHandler	src/redismodule.h	/^typedef void (*RedisModuleForkDoneHandler) (int exitcode, int bysignal, void *user_data);$/;"	t
RedisModuleForkInfo	src/module.c	/^static struct RedisModuleForkInfo {$/;"	s	file:
RedisModuleIO	src/redismodule.h	/^typedef struct RedisModuleIO RedisModuleIO;$/;"	t	typeref:struct:RedisModuleIO
RedisModuleIO	src/server.h	/^typedef struct RedisModuleIO {$/;"	s
RedisModuleIO	src/server.h	/^} RedisModuleIO;$/;"	t	typeref:struct:RedisModuleIO
RedisModuleInfoCtx	src/module.c	/^typedef struct RedisModuleInfoCtx {$/;"	s	file:
RedisModuleInfoCtx	src/module.c	/^} RedisModuleInfoCtx;$/;"	t	typeref:struct:RedisModuleInfoCtx	file:
RedisModuleInfoCtx	src/redismodule.h	/^typedef struct RedisModuleInfoCtx RedisModuleInfoCtx;$/;"	t	typeref:struct:RedisModuleInfoCtx
RedisModuleInfoFunc	src/module.c	/^typedef void (*RedisModuleInfoFunc)(RedisModuleInfoCtx *ctx, int for_crash_report);$/;"	t	file:
RedisModuleInfoFunc	src/redismodule.h	/^typedef void (*RedisModuleInfoFunc)(RedisModuleInfoCtx *ctx, int for_crash_report);$/;"	t
RedisModuleKey	src/module.c	/^struct RedisModuleKey {$/;"	s	file:
RedisModuleKey	src/module.c	/^typedef struct RedisModuleKey RedisModuleKey;$/;"	t	typeref:struct:RedisModuleKey	file:
RedisModuleKey	src/redismodule.h	/^typedef struct RedisModuleKey RedisModuleKey;$/;"	t	typeref:struct:RedisModuleKey
RedisModuleKeyspaceSubscriber	src/module.c	/^typedef struct RedisModuleKeyspaceSubscriber {$/;"	s	file:
RedisModuleKeyspaceSubscriber	src/module.c	/^} RedisModuleKeyspaceSubscriber;$/;"	t	typeref:struct:RedisModuleKeyspaceSubscriber	file:
RedisModuleLoadingProgress	src/redismodule.h	460;"	d
RedisModuleLoadingProgressInfo	src/redismodule.h	/^typedef struct RedisModuleLoadingProgressInfo {$/;"	s
RedisModuleLoadingProgressV1	src/redismodule.h	/^} RedisModuleLoadingProgressV1;$/;"	t	typeref:struct:RedisModuleLoadingProgressInfo
RedisModuleModuleChange	src/redismodule.h	/^typedef struct RedisModuleModuleChange {$/;"	s
RedisModuleModuleChange	src/redismodule.h	438;"	d
RedisModuleModuleChangeV1	src/redismodule.h	/^} RedisModuleModuleChangeV1;$/;"	t	typeref:struct:RedisModuleModuleChange
RedisModuleNotificationFunc	src/module.c	/^typedef int (*RedisModuleNotificationFunc) (RedisModuleCtx *ctx, int type, const char *event, RedisModuleString *key);$/;"	t	file:
RedisModuleNotificationFunc	src/redismodule.h	/^typedef int (*RedisModuleNotificationFunc)(RedisModuleCtx *ctx, int type, const char *event, RedisModuleString *key);$/;"	t
RedisModulePoolAllocBlock	src/module.c	/^typedef struct RedisModulePoolAllocBlock {$/;"	s	file:
RedisModulePoolAllocBlock	src/module.c	/^} RedisModulePoolAllocBlock;$/;"	t	typeref:struct:RedisModulePoolAllocBlock	file:
RedisModuleReplicationInfo	src/redismodule.h	/^typedef struct RedisModuleReplicationInfo {$/;"	s
RedisModuleReplicationInfo	src/redismodule.h	416;"	d
RedisModuleReplicationInfoV1	src/redismodule.h	/^} RedisModuleReplicationInfoV1;$/;"	t	typeref:struct:RedisModuleReplicationInfo
RedisModuleScanCB	src/module.c	/^typedef void (*RedisModuleScanCB)(RedisModuleCtx *ctx, RedisModuleString *keyname, RedisModuleKey *key, void *privdata);$/;"	t	file:
RedisModuleScanCB	src/redismodule.h	/^typedef void (*RedisModuleScanCB)(RedisModuleCtx *ctx, RedisModuleString *keyname, RedisModuleKey *key, void *privdata);$/;"	t
RedisModuleScanCursor	src/module.c	/^typedef struct RedisModuleScanCursor{$/;"	s	file:
RedisModuleScanCursor	src/module.c	/^}RedisModuleScanCursor;$/;"	t	typeref:struct:RedisModuleScanCursor	file:
RedisModuleScanCursor	src/redismodule.h	/^typedef struct RedisModuleScanCursor RedisModuleScanCursor;$/;"	t	typeref:struct:RedisModuleScanCursor
RedisModuleScanKeyCB	src/module.c	/^typedef void (*RedisModuleScanKeyCB)(RedisModuleKey *key, RedisModuleString *field, RedisModuleString *value, void *privdata);$/;"	t	file:
RedisModuleScanKeyCB	src/redismodule.h	/^typedef void (*RedisModuleScanKeyCB)(RedisModuleKey *key, RedisModuleString *field, RedisModuleString *value, void *privdata);$/;"	t
RedisModuleServerInfoData	src/module.c	/^typedef struct RedisModuleServerInfoData {$/;"	s	file:
RedisModuleServerInfoData	src/module.c	/^} RedisModuleServerInfoData;$/;"	t	typeref:struct:RedisModuleServerInfoData	file:
RedisModuleServerInfoData	src/redismodule.h	/^typedef struct RedisModuleServerInfoData RedisModuleServerInfoData;$/;"	t	typeref:struct:RedisModuleServerInfoData
RedisModuleSharedAPI	src/module.c	/^struct RedisModuleSharedAPI {$/;"	s	file:
RedisModuleSharedAPI	src/module.c	/^typedef struct RedisModuleSharedAPI RedisModuleSharedAPI;$/;"	t	typeref:struct:RedisModuleSharedAPI	file:
RedisModuleStreamID	src/redismodule.h	/^typedef struct RedisModuleStreamID {$/;"	s
RedisModuleStreamID	src/redismodule.h	/^} RedisModuleStreamID;$/;"	t	typeref:struct:RedisModuleStreamID
RedisModuleString	src/redismodule.h	/^typedef struct RedisModuleString RedisModuleString;$/;"	t	typeref:struct:RedisModuleString
RedisModuleString	src/redismodule.h	1132;"	d
RedisModuleSwapDbInfo	src/redismodule.h	/^typedef struct RedisModuleSwapDbInfo {$/;"	s
RedisModuleSwapDbInfo	src/redismodule.h	471;"	d
RedisModuleSwapDbInfoV1	src/redismodule.h	/^} RedisModuleSwapDbInfoV1;$/;"	t	typeref:struct:RedisModuleSwapDbInfo
RedisModuleTimer	src/module.c	/^typedef struct RedisModuleTimer {$/;"	s	file:
RedisModuleTimer	src/module.c	/^} RedisModuleTimer;$/;"	t	typeref:struct:RedisModuleTimer	file:
RedisModuleTimerID	src/redismodule.h	/^typedef uint64_t RedisModuleTimerID;$/;"	t
RedisModuleTimerProc	src/module.c	/^typedef void (*RedisModuleTimerProc)(RedisModuleCtx *ctx, void *data);$/;"	t	file:
RedisModuleTimerProc	src/redismodule.h	/^typedef void (*RedisModuleTimerProc)(RedisModuleCtx *ctx, void *data);$/;"	t
RedisModuleType	src/redismodule.h	/^typedef struct RedisModuleType RedisModuleType;$/;"	t	typeref:struct:RedisModuleType
RedisModuleType	src/server.h	/^typedef struct RedisModuleType {$/;"	s
RedisModuleTypeAuxLoadFunc	src/redismodule.h	/^typedef int (*RedisModuleTypeAuxLoadFunc)(RedisModuleIO *rdb, int encver, int when);$/;"	t
RedisModuleTypeAuxSaveFunc	src/redismodule.h	/^typedef void (*RedisModuleTypeAuxSaveFunc)(RedisModuleIO *rdb, int when);$/;"	t
RedisModuleTypeCopyFunc	src/redismodule.h	/^typedef void *(*RedisModuleTypeCopyFunc)(RedisModuleString *fromkey, RedisModuleString *tokey, const void *value);$/;"	t
RedisModuleTypeDefragFunc	src/redismodule.h	/^typedef int (*RedisModuleTypeDefragFunc)(RedisModuleDefragCtx *ctx, RedisModuleString *key, void **value);$/;"	t
RedisModuleTypeDigestFunc	src/redismodule.h	/^typedef void (*RedisModuleTypeDigestFunc)(RedisModuleDigest *digest, void *value);$/;"	t
RedisModuleTypeFreeEffortFunc	src/redismodule.h	/^typedef size_t (*RedisModuleTypeFreeEffortFunc)(RedisModuleString *key, const void *value);$/;"	t
RedisModuleTypeFreeFunc	src/redismodule.h	/^typedef void (*RedisModuleTypeFreeFunc)(void *value);$/;"	t
RedisModuleTypeLoadFunc	src/redismodule.h	/^typedef void *(*RedisModuleTypeLoadFunc)(RedisModuleIO *rdb, int encver);$/;"	t
RedisModuleTypeMemUsageFunc	src/redismodule.h	/^typedef size_t (*RedisModuleTypeMemUsageFunc)(const void *value);$/;"	t
RedisModuleTypeMethods	src/redismodule.h	/^typedef struct RedisModuleTypeMethods {$/;"	s
RedisModuleTypeMethods	src/redismodule.h	/^} RedisModuleTypeMethods;$/;"	t	typeref:struct:RedisModuleTypeMethods
RedisModuleTypeRewriteFunc	src/redismodule.h	/^typedef void (*RedisModuleTypeRewriteFunc)(RedisModuleIO *aof, RedisModuleString *key, void *value);$/;"	t
RedisModuleTypeSaveFunc	src/redismodule.h	/^typedef void (*RedisModuleTypeSaveFunc)(RedisModuleIO *rdb, void *value);$/;"	t
RedisModuleTypeUnlinkFunc	src/redismodule.h	/^typedef void (*RedisModuleTypeUnlinkFunc)(RedisModuleString *key, const void *value);$/;"	t
RedisModuleUser	src/module.c	/^typedef struct RedisModuleUser {$/;"	s	file:
RedisModuleUser	src/module.c	/^} RedisModuleUser;$/;"	t	typeref:struct:RedisModuleUser	file:
RedisModuleUser	src/redismodule.h	/^typedef struct RedisModuleUser RedisModuleUser;$/;"	t	typeref:struct:RedisModuleUser
RedisModuleUserChangedFunc	src/redismodule.h	/^typedef void (*RedisModuleUserChangedFunc) (uint64_t client_id, void *privdata);$/;"	t
RedisModuleUserChangedFunc	src/server.h	/^typedef void (*RedisModuleUserChangedFunc) (uint64_t client_id, void *privdata);$/;"	t
RedisModule_Assert	src/redismodule.h	1124;"	d
RedisModule_EventListeners	src/module.c	/^list *RedisModule_EventListeners; \/* Global list of all the active events. *\/$/;"	v
RedisModule_Init	src/redismodule.h	/^static int RedisModule_Init(RedisModuleCtx *ctx, const char *name, int ver, int apiver) {$/;"	f
RedisModule_IsAOFClient	src/redismodule.h	847;"	d
RedisModule_OnLoad	src/modules/helloacl.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
RedisModule_OnLoad	src/modules/helloblock.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
RedisModule_OnLoad	src/modules/hellocluster.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
RedisModule_OnLoad	src/modules/hellodict.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
RedisModule_OnLoad	src/modules/hellohook.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
RedisModule_OnLoad	src/modules/hellotimer.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
RedisModule_OnLoad	src/modules/hellotype.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
RedisModule_OnLoad	src/modules/helloworld.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
RedisModule_OnLoad	src/modules/testmodule.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
RedisModule_OnLoad	tests/modules/auth.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
RedisModule_OnLoad	tests/modules/blockedclient.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
RedisModule_OnLoad	tests/modules/blockonbackground.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
RedisModule_OnLoad	tests/modules/blockonkeys.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
RedisModule_OnLoad	tests/modules/commandfilter.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
RedisModule_OnLoad	tests/modules/datatype.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
RedisModule_OnLoad	tests/modules/defragtest.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
RedisModule_OnLoad	tests/modules/fork.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
RedisModule_OnLoad	tests/modules/getkeys.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
RedisModule_OnLoad	tests/modules/hash.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
RedisModule_OnLoad	tests/modules/hooks.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
RedisModule_OnLoad	tests/modules/infotest.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
RedisModule_OnLoad	tests/modules/keyspace_events.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
RedisModule_OnLoad	tests/modules/misc.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
RedisModule_OnLoad	tests/modules/propagate.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
RedisModule_OnLoad	tests/modules/scan.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
RedisModule_OnLoad	tests/modules/stream.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
RedisModule_OnLoad	tests/modules/test_lazyfree.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
RedisModule_OnLoad	tests/modules/testrdb.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
RedisModule_OnLoad	tests/modules/timer.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
RedisModule_OnLoad	tests/modules/zset.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
RedisModule_OnUnload	tests/modules/commandfilter.c	/^int RedisModule_OnUnload(RedisModuleCtx *ctx) {$/;"	f
RedisModule_OnUnload	tests/modules/hooks.c	/^int RedisModule_OnUnload(RedisModuleCtx *ctx) {$/;"	f
RedisModule_OnUnload	tests/modules/keyspace_events.c	/^int RedisModule_OnUnload(RedisModuleCtx *ctx) {$/;"	f
RedisModule_OnUnload	tests/modules/testrdb.c	/^int RedisModule_OnUnload(RedisModuleCtx *ctx) {$/;"	f
RedisQtAdapter	deps/hiredis/adapters/qt.h	/^        RedisQtAdapter(QObject * parent = 0)$/;"	f	class:RedisQtAdapter
RedisQtAdapter	deps/hiredis/adapters/qt.h	/^class RedisQtAdapter : public QObject {$/;"	c
RedisQtAddRead	deps/hiredis/adapters/qt.h	/^    void RedisQtAddRead(void * adapter) {$/;"	f	class:RedisQtAdapter
RedisQtAddWrite	deps/hiredis/adapters/qt.h	/^    void RedisQtAddWrite(void * adapter) {$/;"	f	class:RedisQtAdapter
RedisQtCleanup	deps/hiredis/adapters/qt.h	/^    void RedisQtCleanup(void * adapter) {$/;"	f	class:RedisQtAdapter
RedisQtDelRead	deps/hiredis/adapters/qt.h	/^    void RedisQtDelRead(void * adapter) {$/;"	f	class:RedisQtAdapter
RedisQtDelWrite	deps/hiredis/adapters/qt.h	/^    void RedisQtDelWrite(void * adapter) {$/;"	f	class:RedisQtAdapter
RedisRunLoop	deps/hiredis/adapters/macosx.h	/^} RedisRunLoop;$/;"	t	typeref:struct:__anon86
RedisSource	deps/hiredis/adapters/glib.h	/^} RedisSource;$/;"	t	typeref:struct:__anon85
ResetCommand_RedisCommand	src/modules/helloacl.c	/^int ResetCommand_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
RevokeCommand_RedisCommand	src/modules/helloacl.c	/^int RevokeCommand_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
Rn	tests/instances.tcl	/^proc Rn {n} {$/;"	p
S	deps/lua/src/print.c	159;"	d	file:
S	tests/instances.tcl	/^proc S {n args} {$/;"	p
S2B_0	deps/jemalloc/src/sz.c	31;"	d	file:
S2B_1	deps/jemalloc/src/sz.c	60;"	d	file:
S2B_10	deps/jemalloc/src/sz.c	103;"	d	file:
S2B_10	deps/jemalloc/src/sz.c	87;"	d	file:
S2B_11	deps/jemalloc/src/sz.c	104;"	d	file:
S2B_11	deps/jemalloc/src/sz.c	90;"	d	file:
S2B_2	deps/jemalloc/src/sz.c	63;"	d	file:
S2B_3	deps/jemalloc/src/sz.c	66;"	d	file:
S2B_3	deps/jemalloc/src/sz.c	96;"	d	file:
S2B_4	deps/jemalloc/src/sz.c	69;"	d	file:
S2B_4	deps/jemalloc/src/sz.c	97;"	d	file:
S2B_5	deps/jemalloc/src/sz.c	72;"	d	file:
S2B_5	deps/jemalloc/src/sz.c	98;"	d	file:
S2B_6	deps/jemalloc/src/sz.c	75;"	d	file:
S2B_6	deps/jemalloc/src/sz.c	99;"	d	file:
S2B_7	deps/jemalloc/src/sz.c	100;"	d	file:
S2B_7	deps/jemalloc/src/sz.c	78;"	d	file:
S2B_8	deps/jemalloc/src/sz.c	101;"	d	file:
S2B_8	deps/jemalloc/src/sz.c	81;"	d	file:
S2B_9	deps/jemalloc/src/sz.c	102;"	d	file:
S2B_9	deps/jemalloc/src/sz.c	84;"	d	file:
S2B_no	deps/jemalloc/src/sz.c	105;"	d	file:
S2B_no	deps/jemalloc/src/sz.c	92;"	d	file:
SANITIZE_DUMP_CLIENTS	src/server.h	411;"	d
SANITIZE_DUMP_NO	src/server.h	409;"	d
SANITIZE_DUMP_YES	src/server.h	410;"	d
SA_ONSTACK	src/debug.c	53;"	d	file:
SBits	deps/lua/src/lua_bit.c	/^typedef int32_t SBits;$/;"	t	file:
SC	deps/jemalloc/src/arena.c	1924;"	d	file:
SC	deps/jemalloc/src/arena.c	1930;"	d	file:
SC	deps/jemalloc/src/bin.c	11;"	d	file:
SC	deps/jemalloc/src/bin.c	19;"	d	file:
SC	deps/jemalloc/src/sz.c	106;"	d	file:
SC	deps/jemalloc/src/sz.c	14;"	d	file:
SC	deps/jemalloc/src/sz.c	20;"	d	file:
SC	deps/jemalloc/src/sz.c	23;"	d	file:
SC	deps/jemalloc/src/sz.c	93;"	d	file:
SC	deps/jemalloc/src/sz.c	9;"	d	file:
SDS_HDR	src/sds.h	84;"	d
SDS_HDR_VAR	src/sds.h	83;"	d
SDS_LLSTR_SIZE	src/sds.c	484;"	d	file:
SDS_MAX_PREALLOC	src/sds.h	36;"	d
SDS_NOINIT	src/sds.c	/^const char *SDS_NOINIT = "SDS_NOINIT";$/;"	v
SDS_TYPE_16	src/sds.h	78;"	d
SDS_TYPE_32	src/sds.h	79;"	d
SDS_TYPE_5	src/sds.h	76;"	d
SDS_TYPE_5_LEN	src/sds.h	85;"	d
SDS_TYPE_64	src/sds.h	80;"	d
SDS_TYPE_8	src/sds.h	77;"	d
SDS_TYPE_BITS	src/sds.h	82;"	d
SDS_TYPE_MASK	src/sds.h	81;"	d
SEED	deps/jemalloc/test/unit/ph.c	175;"	d	file:
SEED	deps/jemalloc/test/unit/ph.c	309;"	d	file:
SEED	deps/jemalloc/test/unit/rb.c	230;"	d	file:
SEED	deps/jemalloc/test/unit/rb.c	346;"	d	file:
SEED	deps/jemalloc/test/unit/rtree.c	160;"	d	file:
SEED	deps/jemalloc/test/unit/rtree.c	207;"	d	file:
SEED	deps/jemalloc/test/unit/rtree.c	84;"	d	file:
SEED	src/rand.c	63;"	d	file:
SENSITIVE_CONFIG	src/config.c	252;"	d	file:
SENTINEL_ASK_FORCED	src/sentinel.c	4317;"	d	file:
SENTINEL_ASK_PERIOD	src/sentinel.c	83;"	d	file:
SENTINEL_DEFAULT_ANNOUNCE_HOSTNAMES	src/sentinel.c	99;"	d	file:
SENTINEL_DEFAULT_DENY_SCRIPTS_RECONFIG	src/sentinel.c	97;"	d	file:
SENTINEL_DEFAULT_DOWN_AFTER	src/sentinel.c	85;"	d	file:
SENTINEL_DEFAULT_FAILOVER_TIMEOUT	src/sentinel.c	93;"	d	file:
SENTINEL_DEFAULT_PARALLEL_SYNCS	src/sentinel.c	91;"	d	file:
SENTINEL_DEFAULT_RESOLVE_HOSTNAMES	src/sentinel.c	98;"	d	file:
SENTINEL_DEFAULT_SLAVE_PRIORITY	src/sentinel.c	89;"	d	file:
SENTINEL_ELECTION_TIMEOUT	src/sentinel.c	95;"	d	file:
SENTINEL_FAILOVER_STATE_NONE	src/sentinel.c	102;"	d	file:
SENTINEL_FAILOVER_STATE_RECONF_SLAVES	src/sentinel.c	107;"	d	file:
SENTINEL_FAILOVER_STATE_SELECT_SLAVE	src/sentinel.c	104;"	d	file:
SENTINEL_FAILOVER_STATE_SEND_SLAVEOF_NOONE	src/sentinel.c	105;"	d	file:
SENTINEL_FAILOVER_STATE_UPDATE_CONFIG	src/sentinel.c	108;"	d	file:
SENTINEL_FAILOVER_STATE_WAIT_PROMOTION	src/sentinel.c	106;"	d	file:
SENTINEL_FAILOVER_STATE_WAIT_START	src/sentinel.c	103;"	d	file:
SENTINEL_GENERATE_EVENT	src/sentinel.c	117;"	d	file:
SENTINEL_HELLO_CHANNEL	src/sentinel.c	86;"	d	file:
SENTINEL_INFO_PERIOD	src/sentinel.c	81;"	d	file:
SENTINEL_ISQR_NOAUTH	src/sentinel.c	3499;"	d	file:
SENTINEL_ISQR_NOQUORUM	src/sentinel.c	3498;"	d	file:
SENTINEL_ISQR_OK	src/sentinel.c	3497;"	d	file:
SENTINEL_LEADER	src/sentinel.c	118;"	d	file:
SENTINEL_MASTER_LINK_STATUS_DOWN	src/sentinel.c	111;"	d	file:
SENTINEL_MASTER_LINK_STATUS_UP	src/sentinel.c	110;"	d	file:
SENTINEL_MAX_DESYNC	src/sentinel.c	96;"	d	file:
SENTINEL_MAX_PENDING_COMMANDS	src/sentinel.c	94;"	d	file:
SENTINEL_MIN_LINK_RECONNECT_PERIOD	src/sentinel.c	92;"	d	file:
SENTINEL_NO_FLAGS	src/sentinel.c	116;"	d	file:
SENTINEL_OBSERVER	src/sentinel.c	119;"	d	file:
SENTINEL_PING_PERIOD	src/sentinel.c	82;"	d	file:
SENTINEL_PUBLISH_PERIOD	src/sentinel.c	84;"	d	file:
SENTINEL_RESET_NO_SENTINELS	src/sentinel.c	1562;"	d	file:
SENTINEL_SCRIPT_MAX_ARGS	src/sentinel.c	778;"	d	file:
SENTINEL_SCRIPT_MAX_QUEUE	src/sentinel.c	124;"	d	file:
SENTINEL_SCRIPT_MAX_RETRY	src/sentinel.c	127;"	d	file:
SENTINEL_SCRIPT_MAX_RUNNING	src/sentinel.c	125;"	d	file:
SENTINEL_SCRIPT_MAX_RUNTIME	src/sentinel.c	126;"	d	file:
SENTINEL_SCRIPT_NONE	src/sentinel.c	122;"	d	file:
SENTINEL_SCRIPT_RETRY_DELAY	src/sentinel.c	128;"	d	file:
SENTINEL_SCRIPT_RUNNING	src/sentinel.c	123;"	d	file:
SENTINEL_SIMFAILURE_CRASH_AFTER_ELECTION	src/sentinel.c	132;"	d	file:
SENTINEL_SIMFAILURE_CRASH_AFTER_PROMOTION	src/sentinel.c	133;"	d	file:
SENTINEL_SIMFAILURE_NONE	src/sentinel.c	131;"	d	file:
SENTINEL_SLAVE_RECONF_TIMEOUT	src/sentinel.c	90;"	d	file:
SENTINEL_TILT_PERIOD	src/sentinel.c	88;"	d	file:
SENTINEL_TILT_TRIGGER	src/sentinel.c	87;"	d	file:
SERVER_CHILD_NOERROR_RETVAL	src/server.h	138;"	d
SET3	src/rand.c	61;"	d	file:
SETARG_A	deps/lua/src/lopcodes.h	85;"	d
SETARG_B	deps/lua/src/lopcodes.h	89;"	d
SETARG_Bx	deps/lua/src/lopcodes.h	97;"	d
SETARG_C	deps/lua/src/lopcodes.h	93;"	d
SETARG_sBx	deps/lua/src/lopcodes.h	101;"	d
SETLOW	src/rand.c	62;"	d	file:
SET_ERRNO	src/lzf_d.c	40;"	d	file:
SET_ERRNO	src/lzf_d.c	43;"	d	file:
SET_NUMERIC_TYPE	src/config.c	1939;"	d	file:
SET_OPCODE	deps/lua/src/lopcodes.h	81;"	d
SET_OP_DIFF	src/server.h	415;"	d
SET_OP_DIFF	src/t_set.c	988;"	d	file:
SET_OP_INTER	src/server.h	416;"	d
SET_OP_INTER	src/t_set.c	989;"	d	file:
SET_OP_UNION	src/server.h	414;"	d
SET_OP_UNION	src/t_set.c	987;"	d	file:
SE_SYSTEMD	src/Makefile	/^	echo USE_SYSTEMD=$(USE_SYSTEMD) >> .make-settings$/;"	m
SFIXEDBIT	deps/lua/src/lgc.h	61;"	d
SFMT_ALTI_H	deps/jemalloc/test/include/test/SFMT-alti.h	53;"	d
SFMT_C_	deps/jemalloc/test/src/SFMT.c	48;"	d	file:
SFMT_H	deps/jemalloc/test/include/test/SFMT.h	67;"	d
SFMT_PARAMS11213_H	deps/jemalloc/test/include/test/SFMT-params11213.h	37;"	d
SFMT_PARAMS1279_H	deps/jemalloc/test/include/test/SFMT-params1279.h	37;"	d
SFMT_PARAMS132049_H	deps/jemalloc/test/include/test/SFMT-params132049.h	37;"	d
SFMT_PARAMS19937_H	deps/jemalloc/test/include/test/SFMT-params19937.h	37;"	d
SFMT_PARAMS216091_H	deps/jemalloc/test/include/test/SFMT-params216091.h	37;"	d
SFMT_PARAMS2281_H	deps/jemalloc/test/include/test/SFMT-params2281.h	37;"	d
SFMT_PARAMS4253_H	deps/jemalloc/test/include/test/SFMT-params4253.h	37;"	d
SFMT_PARAMS44497_H	deps/jemalloc/test/include/test/SFMT-params44497.h	37;"	d
SFMT_PARAMS607_H	deps/jemalloc/test/include/test/SFMT-params607.h	37;"	d
SFMT_PARAMS86243_H	deps/jemalloc/test/include/test/SFMT-params86243.h	37;"	d
SFMT_PARAMS_H	deps/jemalloc/test/include/test/SFMT-params.h	37;"	d
SFMT_SSE2_H	deps/jemalloc/test/include/test/SFMT-sse2.h	52;"	d
SHA1Final	src/sha1.c	/^void SHA1Final(unsigned char digest[20], SHA1_CTX* context)$/;"	f
SHA1HANDSOFF	src/sha1.c	22;"	d	file:
SHA1Init	src/sha1.c	/^void SHA1Init(SHA1_CTX* context)$/;"	f
SHA1Transform	src/sha1.c	/^void SHA1Transform(uint32_t state[5], const unsigned char buffer[64])$/;"	f
SHA1Update	src/sha1.c	/^void SHA1Update(SHA1_CTX* context, const unsigned char* data, uint32_t len)$/;"	f
SHA1_CTX	src/sha1.h	/^} SHA1_CTX;$/;"	t	typeref:struct:__anon69
SHA1_H	src/sha1.h	2;"	d
SHA256_BLOCK_SIZE	src/sha256.h	17;"	d
SHA256_CTX	src/sha256.h	/^} SHA256_CTX;$/;"	t	typeref:struct:__anon68
SHA256_H	src/sha256.h	10;"	d
SHELL	deps/jemalloc/Makefile	/^SHELL := \/bin\/sh$/;"	m
SHOBJ_CFLAGS	src/modules/Makefile	/^	SHOBJ_CFLAGS ?= -W -Wall -dynamic -fno-common -g -ggdb -std=c99 -O2$/;"	m
SHOBJ_CFLAGS	src/modules/Makefile	/^	SHOBJ_CFLAGS ?= -W -Wall -fno-common -g -ggdb -std=c99 -O2$/;"	m
SHOBJ_CFLAGS	tests/modules/Makefile	/^	SHOBJ_CFLAGS ?= -W -Wall -dynamic -fno-common -g -ggdb -std=c99 -O2$/;"	m
SHOBJ_CFLAGS	tests/modules/Makefile	/^	SHOBJ_CFLAGS ?= -W -Wall -fno-common -g -ggdb -std=c99 -O2$/;"	m
SHOBJ_LDFLAGS	src/modules/Makefile	/^	SHOBJ_LDFLAGS ?= -bundle -undefined dynamic_lookup$/;"	m
SHOBJ_LDFLAGS	src/modules/Makefile	/^	SHOBJ_LDFLAGS ?= -shared$/;"	m
SHOBJ_LDFLAGS	tests/modules/Makefile	/^	SHOBJ_LDFLAGS ?= -bundle -undefined dynamic_lookup$/;"	m
SHOBJ_LDFLAGS	tests/modules/Makefile	/^	SHOBJ_LDFLAGS ?= -shared$/;"	m
SHOULD_SIGNAL_MODIFIED_KEYS	src/module.c	380;"	d	file:
SHUTDOWN_NOFLAGS	src/server.h	446;"	d
SHUTDOWN_NOSAVE	src/server.h	449;"	d
SHUTDOWN_SAVE	src/server.h	447;"	d
SI	tests/instances.tcl	/^proc SI {n field} {$/;"	p
SIG0	src/sha256.c	28;"	d	file:
SIG1	src/sha256.c	29;"	d	file:
SIG_ATOMIC_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	200;"	d
SIG_ATOMIC_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	199;"	d
SIPROUND	src/siphash.c	98;"	d	file:
SIZEOF_PTR	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	133;"	d
SIZE_A	deps/lua/src/lopcodes.h	40;"	d
SIZE_B	deps/lua/src/lopcodes.h	38;"	d
SIZE_Bx	deps/lua/src/lopcodes.h	39;"	d
SIZE_C	deps/lua/src/lopcodes.h	37;"	d
SIZE_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	204;"	d
SIZE_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	206;"	d
SIZE_OP	deps/lua/src/lopcodes.h	42;"	d
SIZE_SAFETY_LIMIT	src/quicklist.c	53;"	d	file:
SIZE_T_MAX	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_decls.h	52;"	d
SIZE_T_MAX	deps/jemalloc/test/include/test/jemalloc_test.h	7;"	d
SL1	deps/jemalloc/test/include/test/SFMT-params11213.h	40;"	d
SL1	deps/jemalloc/test/include/test/SFMT-params1279.h	40;"	d
SL1	deps/jemalloc/test/include/test/SFMT-params132049.h	40;"	d
SL1	deps/jemalloc/test/include/test/SFMT-params19937.h	40;"	d
SL1	deps/jemalloc/test/include/test/SFMT-params216091.h	40;"	d
SL1	deps/jemalloc/test/include/test/SFMT-params2281.h	40;"	d
SL1	deps/jemalloc/test/include/test/SFMT-params4253.h	40;"	d
SL1	deps/jemalloc/test/include/test/SFMT-params44497.h	40;"	d
SL1	deps/jemalloc/test/include/test/SFMT-params607.h	40;"	d
SL1	deps/jemalloc/test/include/test/SFMT-params86243.h	40;"	d
SL2	deps/jemalloc/test/include/test/SFMT-params11213.h	41;"	d
SL2	deps/jemalloc/test/include/test/SFMT-params1279.h	41;"	d
SL2	deps/jemalloc/test/include/test/SFMT-params132049.h	41;"	d
SL2	deps/jemalloc/test/include/test/SFMT-params19937.h	41;"	d
SL2	deps/jemalloc/test/include/test/SFMT-params216091.h	41;"	d
SL2	deps/jemalloc/test/include/test/SFMT-params2281.h	41;"	d
SL2	deps/jemalloc/test/include/test/SFMT-params4253.h	41;"	d
SL2	deps/jemalloc/test/include/test/SFMT-params44497.h	41;"	d
SL2	deps/jemalloc/test/include/test/SFMT-params607.h	41;"	d
SL2	deps/jemalloc/test/include/test/SFMT-params86243.h	41;"	d
SLAB_MAXREGS	deps/jemalloc/include/jemalloc/internal/arena_types.h	6;"	d
SLAVE_CAPA_EOF	src/server.h	359;"	d
SLAVE_CAPA_NONE	src/server.h	358;"	d
SLAVE_CAPA_PSYNC2	src/server.h	360;"	d
SLAVE_STATE_ONLINE	src/server.h	355;"	d
SLAVE_STATE_SEND_BULK	src/server.h	354;"	d
SLAVE_STATE_WAIT_BGSAVE_END	src/server.h	353;"	d
SLAVE_STATE_WAIT_BGSAVE_START	src/server.h	352;"	d
SLC_NOCREAT	src/stream.h	101;"	d
SLC_NONE	src/stream.h	100;"	d
SLC_NOREFRESH	src/stream.h	102;"	d
SLOT_FILE	exp/slot_log_dealer.py	/^SLOT_FILE=sys.argv[1]$/;"	v
SLOT_SOLVED_OP	src/cluster.c	80;"	d	file:
SLOWLOG_ENTRY_MAX_ARGC	src/slowlog.h	33;"	d
SLOWLOG_ENTRY_MAX_STRING	src/slowlog.h	34;"	d
SMOOTHSTEP	deps/jemalloc/include/jemalloc/internal/smoothstep.h	29;"	d
SMOOTHSTEP_BFP	deps/jemalloc/include/jemalloc/internal/smoothstep.h	28;"	d
SMOOTHSTEP_NSTEPS	deps/jemalloc/include/jemalloc/internal/smoothstep.h	27;"	d
SMOOTHSTEP_VARIANT	deps/jemalloc/include/jemalloc/internal/smoothstep.h	26;"	d
SO	deps/jemalloc/Makefile	/^SO := so$/;"	m
SOREV	deps/jemalloc/Makefile	/^SOREV = so.2$/;"	m
SORT_ASC	src/geo.c	499;"	d	file:
SORT_DESC	src/geo.c	500;"	d	file:
SORT_NONE	src/geo.c	498;"	d	file:
SORT_OP_GET	src/server.h	372;"	d
SPARKLINE_FILL	src/sparkline.h	47;"	d
SPARKLINE_LOG_SCALE	src/sparkline.h	48;"	d
SPARKLINE_NO_FLAGS	src/sparkline.h	46;"	d
SPECIALS	deps/lua/src/lstrlib.c	183;"	d	file:
SPECIFIED_CFLAGS	deps/jemalloc/Makefile	/^SPECIFIED_CFLAGS := $/;"	m
SPECIFIED_CXXFLAGS	deps/jemalloc/Makefile	/^SPECIFIED_CXXFLAGS := $/;"	m
SPIN_INITIALIZER	deps/jemalloc/include/jemalloc/internal/spin.h	4;"	d
SPIN_INLINE	deps/jemalloc/include/jemalloc/internal/spin.h	38;"	d
SPLIT_INDEX	deps/jemalloc/test/unit/qr.c	8;"	d	file:
SPOP_MOVE_STRATEGY_MUL	src/t_set.c	452;"	d	file:
SPT	src/setproctitle.c	/^} SPT;$/;"	v	typeref:struct:__anon60	file:
SPT_MAXTITLE	src/setproctitle.c	272;"	d	file:
SPT_MIN	src/setproctitle.c	75;"	d	file:
SParser	deps/lua/src/ldo.c	/^struct SParser {  \/* data to `f_parser' *\/$/;"	s	file:
SR1	deps/jemalloc/test/include/test/SFMT-params11213.h	42;"	d
SR1	deps/jemalloc/test/include/test/SFMT-params1279.h	42;"	d
SR1	deps/jemalloc/test/include/test/SFMT-params132049.h	42;"	d
SR1	deps/jemalloc/test/include/test/SFMT-params19937.h	42;"	d
SR1	deps/jemalloc/test/include/test/SFMT-params216091.h	42;"	d
SR1	deps/jemalloc/test/include/test/SFMT-params2281.h	42;"	d
SR1	deps/jemalloc/test/include/test/SFMT-params4253.h	42;"	d
SR1	deps/jemalloc/test/include/test/SFMT-params44497.h	42;"	d
SR1	deps/jemalloc/test/include/test/SFMT-params607.h	42;"	d
SR1	deps/jemalloc/test/include/test/SFMT-params86243.h	42;"	d
SR2	deps/jemalloc/test/include/test/SFMT-params11213.h	43;"	d
SR2	deps/jemalloc/test/include/test/SFMT-params1279.h	43;"	d
SR2	deps/jemalloc/test/include/test/SFMT-params132049.h	43;"	d
SR2	deps/jemalloc/test/include/test/SFMT-params19937.h	43;"	d
SR2	deps/jemalloc/test/include/test/SFMT-params216091.h	43;"	d
SR2	deps/jemalloc/test/include/test/SFMT-params2281.h	43;"	d
SR2	deps/jemalloc/test/include/test/SFMT-params4253.h	43;"	d
SR2	deps/jemalloc/test/include/test/SFMT-params44497.h	43;"	d
SR2	deps/jemalloc/test/include/test/SFMT-params607.h	43;"	d
SR2	deps/jemalloc/test/include/test/SFMT-params86243.h	43;"	d
SRANDMEMBER_SUB_STRATEGY_MUL	src/t_set.c	654;"	d	file:
SRC	deps/lua/etc/Makefile	/^SRC= $(TOP)\/src$/;"	m
SRCCOLOR	deps/Makefile	/^SRCCOLOR="\\033[33m"$/;"	m
SRCCOLOR	src/Makefile	/^SRCCOLOR="\\033[33m"$/;"	m
SRI_FAILOVER_IN_PROGRESS	src/sentinel.c	71;"	d	file:
SRI_FORCE_FAILOVER	src/sentinel.c	77;"	d	file:
SRI_MASTER	src/sentinel.c	64;"	d	file:
SRI_MASTER_DOWN	src/sentinel.c	69;"	d	file:
SRI_O_DOWN	src/sentinel.c	68;"	d	file:
SRI_PROMOTED	src/sentinel.c	73;"	d	file:
SRI_RECONF_DONE	src/sentinel.c	76;"	d	file:
SRI_RECONF_INPROG	src/sentinel.c	75;"	d	file:
SRI_RECONF_SENT	src/sentinel.c	74;"	d	file:
SRI_SCRIPT_KILL_SENT	src/sentinel.c	78;"	d	file:
SRI_SENTINEL	src/sentinel.c	66;"	d	file:
SRI_SLAVE	src/sentinel.c	65;"	d	file:
SRI_S_DOWN	src/sentinel.c	67;"	d	file:
SS	deps/lua/src/print.c	158;"	d	file:
SSIZE_MAX	deps/hiredis/sds.h	40;"	d
SSIZE_MAX	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_decls.h	55;"	d
SSL_DYLIBNAME	deps/hiredis/Makefile	/^SSL_DYLIBNAME=$(SSL_LIBNAME).$(DYLIBSUFFIX)$/;"	m
SSL_DYLIB_MAJOR_NAME	deps/hiredis/Makefile	/^SSL_DYLIB_MAJOR_NAME=$(SSL_LIBNAME).$(DYLIBSUFFIX).$(HIREDIS_MAJOR)$/;"	m
SSL_DYLIB_MAKE_CMD	deps/hiredis/Makefile	/^  SSL_DYLIB_MAKE_CMD=$(CC) $(SUN_SHARED_FLAG) -o $(SSL_DYLIBNAME) -h $(SSL_DYLIB_MINOR_NAME) $(LDFLAGS) $(SSL_LDFLAGS)$/;"	m
SSL_DYLIB_MAKE_CMD	deps/hiredis/Makefile	/^  SSL_DYLIB_MAKE_CMD=$(CC) -dynamiclib -Wl,-install_name,$(PREFIX)\/$(LIBRARY_PATH)\/$(SSL_DYLIB_MINOR_NAME) -o $(SSL_DYLIBNAME) $(LDFLAGS) $(SSL_LDFLAGS)$/;"	m
SSL_DYLIB_MAKE_CMD	deps/hiredis/Makefile	/^SSL_DYLIB_MAKE_CMD=$(CC) -shared -Wl,-soname,$(SSL_DYLIB_MINOR_NAME)$/;"	m
SSL_DYLIB_MINOR_NAME	deps/hiredis/Makefile	/^SSL_DYLIB_MINOR_NAME=$(SSL_LIBNAME).$(DYLIBSUFFIX).$(HIREDIS_SONAME)$/;"	m
SSL_LDFLAGS	deps/hiredis/Makefile	/^  SSL_LDFLAGS=-lssl -lcrypto$/;"	m
SSL_LIBNAME	deps/hiredis/Makefile	/^SSL_LIBNAME=libhiredis_ssl$/;"	m
SSL_OBJ	deps/hiredis/Makefile	/^SSL_OBJ=ssl.o$/;"	m
SSL_PKGCONFNAME	deps/hiredis/Makefile	/^SSL_PKGCONFNAME=hiredis_ssl.pc$/;"	m
SSL_STLIBNAME	deps/hiredis/Makefile	/^SSL_STLIBNAME=$(SSL_LIBNAME).$(STLIBSUFFIX)$/;"	m
STANDALONE	src/lzfP.h	40;"	d
STATIC_LIBS	deps/jemalloc/Makefile	/^STATIC_LIBS := $(objroot)lib\/$(LIBJEMALLOC).$(A)$/;"	m
STATS_METRIC_COMMAND	src/server.h	147;"	d
STATS_METRIC_COUNT	src/server.h	150;"	d
STATS_METRIC_NET_INPUT	src/server.h	148;"	d
STATS_METRIC_NET_OUTPUT	src/server.h	149;"	d
STATS_METRIC_SAMPLES	src/server.h	146;"	d
STATS_PRINT_OPTIONS	deps/jemalloc/include/jemalloc/internal/stats.h	/^    STATS_PRINT_OPTIONS$/;"	e	enum:__anon159
STATS_PRINT_OPTIONS	deps/jemalloc/include/jemalloc/internal/stats.h	5;"	d
STD	deps/hdr_histogram/Makefile	/^STD=$/;"	m
STD	deps/linenoise/Makefile	/^STD=$/;"	m
STD	src/Makefile	/^STD=-pedantic -DREDIS_STATIC=''$/;"	m
STDERR_FILENO	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_decls.h	73;"	d
STEP	deps/jemalloc/src/arena.c	37;"	d	file:
STEP	deps/jemalloc/src/arena.c	40;"	d	file:
STEP	deps/jemalloc/test/unit/smoothstep.c	4;"	d	file:
STEP	deps/jemalloc/test/unit/smoothstep.c	7;"	d	file:
STLIBNAME	deps/hiredis/Makefile	/^STLIBNAME=$(LIBNAME).$(STLIBSUFFIX)$/;"	m
STLIBSUFFIX	deps/hiredis/Makefile	/^STLIBSUFFIX=a$/;"	m
STLIB_MAKE_CMD	deps/hiredis/Makefile	/^STLIB_MAKE_CMD=$(AR) rcs$/;"	m
STRBUF_DEFAULT_INCREMENT	deps/lua/src/strbuf.h	48;"	d
STRBUF_DEFAULT_SIZE	deps/lua/src/strbuf.h	45;"	d
STREAMID_STATIC_VECTOR_LEN	src/t_stream.c	44;"	d	file:
STREAM_H	src/stream.h	2;"	d
STREAM_ITEM_FLAG_DELETED	src/t_stream.c	38;"	d	file:
STREAM_ITEM_FLAG_NONE	src/t_stream.c	37;"	d	file:
STREAM_ITEM_FLAG_SAMEFIELDS	src/t_stream.c	39;"	d	file:
STREAM_LISTPACK_MAX_PRE_ALLOCATE	src/t_stream.c	48;"	d	file:
STREAM_RWR_HISTORY	src/t_stream.c	1470;"	d	file:
STREAM_RWR_NOACK	src/t_stream.c	1467;"	d	file:
STREAM_RWR_RAWENTRIES	src/t_stream.c	1468;"	d	file:
STRICT_ALIGN	src/lzfP.h	179;"	d
STRICT_ALIGN	src/lzfP.h	180;"	d
STRICT_ALIGN	src/lzfP.h	83;"	d
STRICT_ALIGN	src/lzfP.h	85;"	d
STRINGIFY	deps/jemalloc/include/jemalloc/internal/util.h	22;"	d
STRINGIFY_HELPER	deps/jemalloc/include/jemalloc/internal/util.h	21;"	d
STRUCT_INT	deps/lua/src/lua_struct.c	49;"	d	file:
SUN_SHARED_FLAG	deps/hiredis/Makefile	/^    SUN_SHARED_FLAG=-G$/;"	m
SUN_SHARED_FLAG	deps/hiredis/Makefile	/^    SUN_SHARED_FLAG=-shared$/;"	m
SUPERVISED_AUTODETECT	src/server.h	383;"	d
SUPERVISED_NONE	src/server.h	382;"	d
SUPERVISED_SYSTEMD	src/server.h	384;"	d
SUPERVISED_UPSTART	src/server.h	385;"	d
SWAPINIT	src/pqsort.c	65;"	d	file:
SYNCIO__RESOLUTION	src/syncio.c	43;"	d	file:
SYS_open	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_decls.h	29;"	d
SYS_write	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_decls.h	24;"	d
SZ	deps/jemalloc/test/unit/pack.c	7;"	d	file:
SZ	deps/jemalloc/test/unit/pack.c	9;"	d	file:
SZ_MAX	deps/jemalloc/test/unit/extent_quantize.c	102;"	d	file:
S_UPD	src/server.h	1176;"	d
S_UPD_TIME	src/server.h	1179;"	d
ScanCBData	src/module.c	/^} ScanCBData;$/;"	t	typeref:struct:__anon66	file:
ScanKeyCBData	src/module.c	/^} ScanKeyCBData;$/;"	t	typeref:struct:__anon67	file:
SemInfo	deps/lua/src/llex.h	/^} SemInfo;  \/* semantics information *\/$/;"	t	typeref:union:__anon96
SentReplyOnKeyMiss	src/db.c	/^static void SentReplyOnKeyMiss(client *c, robj *reply){$/;"	f	file:
Sizeof	deps/lua/src/print.c	20;"	d	file:
Smain	deps/lua/src/lua.c	/^struct Smain {$/;"	s	file:
Smain	deps/lua/src/luac.c	/^struct Smain {$/;"	s	file:
StkId	deps/lua/src/lobject.h	/^typedef TValue *StkId;  \/* index to stack elements *\/$/;"	t
String	src/redis-trib.rb	/^class String$/;"	c
T	src/modules/testmodule.c	363;"	d	file:
TAB	deps/linenoise/linenoise.c	/^	TAB = 9,            \/* Tab *\/$/;"	e	enum:KEY_ACTION	file:
TABLE_SIZE	utils/tracking_collisions.c	31;"	d	file:
TCACHE_ENABLED_ZERO_INITIALIZER	deps/jemalloc/include/jemalloc/internal/tcache_types.h	54;"	d
TCACHE_GC_INCR	deps/jemalloc/include/jemalloc/internal/tcache_types.h	47;"	d
TCACHE_GC_SWEEP	deps/jemalloc/include/jemalloc/internal/tcache_types.h	44;"	d
TCACHE_IND_AUTOMATIC	deps/jemalloc/src/jemalloc.c	1645;"	d	file:
TCACHE_IND_NONE	deps/jemalloc/src/jemalloc.c	1644;"	d	file:
TCACHE_NSLOTS_LARGE	deps/jemalloc/include/jemalloc/internal/tcache_types.h	34;"	d
TCACHE_NSLOTS_SMALL_MAX	deps/jemalloc/include/jemalloc/internal/tcache_types.h	31;"	d
TCACHE_NSLOTS_SMALL_MIN	deps/jemalloc/include/jemalloc/internal/tcache_types.h	22;"	d
TCACHE_STATE_DISABLED	deps/jemalloc/include/jemalloc/internal/tcache_types.h	14;"	d
TCACHE_STATE_MAX	deps/jemalloc/include/jemalloc/internal/tcache_types.h	17;"	d
TCACHE_STATE_PURGATORY	deps/jemalloc/include/jemalloc/internal/tcache_types.h	16;"	d
TCACHE_STATE_REINCARNATED	deps/jemalloc/include/jemalloc/internal/tcache_types.h	15;"	d
TCACHE_ZERO_INITIALIZER	deps/jemalloc/include/jemalloc/internal/tcache_types.h	51;"	d
TD	src/Makefile	/^	echo STD=$(STD) >> .make-settings$/;"	m
TEST	deps/jemalloc/test/unit/malloc_io.c	112;"	d	file:
TEST	deps/jemalloc/test/unit/malloc_io.c	135;"	d	file:
TEST	deps/jemalloc/test/unit/malloc_io.c	143;"	d	file:
TEST	src/quicklist.c	1536;"	d	file:
TESTS	deps/hiredis/Makefile	/^TESTS=hiredis-test$/;"	m
TESTS	deps/jemalloc/Makefile	/^TESTS := $(TESTS_UNIT) $(TESTS_INTEGRATION) $(TESTS_INTEGRATION_CPP) $(TESTS_STRESS)$/;"	m
TESTS_CPP_OBJS	deps/jemalloc/Makefile	/^TESTS_CPP_OBJS := $(TESTS_INTEGRATION_CPP_OBJS)$/;"	m
TESTS_INTEGRATION	deps/jemalloc/Makefile	/^TESTS_INTEGRATION := $(srcroot)test\/integration\/aligned_alloc.c \\$/;"	m
TESTS_INTEGRATION_CPP	deps/jemalloc/Makefile	/^TESTS_INTEGRATION_CPP := $(srcroot)test\/integration\/cpp\/basic.cpp$/;"	m
TESTS_INTEGRATION_CPP	deps/jemalloc/Makefile	/^TESTS_INTEGRATION_CPP :=$/;"	m
TESTS_INTEGRATION_CPP_OBJS	deps/jemalloc/Makefile	/^TESTS_INTEGRATION_CPP_OBJS := $(TESTS_INTEGRATION_CPP:$(srcroot)%.cpp=$(objroot)%.$(O))$/;"	m
TESTS_INTEGRATION_OBJS	deps/jemalloc/Makefile	/^TESTS_INTEGRATION_OBJS := $(TESTS_INTEGRATION:$(srcroot)%.c=$(objroot)%.$(O))$/;"	m
TESTS_OBJS	deps/jemalloc/Makefile	/^TESTS_OBJS := $(TESTS_UNIT_OBJS) $(TESTS_INTEGRATION_OBJS) $(TESTS_STRESS_OBJS)$/;"	m
TESTS_STRESS	deps/jemalloc/Makefile	/^TESTS_STRESS := $(srcroot)test\/stress\/microbench.c$/;"	m
TESTS_STRESS_OBJS	deps/jemalloc/Makefile	/^TESTS_STRESS_OBJS := $(TESTS_STRESS:$(srcroot)%.c=$(objroot)%.$(O))$/;"	m
TESTS_UNIT	deps/jemalloc/Makefile	/^TESTS_UNIT := \\$/;"	m
TESTS_UNIT_OBJS	deps/jemalloc/Makefile	/^TESTS_UNIT_OBJS := $(TESTS_UNIT:$(srcroot)%.c=$(objroot)%.$(O))$/;"	m
TEST_ARENAS_BIN_CONSTANT	deps/jemalloc/test/unit/mallctl.c	692;"	d	file:
TEST_ARENAS_BIN_CONSTANT	deps/jemalloc/test/unit/mallctl.c	705;"	d	file:
TEST_ARENAS_CONSTANT	deps/jemalloc/test/unit/mallctl.c	674;"	d	file:
TEST_ARENAS_CONSTANT	deps/jemalloc/test/unit/mallctl.c	687;"	d	file:
TEST_ARENAS_LEXTENT_CONSTANT	deps/jemalloc/test/unit/mallctl.c	710;"	d	file:
TEST_ARENAS_LEXTENT_CONSTANT	deps/jemalloc/test/unit/mallctl.c	720;"	d	file:
TEST_BEGIN	deps/jemalloc/test/include/test/test.h	299;"	d
TEST_BEGIN	deps/jemalloc/test/integration/MALLOCX_ARENA.c	/^TEST_BEGIN(test_MALLOCX_ARENA) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/aligned_alloc.c	/^TEST_BEGIN(test_alignment_and_size) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/aligned_alloc.c	/^TEST_BEGIN(test_alignment_errors) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/aligned_alloc.c	/^TEST_BEGIN(test_oom_errors) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/allocated.c	/^TEST_BEGIN(test_main_thread) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/allocated.c	/^TEST_BEGIN(test_subthread) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/extent.c	/^TEST_BEGIN(test_extent_auto_hook) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/extent.c	/^TEST_BEGIN(test_extent_manual_hook) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/mallocx.c	/^TEST_BEGIN(test_alignment_and_size) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/mallocx.c	/^TEST_BEGIN(test_basic) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/mallocx.c	/^TEST_BEGIN(test_oom) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/mallocx.c	/^TEST_BEGIN(test_overflow) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/overflow.c	/^TEST_BEGIN(test_overflow) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/posix_memalign.c	/^TEST_BEGIN(test_alignment_and_size) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/posix_memalign.c	/^TEST_BEGIN(test_alignment_errors) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/posix_memalign.c	/^TEST_BEGIN(test_oom_errors) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/rallocx.c	/^TEST_BEGIN(test_align) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/rallocx.c	/^TEST_BEGIN(test_grow_and_shrink) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/rallocx.c	/^TEST_BEGIN(test_lg_align_and_zero) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/rallocx.c	/^TEST_BEGIN(test_overflow) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/rallocx.c	/^TEST_BEGIN(test_zero) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/sdallocx.c	/^TEST_BEGIN(test_alignment_and_size) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/sdallocx.c	/^TEST_BEGIN(test_basic) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/thread_arena.c	/^TEST_BEGIN(test_thread_arena) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/thread_tcache_enabled.c	/^TEST_BEGIN(test_main_thread) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/thread_tcache_enabled.c	/^TEST_BEGIN(test_subthread) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/xallocx.c	/^TEST_BEGIN(test_extra_large) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/xallocx.c	/^TEST_BEGIN(test_extra_no_move) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/xallocx.c	/^TEST_BEGIN(test_extra_small) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/xallocx.c	/^TEST_BEGIN(test_no_move_fail) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/xallocx.c	/^TEST_BEGIN(test_same_size) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/xallocx.c	/^TEST_BEGIN(test_size) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/xallocx.c	/^TEST_BEGIN(test_size_extra_overflow) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/xallocx.c	/^TEST_BEGIN(test_zero_large) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/stress/microbench.c	/^TEST_BEGIN(test_dallocx_vs_sdallocx) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/stress/microbench.c	/^TEST_BEGIN(test_free_vs_dallocx) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/stress/microbench.c	/^TEST_BEGIN(test_malloc_vs_mallocx) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/stress/microbench.c	/^TEST_BEGIN(test_mus_vs_sallocx) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/stress/microbench.c	/^TEST_BEGIN(test_sallocx_vs_nallocx) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/SFMT.c	/^TEST_BEGIN(test_by_array_32) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/SFMT.c	/^TEST_BEGIN(test_by_array_64) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/SFMT.c	/^TEST_BEGIN(test_gen_rand_32) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/SFMT.c	/^TEST_BEGIN(test_gen_rand_64) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/a0.c	/^TEST_BEGIN(test_a0) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/arena_reset.c	/^TEST_BEGIN(test_arena_destroy_hooks_default) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/arena_reset.c	/^TEST_BEGIN(test_arena_destroy_hooks_unmap) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/arena_reset.c	/^TEST_BEGIN(test_arena_destroy_initial) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/arena_reset.c	/^TEST_BEGIN(test_arena_reset) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/atomic.c	/^TEST_BEGIN(test_atomic_p) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/atomic.c	/^TEST_BEGIN(test_atomic_u) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/atomic.c	/^TEST_BEGIN(test_atomic_u32) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/atomic.c	/^TEST_BEGIN(test_atomic_u64) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/atomic.c	/^TEST_BEGIN(test_atomic_zd) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/atomic.c	/^TEST_BEGIN(test_atomic_zu) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/background_thread.c	/^TEST_BEGIN(test_background_thread_ctl) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/background_thread.c	/^TEST_BEGIN(test_background_thread_running) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/background_thread_enable.c	/^TEST_BEGIN(test_deferred) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/background_thread_enable.c	/^TEST_BEGIN(test_max_background_threads) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/base.c	/^TEST_BEGIN(test_base_hooks_default) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/base.c	/^TEST_BEGIN(test_base_hooks_not_null) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/base.c	/^TEST_BEGIN(test_base_hooks_null) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/bit_util.c	/^TEST_BEGIN(test_pow2_ceil_u32) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/bit_util.c	/^TEST_BEGIN(test_pow2_ceil_u64) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/bit_util.c	/^TEST_BEGIN(test_pow2_ceil_zu) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/bitmap.c	/^TEST_BEGIN(test_bitmap_init) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/bitmap.c	/^TEST_BEGIN(test_bitmap_initializer) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/bitmap.c	/^TEST_BEGIN(test_bitmap_set) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/bitmap.c	/^TEST_BEGIN(test_bitmap_size) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/bitmap.c	/^TEST_BEGIN(test_bitmap_unset) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/bitmap.c	/^TEST_BEGIN(test_bitmap_xfu) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/ckh.c	/^TEST_BEGIN(test_count_insert_search_remove) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/ckh.c	/^TEST_BEGIN(test_insert_iter_remove) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/ckh.c	/^TEST_BEGIN(test_new_delete) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/decay.c	/^TEST_BEGIN(test_decay_never) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/decay.c	/^TEST_BEGIN(test_decay_nonmonotonic) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/decay.c	/^TEST_BEGIN(test_decay_now) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/decay.c	/^TEST_BEGIN(test_decay_ticker) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/decay.c	/^TEST_BEGIN(test_decay_ticks) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/div.c	/^TEST_BEGIN(test_div_exhaustive) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/emitter.c	/^TEST_BEGIN(test_dict) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/emitter.c	/^TEST_BEGIN(test_json_arr) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/emitter.c	/^TEST_BEGIN(test_modal) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/emitter.c	/^TEST_BEGIN(test_nested_dict) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/emitter.c	/^TEST_BEGIN(test_table_printf) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/emitter.c	/^TEST_BEGIN(test_table_row) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/emitter.c	/^TEST_BEGIN(test_types) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/extent_quantize.c	/^TEST_BEGIN(test_large_extent_size) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/extent_quantize.c	/^TEST_BEGIN(test_monotonic) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/extent_quantize.c	/^TEST_BEGIN(test_small_extent_size) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/fork.c	/^TEST_BEGIN(test_fork) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/fork.c	/^TEST_BEGIN(test_fork_multithreaded) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/hash.c	/^TEST_BEGIN(test_hash_x64_128) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/hash.c	/^TEST_BEGIN(test_hash_x86_128) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/hash.c	/^TEST_BEGIN(test_hash_x86_32) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/hooks.c	/^TEST_BEGIN(hooked_call) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/hooks.c	/^TEST_BEGIN(unhooked_call) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/junk.c	/^TEST_BEGIN(test_junk_large) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/junk.c	/^TEST_BEGIN(test_junk_small) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/log.c	/^TEST_BEGIN(test_log_disabled) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/log.c	/^TEST_BEGIN(test_log_enabled_direct) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/log.c	/^TEST_BEGIN(test_log_enabled_global) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/log.c	/^TEST_BEGIN(test_log_enabled_indirect) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/log.c	/^TEST_BEGIN(test_log_only_format_string) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/log.c	/^TEST_BEGIN(test_logs_if_no_init) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_arena_i_decay) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_arena_i_dirty_decay_ms) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_arena_i_dss) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_arena_i_initialized) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_arena_i_muzzy_decay_ms) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_arena_i_purge) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_arena_i_retain_grow_limit) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_arenas_bin_constants) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_arenas_constants) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_arenas_create) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_arenas_dirty_decay_ms) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_arenas_lextent_constants) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_arenas_lookup) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_arenas_muzzy_decay_ms) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_mallctl_config) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_mallctl_errors) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_mallctl_opt) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_mallctl_read_write) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_mallctlbymib_errors) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_mallctlnametomib_errors) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_mallctlnametomib_short_mib) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_manpage_example) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_stats_arenas) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_tcache) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_tcache_none) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_thread_arena) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/malloc_io.c	/^TEST_BEGIN(test_malloc_snprintf) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/malloc_io.c	/^TEST_BEGIN(test_malloc_snprintf_truncated) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/malloc_io.c	/^TEST_BEGIN(test_malloc_strtoumax) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/malloc_io.c	/^TEST_BEGIN(test_malloc_strtoumax_no_endptr) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/math.c	/^TEST_BEGIN(test_ln_gamma_factorial) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/math.c	/^TEST_BEGIN(test_ln_gamma_misc) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/math.c	/^TEST_BEGIN(test_pt_chi2) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/math.c	/^TEST_BEGIN(test_pt_gamma_scale) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/math.c	/^TEST_BEGIN(test_pt_gamma_shape) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/math.c	/^TEST_BEGIN(test_pt_norm) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/mq.c	/^TEST_BEGIN(test_mq_basic) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/mq.c	/^TEST_BEGIN(test_mq_threaded) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/mtx.c	/^TEST_BEGIN(test_mtx_basic) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/mtx.c	/^TEST_BEGIN(test_mtx_race) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/nstime.c	/^TEST_BEGIN(test_nstime_add) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/nstime.c	/^TEST_BEGIN(test_nstime_compare) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/nstime.c	/^TEST_BEGIN(test_nstime_copy) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/nstime.c	/^TEST_BEGIN(test_nstime_divide) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/nstime.c	/^TEST_BEGIN(test_nstime_iadd) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/nstime.c	/^TEST_BEGIN(test_nstime_idivide) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/nstime.c	/^TEST_BEGIN(test_nstime_imultiply) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/nstime.c	/^TEST_BEGIN(test_nstime_init) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/nstime.c	/^TEST_BEGIN(test_nstime_init2) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/nstime.c	/^TEST_BEGIN(test_nstime_isubtract) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/nstime.c	/^TEST_BEGIN(test_nstime_monotonic) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/nstime.c	/^TEST_BEGIN(test_nstime_subtract) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/nstime.c	/^TEST_BEGIN(test_nstime_update) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/pack.c	/^TEST_BEGIN(test_pack) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/pages.c	/^TEST_BEGIN(test_pages_huge) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/ph.c	/^TEST_BEGIN(test_ph_empty) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/ph.c	/^TEST_BEGIN(test_ph_random) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/prng.c	/^TEST_BEGIN(test_prng_lg_range_u32_atomic) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/prng.c	/^TEST_BEGIN(test_prng_lg_range_u32_nonatomic) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/prng.c	/^TEST_BEGIN(test_prng_lg_range_u64_nonatomic) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/prng.c	/^TEST_BEGIN(test_prng_lg_range_zu_atomic) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/prng.c	/^TEST_BEGIN(test_prng_lg_range_zu_nonatomic) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/prng.c	/^TEST_BEGIN(test_prng_range_u32_atomic) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/prng.c	/^TEST_BEGIN(test_prng_range_u32_nonatomic) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/prng.c	/^TEST_BEGIN(test_prng_range_u64_nonatomic) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/prng.c	/^TEST_BEGIN(test_prng_range_zu_atomic) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/prng.c	/^TEST_BEGIN(test_prng_range_zu_nonatomic) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/prof_accum.c	/^TEST_BEGIN(test_idump) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/prof_active.c	/^TEST_BEGIN(test_prof_active) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/prof_gdump.c	/^TEST_BEGIN(test_gdump) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/prof_idump.c	/^TEST_BEGIN(test_idump) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/prof_reset.c	/^TEST_BEGIN(test_prof_reset) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/prof_reset.c	/^TEST_BEGIN(test_prof_reset_basic) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/prof_reset.c	/^TEST_BEGIN(test_prof_reset_cleanup) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/prof_reset.c	/^TEST_BEGIN(test_xallocx) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/prof_tctx.c	/^TEST_BEGIN(test_prof_realloc) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/prof_thread_name.c	/^TEST_BEGIN(test_prof_thread_name_threaded) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/prof_thread_name.c	/^TEST_BEGIN(test_prof_thread_name_validation) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/ql.c	/^TEST_BEGIN(test_ql_empty) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/ql.c	/^TEST_BEGIN(test_ql_head_insert) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/ql.c	/^TEST_BEGIN(test_ql_head_remove) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/ql.c	/^TEST_BEGIN(test_ql_insert) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/ql.c	/^TEST_BEGIN(test_ql_tail_insert) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/ql.c	/^TEST_BEGIN(test_ql_tail_remove) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/qr.c	/^TEST_BEGIN(test_qr_after_insert) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/qr.c	/^TEST_BEGIN(test_qr_before_insert) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/qr.c	/^TEST_BEGIN(test_qr_meld_split) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/qr.c	/^TEST_BEGIN(test_qr_one) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/qr.c	/^TEST_BEGIN(test_qr_remove) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/rb.c	/^TEST_BEGIN(test_rb_empty) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/rb.c	/^TEST_BEGIN(test_rb_random) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/retained.c	/^TEST_BEGIN(test_retained) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/rtree.c	/^TEST_BEGIN(test_rtree_bits) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/rtree.c	/^TEST_BEGIN(test_rtree_extrema) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/rtree.c	/^TEST_BEGIN(test_rtree_random) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/rtree.c	/^TEST_BEGIN(test_rtree_read_empty) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/size_classes.c	/^TEST_BEGIN(test_overflow) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/size_classes.c	/^TEST_BEGIN(test_psize_classes) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/size_classes.c	/^TEST_BEGIN(test_size_classes) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/slab.c	/^TEST_BEGIN(test_arena_slab_regind) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/smoothstep.c	/^TEST_BEGIN(test_smoothstep_integral) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/smoothstep.c	/^TEST_BEGIN(test_smoothstep_monotonic) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/smoothstep.c	/^TEST_BEGIN(test_smoothstep_slope) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/spin.c	/^TEST_BEGIN(test_spin) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/stats.c	/^TEST_BEGIN(test_stats_arenas_bins) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/stats.c	/^TEST_BEGIN(test_stats_arenas_large) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/stats.c	/^TEST_BEGIN(test_stats_arenas_lextents) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/stats.c	/^TEST_BEGIN(test_stats_arenas_small) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/stats.c	/^TEST_BEGIN(test_stats_arenas_summary) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/stats.c	/^TEST_BEGIN(test_stats_large) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/stats.c	/^TEST_BEGIN(test_stats_summary) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/stats_print.c	/^TEST_BEGIN(test_json_parser) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/stats_print.c	/^TEST_BEGIN(test_stats_print_json) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/ticker.c	/^TEST_BEGIN(test_ticker_copy) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/ticker.c	/^TEST_BEGIN(test_ticker_tick) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/ticker.c	/^TEST_BEGIN(test_ticker_ticks) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/tsd.c	/^TEST_BEGIN(test_tsd_main_thread) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/tsd.c	/^TEST_BEGIN(test_tsd_reincarnation) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/tsd.c	/^TEST_BEGIN(test_tsd_sub_thread) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/witness.c	/^TEST_BEGIN(test_witness) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/witness.c	/^TEST_BEGIN(test_witness_comp) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/witness.c	/^TEST_BEGIN(test_witness_depth) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/witness.c	/^TEST_BEGIN(test_witness_recursive) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/witness.c	/^TEST_BEGIN(test_witness_reversal) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/witness.c	/^TEST_BEGIN(test_witness_unlock_not_owned) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/zero.c	/^TEST_BEGIN(test_zero_large) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/zero.c	/^TEST_BEGIN(test_zero_small) {$/;"	f
TEST_BODY	deps/jemalloc/test/unit/atomic.c	161;"	d	file:
TEST_CASES	deps/jemalloc/test/unit/atomic.c	142;"	d	file:
TEST_DESC	src/quicklist.c	1537;"	d	file:
TEST_END	deps/jemalloc/test/include/test/test.h	304;"	d
TEST_LDFLAGS	deps/hiredis/Makefile	/^    TEST_LDFLAGS = $(SSL_LDFLAGS) -lssl -lcrypto -lpthread$/;"	m
TEST_LD_MODE	deps/jemalloc/Makefile	/^TEST_LD_MODE = $/;"	m
TEST_LIBRARY_PATH	deps/jemalloc/Makefile	/^TEST_LIBRARY_PATH := DYLD_FALLBACK_LIBRARY_PATH="$(objroot)lib"$/;"	m
TEST_LIBRARY_PATH	deps/jemalloc/Makefile	/^TEST_LIBRARY_PATH := PATH="$(PATH):$(objroot)lib"$/;"	m
TEST_LIBRARY_PATH	deps/jemalloc/Makefile	/^TEST_LIBRARY_PATH :=$/;"	m
TEST_LIBS	deps/hiredis/Makefile	/^TEST_LIBS = $(STLIBNAME)$/;"	m
TEST_MALLCTL_CONFIG	deps/jemalloc/test/unit/mallctl.c	120;"	d	file:
TEST_MALLCTL_CONFIG	deps/jemalloc/test/unit/mallctl.c	141;"	d	file:
TEST_MALLCTL_OPT	deps/jemalloc/test/unit/mallctl.c	148;"	d	file:
TEST_MALLCTL_OPT	deps/jemalloc/test/unit/mallctl.c	188;"	d	file:
TEST_MODULES	tests/modules/Makefile	/^TEST_MODULES = \\$/;"	m
TEST_POW2_CEIL	deps/jemalloc/test/unit/bit_util.c	5;"	d	file:
TEST_SSL	deps/hiredis/Makefile	/^	TEST_SSL=$(USE_SSL) .\/test.sh$/;"	m
TEST_STATS_ARENAS	deps/jemalloc/test/unit/mallctl.c	758;"	d	file:
TEST_STATS_ARENAS	deps/jemalloc/test/unit/mallctl.c	772;"	d	file:
TEST_STRUCT	deps/jemalloc/test/unit/atomic.c	135;"	d	file:
THPDisable	src/latency.c	/^int THPDisable(void) {$/;"	f
THPGetAnonHugePagesSize	src/latency.c	/^int THPGetAnonHugePagesSize(void) {$/;"	f
THPIsEnabled	src/latency.c	/^int THPIsEnabled(void) {$/;"	f
THP_MODE_DEFAULT	deps/jemalloc/include/jemalloc/internal/pages.h	70;"	d
TIMEOUT_TIME	src/modules/helloacl.c	95;"	d	file:
TINY_MIN	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	51;"	d
TK_AND	deps/lua/src/llex.h	/^  TK_AND = FIRST_RESERVED, TK_BREAK,$/;"	e	enum:RESERVED
TK_BREAK	deps/lua/src/llex.h	/^  TK_AND = FIRST_RESERVED, TK_BREAK,$/;"	e	enum:RESERVED
TK_CONCAT	deps/lua/src/llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_NUMBER,$/;"	e	enum:RESERVED
TK_DO	deps/lua/src/llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_DOTS	deps/lua/src/llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_NUMBER,$/;"	e	enum:RESERVED
TK_ELSE	deps/lua/src/llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_ELSEIF	deps/lua/src/llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_END	deps/lua/src/llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_EOS	deps/lua/src/llex.h	/^  TK_NAME, TK_STRING, TK_EOS$/;"	e	enum:RESERVED
TK_EQ	deps/lua/src/llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_NUMBER,$/;"	e	enum:RESERVED
TK_FALSE	deps/lua/src/llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_FOR	deps/lua/src/llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_FUNCTION	deps/lua/src/llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_GE	deps/lua/src/llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_NUMBER,$/;"	e	enum:RESERVED
TK_IF	deps/lua/src/llex.h	/^  TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_IN	deps/lua/src/llex.h	/^  TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_LE	deps/lua/src/llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_NUMBER,$/;"	e	enum:RESERVED
TK_LOCAL	deps/lua/src/llex.h	/^  TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_NAME	deps/lua/src/llex.h	/^  TK_NAME, TK_STRING, TK_EOS$/;"	e	enum:RESERVED
TK_NE	deps/lua/src/llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_NUMBER,$/;"	e	enum:RESERVED
TK_NIL	deps/lua/src/llex.h	/^  TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_NOT	deps/lua/src/llex.h	/^  TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_NUMBER	deps/lua/src/llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_NUMBER,$/;"	e	enum:RESERVED
TK_OR	deps/lua/src/llex.h	/^  TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_REPEAT	deps/lua/src/llex.h	/^  TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_RETURN	deps/lua/src/llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_STRING	deps/lua/src/llex.h	/^  TK_NAME, TK_STRING, TK_EOS$/;"	e	enum:RESERVED
TK_THEN	deps/lua/src/llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_TRUE	deps/lua/src/llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_UNTIL	deps/lua/src/llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_WHILE	deps/lua/src/llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TKey	deps/lua/src/lobject.h	/^typedef union TKey {$/;"	u
TKey	deps/lua/src/lobject.h	/^} TKey;$/;"	t	typeref:union:TKey
TLSCONN_DEBUG	src/tls.c	373;"	d	file:
TLSCONN_DEBUG	src/tls.c	376;"	d	file:
TLS_CLIENT_AUTH_NO	src/server.h	404;"	d
TLS_CLIENT_AUTH_OPTIONAL	src/server.h	406;"	d
TLS_CLIENT_AUTH_YES	src/server.h	405;"	d
TLS_CONN_FLAG_FD_SET	src/tls.c	403;"	d	file:
TLS_CONN_FLAG_READ_WANT_WRITE	src/tls.c	401;"	d	file:
TLS_CONN_FLAG_WRITE_WANT_READ	src/tls.c	402;"	d	file:
TMS	deps/lua/src/ltm.h	/^} TMS;$/;"	t	typeref:enum:__anon98
TM_ADD	deps/lua/src/ltm.h	/^  TM_ADD,$/;"	e	enum:__anon98
TM_CALL	deps/lua/src/ltm.h	/^  TM_CALL,$/;"	e	enum:__anon98
TM_CONCAT	deps/lua/src/ltm.h	/^  TM_CONCAT,$/;"	e	enum:__anon98
TM_DIV	deps/lua/src/ltm.h	/^  TM_DIV,$/;"	e	enum:__anon98
TM_EQ	deps/lua/src/ltm.h	/^  TM_EQ,  \/* last tag method with `fast' access *\/$/;"	e	enum:__anon98
TM_GC	deps/lua/src/ltm.h	/^  TM_GC,$/;"	e	enum:__anon98
TM_INDEX	deps/lua/src/ltm.h	/^  TM_INDEX,$/;"	e	enum:__anon98
TM_LE	deps/lua/src/ltm.h	/^  TM_LE,$/;"	e	enum:__anon98
TM_LEN	deps/lua/src/ltm.h	/^  TM_LEN,$/;"	e	enum:__anon98
TM_LT	deps/lua/src/ltm.h	/^  TM_LT,$/;"	e	enum:__anon98
TM_MOD	deps/lua/src/ltm.h	/^  TM_MOD,$/;"	e	enum:__anon98
TM_MODE	deps/lua/src/ltm.h	/^  TM_MODE,$/;"	e	enum:__anon98
TM_MUL	deps/lua/src/ltm.h	/^  TM_MUL,$/;"	e	enum:__anon98
TM_N	deps/lua/src/ltm.h	/^  TM_N		\/* number of elements in the enum *\/$/;"	e	enum:__anon98
TM_NEWINDEX	deps/lua/src/ltm.h	/^  TM_NEWINDEX,$/;"	e	enum:__anon98
TM_POW	deps/lua/src/ltm.h	/^  TM_POW,$/;"	e	enum:__anon98
TM_SUB	deps/lua/src/ltm.h	/^  TM_SUB,$/;"	e	enum:__anon98
TM_UNM	deps/lua/src/ltm.h	/^  TM_UNM,$/;"	e	enum:__anon98
TOKEN_LEN	deps/lua/src/llex.h	17;"	d
TOKEN_TYPE_COLON	deps/jemalloc/test/unit/stats_print.c	/^	TOKEN_TYPE_COLON,$/;"	e	enum:__anon120	file:
TOKEN_TYPE_COMMA	deps/jemalloc/test/unit/stats_print.c	/^	TOKEN_TYPE_COMMA,$/;"	e	enum:__anon120	file:
TOKEN_TYPE_EOI	deps/jemalloc/test/unit/stats_print.c	/^	TOKEN_TYPE_EOI,$/;"	e	enum:__anon120	file:
TOKEN_TYPE_ERROR	deps/jemalloc/test/unit/stats_print.c	/^	TOKEN_TYPE_ERROR,$/;"	e	enum:__anon120	file:
TOKEN_TYPE_FALSE	deps/jemalloc/test/unit/stats_print.c	/^	TOKEN_TYPE_FALSE,$/;"	e	enum:__anon120	file:
TOKEN_TYPE_LBRACE	deps/jemalloc/test/unit/stats_print.c	/^	TOKEN_TYPE_LBRACE,$/;"	e	enum:__anon120	file:
TOKEN_TYPE_LBRACKET	deps/jemalloc/test/unit/stats_print.c	/^	TOKEN_TYPE_LBRACKET,$/;"	e	enum:__anon120	file:
TOKEN_TYPE_NONE	deps/jemalloc/test/unit/stats_print.c	/^	TOKEN_TYPE_NONE,$/;"	e	enum:__anon120	file:
TOKEN_TYPE_NULL	deps/jemalloc/test/unit/stats_print.c	/^	TOKEN_TYPE_NULL,$/;"	e	enum:__anon120	file:
TOKEN_TYPE_NUMBER	deps/jemalloc/test/unit/stats_print.c	/^	TOKEN_TYPE_NUMBER$/;"	e	enum:__anon120	file:
TOKEN_TYPE_RBRACE	deps/jemalloc/test/unit/stats_print.c	/^	TOKEN_TYPE_RBRACE,$/;"	e	enum:__anon120	file:
TOKEN_TYPE_RBRACKET	deps/jemalloc/test/unit/stats_print.c	/^	TOKEN_TYPE_RBRACKET,$/;"	e	enum:__anon120	file:
TOKEN_TYPE_STRING	deps/jemalloc/test/unit/stats_print.c	/^	TOKEN_TYPE_STRING,$/;"	e	enum:__anon120	file:
TOKEN_TYPE_TRUE	deps/jemalloc/test/unit/stats_print.c	/^	TOKEN_TYPE_TRUE,$/;"	e	enum:__anon120	file:
TOP	deps/lua/etc/Makefile	/^TOP= ..$/;"	m
TO_BIN	deps/lua/Makefile	/^TO_BIN= lua luac$/;"	m
TO_INC	deps/lua/Makefile	/^TO_INC= lua.h luaconf.h lualib.h lauxlib.h ..\/etc\/lua.hpp$/;"	m
TO_LIB	deps/lua/Makefile	/^TO_LIB= liblua.a$/;"	m
TO_MAN	deps/lua/Makefile	/^TO_MAN= lua.1 luac.1$/;"	m
TRACE_HOOK	deps/jemalloc/test/include/test/extent_hooks.h	77;"	d
TRIM_STRATEGY_MAXLEN	src/t_stream.c	663;"	d	file:
TRIM_STRATEGY_MINID	src/t_stream.c	664;"	d	file:
TRIM_STRATEGY_NONE	src/t_stream.c	662;"	d	file:
TSDN_NULL	deps/jemalloc/include/jemalloc/internal/tsd.h	135;"	d
TSD_INITIALIZER	deps/jemalloc/include/jemalloc/internal/tsd.h	80;"	d
TST	deps/lua/etc/Makefile	/^TST= $(TOP)\/test$/;"	m
TString	deps/lua/src/lobject.h	/^typedef union TString {$/;"	u
TString	deps/lua/src/lobject.h	/^} TString;$/;"	t	typeref:union:TString
TValue	deps/lua/src/lobject.h	/^} TValue;$/;"	t	typeref:struct:lua_TValue
TValuefields	deps/lua/src/lobject.h	/^    TValuefields;$/;"	m	struct:TKey::__anon111
TValuefields	deps/lua/src/lobject.h	/^  TValuefields;$/;"	m	struct:lua_TValue
TValuefields	deps/lua/src/lobject.h	71;"	d
T_ARR_BEGIN	deps/lua/src/lua_cjson.c	/^    T_ARR_BEGIN,$/;"	e	enum:__anon100	file:
T_ARR_END	deps/lua/src/lua_cjson.c	/^    T_ARR_END,$/;"	e	enum:__anon100	file:
T_BOOLEAN	deps/lua/src/lua_cjson.c	/^    T_BOOLEAN,$/;"	e	enum:__anon100	file:
T_COLON	deps/lua/src/lua_cjson.c	/^    T_COLON,$/;"	e	enum:__anon100	file:
T_COMMA	deps/lua/src/lua_cjson.c	/^    T_COMMA,$/;"	e	enum:__anon100	file:
T_END	deps/lua/src/lua_cjson.c	/^    T_END,$/;"	e	enum:__anon100	file:
T_ERROR	deps/lua/src/lua_cjson.c	/^    T_ERROR,$/;"	e	enum:__anon100	file:
T_NULL	deps/lua/src/lua_cjson.c	/^    T_NULL,$/;"	e	enum:__anon100	file:
T_NUMBER	deps/lua/src/lua_cjson.c	/^    T_NUMBER,$/;"	e	enum:__anon100	file:
T_OBJ_BEGIN	deps/lua/src/lua_cjson.c	/^    T_OBJ_BEGIN,$/;"	e	enum:__anon100	file:
T_OBJ_END	deps/lua/src/lua_cjson.c	/^    T_OBJ_END,$/;"	e	enum:__anon100	file:
T_STRING	deps/lua/src/lua_cjson.c	/^    T_STRING,$/;"	e	enum:__anon100	file:
T_UNKNOWN	deps/lua/src/lua_cjson.c	/^    T_UNKNOWN$/;"	e	enum:__anon100	file:
T_WHITESPACE	deps/lua/src/lua_cjson.c	/^    T_WHITESPACE,$/;"	e	enum:__anon100	file:
Table	deps/lua/src/lobject.h	/^typedef struct Table {$/;"	s
Table	deps/lua/src/lobject.h	/^} Table;$/;"	t	typeref:struct:Table
Table	utils/tracking_collisions.c	/^int Table[TABLE_SIZE];$/;"	v
TerminateModuleForkChild	src/module.c	/^int TerminateModuleForkChild(int child_pid, int wait) {$/;"	f
TestAssertIntegerReply	src/modules/testmodule.c	/^int TestAssertIntegerReply(RedisModuleCtx *ctx, RedisModuleCallReply *reply, long long expected) {$/;"	f
TestAssertStringReply	src/modules/testmodule.c	/^int TestAssertStringReply(RedisModuleCtx *ctx, RedisModuleCallReply *reply, char *str, size_t len) {$/;"	f
TestCall	src/modules/testmodule.c	/^int TestCall(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
TestCtxFlags	src/modules/testmodule.c	/^int TestCtxFlags(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
TestIt	src/modules/testmodule.c	/^int TestIt(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
TestMatchReply	src/modules/testmodule.c	/^int TestMatchReply(RedisModuleCallReply *reply, char *str) {$/;"	f
TestNotifications	src/modules/testmodule.c	/^int TestNotifications(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
TestStringAppend	src/modules/testmodule.c	/^int TestStringAppend(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
TestStringAppendAM	src/modules/testmodule.c	/^int TestStringAppendAM(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
TestStringPrintf	src/modules/testmodule.c	/^int TestStringPrintf(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
TestUnlink	src/modules/testmodule.c	/^int TestUnlink(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
TimerCommand_RedisCommand	src/modules/hellotimer.c	/^int TimerCommand_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
Timers	src/module.c	/^static rax *Timers;     \/* The radix tree of all the timers sorted by expire. *\/$/;"	v	file:
Token	deps/lua/src/llex.h	/^typedef struct Token {$/;"	s
Token	deps/lua/src/llex.h	/^} Token;$/;"	t	typeref:struct:Token
TrackingChannelName	src/tracking.c	/^robj *TrackingChannelName;$/;"	v
TrackingTable	src/tracking.c	/^rax *TrackingTable = NULL;$/;"	v
TrackingTableTotalItems	src/tracking.c	/^uint64_t TrackingTableTotalItems = 0; \/* Total number of IDs stored across$/;"	v
U2S_BUFSIZE	deps/jemalloc/src/malloc_io.c	57;"	d	file:
U32TO8_LE	src/siphash.c	68;"	d	file:
U64TO8_LE	src/siphash.c	74;"	d	file:
U8TO64_LE	src/siphash.c	79;"	d	file:
U8TO64_LE	src/siphash.c	81;"	d	file:
U8TO64_LE_NOCASE	src/siphash.c	88;"	d	file:
UBits	deps/lua/src/lua_bit.c	/^typedef uint32_t UBits;$/;"	t	file:
UILD_TLS	src/Makefile	/^	echo BUILD_TLS=$(BUILD_TLS) >> .make-settings$/;"	m
UINT16_C	deps/jemalloc/include/msvc_compat/C99/stdint.h	236;"	d
UINT16_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	141;"	d
UINT32_C	deps/jemalloc/include/msvc_compat/C99/stdint.h	237;"	d
UINT32_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	142;"	d
UINT64_C	deps/jemalloc/include/msvc_compat/C99/stdint.h	238;"	d
UINT64_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	143;"	d
UINT8_C	deps/jemalloc/include/msvc_compat/C99/stdint.h	235;"	d
UINT8_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	140;"	d
UINTMAX_C	deps/jemalloc/include/msvc_compat/C99/stdint.h	242;"	d
UINTMAX_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	187;"	d
UINTPTR_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	177;"	d
UINTPTR_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	181;"	d
UINT_FAST16_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	169;"	d
UINT_FAST32_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	170;"	d
UINT_FAST64_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	171;"	d
UINT_FAST8_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	168;"	d
UINT_LEAST16_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	155;"	d
UINT_LEAST32_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	156;"	d
UINT_LEAST64_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	157;"	d
UINT_LEAST8_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	154;"	d
ULONG_ONEZERO	src/memtest.c	52;"	d	file:
ULONG_ONEZERO	src/memtest.c	55;"	d	file:
ULONG_ZEROONE	src/memtest.c	53;"	d	file:
ULONG_ZEROONE	src/memtest.c	56;"	d	file:
ULTRA_FAST	src/lzfP.h	75;"	d
UM	src/mt19937-64.c	63;"	d	file:
UNALIGNED_LE_CPU	src/siphash.c	63;"	d	file:
UNARY_PRIORITY	deps/lua/src/lparser.c	821;"	d	file:
UNIT_MILLISECONDS	src/server.h	443;"	d
UNIT_SECONDS	src/server.h	442;"	d
UNLOCK_RETURN	deps/jemalloc/src/jemalloc.c	1508;"	d	file:
UNLOCK_RETURN	deps/jemalloc/src/jemalloc.c	1571;"	d	file:
UNUSED	deps/hiredis/sds.c	1120;"	d	file:
UNUSED	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	13;"	d
UNUSED	deps/lua/src/llimits.h	70;"	d
UNUSED	src/controller.c	24;"	d	file:
UNUSED	src/crc64.c	129;"	d	file:
UNUSED	src/endianconv.c	107;"	d	file:
UNUSED	src/intset.c	394;"	d	file:
UNUSED	src/quicklist.c	1541;"	d	file:
UNUSED	src/redis-benchmark.c	64;"	d	file:
UNUSED	src/redis-cli.c	67;"	d	file:
UNUSED	src/sds.c	1225;"	d	file:
UNUSED	src/server.h	388;"	d
UNUSED	src/sha1.c	203;"	d	file:
UNUSED	src/util.c	948;"	d	file:
UNUSED	src/zipmap.c	475;"	d	file:
UNUSED	src/zmalloc.c	682;"	d	file:
UNUSED	tests/modules/blockedclient.c	7;"	d	file:
UNUSED	tests/modules/blockonbackground.c	9;"	d	file:
UNUSED	tests/modules/fork.c	12;"	d	file:
UNUSED	tests/modules/getkeys.c	9;"	d	file:
UNUSED	tests/modules/misc.c	9;"	d	file:
UNW_LOCAL_ONLY	deps/jemalloc/src/prof.c	14;"	d	file:
USER_COMMAND_BITS_COUNT	src/server.h	811;"	d
USER_FLAG_ALLCHANNELS	src/server.h	825;"	d
USER_FLAG_ALLCOMMANDS	src/server.h	818;"	d
USER_FLAG_ALLKEYS	src/server.h	817;"	d
USER_FLAG_DISABLED	src/server.h	816;"	d
USER_FLAG_ENABLED	src/server.h	815;"	d
USER_FLAG_NOPASS	src/server.h	819;"	d
USER_FLAG_SANITIZE_PAYLOAD	src/server.h	827;"	d
USER_FLAG_SANITIZE_PAYLOAD_SKIP	src/server.h	829;"	d
USE_ALIGNED_ACCESS	src/config.h	233;"	d
USE_CRYPTO_LOCKS	src/tls.c	105;"	d	file:
USE_SETCPUAFFINITY	src/config.h	262;"	d
USE_SETPROCTITLE	src/config.h	126;"	d
USE_SETPROCTITLE	src/config.h	134;"	d
USE_SSL	deps/hiredis/Makefile	/^USE_SSL?=0$/;"	m
UTIL_INLINE	deps/jemalloc/include/jemalloc/internal/util.h	4;"	d
UTIL_INLINE	deps/jemalloc/include/jemalloc/internal/util.h	65;"	d
UTRACE	deps/jemalloc/src/jemalloc.c	170;"	d	file:
UTRACE	deps/jemalloc/src/jemalloc.c	182;"	d	file:
Udata	deps/lua/src/lobject.h	/^typedef union Udata {$/;"	u
Udata	deps/lua/src/lobject.h	/^} Udata;$/;"	t	typeref:union:Udata
Uinttype	deps/lua/src/lua_struct.c	/^typedef unsigned STRUCT_INT Uinttype;$/;"	t	file:
UnOpr	deps/lua/src/lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	g
UnOpr	deps/lua/src/lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	t	typeref:enum:UnOpr
UpVal	deps/lua/src/lobject.h	/^typedef struct UpVal {$/;"	s
UpVal	deps/lua/src/lobject.h	/^} UpVal;$/;"	t	typeref:struct:UpVal
UserChangedCallback	tests/modules/auth.c	/^void UserChangedCallback(uint64_t client_id, void *privdata) {$/;"	f
Users	src/acl.c	/^rax *Users; \/* Table mapping usernames to user structures. *\/$/;"	v
UsersToLoad	src/acl.c	/^list *UsersToLoad;  \/* This is a list of users found in the configuration file$/;"	v
V	deps/lua/Makefile	/^V= 5.1$/;"	m
VALUEWEAK	deps/lua/src/lgc.c	48;"	d	file:
VALUEWEAKBIT	deps/lua/src/lgc.h	59;"	d
VARARG_HASARG	deps/lua/src/lobject.h	257;"	d
VARARG_ISVARARG	deps/lua/src/lobject.h	258;"	d
VARARG_NEEDSARG	deps/lua/src/lobject.h	259;"	d
VARIABLE_ARRAY	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	179;"	d
VARIABLE_ARRAY	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	182;"	d
VCALL	deps/lua/src/lparser.h	/^  VCALL,	\/* info = instruction pc *\/$/;"	e	enum:__anon93
VERY_FAST	src/lzfP.h	185;"	d
VERY_FAST	src/lzfP.h	64;"	d
VFALSE	deps/lua/src/lparser.h	/^  VFALSE,$/;"	e	enum:__anon93
VGLOBAL	deps/lua/src/lparser.h	/^  VGLOBAL,	\/* info = index of table; aux = index of global name in `k' *\/$/;"	e	enum:__anon93
VINDEXED	deps/lua/src/lparser.h	/^  VINDEXED,	\/* info = table register; aux = index register (or `k') *\/$/;"	e	enum:__anon93
VJMP	deps/lua/src/lparser.h	/^  VJMP,		\/* info = instruction pc *\/$/;"	e	enum:__anon93
VK	deps/lua/src/lparser.h	/^  VK,		\/* info = index of constant in `k' *\/$/;"	e	enum:__anon93
VKNUM	deps/lua/src/lparser.h	/^  VKNUM,	\/* nval = numerical value *\/$/;"	e	enum:__anon93
VLOCAL	deps/lua/src/lparser.h	/^  VLOCAL,	\/* info = local register *\/$/;"	e	enum:__anon93
VMRSS_LINE	tmp/getcpu.cpp	19;"	d	file:
VNIL	deps/lua/src/lparser.h	/^  VNIL,$/;"	e	enum:__anon93
VNONRELOC	deps/lua/src/lparser.h	/^  VNONRELOC,	\/* info = result register *\/$/;"	e	enum:__anon93
VOID	deps/lua/src/print.c	21;"	d	file:
VRELOCABLE	deps/lua/src/lparser.h	/^  VRELOCABLE,	\/* info = instruction pc *\/$/;"	e	enum:__anon93
VSEQ_INVALID	deps/jemalloc/src/prof.c	1721;"	d	file:
VTRUE	deps/lua/src/lparser.h	/^  VTRUE,$/;"	e	enum:__anon93
VUPVAL	deps/lua/src/lparser.h	/^  VUPVAL,       \/* info = index of upvalue in `upvalues' *\/$/;"	e	enum:__anon93
VVARARG	deps/lua/src/lparser.h	/^  VVARARG	\/* info = instruction pc *\/$/;"	e	enum:__anon93
VVOID	deps/lua/src/lparser.h	/^  VVOID,	\/* no value *\/$/;"	e	enum:__anon93
Value	deps/lua/src/lobject.h	/^} Value;$/;"	t	typeref:union:__anon106
VerifySubEventSupported	tests/modules/hooks.c	269;"	d	file:
W128_T	deps/jemalloc/test/src/SFMT.c	/^struct W128_T {$/;"	s	file:
W128_T	deps/jemalloc/test/src/SFMT.c	/^union W128_T {$/;"	u	file:
WANT_READ	src/tls.c	/^    WANT_READ = 1,$/;"	e	enum:__anon73	file:
WANT_WRITE	src/tls.c	/^    WANT_WRITE$/;"	e	enum:__anon73	file:
WARN	deps/hdr_histogram/Makefile	/^WARN= -Wall$/;"	m
WARN	deps/linenoise/Makefile	/^WARN= -Wall$/;"	m
WARN	src/Makefile	/^WARN=-Wall -W -Wno-missing-field-initializers$/;"	m
WARNINGS	deps/hiredis/Makefile	/^WARNINGS=-Wall -W -Wstrict-prototypes -Wwrite-strings -Wno-missing-field-initializers$/;"	m
WCHAR_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	215;"	d
WCHAR_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	212;"	d
WHITE0BIT	deps/lua/src/lgc.h	54;"	d
WHITE1BIT	deps/lua/src/lgc.h	55;"	d
WHITEBITS	deps/lua/src/lgc.h	62;"	d
WIDTH_uint32_t	deps/jemalloc/src/stats.c	105;"	d	file:
WIDTH_uint32_t	deps/jemalloc/src/stats.c	117;"	d	file:
WIDTH_uint64_t	deps/jemalloc/src/stats.c	106;"	d	file:
WIDTH_uint64_t	deps/jemalloc/src/stats.c	118;"	d	file:
WINT_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	219;"	d
WINT_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	218;"	d
WITNESS_INITIALIZER	deps/jemalloc/include/jemalloc/internal/witness.h	68;"	d
WITNESS_INITIALIZER	deps/jemalloc/include/jemalloc/internal/witness.h	70;"	d
WITNESS_RANK_ARENAS	deps/jemalloc/include/jemalloc/internal/witness.h	22;"	d
WITNESS_RANK_ARENA_LARGE	deps/jemalloc/include/jemalloc/internal/witness.h	51;"	d
WITNESS_RANK_ARENA_STATS	deps/jemalloc/include/jemalloc/internal/witness.h	55;"	d
WITNESS_RANK_BACKGROUND_THREAD	deps/jemalloc/include/jemalloc/internal/witness.h	32;"	d
WITNESS_RANK_BACKGROUND_THREAD_GLOBAL	deps/jemalloc/include/jemalloc/internal/witness.h	24;"	d
WITNESS_RANK_BASE	deps/jemalloc/include/jemalloc/internal/witness.h	50;"	d
WITNESS_RANK_BIN	deps/jemalloc/include/jemalloc/internal/witness.h	54;"	d
WITNESS_RANK_CORE	deps/jemalloc/include/jemalloc/internal/witness.h	40;"	d
WITNESS_RANK_CTL	deps/jemalloc/include/jemalloc/internal/witness.h	20;"	d
WITNESS_RANK_DECAY	deps/jemalloc/include/jemalloc/internal/witness.h	42;"	d
WITNESS_RANK_DSS	deps/jemalloc/include/jemalloc/internal/witness.h	56;"	d
WITNESS_RANK_EXTENTS	deps/jemalloc/include/jemalloc/internal/witness.h	45;"	d
WITNESS_RANK_EXTENT_AVAIL	deps/jemalloc/include/jemalloc/internal/witness.h	46;"	d
WITNESS_RANK_EXTENT_GROW	deps/jemalloc/include/jemalloc/internal/witness.h	44;"	d
WITNESS_RANK_EXTENT_POOL	deps/jemalloc/include/jemalloc/internal/witness.h	48;"	d
WITNESS_RANK_INIT	deps/jemalloc/include/jemalloc/internal/witness.h	19;"	d
WITNESS_RANK_LEAF	deps/jemalloc/include/jemalloc/internal/witness.h	53;"	d
WITNESS_RANK_MIN	deps/jemalloc/include/jemalloc/internal/witness.h	17;"	d
WITNESS_RANK_OMIT	deps/jemalloc/include/jemalloc/internal/witness.h	15;"	d
WITNESS_RANK_PROF_ACCUM	deps/jemalloc/include/jemalloc/internal/witness.h	58;"	d
WITNESS_RANK_PROF_ACTIVE	deps/jemalloc/include/jemalloc/internal/witness.h	57;"	d
WITNESS_RANK_PROF_BT2GCTX	deps/jemalloc/include/jemalloc/internal/witness.h	27;"	d
WITNESS_RANK_PROF_DUMP	deps/jemalloc/include/jemalloc/internal/witness.h	26;"	d
WITNESS_RANK_PROF_DUMP_SEQ	deps/jemalloc/include/jemalloc/internal/witness.h	59;"	d
WITNESS_RANK_PROF_GCTX	deps/jemalloc/include/jemalloc/internal/witness.h	30;"	d
WITNESS_RANK_PROF_GDUMP	deps/jemalloc/include/jemalloc/internal/witness.h	60;"	d
WITNESS_RANK_PROF_NEXT_THR_UID	deps/jemalloc/include/jemalloc/internal/witness.h	61;"	d
WITNESS_RANK_PROF_TDATA	deps/jemalloc/include/jemalloc/internal/witness.h	29;"	d
WITNESS_RANK_PROF_TDATAS	deps/jemalloc/include/jemalloc/internal/witness.h	28;"	d
WITNESS_RANK_PROF_THREAD_ACTIVE_INIT	deps/jemalloc/include/jemalloc/internal/witness.h	62;"	d
WITNESS_RANK_RTREE	deps/jemalloc/include/jemalloc/internal/witness.h	49;"	d
WITNESS_RANK_TCACHES	deps/jemalloc/include/jemalloc/internal/witness.h	21;"	d
WITNESS_RANK_TCACHE_QL	deps/jemalloc/include/jemalloc/internal/witness.h	43;"	d
WITNESS_TSDN_NULL	deps/jemalloc/include/jemalloc/internal/witness.h	113;"	d
WITNESS_TSD_INITIALIZER	deps/jemalloc/include/jemalloc/internal/witness.h	112;"	d
WORD	src/sha256.h	/^typedef uint32_t WORD;  \/\/ 32-bit word$/;"	t
WRITE	deps/jemalloc/src/ctl.c	1332;"	d	file:
WRITEONLY	deps/jemalloc/src/ctl.c	1304;"	d	file:
WantIOType	src/tls.c	/^} WantIOType;$/;"	t	typeref:enum:__anon73	file:
X0	src/rand.c	54;"	d	file:
X1	src/rand.c	55;"	d	file:
X2	src/rand.c	56;"	d	file:
X2S_BUFSIZE	deps/jemalloc/src/malloc_io.c	64;"	d	file:
XREAD_BLOCKED_DEFAULT_COUNT	src/t_stream.c	1925;"	d	file:
XSLTPROC	deps/jemalloc/Makefile	/^XSLTPROC := false$/;"	m
Y 	deps/lua/test/factorial.lua	/^Y = function (g)$/;"	f
Z	deps/lua/src/lundump.c	/^ ZIO* Z;$/;"	m	struct:__anon97	file:
ZADD_IN_GT	src/server.h	2164;"	d
ZADD_IN_INCR	src/server.h	2161;"	d
ZADD_IN_LT	src/server.h	2165;"	d
ZADD_IN_NONE	src/server.h	2160;"	d
ZADD_IN_NX	src/server.h	2162;"	d
ZADD_IN_XX	src/server.h	2163;"	d
ZADD_OUT_ADDED	src/server.h	2170;"	d
ZADD_OUT_NAN	src/server.h	2169;"	d
ZADD_OUT_NOP	src/server.h	2168;"	d
ZADD_OUT_UPDATED	src/server.h	2171;"	d
ZD	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	16;"	d
ZIO	deps/lua/src/lzio.h	/^typedef struct Zio ZIO;$/;"	t	typeref:struct:Zio
ZIPLIST_BYTES	src/ziplist.c	232;"	d	file:
ZIPLIST_END_SIZE	src/ziplist.c	247;"	d	file:
ZIPLIST_ENTRY_END	src/ziplist.c	258;"	d	file:
ZIPLIST_ENTRY_HEAD	src/ziplist.c	250;"	d	file:
ZIPLIST_ENTRY_TAIL	src/ziplist.c	254;"	d	file:
ZIPLIST_ENTRY_ZERO	src/ziplist.c	293;"	d	file:
ZIPLIST_HEAD	src/ziplist.h	34;"	d
ZIPLIST_HEADER_SIZE	src/ziplist.c	244;"	d	file:
ZIPLIST_INCR_LENGTH	src/ziplist.c	265;"	d	file:
ZIPLIST_LENGTH	src/ziplist.c	239;"	d	file:
ZIPLIST_TAIL	src/ziplist.h	35;"	d
ZIPLIST_TAIL_OFFSET	src/ziplist.c	235;"	d	file:
ZIPMAP_BIGLEN	src/zipmap.c	83;"	d	file:
ZIPMAP_END	src/zipmap.c	84;"	d	file:
ZIPMAP_LEN_BYTES	src/zipmap.c	93;"	d	file:
ZIPMAP_VALUE_MAX_FREE	src/zipmap.c	88;"	d	file:
ZIP_ASSERT_ENCODING	src/ziplist.c	326;"	d	file:
ZIP_BIG_PREVLEN	src/ziplist.c	196;"	d	file:
ZIP_DECODE_LENGTH	src/ziplist.c	398;"	d	file:
ZIP_DECODE_PREVLEN	src/ziplist.c	476;"	d	file:
ZIP_DECODE_PREVLENSIZE	src/ziplist.c	461;"	d	file:
ZIP_ENCODING_SIZE_INVALID	src/ziplist.c	307;"	d	file:
ZIP_END	src/ziplist.c	195;"	d	file:
ZIP_ENTRY_ENCODING	src/ziplist.c	302;"	d	file:
ZIP_INT_16B	src/ziplist.c	209;"	d	file:
ZIP_INT_24B	src/ziplist.c	212;"	d	file:
ZIP_INT_32B	src/ziplist.c	210;"	d	file:
ZIP_INT_64B	src/ziplist.c	211;"	d	file:
ZIP_INT_8B	src/ziplist.c	213;"	d	file:
ZIP_INT_IMM_MASK	src/ziplist.c	217;"	d	file:
ZIP_INT_IMM_MAX	src/ziplist.c	220;"	d	file:
ZIP_INT_IMM_MIN	src/ziplist.c	219;"	d	file:
ZIP_INT_MASK	src/ziplist.c	205;"	d	file:
ZIP_IS_STR	src/ziplist.c	227;"	d	file:
ZIP_STR_06B	src/ziplist.c	206;"	d	file:
ZIP_STR_14B	src/ziplist.c	207;"	d	file:
ZIP_STR_32B	src/ziplist.c	208;"	d	file:
ZIP_STR_MASK	src/ziplist.c	204;"	d	file:
ZMALLOC_LIB	src/zmalloc.h	39;"	d
ZMALLOC_LIB	src/zmalloc.h	49;"	d
ZMALLOC_LIB	src/zmalloc.h	73;"	d
ZRANDMEMBER_RANDOM_SAMPLE_LIMIT	src/t_zset.c	3983;"	d	file:
ZRANDMEMBER_SUB_STRATEGY_MUL	src/t_zset.c	3978;"	d	file:
ZRANGE_AUTO	src/t_zset.c	/^    ZRANGE_AUTO = 0,$/;"	e	enum:__anon1	file:
ZRANGE_CONSUMER_TYPE_CLIENT	src/t_zset.c	/^    ZRANGE_CONSUMER_TYPE_CLIENT = 0,$/;"	e	enum:__anon10	file:
ZRANGE_CONSUMER_TYPE_INTERNAL	src/t_zset.c	/^    ZRANGE_CONSUMER_TYPE_INTERNAL$/;"	e	enum:__anon10	file:
ZRANGE_DIRECTION_AUTO	src/t_zset.c	/^    ZRANGE_DIRECTION_AUTO = 0,$/;"	e	enum:__anon9	file:
ZRANGE_DIRECTION_FORWARD	src/t_zset.c	/^    ZRANGE_DIRECTION_FORWARD,$/;"	e	enum:__anon9	file:
ZRANGE_DIRECTION_REVERSE	src/t_zset.c	/^    ZRANGE_DIRECTION_REVERSE$/;"	e	enum:__anon9	file:
ZRANGE_LEX	src/t_zset.c	/^    ZRANGE_LEX,$/;"	e	enum:__anon1	file:
ZRANGE_RANK	src/t_zset.c	/^    ZRANGE_RANK,$/;"	e	enum:__anon1	file:
ZRANGE_SCORE	src/t_zset.c	/^    ZRANGE_SCORE,$/;"	e	enum:__anon1	file:
ZSET_MAX	src/server.h	369;"	d
ZSET_MIN	src/server.h	368;"	d
ZSKIPLIST_MAXLEVEL	src/server.h	390;"	d
ZSKIPLIST_P	src/server.h	391;"	d
ZU	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	15;"	d
Zio	deps/lua/src/lzio.h	/^struct Zio {$/;"	s
_ALL_SOURCE	src/fmacros.h	41;"	d
_BSD_SOURCE	src/fmacros.h	33;"	d
_BSD_SOURCE	tests/modules/fork.c	4;"	d	file:
_Bool	deps/jemalloc/include/msvc_compat/C99/stdbool.h	/^typedef BOOL _Bool;$/;"	t
_CELLS:draw	deps/lua/test/life.lua	/^function _CELLS:draw()$/;"	f
_CELLS:evolve	deps/lua/test/life.lua	/^function _CELLS:evolve(next)$/;"	f
_CELLS:spawn	deps/lua/test/life.lua	/^function _CELLS:spawn(shape,left,top)$/;"	f
_CRC16_TABLE_H__	src/crc16_slottable.h	2;"	d
_CRT_SPINCOUNT	deps/jemalloc/src/mutex.c	10;"	d	file:
_CRT_SPINCOUNT	deps/jemalloc/test/src/mtx.c	4;"	d	file:
_DARWIN_C_SOURCE	deps/hiredis/fmacros.h	9;"	d
_DEFAULT_SOURCE	src/fmacros.h	37;"	d
_DEFAULT_SOURCE	tests/modules/fork.c	5;"	d	file:
_EL_ADD_READ	deps/hiredis/async_private.h	35;"	d
_EL_ADD_WRITE	deps/hiredis/async_private.h	43;"	d
_EL_CLEANUP	deps/hiredis/async_private.h	51;"	d
_EL_DEL_READ	deps/hiredis/async_private.h	40;"	d
_EL_DEL_WRITE	deps/hiredis/async_private.h	48;"	d
_FILE_OFFSET_BITS	src/fmacros.h	59;"	d
_GNU_SOURCE	src/fmacros.h	36;"	d
_GNU_SOURCE	src/setcpuaffinity.c	27;"	d	file:
_GNU_SOURCE	src/setproctitle.c	29;"	d	file:
_LARGEFILE_SOURCE	src/fmacros.h	58;"	d
_MSC_STDINT_H_	deps/jemalloc/include/msvc_compat/C99/stdint.h	37;"	d
_POSIX_C_SOURCE	deps/hiredis/fmacros.h	5;"	d
_POSIX_C_SOURCE	src/fmacros.h	55;"	d
_REDISMODULE_CTX_FLAGS_NEXT	src/redismodule.h	145;"	d
_REDISMODULE_EVENT_NEXT	src/redismodule.h	242;"	d
_REDISMODULE_EVENT_REPLROLECHANGED_NEXT	src/redismodule.h	340;"	d
_REDISMODULE_NOTIFY_NEXT	src/redismodule.h	168;"	d
_REDISMODULE_SUBEVENT_CLIENT_CHANGE_NEXT	src/redismodule.h	328;"	d
_REDISMODULE_SUBEVENT_CRON_LOOP_NEXT	src/redismodule.h	364;"	d
_REDISMODULE_SUBEVENT_FLUSHDB_NEXT	src/redismodule.h	344;"	d
_REDISMODULE_SUBEVENT_FORK_CHILD_NEXT	src/redismodule.h	361;"	d
_REDISMODULE_SUBEVENT_LOADING_NEXT	src/redismodule.h	324;"	d
_REDISMODULE_SUBEVENT_LOADING_PROGRESS_NEXT	src/redismodule.h	352;"	d
_REDISMODULE_SUBEVENT_MASTER_NEXT	src/redismodule.h	332;"	d
_REDISMODULE_SUBEVENT_MODULE_NEXT	src/redismodule.h	348;"	d
_REDISMODULE_SUBEVENT_PERSISTENCE_NEXT	src/redismodule.h	317;"	d
_REDISMODULE_SUBEVENT_REPLICA_CHANGE_NEXT	src/redismodule.h	336;"	d
_REDISMODULE_SUBEVENT_REPL_BACKUP_NEXT	src/redismodule.h	357;"	d
_REDISMODULE_SUBEVENT_SHUTDOWN_NEXT	src/redismodule.h	363;"	d
_REDISMODULE_SUBEVENT_SWAPDB_NEXT	src/redismodule.h	365;"	d
_REDIS_FMACRO_H	src/fmacros.h	31;"	d
_RPATH	deps/jemalloc/Makefile	/^_RPATH = -Wl,-rpath,$(1)$/;"	m
_Unwind_Backtrace	deps/jemalloc/include/jemalloc/internal/hooks.h	17;"	d
_Unwind_Backtrace	deps/jemalloc/src/prof.c	24;"	d	file:
_Unwind_Backtrace	deps/jemalloc/src/prof.c	26;"	d	file:
_W64	deps/jemalloc/include/msvc_compat/C99/stdint.h	60;"	d
_W64	deps/jemalloc/include/msvc_compat/C99/stdint.h	62;"	d
_WIN32_HELPER_INCLUDE	deps/hiredis/win32.h	2;"	d
_WIN32_WINNT	deps/hiredis/sockcompat.h	47;"	d
_WIN32_WINNT	deps/hiredis/sockcompat.h	48;"	d
_XOPEN_SOURCE	deps/hiredis/fmacros.h	4;"	d
_XOPEN_SOURCE	src/fmacros.h	45;"	d
_XOPEN_SOURCE	src/fmacros.h	51;"	d
_XOPEN_SOURCE	tests/modules/blockonbackground.c	2;"	d	file:
_ZIPLIST_H	src/ziplist.h	32;"	d
_ZIPMAP_H	src/zipmap.h	36;"	d
__ADLIST_H__	src/adlist.h	32;"	d
__AE_H__	src/ae.h	34;"	d
__ATOMIC_VAR_H	src/atomicvar.h	56;"	d
__BIO_H	src/bio.h	31;"	d
__CLICOMMON_H	src/cli_common.h	2;"	d
__CLUSTER_H	src/cluster.h	2;"	d
__CONFIG_H	src/config.h	31;"	d
__DECONST	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	26;"	d
__DICT_H	deps/hiredis/dict.h	37;"	d
__DICT_H	src/dict.h	37;"	d
__ENDIANCONV_H	src/endianconv.h	34;"	d
__GEO_H__	src/geo.h	2;"	d
__HIREDIS_AE_H__	deps/hiredis/adapters/ae.h	32;"	d
__HIREDIS_ASYNC_H	deps/hiredis/async.h	33;"	d
__HIREDIS_ASYNC_PRIVATE_H	deps/hiredis/async_private.h	33;"	d
__HIREDIS_EXAMPLE_QT_H	deps/hiredis/examples/example-qt.h	2;"	d
__HIREDIS_FMACRO_H	deps/hiredis/fmacros.h	2;"	d
__HIREDIS_GLIB_H__	deps/hiredis/adapters/glib.h	2;"	d
__HIREDIS_H	deps/hiredis/hiredis.h	35;"	d
__HIREDIS_IVYKIS_H__	deps/hiredis/adapters/ivykis.h	2;"	d
__HIREDIS_LIBEVENT_H__	deps/hiredis/adapters/libevent.h	32;"	d
__HIREDIS_LIBEV_H__	deps/hiredis/adapters/libev.h	32;"	d
__HIREDIS_LIBUV_H__	deps/hiredis/adapters/libuv.h	2;"	d
__HIREDIS_MACOSX_H__	deps/hiredis/adapters/macosx.h	7;"	d
__HIREDIS_QT_H__	deps/hiredis/adapters/qt.h	27;"	d
__HIREDIS_READ_H	deps/hiredis/read.h	34;"	d
__HIREDIS_SSL_H	deps/hiredis/hiredis_ssl.h	33;"	d
__INTSET_H	src/intset.h	32;"	d
__LATENCY_H	src/latency.h	35;"	d
__LINENOISE_H	deps/linenoise/linenoise.h	40;"	d
__LISTPACK_H	src/listpack.h	36;"	d
__LOLWUT_H	src/lolwut.h	39;"	d
__MAX_MSEC	deps/hiredis/net.c	216;"	d	file:
__MONOTONIC_H	src/monotonic.h	2;"	d
__MT19937_64_H	src/mt19937-64.h	57;"	d
__NET_H	deps/hiredis/net.h	36;"	d
__PQSORT_H	src/pqsort.h	34;"	d
__QUICKLIST_H__	src/quicklist.h	34;"	d
__RDB_H	src/rdb.h	31;"	d
__REDIS_ASSERT_H__	src/redisassert.h	39;"	d
__REDIS_CONNECTION_H	src/connection.h	32;"	d
__REDIS_CONNHELPERS_H	src/connhelpers.h	32;"	d
__REDIS_H	src/server.h	31;"	d
__REDIS_HELP_H	src/help.h	4;"	d
__REDIS_RIO_H	src/rio.h	33;"	d
__REDIS_UTIL_H	src/util.h	31;"	d
__SDS_ALLOC_H__	src/sdsalloc.h	40;"	d
__SDS_H	src/sds.h	34;"	d
__SLOWLOG_H__	src/slowlog.h	31;"	d
__SOCKCOMPAT_H	deps/hiredis/sockcompat.h	32;"	d
__SPARKLINE_H	src/sparkline.h	31;"	d
__TESTHELP_H	src/testhelp.h	40;"	d
__ZMALLOC_H	src/zmalloc.h	32;"	d
__arm64__	src/config.h	224;"	d
__arm__	src/config.h	221;"	d
__attribute__	deps/hiredis/sds.h	38;"	d
__bool_true_false_are_defined	deps/jemalloc/include/msvc_compat/C99/stdbool.h	18;"	d
__builtin_unreachable	deps/jemalloc/configure	/^  __builtin_unreachable();$/;"	f
__cntvct	src/monotonic.c	/^static inline uint64_t __cntvct() {$/;"	f	file:
__failed_tests	src/testhelp.h	/^int __failed_tests = 0;$/;"	v
__free_hook	deps/jemalloc/src/jemalloc.c	/^JEMALLOC_EXPORT void (*__free_hook)(void *ptr) = je_free;$/;"	v
__func__	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_decls.h	74;"	d
__malloc_hook	deps/jemalloc/src/jemalloc.c	/^JEMALLOC_EXPORT void *(*__malloc_hook)(size_t size) = je_malloc;$/;"	v
__memalign_hook	deps/jemalloc/src/jemalloc.c	/^JEMALLOC_EXPORT void *(*__memalign_hook)(size_t alignment, size_t size) =$/;"	v
__quicklistCompress	src/quicklist.c	/^REDIS_STATIC void __quicklistCompress(const quicklist *quicklist,$/;"	f
__quicklistCompressNode	src/quicklist.c	/^REDIS_STATIC int __quicklistCompressNode(quicklistNode *node) {$/;"	f
__quicklistDecompressNode	src/quicklist.c	/^REDIS_STATIC int __quicklistDecompressNode(quicklistNode *node) {$/;"	f
__quicklistDelNode	src/quicklist.c	/^REDIS_STATIC void __quicklistDelNode(quicklist *quicklist,$/;"	f
__quicklistInsertNode	src/quicklist.c	/^REDIS_STATIC void __quicklistInsertNode(quicklist *quicklist,$/;"	f
__realloc_hook	deps/jemalloc/src/jemalloc.c	/^JEMALLOC_EXPORT void *(*__realloc_hook)(void *ptr, size_t size) = je_realloc;$/;"	v
__redisAppendCommand	deps/hiredis/hiredis.c	/^int __redisAppendCommand(redisContext *c, const char *cmd, size_t len) {$/;"	f
__redisAsyncCommand	deps/hiredis/async.c	/^static int __redisAsyncCommand(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, const char *cmd, size_t len) {$/;"	f	file:
__redisAsyncCopyError	deps/hiredis/async.c	/^static void __redisAsyncCopyError(redisAsyncContext *ac) {$/;"	f	file:
__redisAsyncDisconnect	deps/hiredis/async.c	/^void __redisAsyncDisconnect(redisAsyncContext *ac) {$/;"	f
__redisAsyncFree	deps/hiredis/async.c	/^static void __redisAsyncFree(redisAsyncContext *ac) {$/;"	f	file:
__redisAsyncHandleConnect	deps/hiredis/async.c	/^static int __redisAsyncHandleConnect(redisAsyncContext *ac) {$/;"	f	file:
__redisAsyncHandleConnectFailure	deps/hiredis/async.c	/^static void __redisAsyncHandleConnectFailure(redisAsyncContext *ac) {$/;"	f	file:
__redisBlockForReply	deps/hiredis/hiredis.c	/^static void *__redisBlockForReply(redisContext *c) {$/;"	f	file:
__redisGetSubscribeCallback	deps/hiredis/async.c	/^static int __redisGetSubscribeCallback(redisAsyncContext *ac, redisReply *reply, redisCallback *dstcb) {$/;"	f	file:
__redisPushCallback	deps/hiredis/async.c	/^static int __redisPushCallback(redisCallbackList *list, redisCallback *source) {$/;"	f	file:
__redisReaderSetError	deps/hiredis/read.c	/^static void __redisReaderSetError(redisReader *r, int type, const char *str) {$/;"	f	file:
__redisReaderSetErrorOOM	deps/hiredis/read.c	/^static void __redisReaderSetErrorOOM(redisReader *r) {$/;"	f	file:
__redisReaderSetErrorProtocolByte	deps/hiredis/read.c	/^static void __redisReaderSetErrorProtocolByte(redisReader *r, char byte) {$/;"	f	file:
__redisRunCallback	deps/hiredis/async.c	/^static void __redisRunCallback(redisAsyncContext *ac, redisCallback *cb, redisReply *reply) {$/;"	f	file:
__redisRunPushCallback	deps/hiredis/async.c	/^static void __redisRunPushCallback(redisAsyncContext *ac, redisReply *reply) {$/;"	f	file:
__redisSetError	deps/hiredis/hiredis.c	/^void __redisSetError(redisContext *c, int type, const char *str) {$/;"	f
__redisSetErrorFromErrno	deps/hiredis/net.c	/^static void __redisSetErrorFromErrno(redisContext *c, int type, const char *prefix) {$/;"	f	file:
__redisShiftCallback	deps/hiredis/async.c	/^static int __redisShiftCallback(redisCallbackList *list, redisCallback *target) {$/;"	f	file:
__sparc__	src/config.h	229;"	d
__str	src/zmalloc.h	36;"	d
__test_num	src/testhelp.h	/^int __test_num = 0;$/;"	v
__xstr	src/zmalloc.h	35;"	d
__ziplistCascadeUpdate	src/ziplist.c	/^unsigned char *__ziplistCascadeUpdate(unsigned char *zl, unsigned char *p) {$/;"	f
__ziplistDelete	src/ziplist.c	/^unsigned char *__ziplistDelete(unsigned char *zl, unsigned char *p, unsigned int num) {$/;"	f
__ziplistInsert	src/ziplist.c	/^unsigned char *__ziplistInsert(unsigned char *zl, unsigned char *p, unsigned char *s, unsigned int slen) {$/;"	f
_addReplyProtoToList	src/networking.c	/^void _addReplyProtoToList(client *c, const char *s, size_t len) {$/;"	f
_addReplyToBuffer	src/networking.c	/^int _addReplyToBuffer(client *c, const char *s, size_t len) {$/;"	f
_anetTcpServer	src/anet.c	/^static int _anetTcpServer(char *err, int port, char *bindaddr, int af, int backlog)$/;"	f	file:
_buf	src/t_zset.c	/^    unsigned char _buf[32]; \/* Private buffer. *\/$/;"	m	struct:__anon8	file:
_client	src/redis-benchmark.c	/^typedef struct _client {$/;"	s	file:
_crc64	src/crc64.c	/^uint64_t _crc64(uint_fast64_t crc, const void *in_data, const uint64_t len) {$/;"	f
_dictClear	deps/hiredis/dict.c	/^static int _dictClear(dict *ht) {$/;"	f	file:
_dictClear	src/dict.c	/^int _dictClear(dict *d, dictht *ht, void(callback)(void *)) {$/;"	f
_dictExpand	src/dict.c	/^int _dictExpand(dict *d, unsigned long size, int* malloc_failed)$/;"	f
_dictExpandIfNeeded	deps/hiredis/dict.c	/^static int _dictExpandIfNeeded(dict *ht) {$/;"	f	file:
_dictExpandIfNeeded	src/dict.c	/^static int _dictExpandIfNeeded(dict *d)$/;"	f	file:
_dictGetStatsHt	src/dict.c	/^size_t _dictGetStatsHt(char *buf, size_t bufsize, dictht *ht, int tableid) {$/;"	f
_dictInit	deps/hiredis/dict.c	/^static int _dictInit(dict *ht, dictType *type, void *privDataPtr) {$/;"	f	file:
_dictInit	src/dict.c	/^int _dictInit(dict *d, dictType *type,$/;"	f
_dictKeyIndex	deps/hiredis/dict.c	/^static int _dictKeyIndex(dict *ht, const void *key) {$/;"	f	file:
_dictKeyIndex	src/dict.c	/^static long _dictKeyIndex(dict *d, const void *key, uint64_t hash, dictEntry **existing)$/;"	f	file:
_dictNextPower	deps/hiredis/dict.c	/^static unsigned long _dictNextPower(unsigned long size) {$/;"	f	file:
_dictNextPower	src/dict.c	/^static unsigned long _dictNextPower(unsigned long size)$/;"	f	file:
_dictRehashStep	src/dict.c	/^static void _dictRehashStep(dict *d) {$/;"	f	file:
_dictReset	deps/hiredis/dict.c	/^static void _dictReset(dict *ht) {$/;"	f	file:
_dictReset	src/dict.c	/^static void _dictReset(dictht *ht)$/;"	f	file:
_hashZiplistEntryValidation	src/t_hash.c	/^static int _hashZiplistEntryValidation(unsigned char *p, void *userdata) {$/;"	f	file:
_initWinsock	deps/hiredis/sockcompat.c	/^static int _initWinsock() {$/;"	f	file:
_init_init_lock	deps/jemalloc/src/jemalloc.c	/^_init_init_lock(void) {$/;"	f	file:
_intsetGet	src/intset.c	/^static int64_t _intsetGet(intset *is, int pos) {$/;"	f	file:
_intsetGetEncoded	src/intset.c	/^static int64_t _intsetGetEncoded(intset *is, int pos, uint8_t enc) {$/;"	f	file:
_intsetSet	src/intset.c	/^static void _intsetSet(intset *is, int pos, int64_t value) {$/;"	f	file:
_intsetValueEncoding	src/intset.c	/^static uint8_t _intsetValueEncoding(int64_t v) {$/;"	f	file:
_iterset	src/t_zset.c	/^        union _iterset {$/;"	u	union:__anon2::__anon3	file:
_iterzset	src/t_zset.c	/^        union _iterzset {$/;"	u	union:__anon2::__anon3	file:
_itrprintr	src/quicklist.c	/^static int _itrprintr(quicklist *ql, int print, int forward) {$/;"	f	file:
_malloc_thread_cleanup	deps/jemalloc/src/tsd.c	/^_malloc_thread_cleanup(void) {$/;"	f
_malloc_zone_t	deps/jemalloc/src/zone.c	/^typedef struct _malloc_zone_t {$/;"	s	file:
_mm_pause	deps/jemalloc/configure	/^_mm_pause(); return 0;$/;"	f
_next_fp	deps/hdr_histogram/hdr_histogram.h	/^    bool (* _next_fp)(struct hdr_iter* iter);$/;"	m	struct:hdr_iter
_pqsort	src/pqsort.c	/^_pqsort(void *a, size_t n, size_t es,$/;"	f	file:
_ql_verify	src/quicklist.c	/^static int _ql_verify(quicklist *ql, uint32_t len, uint32_t count,$/;"	f	file:
_quicklistBookmarkDelete	src/quicklist.c	/^void _quicklistBookmarkDelete(quicklist *ql, quicklistBookmark *bm) {$/;"	f
_quicklistBookmarkFindByName	src/quicklist.c	/^quicklistBookmark *_quicklistBookmarkFindByName(quicklist *ql, const char *name) {$/;"	f
_quicklistBookmarkFindByNode	src/quicklist.c	/^quicklistBookmark *_quicklistBookmarkFindByNode(quicklist *ql, quicklistNode *node) {$/;"	f
_quicklistInsert	src/quicklist.c	/^REDIS_STATIC void _quicklistInsert(quicklist *quicklist, quicklistEntry *entry,$/;"	f
_quicklistInsertNodeAfter	src/quicklist.c	/^REDIS_STATIC void _quicklistInsertNodeAfter(quicklist *quicklist,$/;"	f
_quicklistInsertNodeBefore	src/quicklist.c	/^REDIS_STATIC void _quicklistInsertNodeBefore(quicklist *quicklist,$/;"	f
_quicklistMergeNodes	src/quicklist.c	/^REDIS_STATIC void _quicklistMergeNodes(quicklist *quicklist,$/;"	f
_quicklistNodeAllowInsert	src/quicklist.c	/^REDIS_STATIC int _quicklistNodeAllowInsert(const quicklistNode *node,$/;"	f
_quicklistNodeAllowMerge	src/quicklist.c	/^REDIS_STATIC int _quicklistNodeAllowMerge(const quicklistNode *a,$/;"	f
_quicklistNodeSizeMeetsOptimizationRequirement	src/quicklist.c	/^_quicklistNodeSizeMeetsOptimizationRequirement(const size_t sz,$/;"	f
_quicklistSaver	src/quicklist.c	/^REDIS_STATIC void *_quicklistSaver(unsigned char *data, unsigned int sz) {$/;"	f
_quicklistSplitNode	src/quicklist.c	/^REDIS_STATIC quicklistNode *_quicklistSplitNode(quicklistNode *node, int offset,$/;"	f
_quicklistZiplistMerge	src/quicklist.c	/^REDIS_STATIC quicklistNode *_quicklistZiplistMerge(quicklist *quicklist,$/;"	f
_redisAssert	utils/hashtable/rehashing.c	/^void _redisAssert(char *x, char *y, int l) {$/;"	f
_redisContextConnectTcp	deps/hiredis/net.c	/^static int _redisContextConnectTcp(redisContext *c, const char *addr, int port,$/;"	f	file:
_redisSortObject	src/server.h	/^typedef struct _redisSortObject {$/;"	s
_redisSortOperation	src/server.h	/^typedef struct _redisSortOperation {$/;"	s
_rfds	src/ae_select.c	/^    fd_set _rfds, _wfds;$/;"	m	struct:aeApiState	file:
_rio	src/rio.h	/^struct _rio {$/;"	s
_run_cli	tests/integration/redis-cli.tcl	/^    proc _run_cli {opts args} {$/;"	p
_sdsnewlen	src/sds.c	/^sds _sdsnewlen(const void *init, size_t initlen, int trymalloc) {$/;"	f
_serverAssert	src/debug.c	/^void _serverAssert(const char *estr, const char *file, int line) {$/;"	f
_serverAssert	src/redis-benchmark.c	/^void _serverAssert(const char *estr, const char *file, int line) {$/;"	f
_serverAssert	src/redis-cli.c	/^void _serverAssert(const char *estr, const char *file, int line) {$/;"	f
_serverAssertPrintClientInfo	src/debug.c	/^void _serverAssertPrintClientInfo(const client *c) {$/;"	f
_serverAssertPrintObject	src/debug.c	/^void _serverAssertPrintObject(const robj *o) {$/;"	f
_serverAssertWithInfo	src/debug.c	/^void _serverAssertWithInfo(const client *c, const robj *o, const char *estr, const char *file, int line) {$/;"	f
_serverLog	src/server.c	/^void _serverLog(int level, const char *fmt, ...) {$/;"	f
_serverPanic	src/debug.c	/^void _serverPanic(const char *file, int line, const char *msg, ...) {$/;"	f
_ssl_ctx	deps/hiredis/test.c	/^redisSSLContext *_ssl_ctx = NULL;$/;"	v
_tls_callback	deps/jemalloc/src/tsd.c	/^_tls_callback(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved) {$/;"	f	file:
_updateErrno	deps/hiredis/sockcompat.c	/^static void _updateErrno(int success) {$/;"	f	file:
_wfds	src/ae_select.c	/^    fd_set _rfds, _wfds;$/;"	m	struct:aeApiState	file:
_wsaErrorToErrno	deps/hiredis/sockcompat.c	/^static int _wsaErrorToErrno(int err) {$/;"	f	file:
_zsetZiplistValidateIntegrity	src/t_zset.c	/^static int _zsetZiplistValidateIntegrity(unsigned char *p, void *userdata) {$/;"	f	file:
a	deps/lua/etc/Makefile	/^	-.\/a.out -e'a=1'$/;"	m
a	exp/merge.py	/^    a = ""$/;"	v
a	src/rand.c	/^static uint32_t x[3] = { X0, X1, X2 }, a[3] = { A0, A1, A2 }, c = C;$/;"	v	file:
a0	deps/jemalloc/src/jemalloc.c	/^static arena_t		*a0; \/* arenas[0]; read-only after initialization. *\/$/;"	v	file:
a0dalloc	deps/jemalloc/src/jemalloc.c	/^a0dalloc(void *ptr) {$/;"	f
a0ialloc	deps/jemalloc/src/jemalloc.c	/^a0ialloc(size_t size, bool zero, bool is_internal) {$/;"	f	file:
a0idalloc	deps/jemalloc/src/jemalloc.c	/^a0idalloc(void *ptr, bool is_internal) {$/;"	f	file:
a0malloc	deps/jemalloc/src/jemalloc.c	/^a0malloc(size_t size) {$/;"	f
abAppend	deps/linenoise/linenoise.c	/^static void abAppend(struct abuf *ab, const char *s, int len) {$/;"	f	file:
abFree	deps/linenoise/linenoise.c	/^static void abFree(struct abuf *ab) {$/;"	f	file:
abInit	deps/linenoise/linenoise.c	/^static void abInit(struct abuf *ab) {$/;"	f	file:
abortFailover	src/replication.c	/^void abortFailover(const char *err) {$/;"	f
abort_sentinel_test	tests/instances.tcl	/^proc abort_sentinel_test msg {$/;"	p
about	src/cluster.h	/^        clusterMsgDataFail about;$/;"	m	struct:clusterMsgData::__anon38
abs_index	deps/lua/src/lauxlib.c	32;"	d	file:
abs_objroot	deps/jemalloc/Makefile	/^abs_objroot := \/home\/wangep\/workdir\/Redis_Replication\/deps\/jemalloc\/$/;"	m
abs_srcroot	deps/jemalloc/Makefile	/^abs_srcroot := \/home\/wangep\/workdir\/Redis_Replication\/deps\/jemalloc\/$/;"	m
abuf	deps/linenoise/linenoise.c	/^struct abuf {$/;"	s	file:
ac	deps/hiredis/adapters/glib.h	/^    redisAsyncContext *ac;$/;"	m	struct:__anon85
ac_fn_c_check_func	deps/jemalloc/configure	/^ac_fn_c_check_func ()$/;"	f
ac_fn_c_check_header_compile	deps/jemalloc/configure	/^ac_fn_c_check_header_compile ()$/;"	f
ac_fn_c_check_header_mongrel	deps/jemalloc/configure	/^ac_fn_c_check_header_mongrel ()$/;"	f
ac_fn_c_check_type	deps/jemalloc/configure	/^ac_fn_c_check_type ()$/;"	f
ac_fn_c_compute_int	deps/jemalloc/configure	/^ac_fn_c_compute_int ()$/;"	f
ac_fn_c_try_compile	deps/jemalloc/configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_c_try_cpp	deps/jemalloc/configure	/^ac_fn_c_try_cpp ()$/;"	f
ac_fn_c_try_link	deps/jemalloc/configure	/^ac_fn_c_try_link ()$/;"	f
ac_fn_c_try_run	deps/jemalloc/configure	/^ac_fn_c_try_run ()$/;"	f
ac_fn_cxx_try_compile	deps/jemalloc/configure	/^ac_fn_cxx_try_compile ()$/;"	f
accept	src/connection.h	/^    int (*accept)(struct connection *conn, ConnectionCallbackFunc accept_handler);$/;"	m	struct:ConnectionType
acceptCommonHandler	src/networking.c	/^static void acceptCommonHandler(connection *conn, int flags, char *ip) {$/;"	f	file:
acceptTLSHandler	src/networking.c	/^void acceptTLSHandler(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
acceptTcpHandler	src/networking.c	/^void acceptTcpHandler(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
acceptTcpHandlers	src/controller.c	/^void acceptTcpHandlers(aeEventLoop *el, int fd, void *privdata, int mask){$/;"	f
acceptUnixHandler	src/networking.c	/^void acceptUnixHandler(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
accept_test_clients	tests/test_helper.tcl	/^proc accept_test_clients {fd addr port} {$/;"	p
access_entry	utils/lru/lfu-simulation.c	/^void access_entry(struct entry *e) {$/;"	f
accum_atomic_zu	deps/jemalloc/src/ctl.c	/^accum_atomic_zu(atomic_zu_t *dst, atomic_zu_t *src) {$/;"	f	file:
accumbytes	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	uint64_t	accumbytes;$/;"	m	struct:prof_accum_s
accumbytes	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	uint64_t	accumbytes;$/;"	m	struct:prof_cnt_s
accumobjs	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	uint64_t	accumobjs;$/;"	m	struct:prof_cnt_s
aclCommand	src/acl.c	/^void aclCommand(client *c) {$/;"	f
acl_filename	src/server.h	/^    char *acl_filename;           \/* ACL Users file. NULL if not configured. *\/$/;"	m	struct:redisServer
acl_pubsub_default	src/server.h	/^    int acl_pubsub_default;      \/* Default ACL pub\/sub channels flag *\/$/;"	m	struct:redisServer
acl_pubsub_default_enum	src/config.c	/^configEnum acl_pubsub_default_enum[] = {$/;"	v
acllog_max_len	src/server.h	/^    unsigned long acllog_max_len; \/* Maximum length of the ACL LOG list. *\/$/;"	m	struct:redisServer
acquire_gil	tests/modules/blockedclient.c	/^int acquire_gil(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
act_ping_time	src/sentinel.c	/^    mstime_t act_ping_time;   \/* Time at which the last pending ping (no pong$/;"	m	struct:instanceLink	file:
active	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	size_t active;$/;"	m	struct:ctl_stats_s
active	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	bool			active;$/;"	m	struct:prof_tdata_s
active	src/module.c	/^    int active;$/;"	m	struct:RedisModuleKeyspaceSubscriber	file:
active	src/scripting.c	/^    int active; \/* Are we debugging EVAL right now? *\/$/;"	m	struct:ldbState	file:
activeDefragAlloc	src/defrag.c	/^void *activeDefragAlloc(void *ptr) {$/;"	f
activeDefragAlloc	src/defrag.c	/^void* activeDefragAlloc(void *ptr) {$/;"	f
activeDefragCycle	src/defrag.c	/^void activeDefragCycle(void) {$/;"	f
activeDefragList	src/defrag.c	/^long activeDefragList(list *l, int val_type) {$/;"	f
activeDefragQuickListNode	src/defrag.c	/^long activeDefragQuickListNode(quicklist *ql, quicklistNode **node_ref) {$/;"	f
activeDefragQuickListNodes	src/defrag.c	/^long activeDefragQuickListNodes(quicklist *ql) {$/;"	f
activeDefragSds	src/defrag.c	/^sds activeDefragSds(sds sdsptr) {$/;"	f
activeDefragSdsDict	src/defrag.c	/^long activeDefragSdsDict(dict* d, int val_type) {$/;"	f
activeDefragSdsListAndDict	src/defrag.c	/^long activeDefragSdsListAndDict(list *l, dict *d, int dict_val_type) {$/;"	f
activeDefragStringOb	src/defrag.c	/^robj *activeDefragStringOb(robj *ob, long *defragged) {$/;"	f
activeDefragStringOb	src/defrag.c	/^robj *activeDefragStringOb(robj* ob, long *defragged) {$/;"	f
activeDefragZsetEntry	src/defrag.c	/^long activeDefragZsetEntry(zset *zs, dictEntry *de) {$/;"	f
activeExpireCycle	src/expire.c	/^void activeExpireCycle(int type) {$/;"	f
activeExpireCycleTryExpire	src/expire.c	/^int activeExpireCycleTryExpire(redisDb *db, dictEntry *de, long long now) {$/;"	f
active_defrag_cycle_max	src/server.h	/^    int active_defrag_cycle_max;       \/* maximal effort for defrag in CPU percentage *\/$/;"	m	struct:redisServer
active_defrag_cycle_min	src/server.h	/^    int active_defrag_cycle_min;       \/* minimal effort for defrag in CPU percentage *\/$/;"	m	struct:redisServer
active_defrag_enabled	src/server.h	/^    int active_defrag_enabled;$/;"	m	struct:redisServer
active_defrag_ignore_bytes	src/server.h	/^    size_t active_defrag_ignore_bytes; \/* minimum amount of fragmentation waste to start active defrag *\/$/;"	m	struct:redisServer
active_defrag_max_scan_fields	src/server.h	/^    unsigned long active_defrag_max_scan_fields; \/* maximum number of fields of set\/hash\/zset\/list to process from within the main dict scan *\/$/;"	m	struct:redisServer
active_defrag_running	src/server.h	/^    int active_defrag_running;  \/* Active defragmentation running (holds current scan aggressiveness) *\/$/;"	m	struct:redisServer
active_defrag_threshold_lower	src/server.h	/^    int active_defrag_threshold_lower; \/* minimum percentage of fragmentation to start active defrag *\/$/;"	m	struct:redisServer
active_defrag_threshold_upper	src/server.h	/^    int active_defrag_threshold_upper; \/* maximum percentage of fragmentation at which we use maximum effort *\/$/;"	m	struct:redisServer
active_expire_effort	src/server.h	/^    int active_expire_effort;       \/* From 1 (default) to 10, active effort. *\/$/;"	m	struct:redisServer
active_expire_enabled	src/server.h	/^    int active_expire_enabled;      \/* Can be disabled for testing purposes. *\/$/;"	m	struct:redisServer
activerehashing	src/server.h	/^    int activerehashing;        \/* Incremental rehash in serverCron() *\/$/;"	m	struct:redisServer
actvar	deps/lua/src/lparser.h	/^  unsigned short actvar[LUAI_MAXVARS];  \/* declared-variable stack *\/$/;"	m	struct:FuncState
addACLLogEntry	src/acl.c	/^void addACLLogEntry(client *c, int reason, int argpos, sds username) {$/;"	f
addClientToTimeoutTable	src/timeout.c	/^void addClientToTimeoutTable(client *c) {$/;"	f
addCluster	exp/1_build_redis_cluster.sh	/^addCluster() {$/;"	f
addClusterNode	src/redis-benchmark.c	/^static clusterNode **addClusterNode(clusterNode *node) {$/;"	f	file:
addCmdToCache	src/cluster.c	/^int addCmdToCache(int argc, robj** argv, int slot) {$/;"	f
addHG	exp/7_public_func.sh	/^addHG() {$/;"	f
addHG	exp/inithg.sh	/^addHG() {$/;"	f
addHashFieldToReply	src/t_hash.c	/^static void addHashFieldToReply(client *c, robj *o, sds field) {$/;"	f	file:
addHashIteratorCursorToReply	src/t_hash.c	/^static void addHashIteratorCursorToReply(client *c, hashTypeIterator *hi, int what) {$/;"	f	file:
addHg	exp/1_build_redis_cluster.sh	/^addHg() {$/;"	f
addListRangeReply	src/t_list.c	/^void addListRangeReply(client *c, robj *o, long start, long end, int reverse) {$/;"	f
addNodeReplyForClusterSlot	src/cluster.c	/^void addNodeReplyForClusterSlot(client *c, clusterNode *node, int start_slot, int end_slot) {$/;"	f
addRead	deps/hiredis/adapters/qt.h	/^        void addRead() {$/;"	f	class:RedisQtAdapter
addRead	deps/hiredis/async.h	/^        void (*addRead)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon87
addReply	src/networking.c	/^void addReply(client *c, robj *obj) {$/;"	f
addReplyAggregateLen	src/networking.c	/^void addReplyAggregateLen(client *c, long length, int prefix) {$/;"	f
addReplyArrayLen	src/networking.c	/^void addReplyArrayLen(client *c, long length) {$/;"	f
addReplyAttributeLen	src/networking.c	/^void addReplyAttributeLen(client *c, long length) {$/;"	f
addReplyBool	src/networking.c	/^void addReplyBool(client *c, int b) {$/;"	f
addReplyBulk	src/networking.c	/^void addReplyBulk(client *c, robj *obj) {$/;"	f
addReplyBulkCBuffer	src/networking.c	/^void addReplyBulkCBuffer(client *c, const void *p, size_t len) {$/;"	f
addReplyBulkCString	src/networking.c	/^void addReplyBulkCString(client *c, const char *s) {$/;"	f
addReplyBulkLen	src/networking.c	/^void addReplyBulkLen(client *c, robj *obj) {$/;"	f
addReplyBulkLongLong	src/networking.c	/^void addReplyBulkLongLong(client *c, long long ll) {$/;"	f
addReplyBulkSds	src/networking.c	/^void addReplyBulkSds(client *c, sds s)  {$/;"	f
addReplyCommand	src/server.c	/^void addReplyCommand(client *c, struct redisCommand *cmd) {$/;"	f
addReplyCommandCategories	src/acl.c	/^void addReplyCommandCategories(client *c, struct redisCommand *cmd) {$/;"	f
addReplyCommandFlag	src/server.c	/^int addReplyCommandFlag(client *c, struct redisCommand *cmd, int f, char *reply) {$/;"	f
addReplyDeferredLen	src/networking.c	/^void *addReplyDeferredLen(client *c) {$/;"	f
addReplyDictOfRedisInstances	src/sentinel.c	/^void addReplyDictOfRedisInstances(client *c, dict *instances) {$/;"	f
addReplyDouble	src/networking.c	/^void addReplyDouble(client *c, double d) {$/;"	f
addReplyDoubleDistance	src/geo.c	/^void addReplyDoubleDistance(client *c, double d) {$/;"	f
addReplyError	src/networking.c	/^void addReplyError(client *c, const char *err) {$/;"	f
addReplyErrorFormat	src/networking.c	/^void addReplyErrorFormat(client *c, const char *fmt, ...) {$/;"	f
addReplyErrorLength	src/networking.c	/^void addReplyErrorLength(client *c, const char *s, size_t len) {$/;"	f
addReplyErrorObject	src/networking.c	/^void addReplyErrorObject(client *c, robj *err) {$/;"	f
addReplyErrorSds	src/networking.c	/^void addReplyErrorSds(client *c, sds err) {$/;"	f
addReplyGopherItem	src/gopher.c	/^void addReplyGopherItem(client *c, const char *type, const char *descr,$/;"	f
addReplyHelp	src/networking.c	/^void addReplyHelp(client *c, const char **help) {$/;"	f
addReplyHumanLongDouble	src/networking.c	/^void addReplyHumanLongDouble(client *c, long double d) {$/;"	f
addReplyLoadedModules	src/module.c	/^void addReplyLoadedModules(client *c) {$/;"	f
addReplyLongLong	src/networking.c	/^void addReplyLongLong(client *c, long long ll) {$/;"	f
addReplyLongLongWithPrefix	src/networking.c	/^void addReplyLongLongWithPrefix(client *c, long long ll, char prefix) {$/;"	f
addReplyMapLen	src/networking.c	/^void addReplyMapLen(client *c, long length) {$/;"	f
addReplyNull	src/networking.c	/^void addReplyNull(client *c) {$/;"	f
addReplyNullArray	src/networking.c	/^void addReplyNullArray(client *c) {$/;"	f
addReplyProto	src/networking.c	/^void addReplyProto(client *c, const char *s, size_t len) {$/;"	f
addReplyPubsubMessage	src/pubsub.c	/^void addReplyPubsubMessage(client *c, robj *channel, robj *msg) {$/;"	f
addReplyPubsubPatMessage	src/pubsub.c	/^void addReplyPubsubPatMessage(client *c, robj *pat, robj *channel, robj *msg) {$/;"	f
addReplyPubsubPatSubscribed	src/pubsub.c	/^void addReplyPubsubPatSubscribed(client *c, robj *pattern) {$/;"	f
addReplyPubsubPatUnsubscribed	src/pubsub.c	/^void addReplyPubsubPatUnsubscribed(client *c, robj *pattern) {$/;"	f
addReplyPubsubSubscribed	src/pubsub.c	/^void addReplyPubsubSubscribed(client *c, robj *channel) {$/;"	f
addReplyPubsubUnsubscribed	src/pubsub.c	/^void addReplyPubsubUnsubscribed(client *c, robj *channel) {$/;"	f
addReplyPushLen	src/networking.c	/^void addReplyPushLen(client *c, long length) {$/;"	f
addReplyReplicationBacklog	src/replication.c	/^long long addReplyReplicationBacklog(client *c, long long offset) {$/;"	f
addReplySds	src/networking.c	/^void addReplySds(client *c, sds s) {$/;"	f
addReplySentinelRedisInstance	src/sentinel.c	/^void addReplySentinelRedisInstance(client *c, sentinelRedisInstance *ri) {$/;"	f
addReplySetLen	src/networking.c	/^void addReplySetLen(client *c, long length) {$/;"	f
addReplyStatus	src/networking.c	/^void addReplyStatus(client *c, const char *status) {$/;"	f
addReplyStatusFormat	src/networking.c	/^void addReplyStatusFormat(client *c, const char *fmt, ...) {$/;"	f
addReplyStatusLength	src/networking.c	/^void addReplyStatusLength(client *c, const char *s, size_t len) {$/;"	f
addReplyStreamID	src/t_stream.c	/^void addReplyStreamID(client *c, streamID *id) {$/;"	f
addReplySubcommandSyntaxError	src/networking.c	/^void addReplySubcommandSyntaxError(client *c) {$/;"	f
addReplyVerbatim	src/networking.c	/^void addReplyVerbatim(client *c, const char *s, size_t len, const char *ext) {$/;"	f
addWrite	deps/hiredis/adapters/qt.h	/^        void addWrite() {$/;"	f	class:RedisQtAdapter
addWrite	deps/hiredis/async.h	/^        void (*addWrite)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon87
add_event	deps/lua/doc/manual.html	/^     function add_event (op1, op2)$/;"	f
add_s	deps/lua/src/lstrlib.c	/^static void add_s (MatchState *ms, luaL_Buffer *b, const char *s,$/;"	f	file:
add_value	deps/lua/src/lstrlib.c	/^static void add_value (MatchState *ms, luaL_Buffer *b, const char *s,$/;"	f	file:
addfield	deps/lua/src/ltablib.c	/^static void addfield (lua_State *L, luaL_Buffer *b, int i) {$/;"	f	file:
addinfo	deps/lua/src/ldebug.c	/^static void addinfo (lua_State *L, const char *msg) {$/;"	f	file:
addintlen	deps/lua/src/lstrlib.c	/^static void addintlen (char *form) {$/;"	f	file:
addk	deps/lua/src/lcode.c	/^static int addk (FuncState *fs, TValue *k, TValue *v) {$/;"	f	file:
addquoted	deps/lua/src/lstrlib.c	/^static void addquoted (lua_State *L, luaL_Buffer *b, int arg) {$/;"	f	file:
addr	src/redismodule.h	/^    char addr[46];          \/* IPv4 or IPv6 address. *\/$/;"	m	struct:RedisModuleClientInfo
addr	src/sentinel.c	/^    sentinelAddr *addr; \/* Master host. *\/$/;"	m	struct:sentinelRedisInstance	file:
address	deps/jemalloc/src/zone.c	/^	vm_address_t address;$/;"	m	struct:__anon127	file:
addrlen	deps/hiredis/async.h	/^    size_t addrlen;$/;"	m	struct:redisAsyncContext
addrlen	deps/hiredis/hiredis.h	/^    size_t addrlen;$/;"	m	struct:redisContext
adjustOpenFilesLimit	src/server.c	/^void adjustOpenFilesLimit(void) {$/;"	f
adjust_assign	deps/lua/src/lparser.c	/^static void adjust_assign (LexState *ls, int nvars, int nexps, expdesc *e) {$/;"	f	file:
adjust_varargs	deps/lua/src/ldo.c	/^static StkId adjust_varargs (lua_State *L, Proto *p, int actual) {$/;"	f	file:
adjustlocalvars	deps/lua/src/lparser.c	/^static void adjustlocalvars (LexState *ls, int nvars) {$/;"	f	file:
adjustresults	deps/lua/src/lapi.c	768;"	d	file:
adjuststack	deps/lua/src/lauxlib.c	/^static void adjuststack (luaL_Buffer *B) {$/;"	f	file:
advanceMove	exp/exp4.sh	/^advanceMove() {$/;"	f
aeApiAddEvent	src/ae_epoll.c	/^static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	file:
aeApiAddEvent	src/ae_evport.c	/^static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	file:
aeApiAddEvent	src/ae_kqueue.c	/^static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	file:
aeApiAddEvent	src/ae_select.c	/^static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	file:
aeApiAssociate	src/ae_evport.c	/^static int aeApiAssociate(const char *where, int portfd, int fd, int mask) {$/;"	f	file:
aeApiCreate	src/ae_epoll.c	/^static int aeApiCreate(aeEventLoop *eventLoop) {$/;"	f	file:
aeApiCreate	src/ae_evport.c	/^static int aeApiCreate(aeEventLoop *eventLoop) {$/;"	f	file:
aeApiCreate	src/ae_kqueue.c	/^static int aeApiCreate(aeEventLoop *eventLoop) {$/;"	f	file:
aeApiCreate	src/ae_select.c	/^static int aeApiCreate(aeEventLoop *eventLoop) {$/;"	f	file:
aeApiDelEvent	src/ae_epoll.c	/^static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int delmask) {$/;"	f	file:
aeApiDelEvent	src/ae_evport.c	/^static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	file:
aeApiDelEvent	src/ae_kqueue.c	/^static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	file:
aeApiDelEvent	src/ae_select.c	/^static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	file:
aeApiFree	src/ae_epoll.c	/^static void aeApiFree(aeEventLoop *eventLoop) {$/;"	f	file:
aeApiFree	src/ae_evport.c	/^static void aeApiFree(aeEventLoop *eventLoop) {$/;"	f	file:
aeApiFree	src/ae_kqueue.c	/^static void aeApiFree(aeEventLoop *eventLoop) {$/;"	f	file:
aeApiFree	src/ae_select.c	/^static void aeApiFree(aeEventLoop *eventLoop) {$/;"	f	file:
aeApiLookupPending	src/ae_evport.c	/^static int aeApiLookupPending(aeApiState *state, int fd) {$/;"	f	file:
aeApiName	src/ae_epoll.c	/^static char *aeApiName(void) {$/;"	f	file:
aeApiName	src/ae_evport.c	/^static char *aeApiName(void) {$/;"	f	file:
aeApiName	src/ae_kqueue.c	/^static char *aeApiName(void) {$/;"	f	file:
aeApiName	src/ae_select.c	/^static char *aeApiName(void) {$/;"	f	file:
aeApiPoll	src/ae_epoll.c	/^static int aeApiPoll(aeEventLoop *eventLoop, struct timeval *tvp) {$/;"	f	file:
aeApiPoll	src/ae_evport.c	/^static int aeApiPoll(aeEventLoop *eventLoop, struct timeval *tvp) {$/;"	f	file:
aeApiPoll	src/ae_kqueue.c	/^static int aeApiPoll(aeEventLoop *eventLoop, struct timeval *tvp) {$/;"	f	file:
aeApiPoll	src/ae_select.c	/^static int aeApiPoll(aeEventLoop *eventLoop, struct timeval *tvp) {$/;"	f	file:
aeApiResize	src/ae_epoll.c	/^static int aeApiResize(aeEventLoop *eventLoop, int setsize) {$/;"	f	file:
aeApiResize	src/ae_evport.c	/^static int aeApiResize(aeEventLoop *eventLoop, int setsize) {$/;"	f	file:
aeApiResize	src/ae_kqueue.c	/^static int aeApiResize(aeEventLoop *eventLoop, int setsize) {$/;"	f	file:
aeApiResize	src/ae_select.c	/^static int aeApiResize(aeEventLoop *eventLoop, int setsize) {$/;"	f	file:
aeApiState	src/ae_epoll.c	/^typedef struct aeApiState {$/;"	s	file:
aeApiState	src/ae_epoll.c	/^} aeApiState;$/;"	t	typeref:struct:aeApiState	file:
aeApiState	src/ae_evport.c	/^typedef struct aeApiState {$/;"	s	file:
aeApiState	src/ae_evport.c	/^} aeApiState;$/;"	t	typeref:struct:aeApiState	file:
aeApiState	src/ae_kqueue.c	/^typedef struct aeApiState {$/;"	s	file:
aeApiState	src/ae_kqueue.c	/^} aeApiState;$/;"	t	typeref:struct:aeApiState	file:
aeApiState	src/ae_select.c	/^typedef struct aeApiState {$/;"	s	file:
aeApiState	src/ae_select.c	/^} aeApiState;$/;"	t	typeref:struct:aeApiState	file:
aeBeforeSleepProc	src/ae.h	/^typedef void aeBeforeSleepProc(struct aeEventLoop *eventLoop);$/;"	t
aeCreateEventLoop	src/ae.c	/^aeEventLoop *aeCreateEventLoop(int setsize) {$/;"	f
aeCreateFileEvent	src/ae.c	/^int aeCreateFileEvent(aeEventLoop *eventLoop, int fd, int mask,$/;"	f
aeCreateTimeEvent	src/ae.c	/^long long aeCreateTimeEvent(aeEventLoop *eventLoop, long long milliseconds,$/;"	f
aeDeleteEventLoop	src/ae.c	/^void aeDeleteEventLoop(aeEventLoop *eventLoop) {$/;"	f
aeDeleteFileEvent	src/ae.c	/^void aeDeleteFileEvent(aeEventLoop *eventLoop, int fd, int mask)$/;"	f
aeDeleteTimeEvent	src/ae.c	/^int aeDeleteTimeEvent(aeEventLoop *eventLoop, long long id)$/;"	f
aeEventFinalizerProc	src/ae.h	/^typedef void aeEventFinalizerProc(struct aeEventLoop *eventLoop, void *clientData);$/;"	t
aeEventLoop	src/ae.h	/^typedef struct aeEventLoop {$/;"	s
aeEventLoop	src/ae.h	/^} aeEventLoop;$/;"	t	typeref:struct:aeEventLoop
aeFileEvent	src/ae.h	/^typedef struct aeFileEvent {$/;"	s
aeFileEvent	src/ae.h	/^} aeFileEvent;$/;"	t	typeref:struct:aeFileEvent
aeFileProc	src/ae.h	/^typedef void aeFileProc(struct aeEventLoop *eventLoop, int fd, void *clientData, int mask);$/;"	t
aeFiredEvent	src/ae.h	/^typedef struct aeFiredEvent {$/;"	s
aeFiredEvent	src/ae.h	/^} aeFiredEvent;$/;"	t	typeref:struct:aeFiredEvent
aeGetApiName	src/ae.c	/^char *aeGetApiName(void) {$/;"	f
aeGetFileEvents	src/ae.c	/^int aeGetFileEvents(aeEventLoop *eventLoop, int fd) {$/;"	f
aeGetSetSize	src/ae.c	/^int aeGetSetSize(aeEventLoop *eventLoop) {$/;"	f
aeMain	src/ae.c	/^void aeMain(aeEventLoop *eventLoop) {$/;"	f
aeProcessEvents	src/ae.c	/^int aeProcessEvents(aeEventLoop *eventLoop, int flags)$/;"	f
aeResizeSetSize	src/ae.c	/^int aeResizeSetSize(aeEventLoop *eventLoop, int setsize) {$/;"	f
aeSetAfterSleepProc	src/ae.c	/^void aeSetAfterSleepProc(aeEventLoop *eventLoop, aeBeforeSleepProc *aftersleep) {$/;"	f
aeSetBeforeSleepProc	src/ae.c	/^void aeSetBeforeSleepProc(aeEventLoop *eventLoop, aeBeforeSleepProc *beforesleep) {$/;"	f
aeSetDontWait	src/ae.c	/^void aeSetDontWait(aeEventLoop *eventLoop, int noWait) {$/;"	f
aeStop	src/ae.c	/^void aeStop(aeEventLoop *eventLoop) {$/;"	f
aeTimeEvent	src/ae.h	/^typedef struct aeTimeEvent {$/;"	s
aeTimeEvent	src/ae.h	/^} aeTimeEvent;$/;"	t	typeref:struct:aeTimeEvent
aeTimeProc	src/ae.h	/^typedef int aeTimeProc(struct aeEventLoop *eventLoop, long long id, void *clientData);$/;"	t
aeTimer	src/module.c	/^long long aeTimer = -1; \/* Main event loop (ae.c) timer identifier. *\/$/;"	v
aeWait	src/ae.c	/^int aeWait(int fd, int mask, long long milliseconds) {$/;"	f
ae_handler	src/connection.h	/^    void (*ae_handler)(struct aeEventLoop *el, int fd, void *clientData, int mask);$/;"	m	struct:ConnectionType
after	exp/slot_log_dealer.py	/^    after = [_.split("_") for _ in after]$/;"	v
after	exp/slot_log_dealer.py	/^    after = after.strip().split()[1].split(",")[:-1]$/;"	v
after	exp/slot_log_dealer.py	/^    after = f_list[i+1]$/;"	v
afterErrorReply	src/networking.c	/^void afterErrorReply(client *c, const char *s, size_t len) {$/;"	f
afterPropagateExec	src/multi.c	/^void afterPropagateExec() {$/;"	f
afterSleep	src/server.c	/^void afterSleep(struct aeEventLoop *eventLoop) {$/;"	f
after_str	tests/modules/testrdb.c	/^RedisModuleString *after_str = NULL;$/;"	v
aftersleep	src/ae.h	/^    aeBeforeSleepProc *aftersleep;$/;"	m	struct:aeEventLoop
aim_slot	src/redis-cli.c	/^    int aim_slot;$/;"	m	struct:clusterManagerCommand	file:
alias	src/config.c	/^    const char *alias; \/* An alias that can also be used for this config *\/$/;"	m	struct:standardConfig	file:
align	deps/lua/src/lua_struct.c	/^  int align;$/;"	m	struct:Header	file:
alignment	deps/jemalloc/src/jemalloc.c	/^	size_t alignment;$/;"	m	struct:dynamic_opts_s	file:
allPersistenceDisabled	src/server.c	/^int allPersistenceDisabled(void) {$/;"	f
all_time_high	src/latency.h	/^    uint32_t all_time_high; \/* Absolute max observed since latest reset. *\/$/;"	m	struct:latencyStats
all_unusuals	deps/jemalloc/scripts/gen_travis.py	/^all_unusuals = ($/;"	v
all_values_iter_next	deps/hdr_histogram/hdr_histogram.c	/^static bool all_values_iter_next(struct hdr_iter* iter)$/;"	f	file:
alloc	deps/hiredis/sds.h	/^    uint16_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:hisdshdr16
alloc	deps/hiredis/sds.h	/^    uint32_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:hisdshdr32
alloc	deps/hiredis/sds.h	/^    uint64_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:hisdshdr64
alloc	deps/hiredis/sds.h	/^    uint8_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:hisdshdr8
alloc	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^	extent_alloc_t		*alloc;$/;"	m	struct:extent_hooks_s
alloc	src/redis-cli.c	/^    clusterManagerNode **alloc; \/* Pointer to the allocated memory *\/$/;"	m	struct:clusterManagerNodeArray	file:
alloc	src/sds.h	/^    uint16_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr16
alloc	src/sds.h	/^    uint32_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr32
alloc	src/sds.h	/^    uint64_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr64
alloc	src/sds.h	/^    uint8_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr8
alloc_ctx_s	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^struct alloc_ctx_s {$/;"	s
alloc_ctx_t	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^typedef struct alloc_ctx_s alloc_ctx_t;$/;"	t	typeref:struct:alloc_ctx_s
alloc_from_permuted_backtrace	deps/jemalloc/test/unit/prof_accum.c	/^alloc_from_permuted_backtrace(unsigned thd_ind, unsigned iteration) {$/;"	f	file:
alloca	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	171;"	d
allocated	deps/jemalloc/include/jemalloc/internal/base_structs.h	/^	size_t		allocated;$/;"	m	struct:base_s
allocated	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	size_t allocated;$/;"	m	struct:ctl_stats_s
allocated_large	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	atomic_zu_t		allocated_large; \/* Derived. *\/$/;"	m	struct:arena_stats_s
allocated_small	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	size_t allocated_small;$/;"	m	struct:ctl_arena_stats_s
allocator_active	src/server.h	/^    size_t allocator_active;$/;"	m	struct:malloc_stats
allocator_allocated	src/server.h	/^    size_t allocator_allocated;$/;"	m	struct:malloc_stats
allocator_frag	src/server.h	/^    float allocator_frag;$/;"	m	struct:redisMemOverhead
allocator_frag_bytes	src/server.h	/^    ssize_t allocator_frag_bytes;$/;"	m	struct:redisMemOverhead
allocator_resident	src/server.h	/^    size_t allocator_resident;$/;"	m	struct:malloc_stats
allocator_rss	src/server.h	/^    float allocator_rss;$/;"	m	struct:redisMemOverhead
allocator_rss_bytes	src/server.h	/^    ssize_t allocator_rss_bytes;$/;"	m	struct:redisMemOverhead
allowed_commands	src/server.h	/^    uint64_t allowed_commands[USER_COMMAND_BITS_COUNT\/64];$/;"	m	struct:__anon18
allowed_subcommands	src/server.h	/^    sds **allowed_subcommands;$/;"	m	struct:__anon18
allowhook	deps/lua/src/lstate.h	/^  lu_byte allowhook;$/;"	m	struct:lua_State
already_expired	src/redis-check-rdb.c	/^    unsigned long already_expired;  \/* Number of keys already expired. *\/$/;"	m	struct:__anon61	file:
alsoPropagate	src/server.c	/^void alsoPropagate(struct redisCommand *cmd, int dbid, robj **argv, int argc,$/;"	f
also_propagate	src/server.h	/^    redisOpArray also_propagate;    \/* Additional command to propagate. *\/$/;"	m	struct:redisServer
always_show_logo	src/server.h	/^    int always_show_logo;       \/* Show logo even for non-stdout logging. *\/$/;"	m	struct:redisServer
amqueue	src/module.c	/^    struct AutoMemEntry *amqueue;   \/* Auto memory queue of objects to free. *\/$/;"	m	struct:RedisModuleCtx	typeref:struct:RedisModuleCtx::AutoMemEntry	file:
amqueue_len	src/module.c	/^    int amqueue_len;                \/* Number of slots in amqueue. *\/$/;"	m	struct:RedisModuleCtx	file:
amqueue_used	src/module.c	/^    int amqueue_used;               \/* Number of used slots in amqueue. *\/$/;"	m	struct:RedisModuleCtx	file:
analyzeLatencyForEvent	src/latency.c	/^void analyzeLatencyForEvent(char *event, struct latencyStats *ls) {$/;"	f
anchor_token	deps/lua/src/lparser.c	/^static void anchor_token (LexState *ls) {$/;"	f	file:
anetBlock	src/anet.c	/^int anetBlock(char *err, int fd) {$/;"	f
anetCloexec	src/anet.c	/^int anetCloexec(int fd) {$/;"	f
anetCreateSocket	src/anet.c	/^static int anetCreateSocket(char *err, int domain) {$/;"	f	file:
anetDisableTcpNoDelay	src/anet.c	/^int anetDisableTcpNoDelay(char *err, int fd)$/;"	f
anetEnableTcpNoDelay	src/anet.c	/^int anetEnableTcpNoDelay(char *err, int fd)$/;"	f
anetFdToString	src/anet.c	/^int anetFdToString(int fd, char *ip, size_t ip_len, int *port, int fd_to_str_type) {$/;"	f
anetFormatAddr	src/anet.c	/^int anetFormatAddr(char *buf, size_t buf_len, char *ip, int port) {$/;"	f
anetFormatFdAddr	src/anet.c	/^int anetFormatFdAddr(int fd, char *buf, size_t buf_len, int fd_to_str_type) {$/;"	f
anetGenericAccept	src/anet.c	/^static int anetGenericAccept(char *err, int s, struct sockaddr *sa, socklen_t *len) {$/;"	f	file:
anetKeepAlive	src/anet.c	/^int anetKeepAlive(char *err, int fd, int interval)$/;"	f
anetListen	src/anet.c	/^static int anetListen(char *err, int s, struct sockaddr *sa, socklen_t len, int backlog) {$/;"	f	file:
anetNonBlock	src/anet.c	/^int anetNonBlock(char *err, int fd) {$/;"	f
anetRead	src/anet.c	/^int anetRead(int fd, char *buf, int count)$/;"	f
anetRecvTimeout	src/anet.c	/^int anetRecvTimeout(char *err, int fd, long long ms) {$/;"	f
anetResolve	src/anet.c	/^int anetResolve(char *err, char *host, char *ipbuf, size_t ipbuf_len,$/;"	f
anetSendTimeout	src/anet.c	/^int anetSendTimeout(char *err, int fd, long long ms) {$/;"	f
anetSetBlock	src/anet.c	/^int anetSetBlock(char *err, int fd, int non_block) {$/;"	f
anetSetError	src/anet.c	/^static void anetSetError(char *err, const char *fmt, ...)$/;"	f	file:
anetSetReuseAddr	src/anet.c	/^static int anetSetReuseAddr(char *err, int fd) {$/;"	f	file:
anetSetTcpNoDelay	src/anet.c	/^static int anetSetTcpNoDelay(char *err, int fd, int val)$/;"	f	file:
anetTcp6Server	src/anet.c	/^int anetTcp6Server(char *err, int port, char *bindaddr, int backlog)$/;"	f
anetTcpAccept	src/anet.c	/^int anetTcpAccept(char *err, int s, char *ip, size_t ip_len, int *port) {$/;"	f
anetTcpGenericConnect	src/anet.c	/^static int anetTcpGenericConnect(char *err, const char *addr, int port,$/;"	f	file:
anetTcpNonBlockBestEffortBindConnect	src/anet.c	/^int anetTcpNonBlockBestEffortBindConnect(char *err, const char *addr, int port,$/;"	f
anetTcpNonBlockConnect	src/anet.c	/^int anetTcpNonBlockConnect(char *err, const char *addr, int port)$/;"	f
anetTcpServer	src/anet.c	/^int anetTcpServer(char *err, int port, char *bindaddr, int backlog)$/;"	f
anetUnixAccept	src/anet.c	/^int anetUnixAccept(char *err, int s) {$/;"	f
anetUnixGenericConnect	src/anet.c	/^int anetUnixGenericConnect(char *err, const char *path, int flags)$/;"	f
anetUnixServer	src/anet.c	/^int anetUnixServer(char *err, char *path, mode_t perm, int backlog)$/;"	f
anetV6Only	src/anet.c	/^static int anetV6Only(char *err, int s) {$/;"	f	file:
anetWrite	src/anet.c	/^int anetWrite(int fd, char *buf, int count)$/;"	f
announceSentinelAddr	src/sentinel.c	/^const char *announceSentinelAddr(const sentinelAddr *a) {$/;"	f
announceSentinelAddrAndPort	src/sentinel.c	/^sds announceSentinelAddrAndPort(const sentinelAddr *a) {$/;"	f
announce_hostnames	src/sentinel.c	/^    int announce_hostnames;      \/* Announce hostnames instead of IPs when we have them. *\/$/;"	m	struct:sentinelState	file:
announce_ip	src/sentinel.c	/^    char *announce_ip;  \/* IP addr that is gossiped to other sentinels if$/;"	m	struct:sentinelState	file:
announce_port	src/sentinel.c	/^    int announce_port;  \/* Port that is gossiped to other sentinels if$/;"	m	struct:sentinelState	file:
anyOtherSlaveWaitRdb	src/networking.c	/^int anyOtherSlaveWaitRdb(client *except_me) {$/;"	f
aofChildPipeReadable	src/aof.c	/^void aofChildPipeReadable(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
aofChildWriteDiffData	src/aof.c	/^void aofChildWriteDiffData(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
aofClosePipes	src/aof.c	/^void aofClosePipes(void) {$/;"	f
aofCreatePipes	src/aof.c	/^int aofCreatePipes(void) {$/;"	f
aofFsyncInProgress	src/aof.c	/^int aofFsyncInProgress(void) {$/;"	f
aofReadDiffFromParent	src/aof.c	/^ssize_t aofReadDiffFromParent(void) {$/;"	f
aofRemoveTempFile	src/aof.c	/^void aofRemoveTempFile(pid_t childpid) {$/;"	f
aofRewriteBufferAppend	src/aof.c	/^void aofRewriteBufferAppend(unsigned char *s, unsigned long len) {$/;"	f
aofRewriteBufferReset	src/aof.c	/^void aofRewriteBufferReset(void) {$/;"	f
aofRewriteBufferSize	src/aof.c	/^unsigned long aofRewriteBufferSize(void) {$/;"	f
aofRewriteBufferWrite	src/aof.c	/^ssize_t aofRewriteBufferWrite(int fd) {$/;"	f
aofUpdateCurrentSize	src/aof.c	/^void aofUpdateCurrentSize(void) {$/;"	f
aofWrite	src/aof.c	/^ssize_t aofWrite(int fd, const char *buf, size_t len) {$/;"	f
aof_background_fsync	src/aof.c	/^void aof_background_fsync(int fd) {$/;"	f
aof_bio_fsync_errno	src/server.h	/^    redisAtomic int aof_bio_fsync_errno;  \/* Errno of AOF fsync in bio job. *\/$/;"	m	struct:redisServer
aof_bio_fsync_status	src/server.h	/^    redisAtomic int aof_bio_fsync_status; \/* Status of AOF fsync in bio job. *\/$/;"	m	struct:redisServer
aof_buf	src/server.h	/^    sds aof_buf;      \/* AOF buffer, written before entering the event loop *\/$/;"	m	struct:redisServer
aof_buffer	src/server.h	/^    size_t aof_buffer;$/;"	m	struct:redisMemOverhead
aof_child_diff	src/server.h	/^    sds aof_child_diff;             \/* AOF diff accumulator child side. *\/$/;"	m	struct:redisServer
aof_current_size	src/server.h	/^    off_t aof_current_size;         \/* AOF current size. *\/$/;"	m	struct:redisServer
aof_delayed_fsync	src/server.h	/^    unsigned long aof_delayed_fsync;  \/* delayed AOF fsync() counter *\/$/;"	m	struct:redisServer
aof_enabled	src/server.h	/^    int aof_enabled;                \/* AOF configuration *\/$/;"	m	struct:redisServer
aof_fd	src/server.h	/^    int aof_fd;       \/* File descriptor of currently selected AOF file *\/$/;"	m	struct:redisServer
aof_filename	src/server.h	/^    char *aof_filename;             \/* Name of the AOF file *\/$/;"	m	struct:redisServer
aof_flush_postponed_start	src/server.h	/^    time_t aof_flush_postponed_start; \/* UNIX time of postponed AOF flush *\/$/;"	m	struct:redisServer
aof_flush_sleep	src/server.h	/^    int aof_flush_sleep;            \/* Micros to sleep before flush. (used by tests) *\/$/;"	m	struct:redisServer
aof_fsync	src/server.h	/^    int aof_fsync;                  \/* Kind of fsync() policy *\/$/;"	m	struct:redisServer
aof_fsync_enum	src/config.c	/^configEnum aof_fsync_enum[] = {$/;"	v
aof_fsync_offset	src/server.h	/^    off_t aof_fsync_offset;         \/* AOF offset which is already synced to disk. *\/$/;"	m	struct:redisServer
aof_last_fsync	src/server.h	/^    time_t aof_last_fsync;            \/* UNIX time of last fsync() *\/$/;"	m	struct:redisServer
aof_last_write_errno	src/server.h	/^    int aof_last_write_errno;       \/* Valid if aof write\/fsync status is ERR *\/$/;"	m	struct:redisServer
aof_last_write_status	src/server.h	/^    int aof_last_write_status;      \/* C_OK or C_ERR *\/$/;"	m	struct:redisServer
aof_lastbgrewrite_status	src/server.h	/^    int aof_lastbgrewrite_status;   \/* C_OK or C_ERR *\/$/;"	m	struct:redisServer
aof_load_truncated	src/server.h	/^    int aof_load_truncated;         \/* Don't stop on unexpected AOF EOF. *\/$/;"	m	struct:redisServer
aof_no_fsync_on_rewrite	src/server.h	/^    int aof_no_fsync_on_rewrite;    \/* Don't fsync if a rewrite is in prog. *\/$/;"	m	struct:redisServer
aof_pipe_read_ack_from_child	src/server.h	/^    int aof_pipe_read_ack_from_child;$/;"	m	struct:redisServer
aof_pipe_read_ack_from_parent	src/server.h	/^    int aof_pipe_read_ack_from_parent;$/;"	m	struct:redisServer
aof_pipe_read_data_from_parent	src/server.h	/^    int aof_pipe_read_data_from_parent;$/;"	m	struct:redisServer
aof_pipe_write_ack_to_child	src/server.h	/^    int aof_pipe_write_ack_to_child;$/;"	m	struct:redisServer
aof_pipe_write_ack_to_parent	src/server.h	/^    int aof_pipe_write_ack_to_parent;$/;"	m	struct:redisServer
aof_pipe_write_data_to_child	src/server.h	/^    int aof_pipe_write_data_to_child;$/;"	m	struct:redisServer
aof_rewrite	src/redismodule.h	/^    RedisModuleTypeRewriteFunc aof_rewrite;$/;"	m	struct:RedisModuleTypeMethods
aof_rewrite	src/server.h	/^    moduleTypeRewriteFunc aof_rewrite;$/;"	m	struct:RedisModuleType
aof_rewrite_base_size	src/server.h	/^    off_t aof_rewrite_base_size;    \/* AOF size on latest startup or rewrite. *\/$/;"	m	struct:redisServer
aof_rewrite_buf_blocks	src/server.h	/^    list *aof_rewrite_buf_blocks;   \/* Hold changes during an AOF rewrite. *\/$/;"	m	struct:redisServer
aof_rewrite_cpulist	src/server.h	/^    char *aof_rewrite_cpulist; \/* cpu affinity list of aof rewrite process. *\/$/;"	m	struct:redisServer
aof_rewrite_incremental_fsync	src/server.h	/^    int aof_rewrite_incremental_fsync;\/* fsync incrementally while aof rewriting? *\/$/;"	m	struct:redisServer
aof_rewrite_min_size	src/server.h	/^    off_t aof_rewrite_min_size;     \/* the AOF file is at least N bytes. *\/$/;"	m	struct:redisServer
aof_rewrite_perc	src/server.h	/^    int aof_rewrite_perc;           \/* Rewrite AOF if % growth is > M and... *\/$/;"	m	struct:redisServer
aof_rewrite_scheduled	src/server.h	/^    int aof_rewrite_scheduled;      \/* Rewrite once BGSAVE terminates. *\/$/;"	m	struct:redisServer
aof_rewrite_time_last	src/server.h	/^    time_t aof_rewrite_time_last;   \/* Time used by last AOF rewrite run. *\/$/;"	m	struct:redisServer
aof_rewrite_time_start	src/server.h	/^    time_t aof_rewrite_time_start;  \/* Current AOF rewrite start time. *\/$/;"	m	struct:redisServer
aof_selected_db	src/server.h	/^    int aof_selected_db; \/* Currently selected DB in AOF *\/$/;"	m	struct:redisServer
aof_state	src/server.h	/^    int aof_state;                  \/* AOF_(ON|OFF|WAIT_REWRITE) *\/$/;"	m	struct:redisServer
aof_stop_sending_diff	src/server.h	/^    int aof_stop_sending_diff;     \/* If true stop sending accumulated diffs$/;"	m	struct:redisServer
aof_use_rdb_preamble	src/server.h	/^    int aof_use_rdb_preamble;       \/* Use RDB preamble on AOF rewrites. *\/$/;"	m	struct:redisServer
aofrwblock	src/aof.c	/^typedef struct aofrwblock {$/;"	s	file:
aofrwblock	src/aof.c	/^} aofrwblock;$/;"	t	typeref:struct:aofrwblock	file:
api_check	deps/lua/src/llimits.h	58;"	d
api_check	deps/lua/src/llimits.h	64;"	d
api_checknelems	deps/lua/src/lapi.c	41;"	d	file:
api_checkvalidindex	deps/lua/src/lapi.c	43;"	d	file:
api_incr_top	deps/lua/src/lapi.c	45;"	d	file:
apidata	src/ae.h	/^    void *apidata; \/* This is used for polling API specific data *\/$/;"	m	struct:aeEventLoop
apiver	src/module.c	/^    int apiver;     \/* Module API version as requested during initialization.*\/$/;"	m	struct:RedisModule	file:
appendCommand	src/t_string.c	/^void appendCommand(client *c) {$/;"	f
appendServerSaveParams	src/config.c	/^void appendServerSaveParams(time_t seconds, int changes) {$/;"	f
append_to_aof	tests/integration/aof.tcl	/^proc append_to_aof {str} {$/;"	p
appendonly	src/redis-benchmark.c	/^    sds appendonly;$/;"	m	struct:redisConfig	file:
approx_trim	src/t_stream.c	/^    int approx_trim; \/* If 1 only delete whole radix tree nodes, so$/;"	m	struct:__anon11	file:
arch_bits	src/server.h	/^    int arch_bits;              \/* 32 or 64 depending on sizeof(long) *\/$/;"	m	struct:redisServer
areClientsPaused	src/networking.c	/^int areClientsPaused(void) {$/;"	f
area	src/geohash_helper.h	/^    GeoHashArea area;$/;"	m	struct:__anon59
arena	deps/jemalloc/include/jemalloc/internal/tcache_structs.h	/^	arena_t		*arena;$/;"	m	struct:tcache_s
arena_aalloc	deps/jemalloc/include/jemalloc/internal/arena_inlines_b.h	/^arena_aalloc(tsdn_t *tsdn, const void *ptr) {$/;"	f
arena_alloc_junk_small	deps/jemalloc/src/arena.c	/^arena_alloc_junk_small(void *ptr, const bin_info_t *bin_info, bool zero) {$/;"	f
arena_background_thread_inactivity_check	deps/jemalloc/include/jemalloc/internal/background_thread_inlines.h	/^arena_background_thread_inactivity_check(tsdn_t *tsdn, arena_t *arena,$/;"	f
arena_background_thread_info_get	deps/jemalloc/include/jemalloc/internal/background_thread_inlines.h	/^arena_background_thread_info_get(arena_t *arena) {$/;"	f
arena_basic_stats_merge	deps/jemalloc/src/arena.c	/^arena_basic_stats_merge(UNUSED tsdn_t *tsdn, arena_t *arena, unsigned *nthreads,$/;"	f
arena_bin_lower_slab	deps/jemalloc/src/arena.c	/^arena_bin_lower_slab(UNUSED tsdn_t *tsdn, arena_t *arena, extent_t *slab,$/;"	f	file:
arena_bin_malloc_hard	deps/jemalloc/src/arena.c	/^arena_bin_malloc_hard(tsdn_t *tsdn, arena_t *arena, bin_t *bin,$/;"	f	file:
arena_bin_nonfull_slab_get	deps/jemalloc/src/arena.c	/^arena_bin_nonfull_slab_get(tsdn_t *tsdn, arena_t *arena, bin_t *bin,$/;"	f	file:
arena_bin_slabs_full_insert	deps/jemalloc/src/arena.c	/^arena_bin_slabs_full_insert(arena_t *arena, bin_t *bin, extent_t *slab) {$/;"	f	file:
arena_bin_slabs_full_remove	deps/jemalloc/src/arena.c	/^arena_bin_slabs_full_remove(arena_t *arena, bin_t *bin, extent_t *slab) {$/;"	f	file:
arena_bin_slabs_nonfull_insert	deps/jemalloc/src/arena.c	/^arena_bin_slabs_nonfull_insert(bin_t *bin, extent_t *slab) {$/;"	f	file:
arena_bin_slabs_nonfull_remove	deps/jemalloc/src/arena.c	/^arena_bin_slabs_nonfull_remove(bin_t *bin, extent_t *slab) {$/;"	f	file:
arena_bin_slabs_nonfull_tryget	deps/jemalloc/src/arena.c	/^arena_bin_slabs_nonfull_tryget(bin_t *bin) {$/;"	f	file:
arena_bind	deps/jemalloc/src/jemalloc.c	/^arena_bind(tsd_t *tsd, unsigned ind, bool internal) {$/;"	f	file:
arena_binind_div_info	deps/jemalloc/src/arena.c	/^static div_info_t arena_binind_div_info[NBINS];$/;"	v	file:
arena_boot	deps/jemalloc/src/arena.c	/^arena_boot(void) {$/;"	f
arena_choose	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_b.h	/^arena_choose(tsd_t *tsd, arena_t *arena) {$/;"	f
arena_choose_hard	deps/jemalloc/src/jemalloc.c	/^arena_choose_hard(tsd_t *tsd, bool internal) {$/;"	f
arena_choose_impl	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_b.h	/^arena_choose_impl(tsd_t *tsd, arena_t *arena, bool internal) {$/;"	f
arena_cleanup	deps/jemalloc/src/jemalloc.c	/^arena_cleanup(tsd_t *tsd) {$/;"	f
arena_dalloc	deps/jemalloc/include/jemalloc/internal/arena_inlines_b.h	/^arena_dalloc(tsdn_t *tsdn, void *ptr, tcache_t *tcache,$/;"	f
arena_dalloc_bin	deps/jemalloc/src/arena.c	/^arena_dalloc_bin(tsdn_t *tsdn, arena_t *arena, extent_t *extent, void *ptr) {$/;"	f	file:
arena_dalloc_bin_junked_locked	deps/jemalloc/src/arena.c	/^arena_dalloc_bin_junked_locked(tsdn_t *tsdn, arena_t *arena, extent_t *extent,$/;"	f
arena_dalloc_bin_locked_impl	deps/jemalloc/src/arena.c	/^arena_dalloc_bin_locked_impl(tsdn_t *tsdn, arena_t *arena, extent_t *slab,$/;"	f	file:
arena_dalloc_bin_slab	deps/jemalloc/src/arena.c	/^arena_dalloc_bin_slab(tsdn_t *tsdn, arena_t *arena, extent_t *slab,$/;"	f	file:
arena_dalloc_junk_small	deps/jemalloc/src/arena.c	/^arena_dalloc_junk_small_t *JET_MUTABLE arena_dalloc_junk_small =$/;"	v
arena_dalloc_junk_small_impl	deps/jemalloc/src/arena.c	/^arena_dalloc_junk_small_impl(void *ptr, const bin_info_t *bin_info) {$/;"	f	file:
arena_dalloc_junk_small_intercept	deps/jemalloc/test/unit/junk.c	/^arena_dalloc_junk_small_intercept(void *ptr, const bin_info_t *bin_info) {$/;"	f	file:
arena_dalloc_junk_small_orig	deps/jemalloc/test/unit/junk.c	/^static arena_dalloc_junk_small_t *arena_dalloc_junk_small_orig;$/;"	v	file:
arena_dalloc_junk_small_t	deps/jemalloc/include/jemalloc/internal/arena_externs.h	/^typedef void (arena_dalloc_junk_small_t)(void *, const bin_info_t *);$/;"	t
arena_dalloc_no_tcache	deps/jemalloc/include/jemalloc/internal/arena_inlines_b.h	/^arena_dalloc_no_tcache(tsdn_t *tsdn, void *ptr) {$/;"	f
arena_dalloc_promoted	deps/jemalloc/src/arena.c	/^arena_dalloc_promoted(tsdn_t *tsdn, void *ptr, tcache_t *tcache,$/;"	f
arena_dalloc_small	deps/jemalloc/src/arena.c	/^arena_dalloc_small(tsdn_t *tsdn, void *ptr) {$/;"	f
arena_decay	deps/jemalloc/src/arena.c	/^arena_decay(tsdn_t *tsdn, arena_t *arena, bool is_background_thread, bool all) {$/;"	f
arena_decay_backlog_npages_limit	deps/jemalloc/src/arena.c	/^arena_decay_backlog_npages_limit(const arena_decay_t *decay) {$/;"	f	file:
arena_decay_backlog_update	deps/jemalloc/src/arena.c	/^arena_decay_backlog_update(arena_decay_t *decay, uint64_t nadvance_u64,$/;"	f	file:
arena_decay_backlog_update_last	deps/jemalloc/src/arena.c	/^arena_decay_backlog_update_last(arena_decay_t *decay, size_t current_npages) {$/;"	f	file:
arena_decay_deadline_init	deps/jemalloc/src/arena.c	/^arena_decay_deadline_init(arena_decay_t *decay) {$/;"	f	file:
arena_decay_deadline_reached	deps/jemalloc/src/arena.c	/^arena_decay_deadline_reached(const arena_decay_t *decay, const nstime_t *time) {$/;"	f	file:
arena_decay_dirty	deps/jemalloc/src/arena.c	/^arena_decay_dirty(tsdn_t *tsdn, arena_t *arena, bool is_background_thread,$/;"	f	file:
arena_decay_epoch_advance	deps/jemalloc/src/arena.c	/^arena_decay_epoch_advance(tsdn_t *tsdn, arena_t *arena, arena_decay_t *decay,$/;"	f	file:
arena_decay_epoch_advance_helper	deps/jemalloc/src/arena.c	/^arena_decay_epoch_advance_helper(arena_decay_t *decay, const nstime_t *time,$/;"	f	file:
arena_decay_impl	deps/jemalloc/src/arena.c	/^arena_decay_impl(tsdn_t *tsdn, arena_t *arena, arena_decay_t *decay,$/;"	f	file:
arena_decay_init	deps/jemalloc/src/arena.c	/^arena_decay_init(arena_decay_t *decay, ssize_t decay_ms,$/;"	f	file:
arena_decay_ms_get	deps/jemalloc/src/arena.c	/^arena_decay_ms_get(arena_decay_t *decay) {$/;"	f	file:
arena_decay_ms_read	deps/jemalloc/src/arena.c	/^arena_decay_ms_read(arena_decay_t *decay) {$/;"	f	file:
arena_decay_ms_set	deps/jemalloc/src/arena.c	/^arena_decay_ms_set(tsdn_t *tsdn, arena_t *arena, arena_decay_t *decay,$/;"	f	file:
arena_decay_ms_valid	deps/jemalloc/src/arena.c	/^arena_decay_ms_valid(ssize_t decay_ms) {$/;"	f	file:
arena_decay_ms_write	deps/jemalloc/src/arena.c	/^arena_decay_ms_write(arena_decay_t *decay, ssize_t decay_ms) {$/;"	f	file:
arena_decay_muzzy	deps/jemalloc/src/arena.c	/^arena_decay_muzzy(tsdn_t *tsdn, arena_t *arena, bool is_background_thread,$/;"	f	file:
arena_decay_reinit	deps/jemalloc/src/arena.c	/^arena_decay_reinit(arena_decay_t *decay, ssize_t decay_ms) {$/;"	f	file:
arena_decay_s	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^struct arena_decay_s {$/;"	s
arena_decay_stashed	deps/jemalloc/src/arena.c	/^arena_decay_stashed(tsdn_t *tsdn, arena_t *arena,$/;"	f	file:
arena_decay_t	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^typedef struct arena_decay_s arena_decay_t;$/;"	t	typeref:struct:arena_decay_s
arena_decay_tick	deps/jemalloc/include/jemalloc/internal/arena_inlines_b.h	/^arena_decay_tick(tsdn_t *tsdn, arena_t *arena) {$/;"	f
arena_decay_ticks	deps/jemalloc/include/jemalloc/internal/arena_inlines_b.h	/^arena_decay_ticks(tsdn_t *tsdn, arena_t *arena, unsigned nticks) {$/;"	f
arena_decay_to_limit	deps/jemalloc/src/arena.c	/^arena_decay_to_limit(tsdn_t *tsdn, arena_t *arena, arena_decay_t *decay,$/;"	f	file:
arena_decay_try_purge	deps/jemalloc/src/arena.c	/^arena_decay_try_purge(tsdn_t *tsdn, arena_t *arena, arena_decay_t *decay,$/;"	f	file:
arena_destroy	deps/jemalloc/src/arena.c	/^arena_destroy(tsd_t *tsd, arena_t *arena) {$/;"	f
arena_destroy_retained	deps/jemalloc/src/arena.c	/^arena_destroy_retained(tsdn_t *tsdn, arena_t *arena) {$/;"	f	file:
arena_dirty_decay_ms_default_get	deps/jemalloc/src/arena.c	/^arena_dirty_decay_ms_default_get(void) {$/;"	f
arena_dirty_decay_ms_default_set	deps/jemalloc/src/arena.c	/^arena_dirty_decay_ms_default_set(ssize_t decay_ms) {$/;"	f
arena_dirty_decay_ms_get	deps/jemalloc/src/arena.c	/^arena_dirty_decay_ms_get(arena_t *arena) {$/;"	f
arena_dirty_decay_ms_set	deps/jemalloc/src/arena.c	/^arena_dirty_decay_ms_set(tsdn_t *tsdn, arena_t *arena,$/;"	f
arena_dissociate_bin_slab	deps/jemalloc/src/arena.c	/^arena_dissociate_bin_slab(arena_t *arena, extent_t *slab, bin_t *bin) {$/;"	f	file:
arena_dss_prec_get	deps/jemalloc/src/arena.c	/^arena_dss_prec_get(arena_t *arena) {$/;"	f
arena_dss_prec_set	deps/jemalloc/src/arena.c	/^arena_dss_prec_set(arena_t *arena, dss_prec_t dss_prec) {$/;"	f
arena_extent_alloc_large	deps/jemalloc/src/arena.c	/^arena_extent_alloc_large(tsdn_t *tsdn, arena_t *arena, size_t usize,$/;"	f
arena_extent_dalloc_large_prep	deps/jemalloc/src/arena.c	/^arena_extent_dalloc_large_prep(tsdn_t *tsdn, arena_t *arena, extent_t *extent) {$/;"	f
arena_extent_ralloc_large_expand	deps/jemalloc/src/arena.c	/^arena_extent_ralloc_large_expand(tsdn_t *tsdn, arena_t *arena, extent_t *extent,$/;"	f
arena_extent_ralloc_large_shrink	deps/jemalloc/src/arena.c	/^arena_extent_ralloc_large_shrink(tsdn_t *tsdn, arena_t *arena, extent_t *extent,$/;"	f
arena_extent_sn_next	deps/jemalloc/src/arena.c	/^arena_extent_sn_next(arena_t *arena) {$/;"	f
arena_extents_dirty_dalloc	deps/jemalloc/src/arena.c	/^arena_extents_dirty_dalloc(tsdn_t *tsdn, arena_t *arena,$/;"	f
arena_get	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_a.h	/^arena_get(tsdn_t *tsdn, unsigned ind, bool init_if_missing) {$/;"	f
arena_i_decay	deps/jemalloc/src/ctl.c	/^arena_i_decay(tsdn_t *tsdn, unsigned arena_ind, bool all) {$/;"	f	file:
arena_i_decay_ctl	deps/jemalloc/src/ctl.c	/^arena_i_decay_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	file:
arena_i_decay_ms_ctl_impl	deps/jemalloc/src/ctl.c	/^arena_i_decay_ms_ctl_impl(tsd_t *tsd, const size_t *mib, size_t miblen,$/;"	f	file:
arena_i_destroy_ctl	deps/jemalloc/src/ctl.c	/^arena_i_destroy_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	file:
arena_i_dirty_decay_ms_ctl	deps/jemalloc/src/ctl.c	/^arena_i_dirty_decay_ms_ctl(tsd_t *tsd, const size_t *mib, size_t miblen,$/;"	f	file:
arena_i_dss_ctl	deps/jemalloc/src/ctl.c	/^arena_i_dss_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	file:
arena_i_extent_hooks_ctl	deps/jemalloc/src/ctl.c	/^arena_i_extent_hooks_ctl(tsd_t *tsd, const size_t *mib, size_t miblen,$/;"	f	file:
arena_i_index	deps/jemalloc/src/ctl.c	/^arena_i_index(tsdn_t *tsdn, const size_t *mib, size_t miblen, size_t i) {$/;"	f	file:
arena_i_initialized	deps/jemalloc/test/unit/arena_reset.c	/^arena_i_initialized(unsigned arena_ind, bool refresh) {$/;"	f	file:
arena_i_initialized_ctl	deps/jemalloc/src/ctl.c	/^arena_i_initialized_ctl(tsd_t *tsd, const size_t *mib, size_t miblen,$/;"	f	file:
arena_i_muzzy_decay_ms_ctl	deps/jemalloc/src/ctl.c	/^arena_i_muzzy_decay_ms_ctl(tsd_t *tsd, const size_t *mib, size_t miblen,$/;"	f	file:
arena_i_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t arena_i_node[] = {$/;"	v	file:
arena_i_purge_ctl	deps/jemalloc/src/ctl.c	/^arena_i_purge_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	file:
arena_i_reset_ctl	deps/jemalloc/src/ctl.c	/^arena_i_reset_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	file:
arena_i_reset_destroy_helper	deps/jemalloc/src/ctl.c	/^arena_i_reset_destroy_helper(tsd_t *tsd, const size_t *mib, size_t miblen,$/;"	f	file:
arena_i_retain_grow_limit_ctl	deps/jemalloc/src/ctl.c	/^arena_i_retain_grow_limit_ctl(tsd_t *tsd, const size_t *mib, size_t miblen,$/;"	f	file:
arena_ichoose	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_b.h	/^arena_ichoose(tsd_t *tsd, arena_t *arena) {$/;"	f
arena_ind	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	unsigned arena_ind;$/;"	m	struct:ctl_arena_s
arena_ind	deps/jemalloc/src/jemalloc.c	/^	unsigned arena_ind;$/;"	m	struct:dynamic_opts_s	file:
arena_ind	deps/jemalloc/test/integration/xallocx.c	/^arena_ind(void) {$/;"	f	file:
arena_ind	deps/jemalloc/test/unit/retained.c	/^static unsigned		arena_ind;$/;"	v	file:
arena_ind_get	deps/jemalloc/include/jemalloc/internal/arena_inlines_a.h	/^arena_ind_get(const arena_t *arena) {$/;"	f
arena_init	deps/jemalloc/src/jemalloc.c	/^arena_init(tsdn_t *tsdn, unsigned ind, extent_hooks_t *extent_hooks) {$/;"	f
arena_init_locked	deps/jemalloc/src/jemalloc.c	/^arena_init_locked(tsdn_t *tsdn, unsigned ind, extent_hooks_t *extent_hooks) {$/;"	f	file:
arena_internal_add	deps/jemalloc/include/jemalloc/internal/arena_inlines_a.h	/^arena_internal_add(arena_t *arena, size_t size) {$/;"	f
arena_internal_get	deps/jemalloc/include/jemalloc/internal/arena_inlines_a.h	/^arena_internal_get(arena_t *arena) {$/;"	f
arena_internal_sub	deps/jemalloc/include/jemalloc/internal/arena_inlines_a.h	/^arena_internal_sub(arena_t *arena, size_t size) {$/;"	f
arena_is_auto	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_b.h	/^arena_is_auto(arena_t *arena) {$/;"	f
arena_large_dalloc_stats_update	deps/jemalloc/src/arena.c	/^arena_large_dalloc_stats_update(tsdn_t *tsdn, arena_t *arena, size_t usize) {$/;"	f	file:
arena_large_malloc_stats_update	deps/jemalloc/src/arena.c	/^arena_large_malloc_stats_update(tsdn_t *tsdn, arena_t *arena, size_t usize) {$/;"	f	file:
arena_large_ralloc_stats_update	deps/jemalloc/src/arena.c	/^arena_large_ralloc_stats_update(tsdn_t *tsdn, arena_t *arena, size_t oldusize,$/;"	f	file:
arena_malloc	deps/jemalloc/include/jemalloc/internal/arena_inlines_b.h	/^arena_malloc(tsdn_t *tsdn, arena_t *arena, size_t size, szind_t ind, bool zero,$/;"	f
arena_malloc_hard	deps/jemalloc/src/arena.c	/^arena_malloc_hard(tsdn_t *tsdn, arena_t *arena, size_t size, szind_t ind,$/;"	f
arena_malloc_small	deps/jemalloc/src/arena.c	/^arena_malloc_small(tsdn_t *tsdn, arena_t *arena, szind_t binind, bool zero) {$/;"	f	file:
arena_maybe_decay	deps/jemalloc/src/arena.c	/^arena_maybe_decay(tsdn_t *tsdn, arena_t *arena, arena_decay_t *decay,$/;"	f	file:
arena_migrate	deps/jemalloc/src/jemalloc.c	/^arena_migrate(tsd_t *tsd, unsigned oldind, unsigned newind) {$/;"	f
arena_mutex_names	deps/jemalloc/src/stats.c	/^const char *arena_mutex_names[mutex_prof_num_arena_mutexes] = {$/;"	v
arena_muzzy_decay_ms_default_get	deps/jemalloc/src/arena.c	/^arena_muzzy_decay_ms_default_get(void) {$/;"	f
arena_muzzy_decay_ms_default_set	deps/jemalloc/src/arena.c	/^arena_muzzy_decay_ms_default_set(ssize_t decay_ms) {$/;"	f
arena_muzzy_decay_ms_get	deps/jemalloc/src/arena.c	/^arena_muzzy_decay_ms_get(arena_t *arena) {$/;"	f
arena_muzzy_decay_ms_set	deps/jemalloc/src/arena.c	/^arena_muzzy_decay_ms_set(tsdn_t *tsdn, arena_t *arena,$/;"	f
arena_nactive_add	deps/jemalloc/src/arena.c	/^arena_nactive_add(arena_t *arena, size_t add_pages) {$/;"	f	file:
arena_nactive_sub	deps/jemalloc/src/arena.c	/^arena_nactive_sub(arena_t *arena, size_t sub_pages) {$/;"	f	file:
arena_new	deps/jemalloc/src/arena.c	/^arena_new(tsdn_t *tsdn, unsigned ind, extent_hooks_t *extent_hooks) {$/;"	f
arena_new_create_background_thread	deps/jemalloc/src/jemalloc.c	/^arena_new_create_background_thread(tsdn_t *tsdn, unsigned ind) {$/;"	f	file:
arena_new_hook_ran	deps/jemalloc/test/src/test.c	/^static bool arena_new_hook_ran = false;$/;"	v	file:
arena_new_reentrancy_hook	deps/jemalloc/test/src/test.c	/^arena_new_reentrancy_hook() {$/;"	f	file:
arena_new_reentrant	deps/jemalloc/test/src/test.c	/^	arena_new_reentrant = 2$/;"	e	enum:__anon123	file:
arena_node	deps/jemalloc/src/ctl.c	/^static const ctl_indexed_node_t arena_node[] = {$/;"	v	file:
arena_nthreads_dec	deps/jemalloc/src/arena.c	/^arena_nthreads_dec(arena_t *arena, bool internal) {$/;"	f
arena_nthreads_get	deps/jemalloc/src/arena.c	/^arena_nthreads_get(arena_t *arena, bool internal) {$/;"	f
arena_nthreads_inc	deps/jemalloc/src/arena.c	/^arena_nthreads_inc(arena_t *arena, bool internal) {$/;"	f
arena_palloc	deps/jemalloc/src/arena.c	/^arena_palloc(tsdn_t *tsdn, arena_t *arena, size_t usize, size_t alignment,$/;"	f
arena_postfork_child	deps/jemalloc/src/arena.c	/^arena_postfork_child(tsdn_t *tsdn, arena_t *arena) {$/;"	f
arena_postfork_parent	deps/jemalloc/src/arena.c	/^arena_postfork_parent(tsdn_t *tsdn, arena_t *arena) {$/;"	f
arena_prefork0	deps/jemalloc/src/arena.c	/^arena_prefork0(tsdn_t *tsdn, arena_t *arena) {$/;"	f
arena_prefork1	deps/jemalloc/src/arena.c	/^arena_prefork1(tsdn_t *tsdn, arena_t *arena) {$/;"	f
arena_prefork2	deps/jemalloc/src/arena.c	/^arena_prefork2(tsdn_t *tsdn, arena_t *arena) {$/;"	f
arena_prefork3	deps/jemalloc/src/arena.c	/^arena_prefork3(tsdn_t *tsdn, arena_t *arena) {$/;"	f
arena_prefork4	deps/jemalloc/src/arena.c	/^arena_prefork4(tsdn_t *tsdn, arena_t *arena) {$/;"	f
arena_prefork5	deps/jemalloc/src/arena.c	/^arena_prefork5(tsdn_t *tsdn, arena_t *arena) {$/;"	f
arena_prefork6	deps/jemalloc/src/arena.c	/^arena_prefork6(tsdn_t *tsdn, arena_t *arena) {$/;"	f
arena_prefork7	deps/jemalloc/src/arena.c	/^arena_prefork7(tsdn_t *tsdn, arena_t *arena) {$/;"	f
arena_prof_accum	deps/jemalloc/include/jemalloc/internal/arena_inlines_a.h	/^arena_prof_accum(tsdn_t *tsdn, arena_t *arena, uint64_t accumbytes) {$/;"	f
arena_prof_demote	deps/jemalloc/src/arena.c	/^arena_prof_demote(tsdn_t *tsdn, extent_t *extent, const void *ptr) {$/;"	f	file:
arena_prof_promote	deps/jemalloc/src/arena.c	/^arena_prof_promote(tsdn_t *tsdn, const void *ptr, size_t usize) {$/;"	f
arena_prof_tctx_get	deps/jemalloc/include/jemalloc/internal/arena_inlines_b.h	/^arena_prof_tctx_get(tsdn_t *tsdn, const void *ptr, alloc_ctx_t *alloc_ctx) {$/;"	f
arena_prof_tctx_reset	deps/jemalloc/include/jemalloc/internal/arena_inlines_b.h	/^arena_prof_tctx_reset(tsdn_t *tsdn, const void *ptr, UNUSED prof_tctx_t *tctx) {$/;"	f
arena_prof_tctx_set	deps/jemalloc/include/jemalloc/internal/arena_inlines_b.h	/^arena_prof_tctx_set(tsdn_t *tsdn, const void *ptr, UNUSED size_t usize,$/;"	f
arena_ralloc	deps/jemalloc/src/arena.c	/^arena_ralloc(tsdn_t *tsdn, arena_t *arena, void *ptr, size_t oldsize,$/;"	f
arena_ralloc_move_helper	deps/jemalloc/src/arena.c	/^arena_ralloc_move_helper(tsdn_t *tsdn, arena_t *arena, size_t usize,$/;"	f	file:
arena_ralloc_no_move	deps/jemalloc/src/arena.c	/^arena_ralloc_no_move(tsdn_t *tsdn, void *ptr, size_t oldsize, size_t size,$/;"	f
arena_reset	deps/jemalloc/src/arena.c	/^arena_reset(tsd_t *tsd, arena_t *arena) {$/;"	f
arena_reset_finish_background_thread	deps/jemalloc/src/ctl.c	/^arena_reset_finish_background_thread(tsd_t *tsd, unsigned arena_ind) {$/;"	f	file:
arena_reset_mallctl	deps/jemalloc/test/unit/pack.c	/^arena_reset_mallctl(unsigned arena_ind) {$/;"	f	file:
arena_reset_prepare_background_thread	deps/jemalloc/src/ctl.c	/^arena_reset_prepare_background_thread(tsd_t *tsd, unsigned arena_ind) {$/;"	f	file:
arena_retain_grow_limit_get_set	deps/jemalloc/src/arena.c	/^arena_retain_grow_limit_get_set(tsd_t *tsd, arena_t *arena, size_t *old_limit,$/;"	f
arena_s	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^struct arena_s {$/;"	s
arena_salloc	deps/jemalloc/include/jemalloc/internal/arena_inlines_b.h	/^arena_salloc(tsdn_t *tsdn, const void *ptr) {$/;"	f
arena_sdalloc	deps/jemalloc/include/jemalloc/internal/arena_inlines_b.h	/^arena_sdalloc(tsdn_t *tsdn, void *ptr, size_t size, tcache_t *tcache,$/;"	f
arena_sdalloc_no_tcache	deps/jemalloc/include/jemalloc/internal/arena_inlines_b.h	/^arena_sdalloc_no_tcache(tsdn_t *tsdn, void *ptr, size_t size) {$/;"	f
arena_set	deps/jemalloc/src/jemalloc.c	/^arena_set(unsigned ind, arena_t *arena) {$/;"	f
arena_slab_alloc	deps/jemalloc/src/arena.c	/^arena_slab_alloc(tsdn_t *tsdn, arena_t *arena, szind_t binind,$/;"	f	file:
arena_slab_alloc_hard	deps/jemalloc/src/arena.c	/^arena_slab_alloc_hard(tsdn_t *tsdn, arena_t *arena,$/;"	f	file:
arena_slab_dalloc	deps/jemalloc/src/arena.c	/^arena_slab_dalloc(tsdn_t *tsdn, arena_t *arena, extent_t *slab) {$/;"	f	file:
arena_slab_data_s	deps/jemalloc/include/jemalloc/internal/arena_structs_a.h	/^struct arena_slab_data_s {$/;"	s
arena_slab_data_t	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^typedef struct arena_slab_data_s arena_slab_data_t;$/;"	t	typeref:struct:arena_slab_data_s
arena_slab_reg_alloc	deps/jemalloc/src/arena.c	/^arena_slab_reg_alloc(extent_t *slab, const bin_info_t *bin_info) {$/;"	f	file:
arena_slab_reg_dalloc	deps/jemalloc/src/arena.c	/^arena_slab_reg_dalloc(extent_t *slab, arena_slab_data_t *slab_data, void *ptr) {$/;"	f	file:
arena_slab_regind	deps/jemalloc/src/arena.c	/^arena_slab_regind(extent_t *slab, szind_t binind, const void *ptr) {$/;"	f	file:
arena_stash_decayed	deps/jemalloc/src/arena.c	/^arena_stash_decayed(tsdn_t *tsdn, arena_t *arena,$/;"	f	file:
arena_stats_accum_u64	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^arena_stats_accum_u64(arena_stats_u64_t *dst, uint64_t src) {$/;"	f
arena_stats_accum_zu	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^arena_stats_accum_zu(atomic_zu_t *dst, size_t src) {$/;"	f
arena_stats_add_u64	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^arena_stats_add_u64(tsdn_t *tsdn, arena_stats_t *arena_stats,$/;"	f
arena_stats_add_zu	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^arena_stats_add_zu(tsdn_t *tsdn, arena_stats_t *arena_stats, atomic_zu_t *p,$/;"	f
arena_stats_decay_s	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^struct arena_stats_decay_s {$/;"	s
arena_stats_decay_t	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^typedef struct arena_stats_decay_s arena_stats_decay_t;$/;"	t	typeref:struct:arena_stats_decay_s
arena_stats_init	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^arena_stats_init(UNUSED tsdn_t *tsdn, arena_stats_t *arena_stats) {$/;"	f
arena_stats_large_nrequests_add	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^arena_stats_large_nrequests_add(tsdn_t *tsdn, arena_stats_t *arena_stats,$/;"	f
arena_stats_large_s	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^struct arena_stats_large_s {$/;"	s
arena_stats_large_t	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^typedef struct arena_stats_large_s arena_stats_large_t;$/;"	t	typeref:struct:arena_stats_large_s
arena_stats_lock	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^arena_stats_lock(tsdn_t *tsdn, arena_stats_t *arena_stats) {$/;"	f
arena_stats_mapped_add	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^arena_stats_mapped_add(tsdn_t *tsdn, arena_stats_t *arena_stats, size_t size) {$/;"	f
arena_stats_merge	deps/jemalloc/src/arena.c	/^arena_stats_merge(tsdn_t *tsdn, arena_t *arena, unsigned *nthreads,$/;"	f
arena_stats_read_u64	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^arena_stats_read_u64(tsdn_t *tsdn, arena_stats_t *arena_stats,$/;"	f
arena_stats_read_zu	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^arena_stats_read_zu(tsdn_t *tsdn, arena_stats_t *arena_stats, atomic_zu_t *p) {$/;"	f
arena_stats_s	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^struct arena_stats_s {$/;"	s
arena_stats_sub_u64	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^arena_stats_sub_u64(tsdn_t *tsdn, arena_stats_t *arena_stats,$/;"	f
arena_stats_sub_zu	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^arena_stats_sub_zu(tsdn_t *tsdn, arena_stats_t *arena_stats, atomic_zu_t *p,$/;"	f
arena_stats_t	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^typedef struct arena_stats_s arena_stats_t;$/;"	t	typeref:struct:arena_stats_s
arena_stats_u64_t	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^typedef atomic_u64_t arena_stats_u64_t;$/;"	t
arena_stats_u64_t	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^typedef uint64_t arena_stats_u64_t;$/;"	t
arena_stats_unlock	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^arena_stats_unlock(tsdn_t *tsdn, arena_stats_t *arena_stats) {$/;"	f
arena_t	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^typedef struct arena_s arena_t;$/;"	t	typeref:struct:arena_s
arena_tcache_fill_small	deps/jemalloc/src/arena.c	/^arena_tcache_fill_small(tsdn_t *tsdn, arena_t *arena, tcache_t *tcache,$/;"	f
arena_tdata_get	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_a.h	/^arena_tdata_get(tsd_t *tsd, unsigned ind, bool refresh_if_missing) {$/;"	f
arena_tdata_get_hard	deps/jemalloc/src/jemalloc.c	/^arena_tdata_get_hard(tsd_t *tsd, unsigned ind) {$/;"	f
arena_tdata_s	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^struct arena_tdata_s {$/;"	s
arena_tdata_t	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^typedef struct arena_tdata_s arena_tdata_t;$/;"	t	typeref:struct:arena_tdata_s
arena_unbind	deps/jemalloc/src/jemalloc.c	/^arena_unbind(tsd_t *tsd, unsigned ind, bool internal) {$/;"	f	file:
arena_vsalloc	deps/jemalloc/include/jemalloc/internal/arena_inlines_b.h	/^arena_vsalloc(tsdn_t *tsdn, const void *ptr) {$/;"	f
arenas	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	ctl_arena_t *arenas[2 + MALLOCX_ARENA_LIMIT];$/;"	m	struct:ctl_arenas_s
arenas_bin_i_index	deps/jemalloc/src/ctl.c	/^arenas_bin_i_index(tsdn_t *tsdn, const size_t *mib, size_t miblen, size_t i) {$/;"	f	file:
arenas_bin_i_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t arenas_bin_i_node[] = {$/;"	v	file:
arenas_bin_node	deps/jemalloc/src/ctl.c	/^static const ctl_indexed_node_t arenas_bin_node[] = {$/;"	v	file:
arenas_create_ctl	deps/jemalloc/src/ctl.c	/^arenas_create_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	file:
arenas_create_mallctl	deps/jemalloc/test/unit/pack.c	/^arenas_create_mallctl(void) {$/;"	f	file:
arenas_decay_ms_ctl_impl	deps/jemalloc/src/ctl.c	/^arenas_decay_ms_ctl_impl(tsd_t *tsd, const size_t *mib, size_t miblen,$/;"	f	file:
arenas_dirty_decay_ms_ctl	deps/jemalloc/src/ctl.c	/^arenas_dirty_decay_ms_ctl(tsd_t *tsd, const size_t *mib, size_t miblen,$/;"	f	file:
arenas_i	deps/jemalloc/src/ctl.c	/^arenas_i(size_t i) {$/;"	f	file:
arenas_i2a	deps/jemalloc/src/ctl.c	/^arenas_i2a(size_t i) {$/;"	f	file:
arenas_i2a_impl	deps/jemalloc/src/ctl.c	/^arenas_i2a_impl(size_t i, bool compat, bool validate) {$/;"	f	file:
arenas_i_impl	deps/jemalloc/src/ctl.c	/^arenas_i_impl(tsd_t *tsd, size_t i, bool compat, bool init) {$/;"	f	file:
arenas_lextent_i_index	deps/jemalloc/src/ctl.c	/^arenas_lextent_i_index(tsdn_t *tsdn, const size_t *mib, size_t miblen,$/;"	f	file:
arenas_lextent_i_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t arenas_lextent_i_node[] = {$/;"	v	file:
arenas_lextent_node	deps/jemalloc/src/ctl.c	/^static const ctl_indexed_node_t arenas_lextent_node[] = {$/;"	v	file:
arenas_lock	deps/jemalloc/src/jemalloc.c	/^malloc_mutex_t arenas_lock;$/;"	v
arenas_lookup_ctl	deps/jemalloc/src/ctl.c	/^arenas_lookup_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	file:
arenas_muzzy_decay_ms_ctl	deps/jemalloc/src/ctl.c	/^arenas_muzzy_decay_ms_ctl(tsd_t *tsd, const size_t *mib, size_t miblen,$/;"	f	file:
arenas_narenas_ctl	deps/jemalloc/src/ctl.c	/^arenas_narenas_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	file:
arenas_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t arenas_node[] = {$/;"	v	file:
arenas_tdata_cleanup	deps/jemalloc/src/jemalloc.c	/^arenas_tdata_cleanup(tsd_t *tsd) {$/;"	f
arg0	src/setproctitle.c	/^	const char *arg0;$/;"	m	struct:__anon60	file:
argc	deps/lua/src/lua.c	/^  int argc;$/;"	m	struct:Smain	file:
argc	deps/lua/src/luac.c	/^ int argc;$/;"	m	struct:Smain	file:
argc	src/cluster.h	/^    int argc;$/;"	m	struct:cacheOps
argc	src/module.c	/^    int argc;$/;"	m	struct:RedisModuleCommandFilterCtx	file:
argc	src/redis-cli.c	/^    int argc;$/;"	m	struct:__anon13	file:
argc	src/redis-cli.c	/^    int argc;$/;"	m	struct:clusterManagerCommand	file:
argc	src/server.h	/^    int argc, dbid, target;$/;"	m	struct:redisOp
argc	src/server.h	/^    int argc;               \/* Num of arguments of current command. *\/$/;"	m	struct:client
argc	src/server.h	/^    int argc;$/;"	m	struct:moduleLoadQueueEntry
argc	src/server.h	/^    int argc;$/;"	m	struct:multiCmd
argc	src/server.h	/^    int argc;$/;"	m	struct:sentinelLoadQueueEntry
argc	src/slowlog.h	/^    int argc;$/;"	m	struct:slowlogEntry
argc	tests/modules/blockedclient.c	/^    int argc;$/;"	m	struct:__anon75	file:
args	src/redis-cli.c	/^    char *args;$/;"	m	struct:clusterManagerCommandDef	file:
argument	utils/generate-command-help.rb	/^def argument arg$/;"	f
arguments	utils/generate-command-help.rb	/^def arguments command$/;"	f
argv	deps/lua/src/lua.c	/^  char **argv;$/;"	m	struct:Smain	file:
argv	deps/lua/src/luac.c	/^ char** argv;$/;"	m	struct:Smain	file:
argv	src/cluster.h	/^    char** argv;$/;"	m	struct:cacheOps
argv	src/module.c	/^    RedisModuleString **argv;$/;"	m	struct:RedisModuleCommandFilterCtx	file:
argv	src/redis-cli.c	/^    char **argv;$/;"	m	struct:clusterManagerCommand	file:
argv	src/redis-cli.c	/^    sds *argv;$/;"	m	struct:__anon13	file:
argv	src/sentinel.c	/^    char **argv;            \/* Arguments to call the script. *\/$/;"	m	struct:sentinelScriptJob	file:
argv	src/server.h	/^    robj **argv;            \/* Arguments of current command. *\/$/;"	m	struct:client
argv	src/server.h	/^    robj **argv;$/;"	m	struct:moduleLoadQueueEntry
argv	src/server.h	/^    robj **argv;$/;"	m	struct:multiCmd
argv	src/server.h	/^    robj **argv;$/;"	m	struct:redisOp
argv	src/server.h	/^    sds *argv;$/;"	m	struct:sentinelLoadQueueEntry
argv	src/slowlog.h	/^    robj **argv;$/;"	m	struct:slowlogEntry
argv	tests/modules/blockedclient.c	/^    RedisModuleString **argv;$/;"	m	struct:__anon75	file:
argv_len	src/cluster.h	/^    size_t* argv_len;$/;"	m	struct:cacheOps
argv_len_sum	src/server.h	/^    size_t argv_len_sum;    \/* Sum of lengths of objects in argv list. *\/$/;"	m	struct:client
arith_op	deps/lua/src/lvm.c	364;"	d	file:
arity	src/redis-cli.c	/^    int arity;$/;"	m	struct:clusterManagerCommandDef	file:
arity	src/server.h	/^    int arity;$/;"	m	struct:redisCommand
array	deps/lua/src/lobject.h	/^  TValue *array;  \/* array part *\/$/;"	m	struct:Table
array	src/geo.h	/^    struct geoPoint *array;$/;"	m	struct:geoArray	typeref:struct:geoArray::geoPoint
array	src/module.c	/^        struct RedisModuleCallReply *array; \/* Array of sub-reply elements. *\/$/;"	m	union:RedisModuleCallReply::__anon65	typeref:struct:RedisModuleCallReply::__anon65::RedisModuleCallReply	file:
arrayindex	deps/lua/src/ltable.c	/^static int arrayindex (const TValue *key) {$/;"	f	file:
as_fn_append	deps/jemalloc/config.status	/^  as_fn_append ()$/;"	f
as_fn_append	deps/jemalloc/configure	/^  as_fn_append ()$/;"	f
as_fn_arith	deps/jemalloc/config.status	/^  as_fn_arith ()$/;"	f
as_fn_arith	deps/jemalloc/configure	/^  as_fn_arith ()$/;"	f
as_fn_error	deps/jemalloc/config.status	/^as_fn_error ()$/;"	f
as_fn_error	deps/jemalloc/configure	/^as_fn_error ()$/;"	f
as_fn_executable_p	deps/jemalloc/config.status	/^as_fn_executable_p ()$/;"	f
as_fn_executable_p	deps/jemalloc/configure	/^as_fn_executable_p ()$/;"	f
as_fn_exit	deps/jemalloc/config.status	/^as_fn_exit ()$/;"	f
as_fn_exit	deps/jemalloc/configure	/^as_fn_exit ()$/;"	f
as_fn_failure	deps/jemalloc/configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_mkdir_p	deps/jemalloc/config.status	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	deps/jemalloc/configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_ret_failure	deps/jemalloc/configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_success	deps/jemalloc/configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_set_status	deps/jemalloc/config.status	/^as_fn_set_status ()$/;"	f
as_fn_set_status	deps/jemalloc/configure	/^as_fn_set_status ()$/;"	f
as_fn_success	deps/jemalloc/configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_unset	deps/jemalloc/config.status	/^as_fn_unset ()$/;"	f
as_fn_unset	deps/jemalloc/configure	/^as_fn_unset ()$/;"	f
ascii_logo	src/asciilogo.h	/^const char *ascii_logo =$/;"	v
askPassword	src/redis-cli.c	/^static sds askPassword(const char *msg) {$/;"	f	file:
askingCommand	src/cluster.c	/^void askingCommand(client *c) {$/;"	f
askpass	src/redis-cli.c	/^    int askpass;$/;"	m	struct:config	file:
assert	deps/hiredis/test.c	86;"	d	file:
assert	deps/hiredis/test.c	87;"	d	file:
assert	deps/jemalloc/include/jemalloc/internal/assert.h	9;"	d
assert	deps/jemalloc/src/malloc_io.c	25;"	d	file:
assert	deps/jemalloc/src/malloc_io.c	672;"	d	file:
assert	deps/jemalloc/src/malloc_io.c	9;"	d	file:
assert	deps/jemalloc/test/include/test/jemalloc_test.h	138;"	d
assert	deps/jemalloc/test/include/test/jemalloc_test.h	143;"	d
assert	src/redisassert.h	43;"	d
assert	tests/support/test.tcl	/^proc assert {condition} {$/;"	p
assertReplyAndFree	deps/hiredis/examples/example-push.c	/^static void assertReplyAndFree(redisContext *context, redisReply *reply, int type) {$/;"	f	file:
assert_b_eq	deps/jemalloc/test/include/test/test.h	213;"	d
assert_b_ne	deps/jemalloc/test/include/test/test.h	229;"	d
assert_c_eq	deps/jemalloc/test/include/test/test.h	29;"	d
assert_c_ge	deps/jemalloc/test/include/test/test.h	33;"	d
assert_c_gt	deps/jemalloc/test/include/test/test.h	34;"	d
assert_c_le	deps/jemalloc/test/include/test/test.h	32;"	d
assert_c_lt	deps/jemalloc/test/include/test/test.h	31;"	d
assert_c_ne	deps/jemalloc/test/include/test/test.h	30;"	d
assert_cluster_state	tests/cluster/cluster.tcl	/^proc assert_cluster_state {state} {$/;"	p
assert_cmp	deps/jemalloc/test/include/test/test.h	3;"	d
assert_d32_eq	deps/jemalloc/test/include/test/test.h	161;"	d
assert_d32_ge	deps/jemalloc/test/include/test/test.h	169;"	d
assert_d32_gt	deps/jemalloc/test/include/test/test.h	171;"	d
assert_d32_le	deps/jemalloc/test/include/test/test.h	167;"	d
assert_d32_lt	deps/jemalloc/test/include/test/test.h	165;"	d
assert_d32_ne	deps/jemalloc/test/include/test/test.h	163;"	d
assert_d64_eq	deps/jemalloc/test/include/test/test.h	187;"	d
assert_d64_ge	deps/jemalloc/test/include/test/test.h	195;"	d
assert_d64_gt	deps/jemalloc/test/include/test/test.h	197;"	d
assert_d64_le	deps/jemalloc/test/include/test/test.h	193;"	d
assert_d64_lt	deps/jemalloc/test/include/test/test.h	191;"	d
assert_d64_ne	deps/jemalloc/test/include/test/test.h	189;"	d
assert_d_eq	deps/jemalloc/test/include/test/test.h	43;"	d
assert_d_ge	deps/jemalloc/test/include/test/test.h	47;"	d
assert_d_gt	deps/jemalloc/test/include/test/test.h	48;"	d
assert_d_le	deps/jemalloc/test/include/test/test.h	46;"	d
assert_d_lt	deps/jemalloc/test/include/test/test.h	45;"	d
assert_d_ne	deps/jemalloc/test/include/test/test.h	44;"	d
assert_digests_match	tests/integration/failover.tcl	/^    proc assert_digests_match {n1 n2 n3} {$/;"	p
assert_emit_output	deps/jemalloc/test/unit/emitter.c	/^assert_emit_output(void (*emit_fn)(emitter_t *),$/;"	f	file:
assert_encoding	tests/support/test.tcl	/^proc assert_encoding {enc key} {$/;"	p
assert_equal	tests/support/test.tcl	/^proc assert_equal {value expected {detail ""}} {$/;"	p
assert_error	tests/support/test.tcl	/^proc assert_error {pattern code} {$/;"	p
assert_failed	tests/support/test.tcl	/^proc assert_failed {expected_err detail} {$/;"	p
assert_false	deps/jemalloc/test/include/test/test.h	246;"	d
assert_jd_eq	deps/jemalloc/test/include/test/test.h	109;"	d
assert_jd_ge	deps/jemalloc/test/include/test/test.h	117;"	d
assert_jd_gt	deps/jemalloc/test/include/test/test.h	119;"	d
assert_jd_le	deps/jemalloc/test/include/test/test.h	115;"	d
assert_jd_lt	deps/jemalloc/test/include/test/test.h	113;"	d
assert_jd_ne	deps/jemalloc/test/include/test/test.h	111;"	d
assert_ju_eq	deps/jemalloc/test/include/test/test.h	122;"	d
assert_ju_ge	deps/jemalloc/test/include/test/test.h	130;"	d
assert_ju_gt	deps/jemalloc/test/include/test/test.h	132;"	d
assert_ju_le	deps/jemalloc/test/include/test/test.h	128;"	d
assert_ju_lt	deps/jemalloc/test/include/test/test.h	126;"	d
assert_ju_ne	deps/jemalloc/test/include/test/test.h	124;"	d
assert_ld_eq	deps/jemalloc/test/include/test/test.h	57;"	d
assert_ld_ge	deps/jemalloc/test/include/test/test.h	65;"	d
assert_ld_gt	deps/jemalloc/test/include/test/test.h	67;"	d
assert_ld_le	deps/jemalloc/test/include/test/test.h	63;"	d
assert_ld_lt	deps/jemalloc/test/include/test/test.h	61;"	d
assert_ld_ne	deps/jemalloc/test/include/test/test.h	59;"	d
assert_lessthan	tests/support/test.tcl	/^proc assert_lessthan {value expected {detail ""}} {$/;"	p
assert_lessthan_equal	tests/support/test.tcl	/^proc assert_lessthan_equal {value expected {detail ""}} {$/;"	p
assert_lu_eq	deps/jemalloc/test/include/test/test.h	70;"	d
assert_lu_ge	deps/jemalloc/test/include/test/test.h	78;"	d
assert_lu_gt	deps/jemalloc/test/include/test/test.h	80;"	d
assert_lu_le	deps/jemalloc/test/include/test/test.h	76;"	d
assert_lu_lt	deps/jemalloc/test/include/test/test.h	74;"	d
assert_lu_ne	deps/jemalloc/test/include/test/test.h	72;"	d
assert_match	tests/support/test.tcl	/^proc assert_match {pattern value} {$/;"	p
assert_morethan	tests/support/test.tcl	/^proc assert_morethan {value expected {detail ""}} {$/;"	p
assert_morethan_equal	tests/support/test.tcl	/^proc assert_morethan_equal {value expected {detail ""}} {$/;"	p
assert_no_match	tests/support/test.tcl	/^proc assert_no_match {pattern value} {$/;"	p
assert_nonempty_alloc	deps/jemalloc/src/jemalloc.c	/^	bool assert_nonempty_alloc;$/;"	m	struct:static_opts_s	file:
assert_not_implemented	deps/jemalloc/include/jemalloc/internal/assert.h	42;"	d
assert_not_implemented	deps/jemalloc/src/malloc_io.c	18;"	d	file:
assert_not_implemented	deps/jemalloc/src/malloc_io.c	47;"	d	file:
assert_not_implemented	deps/jemalloc/src/malloc_io.c	675;"	d	file:
assert_not_implemented	deps/jemalloc/test/include/test/jemalloc_test.h	141;"	d
assert_not_implemented	deps/jemalloc/test/include/test/jemalloc_test.h	165;"	d
assert_not_reached	deps/jemalloc/test/include/test/test.h	275;"	d
assert_p_eq	deps/jemalloc/test/unit/atomic.c	9;"	d	file:
assert_ptr_eq	deps/jemalloc/test/include/test/test.h	20;"	d
assert_ptr_ne	deps/jemalloc/test/include/test/test.h	22;"	d
assert_ptr_not_null	deps/jemalloc/test/include/test/test.h	26;"	d
assert_ptr_null	deps/jemalloc/test/include/test/test.h	24;"	d
assert_qd_eq	deps/jemalloc/test/include/test/test.h	83;"	d
assert_qd_ge	deps/jemalloc/test/include/test/test.h	91;"	d
assert_qd_gt	deps/jemalloc/test/include/test/test.h	93;"	d
assert_qd_le	deps/jemalloc/test/include/test/test.h	89;"	d
assert_qd_lt	deps/jemalloc/test/include/test/test.h	87;"	d
assert_qd_ne	deps/jemalloc/test/include/test/test.h	85;"	d
assert_qu_eq	deps/jemalloc/test/include/test/test.h	96;"	d
assert_qu_ge	deps/jemalloc/test/include/test/test.h	104;"	d
assert_qu_gt	deps/jemalloc/test/include/test/test.h	106;"	d
assert_qu_le	deps/jemalloc/test/include/test/test.h	102;"	d
assert_qu_lt	deps/jemalloc/test/include/test/test.h	100;"	d
assert_qu_ne	deps/jemalloc/test/include/test/test.h	98;"	d
assert_range	tests/support/test.tcl	/^proc assert_range {value min max {detail ""}} {$/;"	p
assert_replication_stream	tests/test_helper.tcl	/^proc assert_replication_stream {s patterns} {$/;"	p
assert_str_eq	deps/jemalloc/test/include/test/test.h	248;"	d
assert_str_ne	deps/jemalloc/test/include/test/test.h	261;"	d
assert_true	deps/jemalloc/test/include/test/test.h	245;"	d
assert_tsd_data_cleanup_done	deps/jemalloc/src/tsd.c	/^assert_tsd_data_cleanup_done(tsd_t *tsd) {$/;"	f	file:
assert_type	tests/support/test.tcl	/^proc assert_type {type key} {$/;"	p
assert_u32_eq	deps/jemalloc/test/include/test/test.h	174;"	d
assert_u32_ge	deps/jemalloc/test/include/test/test.h	182;"	d
assert_u32_gt	deps/jemalloc/test/include/test/test.h	184;"	d
assert_u32_le	deps/jemalloc/test/include/test/test.h	180;"	d
assert_u32_lt	deps/jemalloc/test/include/test/test.h	178;"	d
assert_u32_ne	deps/jemalloc/test/include/test/test.h	176;"	d
assert_u64_eq	deps/jemalloc/test/include/test/test.h	200;"	d
assert_u64_ge	deps/jemalloc/test/include/test/test.h	208;"	d
assert_u64_gt	deps/jemalloc/test/include/test/test.h	210;"	d
assert_u64_le	deps/jemalloc/test/include/test/test.h	206;"	d
assert_u64_lt	deps/jemalloc/test/include/test/test.h	204;"	d
assert_u64_ne	deps/jemalloc/test/include/test/test.h	202;"	d
assert_u_eq	deps/jemalloc/test/include/test/test.h	50;"	d
assert_u_ge	deps/jemalloc/test/include/test/test.h	54;"	d
assert_u_gt	deps/jemalloc/test/include/test/test.h	55;"	d
assert_u_le	deps/jemalloc/test/include/test/test.h	53;"	d
assert_u_lt	deps/jemalloc/test/include/test/test.h	52;"	d
assert_u_ne	deps/jemalloc/test/include/test/test.h	51;"	d
assert_x_eq	deps/jemalloc/test/include/test/test.h	36;"	d
assert_x_ge	deps/jemalloc/test/include/test/test.h	40;"	d
assert_x_gt	deps/jemalloc/test/include/test/test.h	41;"	d
assert_x_le	deps/jemalloc/test/include/test/test.h	39;"	d
assert_x_lt	deps/jemalloc/test/include/test/test.h	38;"	d
assert_x_ne	deps/jemalloc/test/include/test/test.h	37;"	d
assert_zd_eq	deps/jemalloc/test/include/test/test.h	135;"	d
assert_zd_ge	deps/jemalloc/test/include/test/test.h	143;"	d
assert_zd_gt	deps/jemalloc/test/include/test/test.h	145;"	d
assert_zd_le	deps/jemalloc/test/include/test/test.h	141;"	d
assert_zd_lt	deps/jemalloc/test/include/test/test.h	139;"	d
assert_zd_ne	deps/jemalloc/test/include/test/test.h	137;"	d
assert_zu_eq	deps/jemalloc/test/include/test/test.h	148;"	d
assert_zu_ge	deps/jemalloc/test/include/test/test.h	156;"	d
assert_zu_gt	deps/jemalloc/test/include/test/test.h	158;"	d
assert_zu_le	deps/jemalloc/test/include/test/test.h	154;"	d
assert_zu_lt	deps/jemalloc/test/include/test/test.h	152;"	d
assert_zu_ne	deps/jemalloc/test/include/test/test.h	150;"	d
assignment	deps/lua/src/lparser.c	/^static void assignment (LexState *ls, struct LHS_assign *lh, int nvars) {$/;"	f	file:
astats	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	arena_stats_t astats;$/;"	m	struct:ctl_arena_stats_s
astats	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	ctl_arena_stats_t *astats;$/;"	m	struct:ctl_arena_s
asyncCloseClientOnOutputBufferLimitReached	src/networking.c	/^void asyncCloseClientOnOutputBufferLimitReached(client *c) {$/;"	f
async_push_cb	deps/hiredis/hiredis.h	/^    redisAsyncPushFn *async_push_cb;$/;"	m	struct:__anon80
async_read	deps/hiredis/hiredis.h	/^    void (*async_read)(struct redisAsyncContext *);$/;"	m	struct:redisContextFuncs
async_write	deps/hiredis/hiredis.h	/^    void (*async_write)(struct redisAsyncContext *);$/;"	m	struct:redisContextFuncs
atexit_registered	deps/linenoise/linenoise.c	/^static int atexit_registered = 0; \/* Register atexit just 1 time. *\/$/;"	v	file:
atomic	deps/lua/src/lgc.c	/^static void atomic (lua_State *L) {$/;"	f	file:
atomicDecr	src/atomicvar.h	117;"	d
atomicDecr	src/atomicvar.h	136;"	d
atomicDecr	src/atomicvar.h	96;"	d
atomicGet	src/atomicvar.h	118;"	d
atomicGet	src/atomicvar.h	137;"	d
atomicGet	src/atomicvar.h	97;"	d
atomicGetIncr	src/atomicvar.h	114;"	d
atomicGetIncr	src/atomicvar.h	133;"	d
atomicGetIncr	src/atomicvar.h	93;"	d
atomicGetWithSync	src/atomicvar.h	101;"	d
atomicGetWithSync	src/atomicvar.h	122;"	d
atomicGetWithSync	src/atomicvar.h	144;"	d
atomicIncr	src/atomicvar.h	113;"	d
atomicIncr	src/atomicvar.h	132;"	d
atomicIncr	src/atomicvar.h	92;"	d
atomicSet	src/atomicvar.h	100;"	d
atomicSet	src/atomicvar.h	121;"	d
atomicSet	src/atomicvar.h	140;"	d
atomicSetWithSync	src/atomicvar.h	104;"	d
atomicSetWithSync	src/atomicvar.h	125;"	d
atomicSetWithSync	src/atomicvar.h	148;"	d
atomic_enum_to_builtin	deps/jemalloc/include/jemalloc/internal/atomic_gcc_atomic.h	/^atomic_enum_to_builtin(atomic_memory_order_t mo) {$/;"	f
atomic_fence	deps/jemalloc/include/jemalloc/internal/atomic_c11.h	15;"	d
atomic_fence	deps/jemalloc/include/jemalloc/internal/atomic_gcc_atomic.h	/^atomic_fence(atomic_memory_order_t mo) {$/;"	f
atomic_fence	deps/jemalloc/include/jemalloc/internal/atomic_gcc_sync.h	/^atomic_fence(atomic_memory_order_t mo) {$/;"	f
atomic_fence	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^atomic_fence(atomic_memory_order_t mo) {$/;"	f
atomic_memory_order_acq_rel	deps/jemalloc/include/jemalloc/internal/atomic_c11.h	12;"	d
atomic_memory_order_acq_rel	deps/jemalloc/include/jemalloc/internal/atomic_gcc_atomic.h	/^	atomic_memory_order_acq_rel,$/;"	e	enum:__anon162
atomic_memory_order_acq_rel	deps/jemalloc/include/jemalloc/internal/atomic_gcc_sync.h	/^	atomic_memory_order_acq_rel,$/;"	e	enum:__anon140
atomic_memory_order_acq_rel	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^	atomic_memory_order_acq_rel,$/;"	e	enum:__anon138
atomic_memory_order_acquire	deps/jemalloc/include/jemalloc/internal/atomic_c11.h	10;"	d
atomic_memory_order_acquire	deps/jemalloc/include/jemalloc/internal/atomic_gcc_atomic.h	/^	atomic_memory_order_acquire,$/;"	e	enum:__anon162
atomic_memory_order_acquire	deps/jemalloc/include/jemalloc/internal/atomic_gcc_sync.h	/^	atomic_memory_order_acquire,$/;"	e	enum:__anon140
atomic_memory_order_acquire	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^	atomic_memory_order_acquire,$/;"	e	enum:__anon138
atomic_memory_order_relaxed	deps/jemalloc/include/jemalloc/internal/atomic_c11.h	9;"	d
atomic_memory_order_relaxed	deps/jemalloc/include/jemalloc/internal/atomic_gcc_atomic.h	/^	atomic_memory_order_relaxed,$/;"	e	enum:__anon162
atomic_memory_order_relaxed	deps/jemalloc/include/jemalloc/internal/atomic_gcc_sync.h	/^	atomic_memory_order_relaxed,$/;"	e	enum:__anon140
atomic_memory_order_relaxed	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^	atomic_memory_order_relaxed,$/;"	e	enum:__anon138
atomic_memory_order_release	deps/jemalloc/include/jemalloc/internal/atomic_c11.h	11;"	d
atomic_memory_order_release	deps/jemalloc/include/jemalloc/internal/atomic_gcc_atomic.h	/^	atomic_memory_order_release,$/;"	e	enum:__anon162
atomic_memory_order_release	deps/jemalloc/include/jemalloc/internal/atomic_gcc_sync.h	/^	atomic_memory_order_release,$/;"	e	enum:__anon140
atomic_memory_order_release	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^	atomic_memory_order_release,$/;"	e	enum:__anon138
atomic_memory_order_seq_cst	deps/jemalloc/include/jemalloc/internal/atomic_c11.h	13;"	d
atomic_memory_order_seq_cst	deps/jemalloc/include/jemalloc/internal/atomic_gcc_atomic.h	/^	atomic_memory_order_seq_cst$/;"	e	enum:__anon162
atomic_memory_order_seq_cst	deps/jemalloc/include/jemalloc/internal/atomic_gcc_sync.h	/^	atomic_memory_order_seq_cst$/;"	e	enum:__anon140
atomic_memory_order_seq_cst	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^	atomic_memory_order_seq_cst$/;"	e	enum:__anon138
atomic_memory_order_t	deps/jemalloc/include/jemalloc/internal/atomic_c11.h	8;"	d
atomic_memory_order_t	deps/jemalloc/include/jemalloc/internal/atomic_gcc_atomic.h	/^} atomic_memory_order_t;$/;"	t	typeref:enum:__anon162
atomic_memory_order_t	deps/jemalloc/include/jemalloc/internal/atomic_gcc_sync.h	/^} atomic_memory_order_t;$/;"	t	typeref:enum:__anon140
atomic_memory_order_t	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^} atomic_memory_order_t;$/;"	t	typeref:enum:__anon138
atomic_post_sc_store_fence	deps/jemalloc/include/jemalloc/internal/atomic_gcc_sync.h	/^atomic_post_sc_store_fence() {$/;"	f
atomic_pre_sc_load_fence	deps/jemalloc/include/jemalloc/internal/atomic_gcc_sync.h	/^atomic_pre_sc_load_fence() {$/;"	f
atomic_repr_0_t	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^typedef char atomic_repr_0_t;$/;"	t
atomic_repr_1_t	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^typedef short atomic_repr_1_t;$/;"	t
atomic_repr_2_t	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^typedef long atomic_repr_2_t;$/;"	t
atomic_repr_3_t	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^typedef __int64 atomic_repr_3_t;$/;"	t
attach_to_replication_stream	tests/test_helper.tcl	/^proc attach_to_replication_stream {} {$/;"	p
attached	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	bool			attached;$/;"	m	struct:prof_tdata_s
attempted_compress	src/quicklist.h	/^    unsigned int attempted_compress : 1; \/* node can't compress; too small *\/$/;"	m	struct:quicklistNode
auth	src/redis-benchmark.c	/^    char *auth;$/;"	m	struct:config	file:
auth	src/redis-cli.c	/^    char *auth;$/;"	m	struct:config	file:
authCommand	src/acl.c	/^void authCommand(client *c) {$/;"	f
auth_callback	src/server.h	/^    RedisModuleUserChangedFunc auth_callback; \/* Module callback to execute$/;"	m	struct:client
auth_callback_privdata	src/server.h	/^    void *auth_callback_privdata; \/* Private data that is passed when the auth$/;"	m	struct:client
auth_module	src/server.h	/^    void *auth_module;      \/* The module that owns the callback, which is used$/;"	m	struct:client
auth_pass	src/sentinel.c	/^    char *auth_pass;    \/* Password to use for AUTH against master & replica. *\/$/;"	m	struct:sentinelRedisInstance	file:
auth_user	src/sentinel.c	/^    char *auth_user;    \/* Username for ACLs AUTH against master & replica. *\/$/;"	m	struct:sentinelRedisInstance	file:
authenticateClientWithUser	src/module.c	/^static int authenticateClientWithUser(RedisModuleCtx *ctx, user *user, RedisModuleUserChangedFunc callback, void *privdata, uint64_t *client_id) {$/;"	f	file:
authenticated	src/server.h	/^    int authenticated;      \/* Needed when the default user requires auth. *\/$/;"	m	struct:client
autoMemoryAdd	src/module.c	/^void autoMemoryAdd(RedisModuleCtx *ctx, int type, void *ptr) {$/;"	f
autoMemoryCollect	src/module.c	/^void autoMemoryCollect(RedisModuleCtx *ctx) {$/;"	f
autoMemoryFreed	src/module.c	/^int autoMemoryFreed(RedisModuleCtx *ctx, int type, void *ptr) {$/;"	f
autoRunParameter	exp/exp1.sh	/^autoRunParameter() {$/;"	f
auto_thp_switched	deps/jemalloc/include/jemalloc/internal/base_structs.h	/^	bool		auto_thp_switched;$/;"	m	struct:base_s
autosync	src/rio.h	/^            off_t autosync; \/* fsync after 'autosync' bytes written. *\/$/;"	m	struct:_rio::__anon54::__anon56
aux	deps/lua/src/lparser.h	/^    struct { int info, aux; } s;$/;"	m	struct:expdesc::__anon94::__anon95
aux_close	deps/lua/src/liolib.c	/^static int aux_close (lua_State *L) {$/;"	f	file:
aux_getn	deps/lua/src/ltablib.c	19;"	d	file:
aux_lines	deps/lua/src/liolib.c	/^static void aux_lines (lua_State *L, int idx, int toclose) {$/;"	f	file:
aux_load	src/redismodule.h	/^    RedisModuleTypeAuxLoadFunc aux_load;$/;"	m	struct:RedisModuleTypeMethods
aux_load	src/server.h	/^    moduleTypeAuxLoadFunc aux_load;$/;"	m	struct:RedisModuleType
aux_save	src/redismodule.h	/^    RedisModuleTypeAuxSaveFunc aux_save;$/;"	m	struct:RedisModuleTypeMethods
aux_save	src/server.h	/^    moduleTypeAuxSaveFunc aux_save;$/;"	m	struct:RedisModuleType
aux_save_triggers	src/redismodule.h	/^    int aux_save_triggers;$/;"	m	struct:RedisModuleTypeMethods
aux_save_triggers	src/server.h	/^    int aux_save_triggers;$/;"	m	struct:RedisModuleType
aux_upvalue	deps/lua/src/lapi.c	/^static const char *aux_upvalue (StkId fi, int n, TValue **val) {$/;"	f	file:
auxgetinfo	deps/lua/src/ldebug.c	/^static int auxgetinfo (lua_State *L, const char *what, lua_Debug *ar,$/;"	f	file:
auxopen	deps/lua/src/lbaselib.c	/^static void auxopen (lua_State *L, const char *name,$/;"	f	file:
auxresume	deps/lua/src/lbaselib.c	/^static int auxresume (lua_State *L, lua_State *co, int narg) {$/;"	f	file:
auxsort	deps/lua/src/ltablib.c	/^static void auxsort (lua_State *L, int l, int u) {$/;"	f	file:
auxupvalue	deps/lua/src/ldblib.c	/^static int auxupvalue (lua_State *L, int get) {$/;"	f	file:
avail	deps/jemalloc/include/jemalloc/internal/base_structs.h	/^	extent_heap_t	avail[NSIZES];$/;"	m	struct:base_s
avail	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^	void **avail;$/;"	m	struct:cache_bin_s
avg	src/latency.h	/^    uint32_t avg;           \/* Average of current samples. *\/$/;"	m	struct:latencyStats
avg	utils/cluster_fail_time.tcl	/^proc avg vector {$/;"	p
avg_hot_point_for_cluster	src/cluster.h	/^    double avg_hot_point_for_cluster[3];$/;"	m	struct:clusterState
avg_slot_hot_for_node	src/cluster.h	/^    double avg_slot_hot_for_node[3];$/;"	m	struct:clusterNode
avg_ttl	src/server.h	/^    long long avg_ttl;          \/* Average TTL, just for stats *\/$/;"	m	struct:redisDb
b	deps/linenoise/linenoise.c	/^    char *b;$/;"	m	struct:abuf	file:
b	deps/lua/src/ldo.c	/^  luai_jmpbuf b;$/;"	m	struct:lua_longjmp	file:
b	deps/lua/src/lobject.h	/^  int b;$/;"	m	union:__anon106
b	deps/lua/src/lua_bit.c	/^  UBits b;$/;"	m	union:__anon99	file:
b	deps/lua/src/lua_bit.c	/^  uint64_t b;$/;"	m	union:__anon99	file:
b	deps/lua/src/lua_cmsgpack.c	/^    unsigned char *b;$/;"	m	struct:mp_buf	file:
b	deps/lua/src/lundump.c	/^ Mbuffer* b;$/;"	m	struct:__anon97	file:
b0	deps/jemalloc/src/base.c	/^static base_t *b0;$/;"	v	file:
b0get	deps/jemalloc/src/base.c	/^b0get(void) {$/;"	f
b_pack	deps/lua/src/lua_struct.c	/^static int b_pack (lua_State *L) {$/;"	f	file:
b_size	deps/lua/src/lua_struct.c	/^static int b_size (lua_State *L) {$/;"	f	file:
b_unpack	deps/lua/src/lua_struct.c	/^static int b_unpack (lua_State *L) {$/;"	f	file:
backgroundRewriteDoneHandler	src/aof.c	/^void backgroundRewriteDoneHandler(int exitcode, int bysignal) {$/;"	f
backgroundSaveDoneHandler	src/rdb.c	/^void backgroundSaveDoneHandler(int exitcode, int bysignal) {$/;"	f
backgroundSaveDoneHandlerDisk	src/rdb.c	/^static void backgroundSaveDoneHandlerDisk(int exitcode, int bysignal) {$/;"	f	file:
backgroundSaveDoneHandlerSocket	src/rdb.c	/^static void backgroundSaveDoneHandlerSocket(int exitcode, int bysignal) {$/;"	f	file:
background_duration	src/module.c	/^    uint64_t background_duration; \/* Current command background time duration.$/;"	m	struct:RedisModuleBlockedClient	file:
background_thread	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	background_thread_stats_t background_thread;$/;"	m	struct:ctl_stats_s
background_thread_boot0	deps/jemalloc/src/background_thread.c	/^background_thread_boot0(void) {$/;"	f
background_thread_boot1	deps/jemalloc/src/background_thread.c	/^background_thread_boot1(tsdn_t *tsdn) {$/;"	f
background_thread_ctl	deps/jemalloc/src/ctl.c	/^background_thread_ctl(tsd_t *tsd, const size_t *mib, size_t miblen,$/;"	f	file:
background_thread_enabled	deps/jemalloc/include/jemalloc/internal/background_thread_inlines.h	/^background_thread_enabled(void) {$/;"	f
background_thread_enabled_set	deps/jemalloc/include/jemalloc/internal/background_thread_inlines.h	/^background_thread_enabled_set(tsdn_t *tsdn, bool state) {$/;"	f
background_thread_enabled_state	deps/jemalloc/src/background_thread.c	/^atomic_b_t background_thread_enabled_state;$/;"	v
background_thread_indefinite_sleep	deps/jemalloc/include/jemalloc/internal/background_thread_inlines.h	/^background_thread_indefinite_sleep(background_thread_info_t *info) {$/;"	f
background_thread_info	deps/jemalloc/src/background_thread.c	/^background_thread_info_t *background_thread_info;$/;"	v
background_thread_info_s	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^struct background_thread_info_s {$/;"	s
background_thread_info_t	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^typedef struct background_thread_info_s background_thread_info_t;$/;"	t	typeref:struct:background_thread_info_s
background_thread_lock	deps/jemalloc/src/background_thread.c	/^malloc_mutex_t background_thread_lock;$/;"	v
background_thread_paused	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^	background_thread_paused,$/;"	e	enum:__anon147
background_thread_started	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^	background_thread_started,$/;"	e	enum:__anon147
background_thread_state_t	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^} background_thread_state_t;$/;"	t	typeref:enum:__anon147
background_thread_stats_s	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^struct background_thread_stats_s {$/;"	s
background_thread_stats_t	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^typedef struct background_thread_stats_s background_thread_stats_t;$/;"	t	typeref:struct:background_thread_stats_s
background_thread_stopped	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^	background_thread_stopped,$/;"	e	enum:__anon147
background_thread_wakeup_time_get	deps/jemalloc/include/jemalloc/internal/background_thread_inlines.h	/^background_thread_wakeup_time_get(background_thread_info_t *info) {$/;"	f
background_thread_wakeup_time_set	deps/jemalloc/include/jemalloc/internal/background_thread_inlines.h	/^background_thread_wakeup_time_set(tsdn_t *tsdn, background_thread_info_t *info,$/;"	f
background_timer	src/module.c	/^    monotime background_timer; \/* Timer tracking the start of background work *\/$/;"	m	struct:RedisModuleBlockedClient	file:
backlog	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	size_t			backlog[SMOOTHSTEP_NSTEPS];$/;"	m	struct:arena_decay_s
backupDb	src/db.c	/^dbBackup *backupDb(void) {$/;"	f
backup_dir	src/redis-cli.c	/^    char *backup_dir;$/;"	m	struct:clusterManagerCommand	file:
backward	src/server.h	/^    struct zskiplistNode *backward;$/;"	m	struct:zskiplistNode	typeref:struct:zskiplistNode::zskiplistNode
balance	src/redis-cli.c	/^    int balance;    \/* Used by rebalance *\/$/;"	m	struct:clusterManagerNode	file:
barg	deps/lua/src/lua_bit.c	/^static UBits barg(lua_State *L, int idx)$/;"	f	file:
base	deps/hiredis/adapters/libevent.h	/^    struct event_base *base;$/;"	m	struct:redisLibeventEvents	typeref:struct:redisLibeventEvents::event_base
base	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	atomic_zu_t		base; \/* Derived. *\/$/;"	m	struct:arena_stats_s
base	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	base_t			*base;$/;"	m	struct:arena_s
base	deps/lua/src/lstate.h	/^  StkId base;  \/* base for this function *\/$/;"	m	struct:CallInfo
base	deps/lua/src/lstate.h	/^  StkId base;  \/* base of current function *\/$/;"	m	struct:lua_State
base	src/setproctitle.c	/^	char *base, *end;$/;"	m	struct:__anon60	file:
baseCcalls	deps/lua/src/lstate.h	/^  unsigned short baseCcalls;  \/* nested C calls when resuming coroutine *\/$/;"	m	struct:lua_State
base_alloc	deps/jemalloc/src/base.c	/^base_alloc(tsdn_t *tsdn, base_t *base, size_t size, size_t alignment) {$/;"	f
base_alloc_extent	deps/jemalloc/src/base.c	/^base_alloc_extent(tsdn_t *tsdn, base_t *base) {$/;"	f
base_alloc_impl	deps/jemalloc/src/base.c	/^base_alloc_impl(tsdn_t *tsdn, base_t *base, size_t size, size_t alignment,$/;"	f	file:
base_auto_thp_switch	deps/jemalloc/src/base.c	/^base_auto_thp_switch(tsdn_t *tsdn, base_t *base) {$/;"	f	file:
base_block_alloc	deps/jemalloc/src/base.c	/^base_block_alloc(tsdn_t *tsdn, base_t *base, extent_hooks_t *extent_hooks,$/;"	f	file:
base_block_s	deps/jemalloc/include/jemalloc/internal/base_structs.h	/^struct base_block_s {$/;"	s
base_block_t	deps/jemalloc/include/jemalloc/internal/base_types.h	/^typedef struct base_block_s base_block_t;$/;"	t	typeref:struct:base_block_s
base_boot	deps/jemalloc/src/base.c	/^base_boot(tsdn_t *tsdn) {$/;"	f
base_ci	deps/lua/src/lstate.h	/^  CallInfo *base_ci;  \/* array of CallInfo's *\/$/;"	m	struct:lua_State
base_delete	deps/jemalloc/src/base.c	/^base_delete(tsdn_t *tsdn, base_t *base) {$/;"	f
base_extent_alloc	deps/jemalloc/src/base.c	/^base_extent_alloc(tsdn_t *tsdn, base_t *base, size_t size, size_t alignment) {$/;"	f	file:
base_extent_bump_alloc	deps/jemalloc/src/base.c	/^base_extent_bump_alloc(base_t *base, extent_t *extent, size_t size,$/;"	f	file:
base_extent_bump_alloc_helper	deps/jemalloc/src/base.c	/^base_extent_bump_alloc_helper(extent_t *extent, size_t *gap_size, size_t size,$/;"	f	file:
base_extent_bump_alloc_post	deps/jemalloc/src/base.c	/^base_extent_bump_alloc_post(base_t *base, extent_t *extent, size_t gap_size,$/;"	f	file:
base_extent_hooks_get	deps/jemalloc/src/base.c	/^base_extent_hooks_get(base_t *base) {$/;"	f
base_extent_hooks_set	deps/jemalloc/src/base.c	/^base_extent_hooks_set(base_t *base, extent_hooks_t *extent_hooks) {$/;"	f
base_extent_init	deps/jemalloc/src/base.c	/^base_extent_init(size_t *extent_sn_next, extent_t *extent, void *addr,$/;"	f	file:
base_funcs	deps/lua/src/lbaselib.c	/^static const luaL_Reg base_funcs[] = {$/;"	v	file:
base_get_num_blocks	deps/jemalloc/src/base.c	/^base_get_num_blocks(base_t *base, bool with_new_block) {$/;"	f	file:
base_ind_get	deps/jemalloc/include/jemalloc/internal/base_inlines.h	/^base_ind_get(const base_t *base) {$/;"	f
base_map	deps/jemalloc/src/base.c	/^base_map(tsdn_t *tsdn, extent_hooks_t *extent_hooks, unsigned ind, size_t size) {$/;"	f	file:
base_new	deps/jemalloc/src/base.c	/^base_new(tsdn_t *tsdn, unsigned ind, extent_hooks_t *extent_hooks) {$/;"	f
base_open	deps/lua/src/lbaselib.c	/^static void base_open (lua_State *L) {$/;"	f	file:
base_postfork_child	deps/jemalloc/src/base.c	/^base_postfork_child(tsdn_t *tsdn, base_t *base) {$/;"	f
base_postfork_parent	deps/jemalloc/src/base.c	/^base_postfork_parent(tsdn_t *tsdn, base_t *base) {$/;"	f
base_prefork	deps/jemalloc/src/base.c	/^base_prefork(tsdn_t *tsdn, base_t *base) {$/;"	f
base_s	deps/jemalloc/include/jemalloc/internal/base_structs.h	/^struct base_s {$/;"	s
base_stats_get	deps/jemalloc/src/base.c	/^base_stats_get(tsdn_t *tsdn, base_t *base, size_t *allocated, size_t *resident,$/;"	f
base_t	deps/jemalloc/include/jemalloc/internal/base_types.h	/^typedef struct base_s base_t;$/;"	t	typeref:struct:base_s
base_unmap	deps/jemalloc/src/base.c	/^base_unmap(tsdn_t *tsdn, extent_hooks_t *extent_hooks, unsigned ind, void *addr,$/;"	f	file:
basehookcount	deps/lua/src/lstate.h	/^  int basehookcount;$/;"	m	struct:lua_State
basic_iter_next	deps/hdr_histogram/hdr_histogram.c	/^static bool basic_iter_next(struct hdr_iter *iter)$/;"	f	file:
basics	tests/unit/type/zset.tcl	/^    proc basics {encoding} {$/;"	p
batch_free	deps/jemalloc/src/zone.c	/^	void (*batch_free)(struct _malloc_zone_t *, void **, unsigned);$/;"	m	struct:_malloc_zone_t	file:
batch_malloc	deps/jemalloc/src/zone.c	/^	unsigned (*batch_malloc)(struct _malloc_zone_t *, size_t, void **, unsigned);$/;"	m	struct:_malloc_zone_t	file:
bc	tests/modules/blockedclient.c	/^    RedisModuleBlockedClient *bc;$/;"	m	struct:__anon75	file:
bcastState	src/tracking.c	/^typedef struct bcastState {$/;"	s	file:
bcastState	src/tracking.c	/^} bcastState;$/;"	t	typeref:struct:bcastState	file:
before	exp/slot_log_dealer.py	/^    before = [_.split("_") for _ in before ]$/;"	v
before	exp/slot_log_dealer.py	/^    before = before.strip().split()[1].split(",")[:-1]$/;"	v
before	exp/slot_log_dealer.py	/^    before = f_list[i]$/;"	v
beforePropagateMulti	src/multi.c	/^void beforePropagateMulti() {$/;"	f
beforeSleep	src/server.c	/^void beforeSleep(struct aeEventLoop *eventLoop) {$/;"	f
before_str	tests/modules/testrdb.c	/^RedisModuleString *before_str = NULL;$/;"	v
beforesleep	src/ae.h	/^    aeBeforeSleepProc *beforesleep;$/;"	m	struct:aeEventLoop
beginResultEmission	src/t_zset.c	/^    zrangeResultBeginFunction            beginResultEmission;$/;"	m	struct:zrange_result_handler	file:
benchmark	src/redis-benchmark.c	/^static void benchmark(char *title, char *cmd, int len) {$/;"	f	file:
benchmarkThread	src/redis-benchmark.c	/^typedef struct benchmarkThread {$/;"	s	file:
benchmarkThread	src/redis-benchmark.c	/^} benchmarkThread;$/;"	t	typeref:struct:benchmarkThread	file:
benchmarkVersion	src/redis-benchmark.c	/^static sds benchmarkVersion(void) {$/;"	f	file:
bg_block_op	tests/helpers/bg_block_op.tcl	/^proc bg_block_op {host port db ops tls} {$/;"	p
bg_call_data	tests/modules/blockedclient.c	/^} bg_call_data;$/;"	t	typeref:struct:__anon75	file:
bg_call_worker	tests/modules/blockedclient.c	/^void *bg_call_worker(void *arg) {$/;"	f
bg_complex_data	tests/helpers/bg_complex_data.tcl	/^proc bg_complex_data {host port db ops tls} {$/;"	p
bg_unlink	src/replication.c	/^int bg_unlink(const char *filename) {$/;"	f
bgrewriteaofCommand	src/aof.c	/^void bgrewriteaofCommand(client *c) {$/;"	f
bgsaveCommand	src/rdb.c	/^void bgsaveCommand(client *c) {$/;"	f
bgsave_cpulist	src/server.h	/^    char *bgsave_cpulist; \/* cpu affinity list of bgsave process. *\/$/;"	m	struct:redisServer
bgsaveerr	src/server.h	/^    *outofrangeerr, *noscripterr, *loadingerr, *slowscripterr, *bgsaveerr,$/;"	m	struct:sharedObjectsStruct
biggest	src/redis-cli.c	/^    unsigned long long biggest;$/;"	m	struct:__anon14	file:
biggest_key	src/redis-cli.c	/^    sds biggest_key;$/;"	m	struct:__anon14	file:
bigkeys	src/redis-cli.c	/^    int bigkeys;$/;"	m	struct:config	file:
bin_info_s	deps/jemalloc/include/jemalloc/internal/bin.h	/^struct bin_info_s {$/;"	s
bin_info_t	deps/jemalloc/include/jemalloc/internal/bin.h	/^typedef struct bin_info_s bin_info_t;$/;"	t	typeref:struct:bin_info_s
bin_infos	deps/jemalloc/src/bin.c	/^const bin_info_t bin_infos[NBINS] = {$/;"	v
bin_init	deps/jemalloc/src/bin.c	/^bin_init(bin_t *bin) {$/;"	f
bin_postfork_child	deps/jemalloc/src/bin.c	/^bin_postfork_child(tsdn_t *tsdn, bin_t *bin) {$/;"	f
bin_postfork_parent	deps/jemalloc/src/bin.c	/^bin_postfork_parent(tsdn_t *tsdn, bin_t *bin) {$/;"	f
bin_prefork	deps/jemalloc/src/bin.c	/^bin_prefork(tsdn_t *tsdn, bin_t *bin) {$/;"	f
bin_s	deps/jemalloc/include/jemalloc/internal/bin.h	/^struct bin_s {$/;"	s
bin_stats_merge	deps/jemalloc/include/jemalloc/internal/bin.h	/^bin_stats_merge(tsdn_t *tsdn, bin_stats_t *dst_bin_stats, bin_t *bin) {$/;"	f
bin_stats_s	deps/jemalloc/include/jemalloc/internal/bin_stats.h	/^struct bin_stats_s {$/;"	s
bin_stats_t	deps/jemalloc/include/jemalloc/internal/bin_stats.h	/^typedef struct bin_stats_s bin_stats_t;$/;"	t	typeref:struct:bin_stats_s
bin_t	deps/jemalloc/include/jemalloc/internal/bin.h	/^typedef struct bin_s bin_t;$/;"	t	typeref:struct:bin_s
bind	deps/hiredis/sockcompat.h	81;"	d
bindaddr	src/server.h	/^    char *bindaddr[CONFIG_BINDADDR_MAX]; \/* Addresses we should bind to *\/$/;"	m	struct:redisServer
bindaddr_count	src/server.h	/^    int bindaddr_count;         \/* Number of addresses in server.bindaddr[] *\/$/;"	m	struct:redisServer
binind_compute	deps/jemalloc/test/unit/pack.c	/^binind_compute(void) {$/;"	f	file:
bins	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	bin_t			bins[NBINS];$/;"	m	struct:arena_s
bins_large	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^	cache_bin_t *bins_large;$/;"	m	struct:cache_bin_array_descriptor_s
bins_large	deps/jemalloc/include/jemalloc/internal/tcache_structs.h	/^	cache_bin_t	bins_large[NSIZES-NBINS];$/;"	m	struct:tcache_s
bins_small	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^	cache_bin_t *bins_small;$/;"	m	struct:cache_bin_array_descriptor_s
bins_small	deps/jemalloc/include/jemalloc/internal/tcache_structs.h	/^	cache_bin_t	bins_small[NBINS];$/;"	m	struct:tcache_s
bioCreateCloseJob	src/bio.c	/^void bioCreateCloseJob(int fd) {$/;"	f
bioCreateFsyncJob	src/bio.c	/^void bioCreateFsyncJob(int fd) {$/;"	f
bioCreateLazyFreeJob	src/bio.c	/^void bioCreateLazyFreeJob(lazy_free_fn free_fn, int arg_count, ...) {$/;"	f
bioInit	src/bio.c	/^void bioInit(void) {$/;"	f
bioKillThreads	src/bio.c	/^void bioKillThreads(void) {$/;"	f
bioPendingJobsOfType	src/bio.c	/^unsigned long long bioPendingJobsOfType(int type) {$/;"	f
bioProcessBackgroundJobs	src/bio.c	/^void *bioProcessBackgroundJobs(void *arg) {$/;"	f
bioSubmitJob	src/bio.c	/^void bioSubmitJob(int type, struct bio_job *job) {$/;"	f
bioWaitStepOfType	src/bio.c	/^unsigned long long bioWaitStepOfType(int type) {$/;"	f
bio_cpulist	src/server.h	/^    char *bio_cpulist; \/* cpu affinity list of bio thread. *\/$/;"	m	struct:redisServer
bio_job	src/bio.c	/^struct bio_job {$/;"	s	file:
bio_jobs	src/bio.c	/^static list *bio_jobs[BIO_NUM_OPS];$/;"	v	file:
bio_mutex	src/bio.c	/^static pthread_mutex_t bio_mutex[BIO_NUM_OPS];$/;"	v	file:
bio_newjob_cond	src/bio.c	/^static pthread_cond_t bio_newjob_cond[BIO_NUM_OPS];$/;"	v	file:
bio_pending	src/bio.c	/^static unsigned long long bio_pending[BIO_NUM_OPS];$/;"	v	file:
bio_step_cond	src/bio.c	/^static pthread_cond_t bio_step_cond[BIO_NUM_OPS];$/;"	v	file:
bio_threads	src/bio.c	/^static pthread_t bio_threads[BIO_NUM_OPS];$/;"	v	file:
bisect	deps/lua/test/bisect.lua	/^function bisect(f,a,b,fa,fb)$/;"	f
bit2mask	deps/lua/src/lgc.h	31;"	d
bit_bnot	deps/lua/src/lua_bit.c	/^static int bit_bnot(lua_State *L) { BRET(~barg(L, 1)) }$/;"	f	file:
bit_bswap	deps/lua/src/lua_bit.c	/^static int bit_bswap(lua_State *L)$/;"	f	file:
bit_funcs	deps/lua/src/lua_bit.c	/^static const struct luaL_Reg bit_funcs[] = {$/;"	v	typeref:struct:luaL_Reg	file:
bit_tobit	deps/lua/src/lua_bit.c	/^static int bit_tobit(lua_State *L) { BRET(barg(L, 1)) }$/;"	f	file:
bit_tohex	deps/lua/src/lua_bit.c	/^static int bit_tohex(lua_State *L)$/;"	f	file:
bitcountCommand	src/bitops.c	/^void bitcountCommand(client *c) {$/;"	f
bitfieldCommand	src/bitops.c	/^void bitfieldCommand(client *c) {$/;"	f
bitfieldGeneric	src/bitops.c	/^void bitfieldGeneric(client *c, int flags) {$/;"	f
bitfieldOp	src/bitops.c	/^struct bitfieldOp {$/;"	s	file:
bitfieldroCommand	src/bitops.c	/^void bitfieldroCommand(client *c) {$/;"	f
bitlen	src/sha256.h	/^	unsigned long long bitlen;$/;"	m	struct:__anon68
bitmap	deps/jemalloc/include/jemalloc/internal/arena_structs_a.h	/^	bitmap_t	bitmap[BITMAP_GROUPS_MAX];$/;"	m	struct:arena_slab_data_s
bitmap	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^	bitmap_t		bitmap[BITMAP_GROUPS(NPSIZES+1)];$/;"	m	struct:extents_s
bitmapClearBit	src/cluster.c	/^void bitmapClearBit(unsigned char *bitmap, int pos) {$/;"	f
bitmapSetBit	src/cluster.c	/^void bitmapSetBit(unsigned char *bitmap, int pos) {$/;"	f
bitmapTestBit	src/cluster.c	/^int bitmapTestBit(unsigned char *bitmap, int pos) {$/;"	f
bitmap_ffu	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^bitmap_ffu(const bitmap_t *bitmap, const bitmap_info_t *binfo, size_t min_bit) {$/;"	f
bitmap_full	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^bitmap_full(bitmap_t *bitmap, const bitmap_info_t *binfo) {$/;"	f
bitmap_get	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^bitmap_get(bitmap_t *bitmap, const bitmap_info_t *binfo, size_t bit) {$/;"	f
bitmap_info	deps/jemalloc/include/jemalloc/internal/bin.h	/^	bitmap_info_t		bitmap_info;$/;"	m	struct:bin_info_s
bitmap_info_init	deps/jemalloc/src/bitmap.c	/^bitmap_info_init(bitmap_info_t *binfo, size_t nbits) {$/;"	f
bitmap_info_ngroups	deps/jemalloc/src/bitmap.c	/^bitmap_info_ngroups(const bitmap_info_t *binfo) {$/;"	f	file:
bitmap_info_s	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^typedef struct bitmap_info_s {$/;"	s
bitmap_info_t	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^} bitmap_info_t;$/;"	t	typeref:struct:bitmap_info_s
bitmap_init	deps/jemalloc/src/bitmap.c	/^bitmap_init(bitmap_t *bitmap, const bitmap_info_t *binfo, bool fill) {$/;"	f
bitmap_level_s	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^typedef struct bitmap_level_s {$/;"	s
bitmap_level_t	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^} bitmap_level_t;$/;"	t	typeref:struct:bitmap_level_s
bitmap_set	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^bitmap_set(bitmap_t *bitmap, const bitmap_info_t *binfo, size_t bit) {$/;"	f
bitmap_sfu	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^bitmap_sfu(bitmap_t *bitmap, const bitmap_info_t *binfo) {$/;"	f
bitmap_size	deps/jemalloc/src/bitmap.c	/^bitmap_size(const bitmap_info_t *binfo) {$/;"	f
bitmap_t	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^typedef unsigned long bitmap_t;$/;"	t
bitmap_unset	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^bitmap_unset(bitmap_t *bitmap, const bitmap_info_t *binfo, size_t bit) {$/;"	f
bitmask	deps/lua/src/lgc.h	30;"	d
bitopCommand	src/bitops.c	/^void bitopCommand(client *c) {$/;"	f
bitposCommand	src/bitops.c	/^void bitposCommand(client *c) {$/;"	f
bits	deps/jemalloc/include/jemalloc/internal/rtree.h	/^	unsigned		bits;$/;"	m	struct:rtree_level_s
bits	src/bitops.c	/^    int bits;           \/* Integer bitfield bits width. *\/$/;"	m	struct:bitfieldOp	file:
bits	src/geohash.h	/^    uint64_t bits;$/;"	m	struct:__anon47
bits_64	deps/jemalloc/scripts/gen_run_tests.py	/^bits_64 = sys.maxsize > 2**32$/;"	v
bkinfo	src/blocked.c	/^typedef struct bkinfo {$/;"	s	file:
bkinfo	src/blocked.c	/^} bkinfo;$/;"	t	typeref:struct:bkinfo	file:
bl	deps/lua/src/lparser.h	/^  struct BlockCnt *bl;  \/* chain of current blocks *\/$/;"	m	struct:FuncState	typeref:struct:FuncState::BlockCnt
black2gray	deps/lua/src/lgc.c	38;"	d	file:
blk	src/sha1.c	43;"	d	file:
blk0	src/sha1.c	36;"	d	file:
blk0	src/sha1.c	39;"	d	file:
blmove	src/server.h	/^    *rpop, *lpop, *lpush, *rpoplpush, *lmove, *blmove, *zpopmin, *zpopmax,$/;"	m	struct:sharedObjectsStruct
blmoveCommand	src/t_list.c	/^void blmoveCommand(client *c) {$/;"	f
blmoveGenericCommand	src/t_list.c	/^void blmoveGenericCommand(client *c, int wherefrom, int whereto, mstime_t timeout) {$/;"	f
block	deps/lua/src/lparser.c	/^static void block (LexState *ls) {$/;"	f	file:
blockClient	src/blocked.c	/^void blockClient(client *c, int btype) {$/;"	f
blockForKeys	src/blocked.c	/^void blockForKeys(client *c, int btype, robj **keys, int numkeys, mstime_t timeout, robj *target, struct listPos *listpos, streamID *ids) {$/;"	f
block_client	src/cluster.h	/^    redisContext *block_client;$/;"	m	struct:clusterNode
block_follow	deps/lua/src/lparser.c	/^static int block_follow (int token) {$/;"	f	file:
blocked_client	src/module.c	/^    struct RedisModuleBlockedClient *blocked_client; \/* Blocked client for$/;"	m	struct:RedisModuleCtx	typeref:struct:RedisModuleCtx::RedisModuleBlockedClient	file:
blocked_clients	src/module.c	/^    int blocked_clients;         \/* Count of RedisModuleBlockedClient in this module. *\/$/;"	m	struct:RedisModule	file:
blocked_clients	src/server.h	/^    unsigned int blocked_clients;   \/* # of clients executing a blocking cmd.*\/$/;"	m	struct:redisServer
blocked_clients_by_type	src/server.h	/^    unsigned int blocked_clients_by_type[BLOCKED_NUM];$/;"	m	struct:redisServer
blocked_last_cron	src/server.h	/^    long long blocked_last_cron; \/* Indicate the mstime of the last time we did cron jobs from a blocking operation *\/$/;"	m	struct:redisServer
blocked_on_keys	src/module.c	/^    int blocked_on_keys;    \/* If blocked via RM_BlockClientOnKeys(). *\/$/;"	m	struct:RedisModuleBlockedClient	file:
blocked_privdata	src/module.c	/^    void *blocked_privdata;         \/* Privdata set when unblocking a client. *\/$/;"	m	struct:RedisModuleCtx	file:
blocked_ready_key	src/module.c	/^    RedisModuleString *blocked_ready_key; \/* Key ready when the reply callback$/;"	m	struct:RedisModuleCtx	file:
blockingGenericZpopCommand	src/t_zset.c	/^void blockingGenericZpopCommand(client *c, int where) {$/;"	f
blockingOperationEnds	src/server.c	/^void blockingOperationEnds() {$/;"	f
blockingOperationStarts	src/server.c	/^void blockingOperationStarts() {$/;"	f
blockingPopGenericCommand	src/t_list.c	/^void blockingPopGenericCommand(client *c, int where) {$/;"	f
blockingState	src/server.h	/^typedef struct blockingState {$/;"	s
blockingState	src/server.h	/^} blockingState;$/;"	t	typeref:struct:blockingState
blocking_connect	src/connection.h	/^    int (*blocking_connect)(struct connection *conn, const char *addr, int port, long long timeout);$/;"	m	struct:ConnectionType
blocking_keys	src/server.h	/^    dict *blocking_keys;        \/* Keys with clients waiting for data (BLPOP)*\/$/;"	m	struct:redisDb
blocking_op_nesting	src/server.h	/^    size_t blocking_op_nesting; \/* Nesting level of blocking operation, used to reset blocked_last_cron. *\/$/;"	m	struct:redisServer
blockonkeys_blpopn	tests/modules/blockonkeys.c	/^int blockonkeys_blpopn(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
blockonkeys_blpopn_reply_callback	tests/modules/blockonkeys.c	/^int blockonkeys_blpopn_reply_callback(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
blockonkeys_blpopn_timeout_callback	tests/modules/blockonkeys.c	/^int blockonkeys_blpopn_timeout_callback(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
blockonkeys_lpush	tests/modules/blockonkeys.c	/^int blockonkeys_lpush(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
blockonkeys_popall	tests/modules/blockonkeys.c	/^int blockonkeys_popall(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
blockonkeys_popall_reply_callback	tests/modules/blockonkeys.c	/^int blockonkeys_popall_reply_callback(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
blockonkeys_popall_timeout_callback	tests/modules/blockonkeys.c	/^int blockonkeys_popall_timeout_callback(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
blocks	deps/jemalloc/include/jemalloc/internal/base_structs.h	/^	base_block_t	*blocks;$/;"	m	struct:base_s
blocks_in_use	deps/jemalloc/src/zone.c	/^	unsigned blocks_in_use;$/;"	m	struct:malloc_statistics_t	file:
blpopCommand	src/t_list.c	/^void blpopCommand(client *c) {$/;"	f
body	deps/lua/src/lparser.c	/^static void body (LexState *ls, expdesc *e, int needself, int line) {$/;"	f	file:
bookmark_count	src/quicklist.h	/^    unsigned int bookmark_count: QL_BM_BITS;$/;"	m	struct:quicklist
bookmarks	src/quicklist.h	/^    quicklistBookmark bookmarks[];$/;"	m	struct:quicklist
bool	deps/jemalloc/include/msvc_compat/C99/stdbool.h	14;"	d
boolConfigData	src/config.c	/^typedef struct boolConfigData {$/;"	s	file:
boolConfigData	src/config.c	/^} boolConfigData;$/;"	t	typeref:struct:boolConfigData	file:
boolK	deps/lua/src/lcode.c	/^static int boolK (FuncState *fs, int b) {$/;"	f	file:
bool_val	deps/jemalloc/include/jemalloc/internal/emitter.h	/^		bool bool_val;$/;"	m	union:emitter_col_s::__anon136
boolean	deps/lua/src/lua_cjson.c	/^        int boolean;$/;"	m	union:__anon103::__anon104	file:
bootstrap_calloc	deps/jemalloc/src/jemalloc.c	/^bootstrap_calloc(size_t num, size_t size) {$/;"	f
bootstrap_free	deps/jemalloc/src/jemalloc.c	/^bootstrap_free(void *ptr) {$/;"	f
bootstrap_malloc	deps/jemalloc/src/jemalloc.c	/^bootstrap_malloc(size_t size) {$/;"	f
bounds	src/geohash.h	/^    double bounds[4]; \/* bounds[0]: min_lon, bounds[1]: min_lat$/;"	m	struct:__anon51
bp	src/scripting.c	/^    int bp[LDB_BREAKPOINTS_MAX]; \/* An array of breakpoints line numbers. *\/$/;"	m	struct:ldbState	file:
bpcount	src/scripting.c	/^    int bpcount; \/* Number of valid entries inside bp. *\/$/;"	m	struct:ldbState	file:
bpop	src/server.h	/^    blockingState bpop;     \/* blocking state *\/$/;"	m	struct:client
bpop_reply_callback	tests/modules/blockonkeys.c	/^int bpop_reply_callback(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
bpop_timeout_callback	tests/modules/blockonkeys.c	/^int bpop_timeout_callback(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
bpopgt_free_privdata	tests/modules/blockonkeys.c	/^void bpopgt_free_privdata(RedisModuleCtx *ctx, void *privdata) {$/;"	f
bpopgt_reply_callback	tests/modules/blockonkeys.c	/^int bpopgt_reply_callback(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
bpopgt_timeout_callback	tests/modules/blockonkeys.c	/^int bpopgt_timeout_callback(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
bpoppush_free_privdata	tests/modules/blockonkeys.c	/^void bpoppush_free_privdata(RedisModuleCtx *ctx, void *privdata) {$/;"	f
bpoppush_reply_callback	tests/modules/blockonkeys.c	/^int bpoppush_reply_callback(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
bpoppush_timeout_callback	tests/modules/blockonkeys.c	/^int bpoppush_timeout_callback(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
breaklist	deps/lua/src/lparser.c	/^  int breaklist;  \/* list of jumps out of this loop *\/$/;"	m	struct:BlockCnt	file:
breakstat	deps/lua/src/lparser.c	/^static void breakstat (LexState *ls) {$/;"	f	file:
broadcastCommandInHotGroup	src/cluster.c	/^void broadcastCommandInHotGroup(int slot) {$/;"	f
brol	deps/lua/src/lua_bit.c	109;"	d	file:
bror	deps/lua/src/lua_bit.c	110;"	d	file:
brpopCommand	src/t_list.c	/^void brpopCommand(client *c) {$/;"	f
brpoplpushCommand	src/t_list.c	/^void brpoplpushCommand(client *c) {$/;"	f
bsar	deps/lua/src/lua_bit.c	108;"	d	file:
bshl	deps/lua/src/lua_bit.c	106;"	d	file:
bshr	deps/lua/src/lua_bit.c	107;"	d	file:
bstats	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	bin_stats_t bstats[NBINS];$/;"	m	struct:ctl_arena_stats_s
bt	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	prof_bt_t		bt;$/;"	m	struct:prof_gctx_s
bt	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	prof_bt_t	*bt;$/;"	m	struct:__anon154
bt2gctx	deps/jemalloc/src/prof.c	/^static ckh_t		bt2gctx;$/;"	v	file:
bt2gctx_mtx	deps/jemalloc/src/prof.c	/^malloc_mutex_t		bt2gctx_mtx;$/;"	v
bt2tctx	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	ckh_t			bt2tctx;$/;"	m	struct:prof_tdata_s
bt_init	deps/jemalloc/src/prof.c	/^bt_init(prof_bt_t *bt, void **vec) {$/;"	f
btalloc	deps/jemalloc/test/src/btalloc.c	/^btalloc(size_t size, unsigned bits) {$/;"	f
btalloc_n_gen	deps/jemalloc/test/include/test/btalloc.h	9;"	d
btalloc_n_proto	deps/jemalloc/test/include/test/btalloc.h	4;"	d
btype	src/server.h	/^    int btype;              \/* Type of blocking op if CLIENT_BLOCKED. *\/$/;"	m	struct:client
bucket_count	deps/hdr_histogram/hdr_histogram.h	/^    int32_t bucket_count;$/;"	m	struct:hdr_histogram
bucket_count	deps/hdr_histogram/hdr_histogram.h	/^    int32_t bucket_count;$/;"	m	struct:hdr_histogram_bucket_config
buckets	src/geo.h	/^    size_t buckets;$/;"	m	struct:geoArray
buckets_needed_to_cover_value	deps/hdr_histogram/hdr_histogram.c	/^static int32_t buckets_needed_to_cover_value(int64_t value, int32_t sub_bucket_count, int32_t unit_magnitude)$/;"	f	file:
buf	deps/hiredis/read.h	/^    char *buf; \/* Read buffer *\/$/;"	m	struct:redisReader
buf	deps/hiredis/sds.h	/^    char buf[];$/;"	m	struct:hisdshdr16
buf	deps/hiredis/sds.h	/^    char buf[];$/;"	m	struct:hisdshdr32
buf	deps/hiredis/sds.h	/^    char buf[];$/;"	m	struct:hisdshdr5
buf	deps/hiredis/sds.h	/^    char buf[];$/;"	m	struct:hisdshdr64
buf	deps/hiredis/sds.h	/^    char buf[];$/;"	m	struct:hisdshdr8
buf	deps/jemalloc/test/unit/emitter.c	/^	char *buf;$/;"	m	struct:buf_descriptor_s	file:
buf	deps/jemalloc/test/unit/stats_print.c	/^	char	*buf; \/* '\\0'-terminated. *\/$/;"	m	struct:parser_s	file:
buf	deps/linenoise/linenoise.c	/^    char *buf;          \/* Edited line buffer. *\/$/;"	m	struct:linenoiseState	file:
buf	deps/lua/src/strbuf.h	/^    char *buf;$/;"	m	struct:__anon105
buf	src/aof.c	/^    char buf[AOF_RW_BUF_BLOCK_SIZE];$/;"	m	struct:aofrwblock	file:
buf	src/rio.h	/^            sds buf;      \/* buffered data *\/$/;"	m	struct:_rio::__anon54::__anon57
buf	src/rio.h	/^            sds buf;$/;"	m	struct:_rio::__anon54::__anon58
buf	src/sds.h	/^    char buf[];$/;"	m	struct:sdshdr16
buf	src/sds.h	/^    char buf[];$/;"	m	struct:sdshdr32
buf	src/sds.h	/^    char buf[];$/;"	m	struct:sdshdr5
buf	src/sds.h	/^    char buf[];$/;"	m	struct:sdshdr64
buf	src/sds.h	/^    char buf[];$/;"	m	struct:sdshdr8
buf	src/server.h	/^    char buf[PROTO_REPLY_CHUNK_BYTES];$/;"	m	struct:client
buf	src/server.h	/^    char buf[];$/;"	m	struct:clientReplyBlock
buf_descriptor_s	deps/jemalloc/test/unit/emitter.c	/^struct buf_descriptor_s {$/;"	s	file:
buf_descriptor_t	deps/jemalloc/test/unit/emitter.c	/^typedef struct buf_descriptor_s buf_descriptor_t;$/;"	t	typeref:struct:buf_descriptor_s	file:
buferror	deps/jemalloc/src/malloc_io.c	/^buferror(int err, char *buf, size_t buflen) {$/;"	f
buff	deps/lua/src/lauxlib.c	/^  char buff[LUAL_BUFFERSIZE];$/;"	m	struct:LoadF	file:
buff	deps/lua/src/ldo.c	/^  Mbuffer buff;  \/* buffer to be used by the scanner *\/$/;"	m	struct:SParser	file:
buff	deps/lua/src/llex.h	/^  Mbuffer *buff;  \/* buffer for tokens *\/$/;"	m	struct:LexState
buff	deps/lua/src/lstate.h	/^  Mbuffer buff;  \/* temporary buffer for string concatentation *\/$/;"	m	struct:global_State
buffer	deps/lua/src/lauxlib.h	/^  char buffer[LUAL_BUFFERSIZE];$/;"	m	struct:luaL_Buffer
buffer	deps/lua/src/lzio.h	/^  char *buffer;$/;"	m	struct:Mbuffer
buffer	src/rio.h	/^        } buffer;$/;"	m	union:_rio::__anon54	typeref:struct:_rio::__anon54::__anon55
buffer	src/sha1.h	/^    unsigned char buffer[64];$/;"	m	struct:__anon69
buffered	src/rio.h	/^            off_t buffered; \/* Bytes written since last fsync. *\/$/;"	m	struct:_rio::__anon54::__anon56
bufffree	deps/lua/src/lauxlib.c	393;"	d	file:
bufflen	deps/lua/src/lauxlib.c	392;"	d	file:
buffreplace	deps/lua/src/llex.c	/^static void buffreplace (LexState *ls, char from, char to) {$/;"	f	file:
buffsize	deps/lua/src/lzio.h	/^  size_t buffsize;$/;"	m	struct:Mbuffer
buflen	deps/linenoise/linenoise.c	/^    size_t buflen;      \/* Edited line buffer size. *\/$/;"	m	struct:linenoiseState	file:
bufpos	src/server.h	/^    int bufpos;$/;"	m	struct:client
bugReportEnd	src/debug.c	/^void bugReportEnd(int killViaSignal, int sig) {$/;"	f
bugReportStart	src/debug.c	/^void bugReportStart(void) {$/;"	f
bug_report_start	src/debug.c	/^static int bug_report_start = 0; \/* True if bug report header was already logged. *\/$/;"	v	file:
bug_report_start_mutex	src/debug.c	/^static pthread_mutex_t bug_report_start_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
buildAndLoadPhase	exp/exp1.sh	/^buildAndLoadPhase() {$/;"	f
buildC	cluster.sh	/^buildC() {$/;"	f
buildCluster	exp/1_build_redis_cluster.sh	/^buildCluster(){$/;"	f
buildCluster	exp/inithg.sh	/^buildCluster() {$/;"	f
buildClusterWithHG	exp/1_build_redis_cluster.sh	/^buildClusterWithHG() {$/;"	f
buildHGCluster	exp/7_public_func.sh	/^buildHGCluster() {$/;"	f
bulk_data	src/cluster.h	/^    unsigned char bulk_data[3]; \/* 3 bytes just as placeholder. *\/$/;"	m	struct:__anon36
bulk_data	src/cluster.h	/^    unsigned char bulk_data[8]; \/* 8 bytes just as placeholder. *\/$/;"	m	struct:__anon33
bulkhdr	src/server.h	/^    *bulkhdr[OBJ_SHARED_BULKHDR_LEN];  \/* "$<value>\\r\\n" *\/$/;"	m	struct:sharedObjectsStruct
bulklen	deps/hiredis/hiredis.c	/^static size_t bulklen(size_t len) {$/;"	f	file:
bulklen	src/server.h	/^    long bulklen;           \/* Length of bulk argument in multi bulk request. *\/$/;"	m	struct:client
bump_empty_alloc	deps/jemalloc/src/jemalloc.c	/^	bool bump_empty_alloc;$/;"	m	struct:static_opts_s	file:
busykeyerr	src/server.h	/^    *busykeyerr, *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,$/;"	m	struct:sharedObjectsStruct
bvalue	deps/lua/src/lobject.h	100;"	d
bytes	src/server.h	/^    size_t bytes;       \/* Bytes read \/ written so far. *\/$/;"	m	struct:RedisModuleIO
bytesToHuman	src/redis-cli.c	/^void bytesToHuman(char *s, long long n) {$/;"	f
bytesToHuman	src/server.c	/^void bytesToHuman(char *s, unsigned long long n) {$/;"	f
bytes_per_key	src/server.h	/^    size_t bytes_per_key;$/;"	m	struct:redisMemOverhead
bytes_until_sample	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	uint64_t		bytes_until_sample;$/;"	m	struct:prof_tdata_s
bzpopmaxCommand	src/t_zset.c	/^void bzpopmaxCommand(client *c) {$/;"	f
bzpopminCommand	src/t_zset.c	/^void bzpopminCommand(client *c) {$/;"	f
c	deps/hiredis/async.h	/^    redisContext c;$/;"	m	struct:redisAsyncContext
c	deps/lua/src/lobject.h	/^  CClosure c;$/;"	m	union:Closure
c	deps/lua/src/lua_struct.c	/^  char c;$/;"	m	struct:cD	file:
c	src/defrag.c	/^    streamConsumer *c;$/;"	m	struct:__anon72	file:
c	src/rand.c	/^static uint32_t x[3] = { X0, X1, X2 }, a[3] = { A0, A1, A2 }, c = C;$/;"	v	file:
c	src/tls.c	/^    connection c;$/;"	m	struct:tls_connection	file:
c99_snprintf	deps/hiredis/win32.h	/^__inline int c99_snprintf(char* str, size_t size, const char* format, ...)$/;"	f
c99_vsnprintf	deps/hiredis/win32.h	/^__inline int c99_vsnprintf(char* str, size_t size, const char* format, va_list ap)$/;"	f
cD	deps/lua/src/lua_struct.c	/^struct cD {$/;"	s	file:
ca_cert	deps/hiredis/test.c	/^        const char *ca_cert;$/;"	m	struct:config::__anon92	file:
ca_cert_dir	src/server.h	/^    char *ca_cert_dir;$/;"	m	struct:redisTLSContextConfig
ca_cert_file	src/server.h	/^    char *ca_cert_file;$/;"	m	struct:redisTLSContextConfig
cacert	src/cli_common.h	/^    char *cacert;$/;"	m	struct:cliSSLconfig
cacertdir	src/cli_common.h	/^    char *cacertdir;$/;"	m	struct:cliSSLconfig
cache	deps/jemalloc/include/jemalloc/internal/rtree_tsd.h	/^	rtree_ctx_cache_elm_t	cache[RTREE_CTX_NCACHE];$/;"	m	struct:rtree_ctx_s
cache	deps/lua/test/fib.lua	/^function cache(f)$/;"	f
cacheOps	src/cluster.h	/^typedef struct cacheOps {$/;"	s
cacheOps	src/cluster.h	/^} cacheOps;$/;"	t	typeref:struct:cacheOps
cache_bin_alloc_easy	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^cache_bin_alloc_easy(cache_bin_t *bin, bool *success) {$/;"	f
cache_bin_array_descriptor	deps/jemalloc/include/jemalloc/internal/tcache_structs.h	/^	cache_bin_array_descriptor_t cache_bin_array_descriptor;$/;"	m	struct:tcache_s
cache_bin_array_descriptor_init	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^cache_bin_array_descriptor_init(cache_bin_array_descriptor_t *descriptor,$/;"	f
cache_bin_array_descriptor_ql	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	ql_head(cache_bin_array_descriptor_t)	cache_bin_array_descriptor_ql;$/;"	m	struct:arena_s
cache_bin_array_descriptor_s	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^struct cache_bin_array_descriptor_s {$/;"	s
cache_bin_array_descriptor_t	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^typedef struct cache_bin_array_descriptor_s cache_bin_array_descriptor_t;$/;"	t	typeref:struct:cache_bin_array_descriptor_s
cache_bin_info_s	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^struct cache_bin_info_s {$/;"	s
cache_bin_info_t	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^typedef struct cache_bin_info_s cache_bin_info_t;$/;"	t	typeref:struct:cache_bin_info_s
cache_bin_s	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^struct cache_bin_s {$/;"	s
cache_bin_stats_s	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^struct cache_bin_stats_s {$/;"	s
cache_bin_stats_t	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^typedef struct cache_bin_stats_s cache_bin_stats_t;$/;"	t	typeref:struct:cache_bin_stats_s
cache_bin_sz_t	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^typedef int32_t cache_bin_sz_t;$/;"	t
cache_bin_t	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^typedef struct cache_bin_s cache_bin_t;$/;"	t	typeref:struct:cache_bin_s
cache_op_size	src/cluster.h	/^    int cache_op_size;$/;"	m	struct:slotState
cached	src/evict.c	/^    sds cached;                 \/* Cached SDS object for key name. *\/$/;"	m	struct:evictionPoolEntry	file:
cached_master	src/server.h	/^    client *cached_master; \/* Cached master to be reused for PSYNC. *\/$/;"	m	struct:redisServer
cached_op	src/cluster.h	/^    dict *cached_op;$/;"	m	struct:slotState
calc	exp/log_dealer.sh	/^calc() {$/;"	f
calcTowRow	exp/log_dealer.sh	/^calcTowRow() {$/;"	f
calculate_new_size	deps/lua/src/strbuf.c	/^static int calculate_new_size(strbuf_t *s, int len)$/;"	f	file:
call	src/server.c	/^void call(client *c, int flags) {$/;"	f
callBack	src/cluster.c	/^void callBack(connection* conn) {$/;"	f
callHandler	src/connhelpers.h	/^static inline int callHandler(connection *conn, ConnectionCallbackFunc handler) {$/;"	f
callTM	deps/lua/src/lvm.c	/^static void callTM (lua_State *L, const TValue *f, const TValue *p1,$/;"	f	file:
callTMres	deps/lua/src/lvm.c	/^static void callTMres (lua_State *L, StkId res, const TValue *f,$/;"	f	file:
call_binTM	deps/lua/src/lvm.c	/^static int call_binTM (lua_State *L, const TValue *p1, const TValue *p2,$/;"	f	file:
call_orderTM	deps/lua/src/lvm.c	/^static int call_orderTM (lua_State *L, const TValue *p1, const TValue *p2,$/;"	f	file:
callallgcTM	deps/lua/src/lstate.c	/^static void callallgcTM (lua_State *L, void *ud) {$/;"	f	file:
callback	src/module.c	/^    RedisModuleClusterMessageReceiver callback;$/;"	m	struct:moduleClusterReceiver	file:
callback	src/module.c	/^    RedisModuleCommandFilterFunc callback;$/;"	m	struct:RedisModuleCommandFilter	file:
callback	src/module.c	/^    RedisModuleEventCallback callback;$/;"	m	struct:RedisModuleEventListener	file:
callback	src/module.c	/^    RedisModuleTimerProc callback;      \/* The callback to invoke on expire. *\/$/;"	m	struct:RedisModuleTimer	file:
callbackDict	deps/hiredis/async.c	/^static dictType callbackDict = {$/;"	v	file:
callbackHash	deps/hiredis/async.c	/^static unsigned int callbackHash(const void *key) {$/;"	f	file:
callbackKeyCompare	deps/hiredis/async.c	/^static int callbackKeyCompare(void *privdata, const void *key1, const void *key2) {$/;"	f	file:
callbackKeyDestructor	deps/hiredis/async.c	/^static void callbackKeyDestructor(void *privdata, void *key) {$/;"	f	file:
callbackValDestructor	deps/hiredis/async.c	/^static void callbackValDestructor(void *privdata, void *val) {$/;"	f	file:
callbackValDup	deps/hiredis/async.c	/^static void *callbackValDup(void *privdata, const void *src) {$/;"	f	file:
called_alloc	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool called_alloc;$/;"	v
called_commit	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool called_commit;$/;"	v
called_dalloc	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool called_dalloc;$/;"	v
called_decommit	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool called_decommit;$/;"	v
called_destroy	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool called_destroy;$/;"	v
called_merge	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool called_merge;$/;"	v
called_purge_forced	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool called_purge_forced;$/;"	v
called_purge_lazy	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool called_purge_lazy;$/;"	v
called_split	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool called_split;$/;"	v
calloc	deps/jemalloc/src/zone.c	/^	void *(*calloc)(struct _malloc_zone_t *, size_t, size_t);$/;"	m	struct:_malloc_zone_t	file:
calloc	src/zmalloc.c	71;"	d	file:
calloc	src/zmalloc.c	76;"	d	file:
callocFn	deps/hiredis/alloc.h	/^    void *(*callocFn)(size_t,size_t);$/;"	m	struct:hiredisAllocFuncs
callrethooks	deps/lua/src/ldo.c	/^static StkId callrethooks (lua_State *L, StkId firstResult) {$/;"	f	file:
calls	src/server.h	/^    long long microseconds, calls, rejected_calls, failed_calls;$/;"	m	struct:redisCommand
canFeedReplicaReplBuffer	src/replication.c	/^int canFeedReplicaReplBuffer(client *replica) {$/;"	f
can_enable_background_thread	deps/jemalloc/src/background_thread.c	/^bool can_enable_background_thread;$/;"	v
cancelReplicationHandshake	src/replication.c	/^int cancelReplicationHandshake(int reconnect) {$/;"	f
cannot	deps/lua/src/luac.c	/^static void cannot(const char* what)$/;"	f	file:
cant_failover_reason	src/cluster.h	/^    int cant_failover_reason;   \/* Why a slave is currently not able to$/;"	m	struct:clusterState
capture	deps/lua/src/lstrlib.c	/^  } capture[LUA_MAXCAPTURES];$/;"	m	struct:MatchState	typeref:struct:MatchState::__anon114	file:
capture_to_close	deps/lua/src/lstrlib.c	/^static int capture_to_close (MatchState *ms) {$/;"	f	file:
card	src/hyperloglog.c	/^    uint8_t card[8];    \/* Cached cardinality, little endian. *\/$/;"	m	struct:hllhdr	file:
cassert	deps/jemalloc/include/jemalloc/internal/assert.h	51;"	d
cast	deps/lua/src/llimits.h	75;"	d
cast_byte	deps/lua/src/llimits.h	78;"	d
cast_int	deps/lua/src/llimits.h	80;"	d
cast_num	deps/lua/src/llimits.h	79;"	d
catAppendOnlyExpireAtCommand	src/aof.c	/^sds catAppendOnlyExpireAtCommand(sds buf, struct redisCommand *cmd, robj *key, robj *seconds) {$/;"	f
catAppendOnlyGenericCommand	src/aof.c	/^sds catAppendOnlyGenericCommand(sds dst, int argc, robj **argv) {$/;"	f
catClientInfoString	src/networking.c	/^sds catClientInfoString(sds s, client *client) {$/;"	f
cbopaque	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	void *cbopaque;$/;"	m	struct:emitter_s
cbuf	src/scripting.c	/^    sds cbuf;   \/* Debugger client command buffer. *\/$/;"	m	struct:ldbState	file:
cc	src/sentinel.c	/^    redisAsyncContext *cc; \/* Hiredis context for commands. *\/$/;"	m	struct:instanceLink	file:
cc_conn_time	src/sentinel.c	/^    mstime_t cc_conn_time; \/* cc connection time. *\/$/;"	m	struct:instanceLink	file:
ceil_npages	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	uint64_t		ceil_npages;$/;"	m	struct:arena_decay_s
ceillog2	deps/lua/src/lobject.h	367;"	d
cert	deps/hiredis/test.c	/^        const char *cert;$/;"	m	struct:config::__anon92	file:
cert	src/cli_common.h	/^    char *cert;$/;"	m	struct:cliSSLconfig
cert_file	src/server.h	/^    char *cert_file;                \/* Server side and optionally client side cert file name *\/$/;"	m	struct:redisTLSContextConfig
cfd	src/server.h	/^    socketFds cfd;              \/* Cluster bus listening socket *\/$/;"	m	struct:redisServer
cfg	deps/lua/src/lua_cjson.c	/^    json_config_t *cfg;$/;"	m	struct:__anon102	file:
cfghdrs_in	deps/jemalloc/Makefile	/^cfghdrs_in := $(addprefix $(srcroot),include\/jemalloc\/jemalloc_defs.h.in include\/jemalloc\/internal\/jemalloc_internal_defs.h.in include\/jemalloc\/internal\/private_symbols.sh include\/jemalloc\/internal\/private_namespace.sh include\/jemalloc\/internal\/public_namespace.sh include\/jemalloc\/internal\/public_unnamespace.sh include\/jemalloc\/internal\/size_classes.sh include\/jemalloc\/jemalloc_rename.sh include\/jemalloc\/jemalloc_mangle.sh include\/jemalloc\/jemalloc.sh test\/include\/test\/jemalloc_test_defs.h.in)$/;"	m
cfghdrs_out	deps/jemalloc/Makefile	/^cfghdrs_out := include\/jemalloc\/jemalloc_defs.h include\/jemalloc\/jemalloc.h include\/jemalloc\/internal\/private_symbols.awk include\/jemalloc\/internal\/private_symbols_jet.awk include\/jemalloc\/internal\/public_symbols.txt include\/jemalloc\/internal\/public_namespace.h include\/jemalloc\/internal\/public_unnamespace.h include\/jemalloc\/internal\/size_classes.h include\/jemalloc\/jemalloc_protos_jet.h include\/jemalloc\/jemalloc_rename.h include\/jemalloc\/jemalloc_mangle.h include\/jemalloc\/jemalloc_mangle_jet.h include\/jemalloc\/internal\/jemalloc_internal_defs.h test\/include\/test\/jemalloc_test_defs.h$/;"	m
cfgoutputs_in	deps/jemalloc/Makefile	/^cfgoutputs_in := $(addprefix $(srcroot),Makefile.in jemalloc.pc.in doc\/html.xsl.in doc\/manpages.xsl.in doc\/jemalloc.xml.in include\/jemalloc\/jemalloc_macros.h.in include\/jemalloc\/jemalloc_protos.h.in include\/jemalloc\/jemalloc_typedefs.h.in include\/jemalloc\/internal\/jemalloc_preamble.h.in test\/test.sh.in test\/include\/test\/jemalloc_test.h.in)$/;"	m
cfgoutputs_out	deps/jemalloc/Makefile	/^cfgoutputs_out := Makefile jemalloc.pc doc\/html.xsl doc\/manpages.xsl doc\/jemalloc.xml include\/jemalloc\/jemalloc_macros.h include\/jemalloc\/jemalloc_protos.h include\/jemalloc\/jemalloc_typedefs.h include\/jemalloc\/internal\/jemalloc_preamble.h test\/test.sh test\/include\/test\/jemalloc_test.h$/;"	m
cg	src/defrag.c	/^    streamCG *cg;$/;"	m	struct:__anon72	file:
cgroups	src/stream.h	/^    rax *cgroups;           \/* Consumer groups dictionary: name -> streamCG *\/$/;"	m	struct:stream
ch2token	deps/lua/src/lua_cjson.c	/^    json_token_type_t ch2token[256];$/;"	m	struct:__anon101	file:
changeBindAddr	src/server.c	/^int changeBindAddr(sds *addrlist, int addrlist_len) {$/;"	f
changeListenPort	src/server.c	/^int changeListenPort(int port, socketFds *sfd, aeFileProc *accept_handler) {$/;"	f
changeReplicationId	src/replication.c	/^void changeReplicationId(void) {$/;"	f
changeSlotStatus	src/cluster.c	/^void changeSlotStatus(slotState* s, double hot, double cold) {$/;"	f
changes	src/server.h	/^    int changes;$/;"	m	struct:saveparam
changewhite	deps/lua/src/lgc.h	72;"	d
channel_len	src/cluster.h	/^    uint32_t channel_len;$/;"	m	struct:__anon33
channels	deps/hiredis/async.h	/^        struct dict *channels;$/;"	m	struct:redisAsyncContext::__anon88	typeref:struct:redisAsyncContext::__anon88::dict
channels	src/server.h	/^    list *channels;  \/* A list of allowed Pub\/Sub channel patterns. If this$/;"	m	struct:__anon18
char2escape	deps/lua/src/lua_cjson.c	/^static const char *char2escape[256] = {$/;"	v	file:
char2int	deps/lua/src/lzio.h	20;"	d
character	src/redis-cli.c	/^    int character;   \/* Associated character in visualization. *\/$/;"	m	struct:distsamples	file:
charset	src/sparkline.c	/^static char charset[] = "_-`";$/;"	v	file:
charset_fill	src/sparkline.c	/^static char charset_fill[] = "_o#";$/;"	v	file:
charset_len	src/sparkline.c	/^static int charset_len = sizeof(charset)-1;$/;"	v	file:
check	deps/jemalloc/src/zone.c	/^	boolean_t (*check)(malloc_zone_t *);$/;"	m	struct:malloc_introspection_t	file:
check	deps/lua/src/ldebug.c	268;"	d	file:
check	deps/lua/src/ldebug.c	477;"	d	file:
check	deps/lua/src/lparser.c	/^static void check (LexState *ls, int c) {$/;"	f	file:
checkAlreadyExpired	src/expire.c	/^int checkAlreadyExpired(long long when) {$/;"	f
checkArgMode	deps/lua/src/ldebug.c	/^static int checkArgMode (const Proto *pt, int r, enum OpArgMask mode) {$/;"	f	file:
checkBlockedClientTimeout	src/timeout.c	/^int checkBlockedClientTimeout(client *c, mstime_t now) {$/;"	f
checkChildrenDone	src/server.c	/^void checkChildrenDone(void) {$/;"	f
checkClientOutputBufferLimits	src/networking.c	/^int checkClientOutputBufferLimits(client *c) {$/;"	f
checkClientPauseTimeoutAndReturnIfPaused	src/networking.c	/^int checkClientPauseTimeoutAndReturnIfPaused(void) {$/;"	f
checkConsistency	src/intset.c	/^static void checkConsistency(intset *is) {$/;"	f	file:
checkForSentinelMode	src/server.c	/^int checkForSentinelMode(int argc, char **argv) {$/;"	f
checkIgnoreWarning	src/server.c	/^int checkIgnoreWarning(const char *warning) {$/;"	f
checkPrefixCollisionsOrReply	src/tracking.c	/^int checkPrefixCollisionsOrReply(client *c, robj **prefixes, size_t numprefix) {$/;"	f
checkSignedBitfieldOverflow	src/bitops.c	/^int checkSignedBitfieldOverflow(int64_t value, int64_t incr, uint64_t bits, int owtype, int64_t *limit) {$/;"	f
checkSizes	deps/lua/src/lgc.c	/^static void checkSizes (lua_State *L) {$/;"	f	file:
checkStringLength	src/t_string.c	/^static int checkStringLength(client *c, long long size) {$/;"	f	file:
checkTcpBacklogSettings	src/server.c	/^void checkTcpBacklogSettings(void) {$/;"	f
checkType	src/object.c	/^int checkType(client *c, robj *o, int type) {$/;"	f
checkUnsignedBitfieldOverflow	src/bitops.c	/^int checkUnsignedBitfieldOverflow(uint64_t value, int64_t incr, uint64_t bits, int owtype, uint64_t *limit) {$/;"	f
check_background_thread_enabled	deps/jemalloc/test/integration/extent.c	/^check_background_thread_enabled(void) {$/;"	f	file:
check_background_thread_enabled	deps/jemalloc/test/unit/decay.c	/^check_background_thread_enabled(void) {$/;"	f	file:
check_capture	deps/lua/src/lstrlib.c	/^static int check_capture (MatchState *ms, int l) {$/;"	f	file:
check_condition	deps/lua/src/lparser.c	100;"	d	file:
check_conflict	deps/lua/src/lparser.c	/^static void check_conflict (LexState *ls, struct LHS_assign *lh, expdesc *v) {$/;"	f	file:
check_entry_exit_locking	deps/jemalloc/src/jemalloc.c	/^check_entry_exit_locking(tsdn_t *tsdn) {$/;"	f
check_exp	deps/lua/src/llimits.h	57;"	d
check_exp	deps/lua/src/llimits.h	63;"	d
check_leaks	tests/instances.tcl	/^proc check_leaks instance_types {$/;"	p
check_match	deps/lua/src/lparser.c	/^static void check_match (LexState *ls, int what, int who, int where) {$/;"	f	file:
check_next	deps/lua/src/llex.c	/^static int check_next (LexState *ls, const char *set) {$/;"	f	file:
check_numbered_list_consistency	tests/unit/type/list.tcl	/^        proc check_numbered_list_consistency {key} {$/;"	p
check_random_access_consistency	tests/unit/type/list.tcl	/^        proc check_random_access_consistency {key} {$/;"	p
check_valgrind_errors	tests/support/server.tcl	/^proc check_valgrind_errors stderr {$/;"	p
checkconsistency	deps/lua/src/lobject.h	108;"	d
checkint	deps/lua/src/lauxlib.c	/^static int checkint (lua_State *L, int topop) {$/;"	f	file:
checkjump	deps/lua/src/ldebug.c	270;"	d	file:
checkjump	deps/lua/src/ldebug.c	478;"	d	file:
checkliveness	deps/lua/src/lobject.h	111;"	d
checkname	deps/lua/src/lparser.c	/^static void checkname(LexState *ls, expdesc *e) {$/;"	f	file:
checknext	deps/lua/src/lparser.c	/^static void checknext (LexState *ls, int c) {$/;"	f	file:
checkopenop	deps/lua/src/ldebug.c	288;"	d	file:
checkreg	deps/lua/src/ldebug.c	272;"	d	file:
checkreg	deps/lua/src/ldebug.c	479;"	d	file:
checkresults	deps/lua/src/lapi.c	772;"	d	file:
checkstacksizes	deps/lua/src/lgc.c	/^static void checkstacksizes (lua_State *L, StkId max) {$/;"	f	file:
chi_square_value	tests/support/util.tcl	/^proc chi_square_value {res} {$/;"	p
child	deps/jemalloc/include/jemalloc/internal/rtree.h	/^	atomic_p_t	child; \/* (rtree_{node,leaf}_elm_t *) *\/$/;"	m	struct:rtree_node_elm_s
childInfoType	src/server.h	/^typedef enum childInfoType {$/;"	g
childInfoType	src/server.h	/^} childInfoType;$/;"	t	typeref:enum:childInfoType
child_info_data	src/childinfo.c	/^} child_info_data;$/;"	t	typeref:struct:__anon30	file:
child_info_nread	src/server.h	/^    int child_info_nread;           \/* Num of bytes of the last read from pipe *\/$/;"	m	struct:redisServer
child_info_pipe	src/server.h	/^    int child_info_pipe[2];         \/* Pipe used to write the child_info_data. *\/$/;"	m	struct:redisServer
child_pid	src/server.h	/^    pid_t child_pid;            \/* PID of current child *\/$/;"	m	struct:redisServer
child_pid	tests/modules/fork.c	/^int child_pid = -1;$/;"	v
child_type	src/server.h	/^    int child_type;             \/* Type of current child *\/$/;"	m	struct:redisServer
children	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	const ctl_node_t *children;$/;"	m	struct:ctl_named_node_s
children	src/scripting.c	/^    list *children; \/* All forked debugging sessions pids. *\/$/;"	m	struct:ldbState	file:
chrtos	deps/hiredis/read.c	/^static size_t chrtos(char *buf, size_t size, char byte) {$/;"	f	file:
chunk	deps/lua/src/lparser.c	/^static void chunk (LexState *ls) {$/;"	f	file:
ci	deps/lua/src/lstate.h	/^  CallInfo *ci;  \/* call info for current function *\/$/;"	m	struct:lua_State
ci_func	deps/lua/src/lstate.h	60;"	d
cinfo	src/acl.c	/^    sds cinfo;          \/* Client info (last client if updated). *\/$/;"	m	struct:ACLLogEntry	file:
ciphers	src/cli_common.h	/^    char* ciphers;$/;"	m	struct:cliSSLconfig
ciphers	src/server.h	/^    char *ciphers;$/;"	m	struct:redisTLSContextConfig
ciphersuites	src/cli_common.h	/^    char* ciphersuites;$/;"	m	struct:cliSSLconfig
ciphersuites	src/server.h	/^    char *ciphersuites;$/;"	m	struct:redisTLSContextConfig
ckh_bucket_search	deps/jemalloc/src/ckh.c	/^ckh_bucket_search(ckh_t *ckh, size_t bucket, const void *key) {$/;"	f	file:
ckh_count	deps/jemalloc/src/ckh.c	/^ckh_count(ckh_t *ckh) {$/;"	f
ckh_delete	deps/jemalloc/src/ckh.c	/^ckh_delete(tsd_t *tsd, ckh_t *ckh) {$/;"	f
ckh_evict_reloc_insert	deps/jemalloc/src/ckh.c	/^ckh_evict_reloc_insert(ckh_t *ckh, size_t argbucket, void const **argkey,$/;"	f	file:
ckh_grow	deps/jemalloc/src/ckh.c	/^ckh_grow(tsd_t *tsd, ckh_t *ckh) {$/;"	f	file:
ckh_hash_t	deps/jemalloc/include/jemalloc/internal/ckh.h	/^typedef void ckh_hash_t (const void *, size_t[2]);$/;"	t
ckh_insert	deps/jemalloc/src/ckh.c	/^ckh_insert(tsd_t *tsd, ckh_t *ckh, const void *key, const void *data) {$/;"	f
ckh_isearch	deps/jemalloc/src/ckh.c	/^ckh_isearch(ckh_t *ckh, const void *key) {$/;"	f	file:
ckh_iter	deps/jemalloc/src/ckh.c	/^ckh_iter(ckh_t *ckh, size_t *tabind, void **key, void **data) {$/;"	f
ckh_keycomp_t	deps/jemalloc/include/jemalloc/internal/ckh.h	/^typedef bool ckh_keycomp_t (const void *, const void *);$/;"	t
ckh_new	deps/jemalloc/src/ckh.c	/^ckh_new(tsd_t *tsd, ckh_t *ckh, size_t minitems, ckh_hash_t *hash,$/;"	f
ckh_pointer_hash	deps/jemalloc/src/ckh.c	/^ckh_pointer_hash(const void *key, size_t r_hash[2]) {$/;"	f
ckh_pointer_keycomp	deps/jemalloc/src/ckh.c	/^ckh_pointer_keycomp(const void *k1, const void *k2) {$/;"	f
ckh_rebuild	deps/jemalloc/src/ckh.c	/^ckh_rebuild(ckh_t *ckh, ckhc_t *aTab) {$/;"	f	file:
ckh_remove	deps/jemalloc/src/ckh.c	/^ckh_remove(tsd_t *tsd, ckh_t *ckh, const void *searchkey, void **key,$/;"	f
ckh_search	deps/jemalloc/src/ckh.c	/^ckh_search(ckh_t *ckh, const void *searchkey, void **key, void **data) {$/;"	f
ckh_shrink	deps/jemalloc/src/ckh.c	/^ckh_shrink(tsd_t *tsd, ckh_t *ckh) {$/;"	f	file:
ckh_string_hash	deps/jemalloc/src/ckh.c	/^ckh_string_hash(const void *key, size_t r_hash[2]) {$/;"	f
ckh_string_keycomp	deps/jemalloc/src/ckh.c	/^ckh_string_keycomp(const void *k1, const void *k2) {$/;"	f
ckh_t	deps/jemalloc/include/jemalloc/internal/ckh.h	/^} ckh_t;$/;"	t	typeref:struct:__anon151
ckh_try_bucket_insert	deps/jemalloc/src/ckh.c	/^ckh_try_bucket_insert(ckh_t *ckh, size_t bucket, const void *key,$/;"	f	file:
ckh_try_insert	deps/jemalloc/src/ckh.c	/^ckh_try_insert(ckh_t *ckh, void const**argkey, void const**argdata) {$/;"	f	file:
ckhc_t	deps/jemalloc/include/jemalloc/internal/ckh.h	/^} ckhc_t;$/;"	t	typeref:struct:__anon150
cksum	src/rio.h	/^    uint64_t cksum, flags;$/;"	m	struct:_rio
cl	deps/lua/src/lstate.h	/^  union Closure cl;$/;"	m	union:GCObject	typeref:union:GCObject::Closure
classend	deps/lua/src/lstrlib.c	/^static const char *classend (MatchState *ms, const char *p) {$/;"	f	file:
cleanInfo	exp/inithg.sh	/^cleanInfo() {$/;"	f
cleanLog	exp/4_monitor.sh	/^cleanLog() {$/;"	f
clean_all	tests/unit/tracking.tcl	/^    proc clean_all {} {$/;"	p
clean_persistence	tests/support/server.tcl	/^proc clean_persistence config {$/;"	p
cleanup	deps/hiredis/adapters/qt.h	/^        void cleanup() {$/;"	f	class:RedisQtAdapter
cleanup	deps/hiredis/async.h	/^        void (*cleanup)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon87
cleanup	deps/hiredis/test.sh	/^cleanup() {$/;"	f
cleanup	tests/instances.tcl	/^proc cleanup {} {$/;"	p
cleanup	tests/test_helper.tcl	/^proc cleanup {} {$/;"	p
cleanups	deps/jemalloc/src/tsd.c	/^static malloc_tsd_cleanup_t cleanups[MALLOC_TSD_CLEANUPS_MAX];$/;"	v	file:
clearEvents	tests/modules/hooks.c	/^void clearEvents(RedisModuleCtx *ctx)$/;"	f
clearFailoverState	src/replication.c	/^void clearFailoverState() {$/;"	f
clearNodeFailureIfNeeded	src/cluster.c	/^void clearNodeFailureIfNeeded(clusterNode *node) {$/;"	f
clearReplicationId2	src/replication.c	/^void clearReplicationId2(void) {$/;"	f
cleartable	deps/lua/src/lgc.c	/^static void cleartable (GCObject *l) {$/;"	f	file:
cliAuth	src/redis-cli.c	/^static int cliAuth(redisContext *ctx, char *user, char *auth) {$/;"	f	file:
cliConnect	src/redis-cli.c	/^static int cliConnect(int flags) {$/;"	f	file:
cliFormatInvalidateTTY	src/redis-cli.c	/^static sds cliFormatInvalidateTTY(redisReply *r) {$/;"	f	file:
cliFormatReply	src/redis-cli.c	/^static sds cliFormatReply(redisReply *reply, int mode, int verbatim) {$/;"	f	file:
cliFormatReplyCSV	src/redis-cli.c	/^static sds cliFormatReplyCSV(redisReply *r) {$/;"	f	file:
cliFormatReplyRaw	src/redis-cli.c	/^static sds cliFormatReplyRaw(redisReply *r) {$/;"	f	file:
cliFormatReplyTTY	src/redis-cli.c	/^static sds cliFormatReplyTTY(redisReply *r, char *prefix) {$/;"	f	file:
cliInitHelp	src/redis-cli.c	/^static void cliInitHelp(void) {$/;"	f	file:
cliIntegrateHelp	src/redis-cli.c	/^static void cliIntegrateHelp(void) {$/;"	f	file:
cliLoadPreferences	src/redis-cli.c	/^void cliLoadPreferences(void) {$/;"	f
cliOutputCommandHelp	src/redis-cli.c	/^static void cliOutputCommandHelp(struct commandHelp *help, int group) {$/;"	f	file:
cliOutputGenericHelp	src/redis-cli.c	/^static void cliOutputGenericHelp(void) {$/;"	f	file:
cliOutputHelp	src/redis-cli.c	/^static void cliOutputHelp(int argc, char **argv) {$/;"	f	file:
cliPrintContextError	src/redis-cli.c	/^static void cliPrintContextError(void) {$/;"	f	file:
cliPushHandler	src/redis-cli.c	/^static void cliPushHandler(void *privdata, void *reply) {$/;"	f	file:
cliReadReply	src/redis-cli.c	/^static int cliReadReply(int output_raw_strings) {$/;"	f	file:
cliRefreshPrompt	src/redis-cli.c	/^static void cliRefreshPrompt(void) {$/;"	f	file:
cliSSLconfig	src/cli_common.h	/^typedef struct cliSSLconfig {$/;"	s
cliSSLconfig	src/cli_common.h	/^} cliSSLconfig;$/;"	t	typeref:struct:cliSSLconfig
cliSecureConnection	src/cli_common.c	/^int cliSecureConnection(redisContext *c, cliSSLconfig config, const char **err) {$/;"	f
cliSecureInit	src/cli_common.c	/^int cliSecureInit()$/;"	f
cliSelect	src/redis-cli.c	/^static int cliSelect(void) {$/;"	f	file:
cliSendCommand	src/redis-cli.c	/^static int cliSendCommand(int argc, char **argv, long repeat) {$/;"	f	file:
cliSetPreferences	src/redis-cli.c	/^void cliSetPreferences(char **argv, int argc, int interactive) {$/;"	f
cliSplitArgs	src/redis-cli.c	/^static sds *cliSplitArgs(char *line, int *argc) {$/;"	f	file:
cliSwitchProto	src/redis-cli.c	/^static int cliSwitchProto(void) {$/;"	f	file:
cliVersion	src/redis-cli.c	/^static sds cliVersion(void) {$/;"	f	file:
cliWriteConn	src/cli_common.c	/^ssize_t cliWriteConn(redisContext *c, const char *buf, size_t buf_len)$/;"	f
client	src/module.c	/^    client *client;                 \/* Client calling a command. *\/$/;"	m	struct:RedisModuleCtx	file:
client	src/module.c	/^    client *client;  \/* Pointer to the blocked client. or NULL if the client$/;"	m	struct:RedisModuleBlockedClient	file:
client	src/redis-benchmark.c	/^} *client;$/;"	t	typeref:struct:_client	file:
client	src/server.h	/^typedef struct client {$/;"	s
client	src/server.h	/^} client;$/;"	t	typeref:struct:client
client	src/t_zset.c	/^    client                              *client;$/;"	m	struct:zrange_result_handler	file:
clientAcceptHandler	src/networking.c	/^void clientAcceptHandler(connection *conn) {$/;"	f
clientBufferLimitsConfig	src/server.h	/^typedef struct clientBufferLimitsConfig {$/;"	s
clientBufferLimitsConfig	src/server.h	/^} clientBufferLimitsConfig;$/;"	t	typeref:struct:clientBufferLimitsConfig
clientBufferLimitsDefaults	src/config.c	/^clientBufferLimitsConfig clientBufferLimitsDefaults[CLIENT_TYPE_OBUF_COUNT] = {$/;"	v
clientChangeCallback	src/modules/hellohook.c	/^void clientChangeCallback(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)$/;"	f
clientChangeCallback	tests/modules/hooks.c	/^void clientChangeCallback(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)$/;"	f
clientClose	src/controller.c	/^void clientClose(aeEventLoop *el, int fd, int err){$/;"	f
clientCommand	src/networking.c	/^void clientCommand(client *c) {$/;"	f
clientData	src/ae.h	/^    void *clientData;$/;"	m	struct:aeFileEvent
clientData	src/ae.h	/^    void *clientData;$/;"	m	struct:aeTimeEvent
clientDone	src/redis-benchmark.c	/^static void clientDone(client c) {$/;"	f	file:
clientHasPendingReplies	src/networking.c	/^int clientHasPendingReplies(client *c) {$/;"	f
clientInstallWriteHandler	src/networking.c	/^void clientInstallWriteHandler(client *c) {$/;"	f
clientReplyBlock	src/server.h	/^typedef struct clientReplyBlock {$/;"	s
clientReplyBlock	src/server.h	/^} clientReplyBlock;$/;"	t	typeref:struct:clientReplyBlock
clientSetDefaultAuth	src/networking.c	/^static void clientSetDefaultAuth(client *c) {$/;"	f	file:
clientSetNameOrReply	src/networking.c	/^int clientSetNameOrReply(client *c, robj *name) {$/;"	f
clientSubscriptionsCount	src/pubsub.c	/^int clientSubscriptionsCount(client *c) {$/;"	f
client_cert_file	src/server.h	/^    char *client_cert_file;         \/* Certificate to use as a client; if none, use cert_file *\/$/;"	m	struct:redisTLSContextConfig
client_change_delta	tests/modules/auth.c	/^static long long client_change_delta = 0;$/;"	v	file:
client_cron_last_memory_type	src/server.h	/^    int      client_cron_last_memory_type;$/;"	m	struct:client
client_cron_last_memory_usage	src/server.h	/^    uint64_t client_cron_last_memory_usage;$/;"	m	struct:client
client_key_file	src/server.h	/^    char *client_key_file;          \/* Private key filename for client_cert_file *\/$/;"	m	struct:redisTLSContextConfig
client_key_file_pass	src/server.h	/^    char *client_key_file_pass;     \/* Optional password for client_key_file *\/$/;"	m	struct:redisTLSContextConfig
client_list_node	src/server.h	/^    listNode *client_list_node; \/* list node in client list *\/$/;"	m	struct:client
client_max_querybuf_len	src/server.h	/^    size_t client_max_querybuf_len; \/* Limit for client query buffer length *\/$/;"	m	struct:redisServer
client_obuf_limits	src/server.h	/^    clientBufferLimitsConfig client_obuf_limits[CLIENT_TYPE_OBUF_COUNT];$/;"	m	struct:redisServer
client_pause_end_time	src/server.h	/^    mstime_t client_pause_end_time;    \/* Time when we undo clients_paused *\/$/;"	m	struct:redisServer
client_pause_in_transaction	src/server.h	/^    int client_pause_in_transaction; \/* Was a client pause executed during this Exec? *\/$/;"	m	struct:redisServer
client_pause_type	src/server.h	/^    pause_type client_pause_type;      \/* True if clients are currently paused *\/$/;"	m	struct:redisServer
client_reconfig_script	src/sentinel.c	/^    char *client_reconfig_script;$/;"	m	struct:sentinelRedisInstance	file:
client_tracking_prefixes	src/server.h	/^    rax *client_tracking_prefixes; \/* A dictionary of prefixes we are already$/;"	m	struct:client
client_tracking_redirection	src/server.h	/^    uint64_t client_tracking_redirection;$/;"	m	struct:client
clients	src/redis-benchmark.c	/^    list *clients;$/;"	m	struct:config	file:
clients	src/server.h	/^    list *clients;              \/* List of active clients *\/$/;"	m	struct:redisServer
clients	src/tracking.c	/^    rax *clients;   \/* Clients subscribed to the notification events for this$/;"	m	struct:bcastState	file:
clientsCron	src/server.c	/^void clientsCron(void) {$/;"	f
clientsCronHandleTimeout	src/timeout.c	/^int clientsCronHandleTimeout(client *c, mstime_t now_ms) {$/;"	f
clientsCronResizeQueryBuffer	src/server.c	/^int clientsCronResizeQueryBuffer(client *c) {$/;"	f
clientsCronTrackClientsMemUsage	src/server.c	/^int clientsCronTrackClientsMemUsage(client *c) {$/;"	f
clientsCronTrackExpansiveClients	src/server.c	/^int clientsCronTrackExpansiveClients(client *c, int time_idx) {$/;"	f
clients_index	src/server.h	/^    rax *clients_index;         \/* Active clients dictionary by client ID. *\/$/;"	m	struct:redisServer
clients_normal	src/server.h	/^    size_t clients_normal;$/;"	m	struct:redisMemOverhead
clients_pending_read	src/server.h	/^    list *clients_pending_read;  \/* Client has pending read socket buffers. *\/$/;"	m	struct:redisServer
clients_pending_write	src/server.h	/^    list *clients_pending_write; \/* There is to write or install handler. *\/$/;"	m	struct:redisServer
clients_slaves	src/server.h	/^    size_t clients_slaves;$/;"	m	struct:redisMemOverhead
clients_timeout_table	src/server.h	/^    rax *clients_timeout_table; \/* Radix tree for blocked clients timeouts. *\/$/;"	m	struct:redisServer
clients_to_close	src/server.h	/^    list *clients_to_close;     \/* Clients to close asynchronously *\/$/;"	m	struct:redisServer
clients_waiting_acks	src/server.h	/^    list *clients_waiting_acks;         \/* Clients waiting in WAIT command. *\/$/;"	m	struct:redisServer
close	deps/hiredis/sockcompat.h	85;"	d
close	deps/jemalloc/include/jemalloc/internal/hooks.h	13;"	d
close	src/connection.h	/^    void (*close)(struct connection *conn);$/;"	m	struct:ConnectionType
closeChildInfoPipe	src/childinfo.c	/^void closeChildInfoPipe(void) {$/;"	f
closeChildUnusedResourceAfterFork	src/server.c	/^void closeChildUnusedResourceAfterFork() {$/;"	f
closeDirectLogFiledes	src/debug.c	/^void closeDirectLogFiledes(int fd) {$/;"	f
closeListeningSockets	src/server.c	/^void closeListeningSockets(int unlink_unix_socket) {$/;"	f
closeSocketListeners	src/server.c	/^void closeSocketListeners(socketFds *sfd) {$/;"	f
close_cli	tests/integration/redis-cli.tcl	/^    proc close_cli {fd} {$/;"	p
close_func	deps/lua/src/lparser.c	/^static void close_func (LexState *ls) {$/;"	f	file:
close_replication_stream	tests/test_helper.tcl	/^proc close_replication_stream {s} {$/;"	p
close_state	deps/lua/src/lstate.c	/^static void close_state (lua_State *L) {$/;"	f	file:
closelistfield	deps/lua/src/lparser.c	/^static void closelistfield (FuncState *fs, struct ConsControl *cc) {$/;"	f	file:
cluster	src/server.h	/^    struct clusterState *cluster;  \/* State of the cluster *\/$/;"	m	struct:redisServer	typeref:struct:redisServer::clusterState
clusterAcceptHandler	src/cluster.c	/^void clusterAcceptHandler(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
clusterAddNode	src/cluster.c	/^void clusterAddNode(clusterNode *node) {$/;"	f
clusterAddSlot	src/cluster.c	/^int clusterAddSlot(clusterNode *n, int slot) {$/;"	f
clusterBeforeSleep	src/cluster.c	/^void clusterBeforeSleep(void) {$/;"	f
clusterBlacklistAddNode	src/cluster.c	/^void clusterBlacklistAddNode(clusterNode *node) {$/;"	f
clusterBlacklistCleanup	src/cluster.c	/^void clusterBlacklistCleanup(void) {$/;"	f
clusterBlacklistExists	src/cluster.c	/^int clusterBlacklistExists(char *nodeid) {$/;"	f
clusterBroadcastMessage	src/cluster.c	/^void clusterBroadcastMessage(void *buf, size_t len) {$/;"	f
clusterBroadcastOwnAsHotInstance	src/cluster.c	/^void clusterBroadcastOwnAsHotInstance(int slot, uint16_t status) {$/;"	f
clusterBroadcastPong	src/cluster.c	/^void clusterBroadcastPong(int target) {$/;"	f
clusterBuildMessageHdr	src/cluster.c	/^void clusterBuildMessageHdr(clusterMsg *hdr, int type) {$/;"	f
clusterBumpConfigEpochWithoutConsensus	src/cluster.c	/^int clusterBumpConfigEpochWithoutConsensus(void) {$/;"	f
clusterCloseAllSlots	src/cluster.c	/^void clusterCloseAllSlots(void) {$/;"	f
clusterCommand	src/cluster.c	/^void clusterCommand(client *c) {$/;"	f
clusterConnAcceptHandler	src/cluster.c	/^static void clusterConnAcceptHandler(connection *conn) {$/;"	f	file:
clusterCountNonFailingSlaves	src/cluster.c	/^int clusterCountNonFailingSlaves(clusterNode *n) {$/;"	f
clusterCron	src/cluster.c	/^void clusterCron(void) {$/;"	f
clusterDelNode	src/cluster.c	/^void clusterDelNode(clusterNode *delnode) {$/;"	f
clusterDelNodeSlots	src/cluster.c	/^int clusterDelNodeSlots(clusterNode *node) {$/;"	f
clusterDelSlot	src/cluster.c	/^int clusterDelSlot(int slot) {$/;"	f
clusterDoBeforeSleep	src/cluster.c	/^void clusterDoBeforeSleep(int flags) {$/;"	f
clusterFailoverReplaceYourMaster	src/cluster.c	/^void clusterFailoverReplaceYourMaster(void) {$/;"	f
clusterGenNodeDescription	src/cluster.c	/^sds clusterGenNodeDescription(clusterNode *node, int use_pport) {$/;"	f
clusterGenNodesDescription	src/cluster.c	/^sds clusterGenNodesDescription(int filter, int use_pport) {$/;"	f
clusterGenNodesSlotsInfo	src/cluster.c	/^void clusterGenNodesSlotsInfo(int filter) {$/;"	f
clusterGetMaxEpoch	src/cluster.c	/^uint64_t clusterGetMaxEpoch(void) {$/;"	f
clusterGetMessageTypeString	src/cluster.c	/^const char *clusterGetMessageTypeString(int type) {$/;"	f
clusterGetSlaveRank	src/cluster.c	/^int clusterGetSlaveRank(void) {$/;"	f
clusterHandleConfigEpochCollision	src/cluster.c	/^void clusterHandleConfigEpochCollision(clusterNode *sender) {$/;"	f
clusterHandleManualFailover	src/cluster.c	/^void clusterHandleManualFailover(void) {$/;"	f
clusterHandleSlaveFailover	src/cluster.c	/^void clusterHandleSlaveFailover(void) {$/;"	f
clusterHandleSlaveMigration	src/cluster.c	/^void clusterHandleSlaveMigration(int max_slaves) {$/;"	f
clusterHandshakeInProgress	src/cluster.c	/^int clusterHandshakeInProgress(char *ip, int port, int cport) {$/;"	f
clusterHotGroupAddNode	src/cluster.c	/^void clusterHotGroupAddNode(clusterNode *node, int slot) {$/;"	f
clusterHotGroupDelNode	src/cluster.c	/^void clusterHotGroupDelNode(clusterNode *delnode, int slot) {$/;"	f
clusterInit	src/cluster.c	/^void clusterInit(void) {$/;"	f
clusterLink	src/cluster.h	/^typedef struct clusterLink {$/;"	s
clusterLink	src/cluster.h	/^} clusterLink;$/;"	t	typeref:struct:clusterLink
clusterLinkConnectHandler	src/cluster.c	/^void clusterLinkConnectHandler(connection *conn) {$/;"	f
clusterLoadConfig	src/cluster.c	/^int clusterLoadConfig(char *filename) {$/;"	f
clusterLockConfig	src/cluster.c	/^int clusterLockConfig(char *filename) {$/;"	f
clusterLogCantFailover	src/cluster.c	/^void clusterLogCantFailover(int reason) {$/;"	f
clusterLookupNode	src/cluster.c	/^clusterNode *clusterLookupNode(const char *name) {$/;"	f
clusterManager	src/redis-cli.c	/^static struct clusterManager {$/;"	s	file:
clusterManagerAddSlot	src/redis-cli.c	/^static int clusterManagerAddSlot(clusterManagerNode *node, int slot) {$/;"	f	file:
clusterManagerAddSlots	src/redis-cli.c	/^static int clusterManagerAddSlots(clusterManagerNode *node, char**err)$/;"	f	file:
clusterManagerBumpEpoch	src/redis-cli.c	/^static int clusterManagerBumpEpoch(clusterManagerNode *node) {$/;"	f	file:
clusterManagerCheckCluster	src/redis-cli.c	/^static int clusterManagerCheckCluster(int quiet) {$/;"	f	file:
clusterManagerCheckRedisReply	src/redis-cli.c	/^static int clusterManagerCheckRedisReply(clusterManagerNode *n,$/;"	f	file:
clusterManagerClearSlotStatus	src/redis-cli.c	/^static int clusterManagerClearSlotStatus(clusterManagerNode *node, int slot) {$/;"	f	file:
clusterManagerCommand	src/redis-cli.c	/^typedef struct clusterManagerCommand {$/;"	s	file:
clusterManagerCommand	src/redis-cli.c	/^} clusterManagerCommand;$/;"	t	typeref:struct:clusterManagerCommand	file:
clusterManagerCommandAddNode	src/redis-cli.c	/^static int clusterManagerCommandAddNode(int argc, char **argv) {$/;"	f	file:
clusterManagerCommandBackup	src/redis-cli.c	/^static int clusterManagerCommandBackup(int argc, char **argv) {$/;"	f	file:
clusterManagerCommandCall	src/redis-cli.c	/^static int clusterManagerCommandCall(int argc, char **argv) {$/;"	f	file:
clusterManagerCommandCheck	src/redis-cli.c	/^static int clusterManagerCommandCheck(int argc, char **argv) {$/;"	f	file:
clusterManagerCommandCopyOneSlot	src/redis-cli.c	/^static int clusterManagerCommandCopyOneSlot(int argc, char **argv) {$/;"	f	file:
clusterManagerCommandCreate	src/redis-cli.c	/^static int clusterManagerCommandCreate(int argc, char **argv) {$/;"	f	file:
clusterManagerCommandDef	src/redis-cli.c	/^typedef struct clusterManagerCommandDef {$/;"	s	file:
clusterManagerCommandDef	src/redis-cli.c	/^} clusterManagerCommandDef;$/;"	t	typeref:struct:clusterManagerCommandDef	file:
clusterManagerCommandDeleteNode	src/redis-cli.c	/^static int clusterManagerCommandDeleteNode(int argc, char **argv) {$/;"	f	file:
clusterManagerCommandFix	src/redis-cli.c	/^static int clusterManagerCommandFix(int argc, char **argv) {$/;"	f	file:
clusterManagerCommandHelp	src/redis-cli.c	/^static int clusterManagerCommandHelp(int argc, char **argv) {$/;"	f	file:
clusterManagerCommandImport	src/redis-cli.c	/^static int clusterManagerCommandImport(int argc, char **argv) {$/;"	f	file:
clusterManagerCommandInfo	src/redis-cli.c	/^static int clusterManagerCommandInfo(int argc, char **argv) {$/;"	f	file:
clusterManagerCommandMoveAllData	src/redis-cli.c	/^static int clusterManagerCommandMoveAllData(int argc, char **argv) {$/;"	f	file:
clusterManagerCommandMoveOneSlot	src/redis-cli.c	/^static int clusterManagerCommandMoveOneSlot(int argc, char **argv) {$/;"	f	file:
clusterManagerCommandProc	src/redis-cli.c	/^typedef int clusterManagerCommandProc(int argc, char **argv);$/;"	t	file:
clusterManagerCommandRebalance	src/redis-cli.c	/^static int clusterManagerCommandRebalance(int argc, char **argv) {$/;"	f	file:
clusterManagerCommandReshard	src/redis-cli.c	/^static int clusterManagerCommandReshard(int argc, char **argv) {$/;"	f	file:
clusterManagerCommandSetTimeout	src/redis-cli.c	/^static int clusterManagerCommandSetTimeout(int argc, char **argv) {$/;"	f	file:
clusterManagerCommands	src/redis-cli.c	/^clusterManagerCommandDef clusterManagerCommands[] = {$/;"	v
clusterManagerCompareKeysValues	src/redis-cli.c	/^static int clusterManagerCompareKeysValues(clusterManagerNode *n1,$/;"	f	file:
clusterManagerCompareNodeBalance	src/redis-cli.c	/^int clusterManagerCompareNodeBalance(const void *n1, const void *n2) {$/;"	f
clusterManagerComputeReshardTable	src/redis-cli.c	/^static list *clusterManagerComputeReshardTable(list *sources, int numslots) {$/;"	f	file:
clusterManagerCopySlot	src/redis-cli.c	/^static int clusterManagerCopySlot(clusterManagerNode *source,$/;"	f	file:
clusterManagerCountKeysInSlot	src/redis-cli.c	/^static signed int clusterManagerCountKeysInSlot(clusterManagerNode *node,$/;"	f	file:
clusterManagerDelSlot	src/redis-cli.c	/^static int clusterManagerDelSlot(clusterManagerNode *node, int slot,$/;"	f	file:
clusterManagerDictType	src/redis-cli.c	/^static dictType clusterManagerDictType = {$/;"	v	file:
clusterManagerExecTransaction	src/redis-cli.c	/^static int clusterManagerExecTransaction(clusterManagerNode *node,$/;"	f	file:
clusterManagerFixMultipleSlotOwners	src/redis-cli.c	/^static int clusterManagerFixMultipleSlotOwners(int slot, list *owners) {$/;"	f	file:
clusterManagerFixOpenSlot	src/redis-cli.c	/^static int clusterManagerFixOpenSlot(int slot) {$/;"	f	file:
clusterManagerFixSlotsCoverage	src/redis-cli.c	/^static int clusterManagerFixSlotsCoverage(char *all_slots) {$/;"	f	file:
clusterManagerFlushNodeConfig	src/redis-cli.c	/^static int clusterManagerFlushNodeConfig(clusterManagerNode *node, char **err) {$/;"	f	file:
clusterManagerGetAntiAffinityScore	src/redis-cli.c	/^static int clusterManagerGetAntiAffinityScore(clusterManagerNodeArray *ipnodes,$/;"	f	file:
clusterManagerGetConfigSignature	src/redis-cli.c	/^static sds clusterManagerGetConfigSignature(clusterManagerNode *node) {$/;"	f	file:
clusterManagerGetCoveredSlots	src/redis-cli.c	/^static int clusterManagerGetCoveredSlots(char *all_slots) {$/;"	f	file:
clusterManagerGetDisconnectedLinks	src/redis-cli.c	/^static list *clusterManagerGetDisconnectedLinks(clusterManagerNode *node) {$/;"	f	file:
clusterManagerGetLinkStatus	src/redis-cli.c	/^static dict *clusterManagerGetLinkStatus(void) {$/;"	f	file:
clusterManagerGetNodeRDBFilename	src/redis-cli.c	/^static sds clusterManagerGetNodeRDBFilename(clusterManagerNode *node) {$/;"	f	file:
clusterManagerGetNodeRedisInfo	src/redis-cli.c	/^static redisReply *clusterManagerGetNodeRedisInfo(clusterManagerNode *node,$/;"	f	file:
clusterManagerGetNodeWithMostKeysInSlot	src/redis-cli.c	/^static clusterManagerNode * clusterManagerGetNodeWithMostKeysInSlot(list *nodes,$/;"	f	file:
clusterManagerGetSlotOwner	src/redis-cli.c	/^static clusterManagerNode *clusterManagerGetSlotOwner(clusterManagerNode *n,$/;"	f	file:
clusterManagerIsConfigConsistent	src/redis-cli.c	/^static int clusterManagerIsConfigConsistent(void) {$/;"	f	file:
clusterManagerKeyHashSlot	src/redis-cli.c	/^static unsigned int clusterManagerKeyHashSlot(char *key, int keylen) {$/;"	f	file:
clusterManagerLink	src/redis-cli.c	/^typedef struct clusterManagerLink {$/;"	s	file:
clusterManagerLink	src/redis-cli.c	/^} clusterManagerLink;$/;"	t	typeref:struct:clusterManagerLink	file:
clusterManagerLinkDictType	src/redis-cli.c	/^static dictType clusterManagerLinkDictType = {$/;"	v	file:
clusterManagerLoadInfoFromNode	src/redis-cli.c	/^static int clusterManagerLoadInfoFromNode(clusterManagerNode *node, int opts) {$/;"	f	file:
clusterManagerLog	src/redis-cli.c	/^static void clusterManagerLog(int level, const char* fmt, ...) {$/;"	f	file:
clusterManagerLogErr	src/redis-cli.c	104;"	d	file:
clusterManagerLogInfo	src/redis-cli.c	101;"	d	file:
clusterManagerLogOk	src/redis-cli.c	110;"	d	file:
clusterManagerLogWarn	src/redis-cli.c	107;"	d	file:
clusterManagerMigrateKeysInReply	src/redis-cli.c	/^static redisReply *clusterManagerMigrateKeysInReply(clusterManagerNode *source,$/;"	f	file:
clusterManagerMigrateKeysInSlot	src/redis-cli.c	/^static int clusterManagerMigrateKeysInSlot(clusterManagerNode *source,$/;"	f	file:
clusterManagerMigrateKeysInSlotHelp	src/redis-cli.c	/^static int clusterManagerMigrateKeysInSlotHelp(clusterManagerNode *source,$/;"	f	file:
clusterManagerMode	src/redis-cli.c	/^static void clusterManagerMode(clusterManagerCommandProc *proc) {$/;"	f	file:
clusterManagerMoveSlot	src/redis-cli.c	/^static int clusterManagerMoveSlot(clusterManagerNode *source,$/;"	f	file:
clusterManagerNewNode	src/redis-cli.c	/^static clusterManagerNode *clusterManagerNewNode(char *ip, int port) {$/;"	f	file:
clusterManagerNode	src/redis-cli.c	/^typedef struct clusterManagerNode {$/;"	s	file:
clusterManagerNode	src/redis-cli.c	/^} clusterManagerNode;$/;"	t	typeref:struct:clusterManagerNode	file:
clusterManagerNodeArray	src/redis-cli.c	/^typedef struct clusterManagerNodeArray {$/;"	s	file:
clusterManagerNodeArray	src/redis-cli.c	/^} clusterManagerNodeArray;$/;"	t	typeref:struct:clusterManagerNodeArray	file:
clusterManagerNodeArrayAdd	src/redis-cli.c	/^static void clusterManagerNodeArrayAdd(clusterManagerNodeArray *array,$/;"	f	file:
clusterManagerNodeArrayInit	src/redis-cli.c	/^static void clusterManagerNodeArrayInit(clusterManagerNodeArray *array,$/;"	f	file:
clusterManagerNodeArrayReset	src/redis-cli.c	/^static void clusterManagerNodeArrayReset(clusterManagerNodeArray *array) {$/;"	f	file:
clusterManagerNodeArrayShift	src/redis-cli.c	/^static void clusterManagerNodeArrayShift(clusterManagerNodeArray *array,$/;"	f	file:
clusterManagerNodeByAbbreviatedName	src/redis-cli.c	/^static clusterManagerNode *clusterManagerNodeByAbbreviatedName(const char*name)$/;"	f	file:
clusterManagerNodeByName	src/redis-cli.c	/^static clusterManagerNode *clusterManagerNodeByName(const char *name) {$/;"	f	file:
clusterManagerNodeConnect	src/redis-cli.c	/^static int clusterManagerNodeConnect(clusterManagerNode *node) {$/;"	f	file:
clusterManagerNodeFlagString	src/redis-cli.c	/^static sds clusterManagerNodeFlagString(clusterManagerNode *node) {$/;"	f	file:
clusterManagerNodeGetJSON	src/redis-cli.c	/^static sds clusterManagerNodeGetJSON(clusterManagerNode *node,$/;"	f	file:
clusterManagerNodeInfo	src/redis-cli.c	/^static sds clusterManagerNodeInfo(clusterManagerNode *node, int indent) {$/;"	f	file:
clusterManagerNodeIsCluster	src/redis-cli.c	/^static int clusterManagerNodeIsCluster(clusterManagerNode *node, char **err) {$/;"	f	file:
clusterManagerNodeIsEmpty	src/redis-cli.c	/^static int clusterManagerNodeIsEmpty(clusterManagerNode *node, char **err) {$/;"	f	file:
clusterManagerNodeLoadInfo	src/redis-cli.c	/^static int clusterManagerNodeLoadInfo(clusterManagerNode *node, int opts,$/;"	f	file:
clusterManagerNodeMasterRandom	src/redis-cli.c	/^static clusterManagerNode *clusterManagerNodeMasterRandom() {$/;"	f	file:
clusterManagerNodeResetSlots	src/redis-cli.c	/^static void clusterManagerNodeResetSlots(clusterManagerNode *node) {$/;"	f	file:
clusterManagerNodeSlotsString	src/redis-cli.c	/^static sds clusterManagerNodeSlotsString(clusterManagerNode *node) {$/;"	f	file:
clusterManagerNodeWithLeastReplicas	src/redis-cli.c	/^static clusterManagerNode *clusterManagerNodeWithLeastReplicas() {$/;"	f	file:
clusterManagerOnError	src/redis-cli.c	/^static void clusterManagerOnError(sds err) {$/;"	f	file:
clusterManagerOnReplyError	src/redis-cli.c	/^typedef int (*clusterManagerOnReplyError)(redisReply *reply,$/;"	t	file:
clusterManagerOnSetOwnerErr	src/redis-cli.c	/^static int clusterManagerOnSetOwnerErr(redisReply *reply,$/;"	f	file:
clusterManagerOptimizeAntiAffinity	src/redis-cli.c	/^static void clusterManagerOptimizeAntiAffinity(clusterManagerNodeArray *ipnodes,$/;"	f	file:
clusterManagerOptionDef	src/redis-cli.c	/^typedef struct clusterManagerOptionDef {$/;"	s	file:
clusterManagerOptionDef	src/redis-cli.c	/^} clusterManagerOptionDef;$/;"	t	typeref:struct:clusterManagerOptionDef	file:
clusterManagerOptions	src/redis-cli.c	/^clusterManagerOptionDef clusterManagerOptions[] = {$/;"	v
clusterManagerPrintNotClusterNodeError	src/redis-cli.c	/^static void clusterManagerPrintNotClusterNodeError(clusterManagerNode *node,$/;"	f	file:
clusterManagerPrintNotEmptyNodeError	src/redis-cli.c	/^static void clusterManagerPrintNotEmptyNodeError(clusterManagerNode *node,$/;"	f	file:
clusterManagerPrintSlotsList	src/redis-cli.c	/^static void clusterManagerPrintSlotsList(list *slots) {$/;"	f	file:
clusterManagerReleaseReshardTable	src/redis-cli.c	/^static void clusterManagerReleaseReshardTable(list *table) {$/;"	f	file:
clusterManagerRemoveNodeFromList	src/redis-cli.c	/^static void clusterManagerRemoveNodeFromList(list *nodelist,$/;"	f	file:
clusterManagerReshardTableItem	src/redis-cli.c	/^typedef struct clusterManagerReshardTableItem {$/;"	s	file:
clusterManagerReshardTableItem	src/redis-cli.c	/^} clusterManagerReshardTableItem;$/;"	t	typeref:struct:clusterManagerReshardTableItem	file:
clusterManagerSetCopyStatus	src/redis-cli.c	/^static int clusterManagerSetCopyStatus(clusterManagerNode *node,int slot, char* cmd) {$/;"	f	file:
clusterManagerSetSlot	src/redis-cli.c	/^static int clusterManagerSetSlot(clusterManagerNode *node1,$/;"	f	file:
clusterManagerSetSlotOwner	src/redis-cli.c	/^static int clusterManagerSetSlotOwner(clusterManagerNode *owner,$/;"	f	file:
clusterManagerShowClusterInfo	src/redis-cli.c	/^static void clusterManagerShowClusterInfo(void) {$/;"	f	file:
clusterManagerShowNodes	src/redis-cli.c	/^static void clusterManagerShowNodes(void) {$/;"	f	file:
clusterManagerShowReshardTable	src/redis-cli.c	/^static void clusterManagerShowReshardTable(list *table) {$/;"	f	file:
clusterManagerSlotCompare	src/redis-cli.c	/^int clusterManagerSlotCompare(const void *slot1, const void *slot2) {$/;"	f
clusterManagerSlotCountCompareDesc	src/redis-cli.c	/^int clusterManagerSlotCountCompareDesc(const void *n1, const void *n2) {$/;"	f
clusterManagerStartTransaction	src/redis-cli.c	/^static int clusterManagerStartTransaction(clusterManagerNode *node) {$/;"	f	file:
clusterManagerUncoveredSlots	src/redis-cli.c	/^dict *clusterManagerUncoveredSlots = NULL;$/;"	v
clusterManagerWaitForClusterJoin	src/redis-cli.c	/^static void clusterManagerWaitForClusterJoin(void) {$/;"	f	file:
clusterMastersHaveSlaves	src/cluster.c	/^int clusterMastersHaveSlaves(void) {$/;"	f
clusterMsg	src/cluster.h	/^} clusterMsg;$/;"	t	typeref:struct:__anon43
clusterMsgData	src/cluster.h	/^union clusterMsgData {$/;"	u
clusterMsgDataFail	src/cluster.h	/^} clusterMsgDataFail;$/;"	t	typeref:struct:__anon32
clusterMsgDataGossip	src/cluster.h	/^} clusterMsgDataGossip;$/;"	t	typeref:struct:__anon31
clusterMsgDataHotGroup	src/cluster.h	/^} clusterMsgDataHotGroup;$/;"	t	typeref:struct:__anon35
clusterMsgDataPublish	src/cluster.h	/^} clusterMsgDataPublish;$/;"	t	typeref:struct:__anon33
clusterMsgDataUpdate	src/cluster.h	/^} clusterMsgDataUpdate;$/;"	t	typeref:struct:__anon34
clusterMsgModule	src/cluster.h	/^} clusterMsgModule;$/;"	t	typeref:struct:__anon36
clusterNode	src/cluster.h	/^typedef struct clusterNode {$/;"	s
clusterNode	src/cluster.h	/^} clusterNode;$/;"	t	typeref:struct:clusterNode
clusterNode	src/redis-benchmark.c	/^typedef struct clusterNode {$/;"	s	file:
clusterNode	src/redis-benchmark.c	/^} clusterNode;$/;"	t	typeref:struct:clusterNode	file:
clusterNodeAddFailureReport	src/cluster.c	/^int clusterNodeAddFailureReport(clusterNode *failing, clusterNode *sender) {$/;"	f
clusterNodeAddSlave	src/cluster.c	/^int clusterNodeAddSlave(clusterNode *master, clusterNode *slave) {$/;"	f
clusterNodeCleanupFailureReports	src/cluster.c	/^void clusterNodeCleanupFailureReports(clusterNode *node) {$/;"	f
clusterNodeClearSlotBit	src/cluster.c	/^int clusterNodeClearSlotBit(clusterNode *n, int slot) {$/;"	f
clusterNodeDelFailureReport	src/cluster.c	/^int clusterNodeDelFailureReport(clusterNode *node, clusterNode *sender) {$/;"	f
clusterNodeFailReport	src/cluster.h	/^typedef struct clusterNodeFailReport {$/;"	s
clusterNodeFailReport	src/cluster.h	/^} clusterNodeFailReport;$/;"	t	typeref:struct:clusterNodeFailReport
clusterNodeFailureReportsCount	src/cluster.c	/^int clusterNodeFailureReportsCount(clusterNode *node) {$/;"	f
clusterNodeForResharding	src/redis-cli.c	/^static clusterManagerNode *clusterNodeForResharding(char *id,$/;"	f	file:
clusterNodeGetSlotBit	src/cluster.c	/^int clusterNodeGetSlotBit(clusterNode *n, int slot) {$/;"	f
clusterNodeInHotGroup	src/cluster.c	/^int clusterNodeInHotGroup(const char *name, int slot) {$/;"	f
clusterNodeIsInGossipSection	src/cluster.c	/^int clusterNodeIsInGossipSection(clusterMsg *hdr, int count, clusterNode *n) {$/;"	f
clusterNodeRemoveSlave	src/cluster.c	/^int clusterNodeRemoveSlave(clusterNode *master, clusterNode *slave) {$/;"	f
clusterNodeSetSlotBit	src/cluster.c	/^int clusterNodeSetSlotBit(clusterNode *n, int slot) {$/;"	f
clusterNodesBlackListDictType	src/server.c	/^dictType clusterNodesBlackListDictType = {$/;"	v
clusterNodesDictType	src/server.c	/^dictType clusterNodesDictType = {$/;"	v
clusterProcessGossipSection	src/cluster.c	/^void clusterProcessGossipSection(clusterMsg *hdr, clusterLink *link) {$/;"	f
clusterProcessPacket	src/cluster.c	/^int clusterProcessPacket(clusterLink *link) {$/;"	f
clusterPropagatePublish	src/cluster.c	/^void clusterPropagatePublish(robj *channel, robj *message) {$/;"	f
clusterReadHandler	src/cluster.c	/^void clusterReadHandler(connection *conn) {$/;"	f
clusterReceivers	src/module.c	/^static moduleClusterReceiver *clusterReceivers[UINT8_MAX];$/;"	v	file:
clusterRedirectBlockedClientIfNeeded	src/cluster.c	/^int clusterRedirectBlockedClientIfNeeded(client *c) {$/;"	f
clusterRedirectClient	src/cluster.c	/^void clusterRedirectClient(client *c, clusterNode *n, int hashslot, int error_code) {$/;"	f
clusterRenameNode	src/cluster.c	/^void clusterRenameNode(clusterNode *node, char *newname) {$/;"	f
clusterReplyMultiBulkSlots	src/cluster.c	/^void clusterReplyMultiBulkSlots(client * c) {$/;"	f
clusterRequestFailoverAuth	src/cluster.c	/^void clusterRequestFailoverAuth(void) {$/;"	f
clusterReset	src/cluster.c	/^void clusterReset(int hard) {$/;"	f
clusterSaveConfig	src/cluster.c	/^int clusterSaveConfig(int do_fsync) {$/;"	f
clusterSaveConfigOrDie	src/cluster.c	/^void clusterSaveConfigOrDie(int do_fsync) {$/;"	f
clusterSendFail	src/cluster.c	/^void clusterSendFail(char *nodename) {$/;"	f
clusterSendFailoverAuth	src/cluster.c	/^void clusterSendFailoverAuth(clusterNode *node) {$/;"	f
clusterSendFailoverAuthIfNeeded	src/cluster.c	/^void clusterSendFailoverAuthIfNeeded(clusterNode *node, clusterMsg *request) {$/;"	f
clusterSendMFStart	src/cluster.c	/^void clusterSendMFStart(clusterNode *node) {$/;"	f
clusterSendMessage	src/cluster.c	/^void clusterSendMessage(clusterLink *link, unsigned char *msg, size_t msglen) {$/;"	f
clusterSendModule	src/cluster.c	/^void clusterSendModule(clusterLink *link, uint64_t module_id, uint8_t type,$/;"	f
clusterSendModuleMessageToTarget	src/cluster.c	/^int clusterSendModuleMessageToTarget(const char *target, uint64_t module_id, uint8_t type, unsigned char *payload, uint32_t len) {$/;"	f
clusterSendPing	src/cluster.c	/^void clusterSendPing(clusterLink *link, int type) {$/;"	f
clusterSendPublish	src/cluster.c	/^void clusterSendPublish(clusterLink *link, robj *channel, robj *message) {$/;"	f
clusterSendUpdate	src/cluster.c	/^void clusterSendUpdate(clusterLink *link, clusterNode *node) {$/;"	f
clusterSetGossipEntry	src/cluster.c	/^void clusterSetGossipEntry(clusterMsg *hdr, int i, clusterNode *n) {$/;"	f
clusterSetMaster	src/cluster.c	/^void clusterSetMaster(clusterNode *n) {$/;"	f
clusterSetNodeAsMaster	src/cluster.c	/^void clusterSetNodeAsMaster(clusterNode *n) {$/;"	f
clusterStartHandshake	src/cluster.c	/^int clusterStartHandshake(char *ip, int port, int cport) {$/;"	f
clusterState	src/cluster.h	/^typedef struct clusterState {$/;"	s
clusterState	src/cluster.h	/^} clusterState;$/;"	t	typeref:struct:clusterState
clusterUpdateMyselfFlags	src/cluster.c	/^void clusterUpdateMyselfFlags(void) {$/;"	f
clusterUpdateSlotsConfigWith	src/cluster.c	/^void clusterUpdateSlotsConfigWith(clusterNode *sender, uint64_t senderConfigEpoch, unsigned char *slots) {$/;"	f
clusterUpdateState	src/cluster.c	/^void clusterUpdateState(void) {$/;"	f
clusterWriteHandler	src/cluster.c	/^void clusterWriteHandler(connection *conn) {$/;"	f
cluster_allocate_mixedSlots	tests/cluster/tests/15-cluster-slots.tcl	/^proc cluster_allocate_mixedSlots {n} {$/;"	p
cluster_allocate_slaves	tests/cluster/cluster.tcl	/^proc cluster_allocate_slaves {masters slaves} {$/;"	p
cluster_allocate_slots	tests/cluster/cluster.tcl	/^proc cluster_allocate_slots {n} {$/;"	p
cluster_allocate_with_continuous_slots	tests/cluster/tests/19-cluster-nodes-slots.tcl	/^proc cluster_allocate_with_continuous_slots {n} {$/;"	p
cluster_allow_reads_when_down	src/server.h	/^    int cluster_allow_reads_when_down; \/* Are reads allowed when the cluster$/;"	m	struct:redisServer
cluster_allow_replica_migration	src/server.h	/^    int cluster_allow_replica_migration; \/* Automatic replica migrations to orphaned masters and from empty masters *\/$/;"	m	struct:redisServer
cluster_announce_bus_port	src/server.h	/^    int cluster_announce_bus_port; \/* bus port to announce on cluster bus. *\/$/;"	m	struct:redisServer
cluster_announce_ip	src/server.h	/^    char *cluster_announce_ip;  \/* IP address to announce on cluster bus. *\/$/;"	m	struct:redisServer
cluster_announce_port	src/server.h	/^    int cluster_announce_port;     \/* base port to announce on cluster bus. *\/$/;"	m	struct:redisServer
cluster_announce_tls_port	src/server.h	/^    int cluster_announce_tls_port; \/* TLS port to announce on cluster bus. *\/$/;"	m	struct:redisServer
cluster_config_consistent	tests/cluster/cluster.tcl	/^proc cluster_config_consistent {} {$/;"	p
cluster_config_file_lock_fd	src/server.h	/^    int cluster_config_file_lock_fd;   \/* cluster config fd, will be flock *\/$/;"	m	struct:redisServer
cluster_configfile	src/server.h	/^    char *cluster_configfile; \/* Cluster auto-generated config file name. *\/$/;"	m	struct:redisServer
cluster_create_with_continuous_slots	tests/cluster/tests/19-cluster-nodes-slots.tcl	/^proc cluster_create_with_continuous_slots {masters slaves} {$/;"	p
cluster_enabled	src/server.h	/^    int cluster_enabled;      \/* Is cluster enabled? *\/$/;"	m	struct:redisServer
cluster_find_available_slave	tests/cluster/cluster.tcl	/^proc cluster_find_available_slave {first} {$/;"	p
cluster_manager	src/redis-cli.c	/^} cluster_manager;$/;"	v	typeref:struct:clusterManager	file:
cluster_manager_command	src/redis-cli.c	/^    clusterManagerCommand cluster_manager_command;$/;"	m	struct:config	file:
cluster_migration_barrier	src/server.h	/^    int cluster_migration_barrier; \/* Cluster replicas migration barrier. *\/$/;"	m	struct:redisServer
cluster_mode	src/redis-benchmark.c	/^    int cluster_mode;$/;"	m	struct:config	file:
cluster_mode	src/redis-cli.c	/^    int cluster_mode;$/;"	m	struct:config	file:
cluster_module_flags	src/server.h	/^    int cluster_module_flags;      \/* Set of flags that Redis modules are able$/;"	m	struct:redisServer
cluster_node	src/redis-benchmark.c	/^    struct clusterNode *cluster_node;$/;"	m	struct:_client	typeref:struct:_client::clusterNode	file:
cluster_node_count	src/redis-benchmark.c	/^    int cluster_node_count;$/;"	m	struct:config	file:
cluster_node_timeout	src/server.h	/^    mstime_t cluster_node_timeout; \/* Cluster node timeout. *\/$/;"	m	struct:redisServer
cluster_nodes	src/redis-benchmark.c	/^    struct clusterNode **cluster_nodes;$/;"	m	struct:config	typeref:struct:config::clusterNode	file:
cluster_reissue_command	src/redis-cli.c	/^    int cluster_reissue_command;$/;"	m	struct:config	file:
cluster_require_full_coverage	src/server.h	/^    int cluster_require_full_coverage; \/* If true, put the cluster down if$/;"	m	struct:redisServer
cluster_slave_no_failover	src/server.h	/^    int cluster_slave_no_failover;  \/* Prevent slave from starting a failover$/;"	m	struct:redisServer
cluster_slave_validity_factor	src/server.h	/^    int cluster_slave_validity_factor; \/* Slave max data age for failover. *\/$/;"	m	struct:redisServer
cluster_write_keys_with_expire	tests/cluster/tests/14-consistency-check.tcl	/^proc cluster_write_keys_with_expire {id ttl} {$/;"	p
cluster_write_test	tests/cluster/cluster.tcl	/^proc cluster_write_test {id} {$/;"	p
clvalue	deps/lua/src/lobject.h	98;"	d
cmd	src/server.h	/^    struct redisCommand *cmd, *lastcmd;  \/* Last command executed. *\/$/;"	m	struct:client	typeref:struct:client::redisCommand
cmd	src/server.h	/^    struct redisCommand *cmd;$/;"	m	struct:multiCmd	typeref:struct:multiCmd::redisCommand
cmd	src/server.h	/^    struct redisCommand *cmd;$/;"	m	struct:redisOp	typeref:struct:redisOp::redisCommand
cmdDelKeyCopy	tests/modules/keyspace_events.c	/^static int cmdDelKeyCopy(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	file:
cmdEventCount	tests/modules/hooks.c	/^int cmdEventCount(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
cmdEventLast	tests/modules/hooks.c	/^int cmdEventLast(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
cmdEventsClear	tests/modules/hooks.c	/^int cmdEventsClear(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
cmdHasMovableKeys	src/server.c	/^static int cmdHasMovableKeys(struct redisCommand *cmd) {$/;"	f	file:
cmdIncrCase1	tests/modules/keyspace_events.c	/^static int cmdIncrCase1(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	file:
cmdIncrCase2	tests/modules/keyspace_events.c	/^static int cmdIncrCase2(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	file:
cmdIncrCase3	tests/modules/keyspace_events.c	/^static int cmdIncrCase3(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	file:
cmdIsKeyLoaded	tests/modules/keyspace_events.c	/^static int cmdIsKeyLoaded(RedisModuleCtx *ctx, RedisModuleString **argv, int argc){$/;"	f	file:
cmdIsModuleKeyNotified	tests/modules/keyspace_events.c	/^static int cmdIsModuleKeyNotified(RedisModuleCtx *ctx, RedisModuleString **argv, int argc){$/;"	f	file:
cmdNotify	tests/modules/keyspace_events.c	/^static int cmdNotify(RedisModuleCtx *ctx, RedisModuleString **argv, int argc){$/;"	f	file:
cmdProcessing	exp/2_run_ycsb.sh	/^cmdProcessing() {$/;"	f
cmd_GET	src/modules/hellodict.c	/^int cmd_GET(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
cmd_KEYRANGE	src/modules/hellodict.c	/^int cmd_KEYRANGE(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
cmd_SET	src/modules/hellodict.c	/^int cmd_SET(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
cmd_delim	src/redis-cli.c	/^    sds cmd_delim;$/;"	m	struct:config	file:
cmd_flags	src/server.h	/^    int cmd_flags;          \/* The accumulated command flags OR-ed together.$/;"	m	struct:multiState
cmd_inv_flags	src/server.h	/^    int cmd_inv_flags;      \/* Same as cmd_flags, OR-ing the ~flags. so that it$/;"	m	struct:multiState
cmdrstat	tests/support/util.tcl	/^proc cmdrstat {cmd r} {$/;"	p
cmds	deps/lua/src/lua_cmsgpack.c	/^const struct luaL_Reg cmds[] = {$/;"	v	typeref:struct:luaL_Reg
cmdstat	tests/cluster/tests/18-info.tcl	/^proc cmdstat {instace cmd} {$/;"	p
cmdstat	tests/integration/redis-benchmark.tcl	/^proc cmdstat {cmd} {$/;"	p
cmdstat	tests/unit/info.tcl	/^proc cmdstat {cmd} {$/;"	p
cmdstat	tests/unit/introspection-2.tcl	/^proc cmdstat {cmd} {$/;"	p
cmpobj	src/server.h	/^        robj *cmpobj;$/;"	m	union:_redisSortObject::__anon22
cname	src/slowlog.h	/^    sds cname;          \/* Client name. *\/$/;"	m	struct:slowlogEntry
cnt_all	deps/jemalloc/src/prof.c	/^	prof_cnt_t	cnt_all;$/;"	m	struct:prof_tdata_merge_iter_arg_s	file:
cnt_all_copy	deps/jemalloc/test/unit/prof_reset.c	/^prof_cnt_t cnt_all_copy = {0, 0, 0, 0};$/;"	v
cnt_summed	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	prof_cnt_t		cnt_summed;$/;"	m	struct:prof_gctx_s
cnt_summed	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	prof_cnt_t		cnt_summed;$/;"	m	struct:prof_tdata_s
cntfrq_hz	src/monotonic.c	/^static inline uint32_t cntfrq_hz() {$/;"	f	file:
cnts	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	prof_cnt_t		cnts;$/;"	m	struct:prof_tctx_s
co_funcs	deps/lua/src/lbaselib.c	/^static const luaL_Reg co_funcs[] = {$/;"	v	file:
code	deps/lua/src/lobject.h	/^  Instruction *code;$/;"	m	struct:Proto
code_label	deps/lua/src/lcode.c	/^static int code_label (FuncState *fs, int A, int b, int jump) {$/;"	f	file:
codearith	deps/lua/src/lcode.c	/^static void codearith (FuncState *fs, OpCode op, expdesc *e1, expdesc *e2) {$/;"	f	file:
codecomp	deps/lua/src/lcode.c	/^static void codecomp (FuncState *fs, OpCode op, int cond, expdesc *e1,$/;"	f	file:
codenot	deps/lua/src/lcode.c	/^static void codenot (FuncState *fs, expdesc *e) {$/;"	f	file:
codepoint_to_utf8	deps/lua/src/lua_cjson.c	/^static int codepoint_to_utf8(char *utf8, int codepoint)$/;"	f	file:
codestring	deps/lua/src/lparser.c	/^static void codestring (LexState *ls, expdesc *e, TString *s) {$/;"	f	file:
col	deps/jemalloc/test/unit/stats_print.c	/^	size_t		col;$/;"	m	struct:__anon121	file:
col	deps/jemalloc/test/unit/stats_print.c	/^	size_t	col;$/;"	m	struct:parser_s	file:
collateStringObjects	src/object.c	/^int collateStringObjects(robj *a, robj *b) {$/;"	f
collectargs	deps/lua/src/lua.c	/^static int collectargs (char **argv, int *pi, int *pv, int *pe) {$/;"	f	file:
collectvalidlines	deps/lua/src/ldebug.c	/^static void collectvalidlines (lua_State *L, Closure *f) {$/;"	f	file:
colon	src/server.h	/^    *colon, *queued, *null[4], *nullarray[4], *emptymap[4], *emptyset[4],$/;"	m	struct:sharedObjectsStruct
color	src/lolwut6.c	/^    int color;      \/* Color of the skyscraper. *\/$/;"	m	struct:skyscraper	file:
color_term	tests/support/util.tcl	/^proc color_term {} {$/;"	p
colorized	src/redis-trib.rb	/^def colorized(str, color)$/;"	f
colorstr	tests/support/util.tcl	/^proc colorstr {color str} {$/;"	p
cols	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	ql_head(emitter_col_t) cols;$/;"	m	struct:emitter_row_s
cols	deps/linenoise/linenoise.c	/^    size_t cols;        \/* Number of columns in terminal. *\/$/;"	m	struct:linenoiseState	file:
combine	deps/lua/src/luac.c	/^static const Proto* combine(lua_State* L, int n)$/;"	f	file:
combine-results	utils/speed-regression.tcl	/^proc combine-results {results} {$/;"	p
commandCacheDictType	src/server.c	/^dictType commandCacheDictType = {$/;"	v
commandCommand	src/server.c	/^void commandCommand(client *c) {$/;"	f
commandFlagsFromString	src/module.c	/^int64_t commandFlagsFromString(char *s) {$/;"	f
commandGroups	src/help.h	/^static char *commandGroups[] = {$/;"	v
commandHelp	src/help.h	/^struct commandHelp {$/;"	s
commandHelp	src/help.h	/^} commandHelp[] = {$/;"	v	typeref:struct:commandHelp
commandId	src/acl.c	/^static rax *commandId = NULL; \/* Command name to id mapping *\/$/;"	v	file:
commandProcessed	src/networking.c	/^void commandProcessed(client *c) {$/;"	f
commandTableDictType	src/server.c	/^dictType commandTableDictType = {$/;"	v
command_cb	deps/hiredis/examples/example-glib.c	/^command_cb(redisAsyncContext *ac,$/;"	f	file:
command_example	src/redis-trib.rb	/^def command_example(cmd, args, opts)$/;"	f
command_timeout	deps/hiredis/hiredis.h	/^    const struct timeval *command_timeout;$/;"	m	struct:__anon80	typeref:struct:__anon80::timeval
command_timeout	deps/hiredis/hiredis.h	/^    struct timeval *command_timeout;$/;"	m	struct:redisContext	typeref:struct:redisContext::timeval
commands	src/server.h	/^    dict *commands;             \/* Command table *\/$/;"	m	struct:redisServer
commands	src/server.h	/^    multiCmd *commands;     \/* Array of MULTI commands *\/$/;"	m	struct:multiState
commands	utils/generate-command-help.rb	/^def commands$/;"	f
commit	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^	extent_commit_t		*commit;$/;"	m	struct:extent_hooks_s
comp	deps/jemalloc/include/jemalloc/internal/witness.h	/^	witness_comp_t		*comp;$/;"	m	struct:witness_s
compareCallback	src/dict.c	/^int compareCallback(void *privdata, const void *key1, const void *key2) {$/;"	f
compareHelper	src/ziplist.c	/^static int compareHelper(unsigned char *zl, char ch, size_t len, int index) {$/;"	f	file:
compareSlavesForPromotion	src/sentinel.c	/^int compareSlavesForPromotion(const void *a, const void *b) {$/;"	f
compareStringObjects	src/object.c	/^int compareStringObjects(robj *a, robj *b) {$/;"	f
compareStringObjectsWithFlags	src/object.c	/^int compareStringObjectsWithFlags(robj *a, robj *b, int flags) {$/;"	f
compare_funcs	deps/jemalloc/test/stress/microbench.c	/^compare_funcs(uint64_t nwarmup, uint64_t niter, const char *name_a,$/;"	f
compare_lists	tests/unit/geo.tcl	/^proc compare_lists {List1 List2} {$/;"	p
compiler_flag_unusuals	deps/jemalloc/scripts/gen_travis.py	/^compiler_flag_unusuals = ['-m32']$/;"	v
compiler_flags	deps/jemalloc/scripts/gen_travis.py	/^    compiler_flags = [$/;"	v
compilers	deps/jemalloc/scripts/gen_travis.py	/^        compilers = compilers_unusual$/;"	v
compilers	deps/jemalloc/scripts/gen_travis.py	/^    compilers = compilers_default$/;"	v
completeLine	deps/linenoise/linenoise.c	/^static int completeLine(struct linenoiseState *ls) {$/;"	f	file:
completion	deps/linenoise/example.c	/^void completion(const char *buf, linenoiseCompletions *lc) {$/;"	f
completionCallback	deps/linenoise/linenoise.c	/^static linenoiseCompletionCallback *completionCallback = NULL;$/;"	v	file:
completionCallback	src/redis-cli.c	/^static void completionCallback(const char *buf, linenoiseCompletions *lc) {$/;"	f	file:
compress	src/quicklist.h	/^    unsigned int compress : QL_COMP_BITS; \/* depth of end nodes not to compress;0=off *\/$/;"	m	struct:quicklist
compressed	src/quicklist.h	/^    char compressed[];$/;"	m	struct:quicklistLZF
computeDatasetDigest	src/debug.c	/^void computeDatasetDigest(unsigned char *final) {$/;"	f
computeDefragCycles	src/defrag.c	/^void computeDefragCycles() {$/;"	f
compute_cpu_usage	tests/integration/replication.tcl	/^proc compute_cpu_usage {start end} {$/;"	p
compute_size_with_overflow	deps/jemalloc/src/jemalloc.c	/^compute_size_with_overflow(bool may_overflow, dynamic_opts_t *dopts,$/;"	f
compute_something_fast	src/redis-cli.c	/^unsigned long compute_something_fast(void) {$/;"	f
computesizes	deps/lua/src/ltable.c	/^static int computesizes (int nums[], int *narray) {$/;"	f	file:
concat_event	deps/lua/doc/manual.html	/^     function concat_event (op1, op2)$/;"	f
cond	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^	pthread_cond_t		cond;$/;"	m	struct:background_thread_info_s
cond	deps/lua/src/lparser.c	/^static int cond (LexState *ls) {$/;"	f	file:
condhardstacktests	deps/lua/src/llimits.h	123;"	d
condhardstacktests	deps/lua/src/llimits.h	125;"	d
condjump	deps/lua/src/lcode.c	/^static int condjump (FuncState *fs, OpCode op, int A, int B, int C) {$/;"	f	file:
cone	src/server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *pong, *space,$/;"	m	struct:sharedObjectsStruct
conf_aux_count	tests/modules/testrdb.c	/^long long conf_aux_count = 0;$/;"	v
config	deps/hiredis/test.c	/^struct config {$/;"	s	file:
config	src/config.c	/^    char **config; \/* Pointer to the server config this value is stored in. *\/$/;"	m	struct:stringConfigData	file:
config	src/config.c	/^    int *config; \/* The pointer to the server config this value is stored in *\/$/;"	m	struct:boolConfigData	file:
config	src/config.c	/^    int *config; \/* The pointer to the server config this value is stored in *\/$/;"	m	struct:enumConfigData	file:
config	src/config.c	/^    sds *config; \/* Pointer to the server config this value is stored in. *\/$/;"	m	struct:sdsConfigData	file:
config	src/config.c	/^    } config; \/* The pointer to the numeric config this value is stored in *\/$/;"	m	struct:numericConfigData	typeref:union:numericConfigData::__anon45	file:
config	src/redis-benchmark.c	/^static struct config {$/;"	s	file:
config	src/redis-benchmark.c	/^} config;$/;"	v	typeref:struct:config	file:
config	src/redis-cli.c	/^static struct config {$/;"	s	file:
config	src/redis-cli.c	/^} config;$/;"	v	typeref:struct:config	file:
configCommand	src/config.c	/^void configCommand(client *c) {$/;"	f
configEnum	src/config.c	/^typedef struct configEnum {$/;"	s	file:
configEnum	src/config.c	/^} configEnum;$/;"	t	typeref:struct:configEnum	file:
configEnumGetName	src/config.c	/^const char *configEnumGetName(configEnum *ce, int val) {$/;"	f
configEnumGetNameOrUnknown	src/config.c	/^const char *configEnumGetNameOrUnknown(configEnum *ce, int val) {$/;"	f
configEnumGetValue	src/config.c	/^int configEnumGetValue(configEnum *ce, char *name) {$/;"	f
configEpoch	src/cluster.h	/^    uint64_t configEpoch;   \/* The config epoch if it's a master, or the last$/;"	m	struct:__anon43
configEpoch	src/cluster.h	/^    uint64_t configEpoch; \/* Config epoch of the specified instance. *\/$/;"	m	struct:__anon34
configEpoch	src/cluster.h	/^    uint64_t configEpoch; \/* Last configEpoch observed for this node *\/$/;"	m	struct:clusterNode
configOOMScoreAdjValuesDefaults	src/config.c	/^int configOOMScoreAdjValuesDefaults[CONFIG_OOM_COUNT] = { 0, 200, 800 };$/;"	v
configSetCommand	src/config.c	/^void configSetCommand(client *c) {$/;"	f
config_cache_oblivious	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool config_cache_oblivious =$/;"	v
config_debug	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool config_debug =$/;"	v
config_debug	deps/jemalloc/test/include/test/jemalloc_test.h	/^static const bool config_debug =$/;"	v
config_epoch	src/sentinel.c	/^    uint64_t config_epoch;  \/* Configuration epoch. *\/$/;"	m	struct:sentinelRedisInstance	file:
config_fill	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool config_fill =$/;"	v
config_get_bool_field	src/config.c	903;"	d	file:
config_get_numerical_field	src/config.c	911;"	d	file:
config_get_string_field	src/config.c	895;"	d	file:
config_hz	src/server.h	/^    int config_hz;              \/* Configured HZ value. May be different than$/;"	m	struct:redisServer
config_lazy_lock	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool config_lazy_lock =$/;"	v
config_line	deps/jemalloc/scripts/gen_run_tests.py	/^                config_line = ($/;"	v
config_log	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool config_log =$/;"	v
config_malloc_conf	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const char * const config_malloc_conf = JEMALLOC_CONFIG_MALLOC_CONF;$/;"	v
config_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t	config_node[] = {$/;"	v	file:
config_prof	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool config_prof =$/;"	v
config_prof_libgcc	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool config_prof_libgcc =$/;"	v
config_prof_libunwind	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool config_prof_libunwind =$/;"	v
config_set_all_nodes	tests/cluster/tests/includes/utils.tcl	/^proc config_set_all_nodes {keyword value} {$/;"	p
config_set_bool_field	src/config.c	685;"	d	file:
config_set_else	src/config.c	711;"	d	file:
config_set_memory_field	src/config.c	698;"	d	file:
config_set_numerical_field	src/config.c	691;"	d	file:
config_set_special_field	src/config.c	704;"	d	file:
config_set_special_field_with_alias	src/config.c	707;"	d	file:
config_stats	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool config_stats =$/;"	v
config_stats	deps/jemalloc/test/integration/allocated.c	/^static const bool config_stats =$/;"	v	file:
config_tls	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool config_tls =$/;"	v
config_utrace	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool config_utrace =$/;"	v
config_xmalloc	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool config_xmalloc =$/;"	v
configfile	src/server.h	/^    char *configfile;           \/* Absolute config file path, or NULL *\/$/;"	m	struct:redisServer
configs	src/config.c	/^standardConfig configs[] = {$/;"	v
configs	src/config.c	/^standardConfig configs[];$/;"	v
configure_flag_unusuals	deps/jemalloc/scripts/gen_travis.py	/^configure_flag_unusuals = [$/;"	v
configure_flags	deps/jemalloc/scripts/gen_travis.py	/^    configure_flags = [$/;"	v
confirmWithYes	src/redis-cli.c	/^static int confirmWithYes(char *msg, int ignore_force) {$/;"	f	file:
conn	src/cluster.c	/^    connection *conn;$/;"	m	struct:migrateCachedSocket	file:
conn	src/cluster.h	/^    connection *conn;           \/* Connection to remote node *\/$/;"	m	struct:clusterLink
conn	src/cluster.h	/^    connection* conn; \/\/ conn for this node, used in hg data consistency$/;"	m	struct:clusterNode
conn	src/rio.h	/^            connection *conn;   \/* Connection *\/$/;"	m	struct:_rio::__anon54::__anon57
conn	src/rio.h	/^        } conn;$/;"	m	union:_rio::__anon54	typeref:struct:_rio::__anon54::__anon57
conn	src/scripting.c	/^    connection *conn; \/* Connection of the debugging client. *\/$/;"	m	struct:ldbState	file:
conn	src/server.h	/^    connection *conn;$/;"	m	struct:client
connAccept	src/connection.h	/^static inline int connAccept(connection *conn, ConnectionCallbackFunc accept_handler) {$/;"	f
connBlock	src/connection.c	/^int connBlock(connection *conn) {$/;"	f
connBlockingConnect	src/connection.h	/^static inline int connBlockingConnect(connection *conn, const char *addr, int port, long long timeout) {$/;"	f
connClose	src/connection.h	/^static inline void connClose(connection *conn) {$/;"	f
connConnect	src/connection.h	/^static inline int connConnect(connection *conn, const char *addr, int port, const char *src_addr,$/;"	f
connCreateAcceptedSocket	src/connection.c	/^connection *connCreateAcceptedSocket(int fd) {$/;"	f
connCreateAcceptedTLS	src/tls.c	/^connection *connCreateAcceptedTLS(int fd, int require_auth) {$/;"	f
connCreateSocket	src/connection.c	/^connection *connCreateSocket() {$/;"	f
connCreateTLS	src/tls.c	/^connection *connCreateTLS(void) { $/;"	f
connCreateTLS	src/tls.c	/^connection *connCreateTLS(void) {$/;"	f
connDecrRefs	src/connhelpers.h	/^static inline void connDecrRefs(connection *conn) {$/;"	f
connDisableTcpNoDelay	src/connection.c	/^int connDisableTcpNoDelay(connection *conn) {$/;"	f
connEnableTcpNoDelay	src/connection.c	/^int connEnableTcpNoDelay(connection *conn) {$/;"	f
connFormatFdAddr	src/connection.c	/^int connFormatFdAddr(connection *conn, char *buf, size_t buf_len, int fd_to_str_type) {$/;"	f
connGetInfo	src/connection.c	/^const char *connGetInfo(connection *conn, char *buf, size_t buf_len) {$/;"	f
connGetLastError	src/connection.h	/^static inline const char *connGetLastError(connection *conn) {$/;"	f
connGetPrivateData	src/connection.c	/^void *connGetPrivateData(connection *conn) {$/;"	f
connGetSocketError	src/connection.c	/^int connGetSocketError(connection *conn) {$/;"	f
connGetState	src/connection.c	/^int connGetState(connection *conn) {$/;"	f
connGetType	src/connection.h	/^static inline int connGetType(connection *conn) {$/;"	f
connHasReadHandler	src/connection.c	/^int connHasReadHandler(connection *conn) {$/;"	f
connHasRefs	src/connhelpers.h	/^static inline int connHasRefs(connection *conn) {$/;"	f
connHasWriteHandler	src/connection.c	/^int connHasWriteHandler(connection *conn) {$/;"	f
connIncrRefs	src/connhelpers.h	/^static inline void connIncrRefs(connection *conn) {$/;"	f
connKeepAlive	src/connection.c	/^int connKeepAlive(connection *conn, int interval) {$/;"	f
connNonBlock	src/connection.c	/^int connNonBlock(connection *conn) {$/;"	f
connPeerToString	src/connection.c	/^int connPeerToString(connection *conn, char *ip, size_t ip_len, int *port) {$/;"	f
connRead	src/connection.h	/^static inline int connRead(connection *conn, void *buf, size_t buf_len) {$/;"	f
connRecvTimeout	src/connection.c	/^int connRecvTimeout(connection *conn, long long ms) {$/;"	f
connSendTimeout	src/connection.c	/^int connSendTimeout(connection *conn, long long ms) {$/;"	f
connSetPrivateData	src/connection.c	/^void connSetPrivateData(connection *conn, void *data) {$/;"	f
connSetReadHandler	src/connection.h	/^static inline int connSetReadHandler(connection *conn, ConnectionCallbackFunc func) {$/;"	f
connSetWriteHandler	src/connection.h	/^static inline int connSetWriteHandler(connection *conn, ConnectionCallbackFunc func) {$/;"	f
connSetWriteHandlerWithBarrier	src/connection.h	/^static inline int connSetWriteHandlerWithBarrier(connection *conn, ConnectionCallbackFunc func, int barrier) {$/;"	f
connSockName	src/connection.c	/^int connSockName(connection *conn, char *ip, size_t ip_len, int *port) {$/;"	f
connSocketAccept	src/connection.c	/^static int connSocketAccept(connection *conn, ConnectionCallbackFunc accept_handler) {$/;"	f	file:
connSocketBlockingConnect	src/connection.c	/^static int connSocketBlockingConnect(connection *conn, const char *addr, int port, long long timeout) {$/;"	f	file:
connSocketClose	src/connection.c	/^static void connSocketClose(connection *conn) {$/;"	f	file:
connSocketConnect	src/connection.c	/^static int connSocketConnect(connection *conn, const char *addr, int port, const char *src_addr,$/;"	f	file:
connSocketEventHandler	src/connection.c	/^static void connSocketEventHandler(struct aeEventLoop *el, int fd, void *clientData, int mask)$/;"	f	file:
connSocketGetLastError	src/connection.c	/^static const char *connSocketGetLastError(connection *conn) {$/;"	f	file:
connSocketGetType	src/connection.c	/^static int connSocketGetType(connection *conn) {$/;"	f	file:
connSocketRead	src/connection.c	/^static int connSocketRead(connection *conn, void *buf, size_t buf_len) {$/;"	f	file:
connSocketSetReadHandler	src/connection.c	/^static int connSocketSetReadHandler(connection *conn, ConnectionCallbackFunc func) {$/;"	f	file:
connSocketSetWriteHandler	src/connection.c	/^static int connSocketSetWriteHandler(connection *conn, ConnectionCallbackFunc func, int barrier) {$/;"	f	file:
connSocketSyncRead	src/connection.c	/^static ssize_t connSocketSyncRead(connection *conn, char *ptr, ssize_t size, long long timeout) {$/;"	f	file:
connSocketSyncReadLine	src/connection.c	/^static ssize_t connSocketSyncReadLine(connection *conn, char *ptr, ssize_t size, long long timeout) {$/;"	f	file:
connSocketSyncWrite	src/connection.c	/^static ssize_t connSocketSyncWrite(connection *conn, char *ptr, ssize_t size, long long timeout) {$/;"	f	file:
connSocketWrite	src/connection.c	/^static int connSocketWrite(connection *conn, const void *data, size_t data_len) {$/;"	f	file:
connSyncRead	src/connection.h	/^static inline ssize_t connSyncRead(connection *conn, char *ptr, ssize_t size, long long timeout) {$/;"	f
connSyncReadLine	src/connection.h	/^static inline ssize_t connSyncReadLine(connection *conn, char *ptr, ssize_t size, long long timeout) {$/;"	f
connSyncWrite	src/connection.h	/^static inline ssize_t connSyncWrite(connection *conn, char *ptr, ssize_t size, long long timeout) {$/;"	f
connTLSAccept	src/tls.c	/^static int connTLSAccept(connection *_conn, ConnectionCallbackFunc accept_handler) {$/;"	f	file:
connTLSBlockingConnect	src/tls.c	/^static int connTLSBlockingConnect(connection *conn_, const char *addr, int port, long long timeout) {$/;"	f	file:
connTLSClose	src/tls.c	/^static void connTLSClose(connection *conn_) {$/;"	f	file:
connTLSConnect	src/tls.c	/^static int connTLSConnect(connection *conn_, const char *addr, int port, const char *src_addr, ConnectionCallbackFunc connect_handler) {$/;"	f	file:
connTLSGetLastError	src/tls.c	/^static const char *connTLSGetLastError(connection *conn_) {$/;"	f	file:
connTLSGetPeerCert	src/tls.c	/^sds connTLSGetPeerCert(connection *conn_) {$/;"	f
connTLSGetType	src/tls.c	/^static int connTLSGetType(connection *conn_) {$/;"	f	file:
connTLSRead	src/tls.c	/^static int connTLSRead(connection *conn_, void *buf, size_t buf_len) {$/;"	f	file:
connTLSSetReadHandler	src/tls.c	/^int connTLSSetReadHandler(connection *conn, ConnectionCallbackFunc func) {$/;"	f
connTLSSetWriteHandler	src/tls.c	/^int connTLSSetWriteHandler(connection *conn, ConnectionCallbackFunc func, int barrier) {$/;"	f
connTLSSyncRead	src/tls.c	/^static ssize_t connTLSSyncRead(connection *conn_, char *ptr, ssize_t size, long long timeout) {$/;"	f	file:
connTLSSyncReadLine	src/tls.c	/^static ssize_t connTLSSyncReadLine(connection *conn_, char *ptr, ssize_t size, long long timeout) {$/;"	f	file:
connTLSSyncWrite	src/tls.c	/^static ssize_t connTLSSyncWrite(connection *conn_, char *ptr, ssize_t size, long long timeout) {$/;"	f	file:
connTLSWrite	src/tls.c	/^static int connTLSWrite(connection *conn_, const void *data, size_t data_len) {$/;"	f	file:
connWrite	src/connection.h	/^static inline int connWrite(connection *conn, const void *data, size_t data_len) {$/;"	f
conn_handler	src/connection.h	/^    ConnectionCallbackFunc conn_handler;$/;"	m	struct:connection
connect	deps/hiredis/sockcompat.h	82;"	d
connect	src/connection.h	/^    int (*connect)(struct connection *conn, const char *addr, int port, const char *source_addr, ConnectionCallbackFunc connect_handler);$/;"	m	struct:ConnectionType
connectCallback	deps/hiredis/examples/example-ae.c	/^void connectCallback(const redisAsyncContext *c, int status) {$/;"	f
connectCallback	deps/hiredis/examples/example-ivykis.c	/^void connectCallback(const redisAsyncContext *c, int status) {$/;"	f
connectCallback	deps/hiredis/examples/example-libev.c	/^void connectCallback(const redisAsyncContext *c, int status) {$/;"	f
connectCallback	deps/hiredis/examples/example-libevent-ssl.c	/^void connectCallback(const redisAsyncContext *c, int status) {$/;"	f
connectCallback	deps/hiredis/examples/example-libevent.c	/^void connectCallback(const redisAsyncContext *c, int status) {$/;"	f
connectCallback	deps/hiredis/examples/example-libuv.c	/^void connectCallback(const redisAsyncContext *c, int status) {$/;"	f
connectCallback	deps/hiredis/examples/example-macosx.c	/^void connectCallback(const redisAsyncContext *c, int status) {$/;"	f
connectCallback	exp/exp2_micro.c	/^void connectCallback(const redisAsyncContext *c, int status) {$/;"	f
connectWithMaster	src/replication.c	/^int connectWithMaster(void) {$/;"	f
connect_cb	deps/hiredis/examples/example-glib.c	/^connect_cb (const redisAsyncContext *ac G_GNUC_UNUSED,$/;"	f	file:
connect_timeout	deps/hiredis/hiredis.h	/^    const struct timeval *connect_timeout;$/;"	m	struct:__anon80	typeref:struct:__anon80::timeval
connect_timeout	deps/hiredis/hiredis.h	/^    struct timeval *connect_timeout;$/;"	m	struct:redisContext	typeref:struct:redisContext::timeval
connected	src/redis-cli.c	/^    int connected;$/;"	m	struct:clusterManagerLink	file:
connection	src/connection.h	/^struct connection {$/;"	s
connection	src/connection.h	/^typedef struct connection connection;$/;"	t	typeref:struct:connection
connection_type	deps/hiredis/hiredis.h	/^    enum redisConnectionType connection_type;$/;"	m	struct:redisContext	typeref:enum:redisContext::redisConnectionType
connection_type	deps/hiredis/test.c	/^enum connection_type {$/;"	g	file:
constfolding	deps/lua/src/lcode.c	/^static int constfolding (OpCode op, expdesc *e1, expdesc *e2) {$/;"	f	file:
constructor	deps/lua/src/lparser.c	/^static void constructor (LexState *ls, expdesc *t) {$/;"	f	file:
consumeNewline	src/redis-check-aof.c	/^int consumeNewline(char *buf) {$/;"	f
consume_subscribe_messages	tests/support/util.tcl	/^proc consume_subscribe_messages {client type channels} {$/;"	p
consumer	src/stream.h	/^    streamConsumer *consumer;   \/* The consumer this message was delivered to$/;"	m	struct:streamNACK
consumers	src/stream.h	/^    rax *consumers;         \/* A radix tree representing the consumers by name$/;"	m	struct:streamCG
container	src/quicklist.h	/^    unsigned int container : 2;  \/* NONE==1 or ZIPLIST==2 *\/$/;"	m	struct:quicklistNode
contents	deps/lua/doc/contents.html	/^<H2><A NAME="contents">Contents<\/A><\/H2>$/;"	a
contents	src/intset.h	/^    int8_t contents[];$/;"	m	struct:intset
context	deps/hiredis/adapters/ae.h	/^    redisAsyncContext *context;$/;"	m	struct:redisAeEvents
context	deps/hiredis/adapters/ivykis.h	/^    redisAsyncContext *context;$/;"	m	struct:redisIvykisEvents
context	deps/hiredis/adapters/libev.h	/^    redisAsyncContext *context;$/;"	m	struct:redisLibevEvents
context	deps/hiredis/adapters/libevent.h	/^    redisAsyncContext *context;$/;"	m	struct:redisLibeventEvents
context	deps/hiredis/adapters/libuv.h	/^  redisAsyncContext* context;$/;"	m	struct:redisLibuvEvents
context	deps/hiredis/adapters/macosx.h	/^    redisAsyncContext *context;$/;"	m	struct:__anon86
context	src/acl.c	/^    int context;        \/* Toplevel, Lua or MULTI\/EXEC? ACL_LOG_CTX_*. *\/$/;"	m	struct:ACLLogEntry	file:
context	src/redis-benchmark.c	/^    redisContext *context;$/;"	m	struct:_client	file:
context	src/redis-cli.c	/^    redisContext *context;$/;"	m	struct:clusterManagerNode	file:
context	src/redis-cli.c	/^static redisContext *context;$/;"	v	file:
context	src/sentinel.c	/^    redisAsyncContext *context;$/;"	m	struct:redisAeEvents	file:
controloptions	deps/lua/src/lua_struct.c	/^static void controloptions (lua_State *L, int opt, const char **fmt,$/;"	f	file:
conversion	src/geohash.h	/^    double conversion; \/* km: 1000 *\/$/;"	m	struct:__anon51
conversion_ratio	deps/hdr_histogram/hdr_histogram.h	/^    double conversion_ratio;$/;"	m	struct:hdr_histogram
convert_empty_to_null	src/config.c	/^    int convert_empty_to_null; \/* Boolean indicating if empty SDS strings should$/;"	m	struct:sdsConfigData	file:
convert_empty_to_null	src/config.c	/^    int convert_empty_to_null; \/* Boolean indicating if empty strings should$/;"	m	struct:stringConfigData	file:
copy	src/redismodule.h	/^    RedisModuleTypeCopyFunc copy;$/;"	m	struct:RedisModuleTypeMethods
copy	src/server.h	/^    moduleTypeCopyFunc copy;$/;"	m	struct:RedisModuleType
copyClientOutputBuffer	src/networking.c	/^void copyClientOutputBuffer(client *dst, client *src) {$/;"	f
copyCommand	src/db.c	/^void copyCommand(client *c) {$/;"	f
correctbytes	deps/lua/src/lua_struct.c	/^static void correctbytes (char *b, int size, int endian) {$/;"	f	file:
correctstack	deps/lua/src/ldo.c	/^static void correctstack (lua_State *L, TValue *oldstack) {$/;"	f	file:
corrupt_payload	tests/integration/corrupt-dump-fuzzer.tcl	/^proc corrupt_payload {payload} {$/;"	p
costatus	deps/lua/src/lbaselib.c	/^static int costatus (lua_State *L, lua_State *co) {$/;"	f	file:
count	deps/hdr_histogram/hdr_histogram.h	/^    int64_t count;$/;"	m	struct:hdr_iter
count	deps/jemalloc/include/jemalloc/internal/ckh.h	/^	size_t count;$/;"	m	struct:__anon151
count	src/acl.c	/^    uint64_t count;     \/* Number of times this happened recently. *\/$/;"	m	struct:ACLLogEntry	file:
count	src/cluster.h	/^    uint16_t count;     \/* Only used for some kind of messages. *\/$/;"	m	struct:__anon43
count	src/quicklist.h	/^    unsigned int count : 16;     \/* count of items in ziplist *\/$/;"	m	struct:quicklistNode
count	src/quicklist.h	/^    unsigned long count;        \/* total count of all entries in all ziplists *\/$/;"	m	struct:quicklist
count	src/redis-cli.c	/^    int count;                  \/* Non-NULL nodes count *\/$/;"	m	struct:clusterManagerNodeArray	file:
count	src/redis-cli.c	/^    long long count; \/* Number of samples in this interval. *\/$/;"	m	struct:distsamples	file:
count	src/redis-cli.c	/^    unsigned long long count;$/;"	m	struct:__anon14	file:
count	src/server.h	/^    int count;              \/* Total number of MULTI commands *\/$/;"	m	struct:multiState
count	src/server.h	/^    int count;$/;"	m	struct:socketFds
count	src/server.h	/^    long long count;$/;"	m	struct:redisError
count	src/sha1.h	/^    uint32_t count[2];$/;"	m	struct:__anon69
count	tests/modules/hooks.c	/^    long count;$/;"	m	struct:EventElement	file:
countDigits	deps/hiredis/hiredis.c	/^static uint32_t countDigits(uint64_t v) {$/;"	f	file:
countKeysInSlot	src/db.c	/^unsigned int countKeysInSlot(unsigned int hashslot) {$/;"	f
count_added_in_this_iteration_step	deps/hdr_histogram/hdr_histogram.h	/^    int64_t count_added_in_this_iteration_step;$/;"	m	struct:hdr_iter_linear
count_added_in_this_iteration_step	deps/hdr_histogram/hdr_histogram.h	/^    int64_t count_added_in_this_iteration_step;$/;"	m	struct:hdr_iter_log
count_added_in_this_iteration_step	deps/hdr_histogram/hdr_histogram.h	/^    int64_t count_added_in_this_iteration_step;$/;"	m	struct:hdr_iter_recorded
count_bits	tests/unit/bitops.tcl	/^proc count_bits s {$/;"	p
count_leading_zeros_64	deps/hdr_histogram/hdr_histogram.c	/^static int32_t count_leading_zeros_64(int64_t value)$/;"	f	file:
count_log_lines	tests/support/util.tcl	/^proc count_log_lines {srv_idx} {$/;"	p
count_log_message	tests/support/util.tcl	/^proc count_log_message {srv_idx pattern} {$/;"	p
count_log_message	tests/unit/moduleapi/fork.tcl	/^proc count_log_message {pattern} {$/;"	p
count_message_lines	tests/support/util.tcl	/^proc count_message_lines {file pattern} {$/;"	p
counter	utils/lru/lfu-simulation.c	/^    uint8_t counter;    \/* Logarithmic counter. *\/$/;"	m	struct:entry	file:
countint	deps/lua/src/ltable.c	/^static int countint (const TValue *key, int *nums) {$/;"	f	file:
counts	deps/hdr_histogram/hdr_histogram.h	/^    int64_t* counts;$/;"	m	struct:hdr_histogram
counts_get_direct	deps/hdr_histogram/hdr_histogram.c	/^static int64_t counts_get_direct(const struct hdr_histogram* h, int32_t index)$/;"	f	file:
counts_get_normalised	deps/hdr_histogram/hdr_histogram.c	/^static int64_t counts_get_normalised(const struct hdr_histogram* h, int32_t index)$/;"	f	file:
counts_inc_normalised	deps/hdr_histogram/hdr_histogram.c	/^static void counts_inc_normalised($/;"	f	file:
counts_inc_normalised_atomic	deps/hdr_histogram/hdr_histogram.c	/^static void counts_inc_normalised_atomic($/;"	f	file:
counts_index	deps/hdr_histogram/hdr_histogram.c	/^static int32_t counts_index(const struct hdr_histogram* h, int32_t bucket_index, int32_t sub_bucket_index)$/;"	f	file:
counts_index	deps/hdr_histogram/hdr_histogram.h	/^    int32_t counts_index;$/;"	m	struct:hdr_iter
counts_index_for	deps/hdr_histogram/hdr_histogram.c	/^int32_t counts_index_for(const struct hdr_histogram* h, int64_t value)$/;"	f
counts_len	deps/hdr_histogram/hdr_histogram.h	/^    int32_t counts_len;$/;"	m	struct:hdr_histogram
counts_len	deps/hdr_histogram/hdr_histogram.h	/^    int32_t counts_len;$/;"	m	struct:hdr_histogram_bucket_config
cow	src/childinfo.c	/^    size_t cow;$/;"	m	struct:__anon30	file:
cow_updated	src/childinfo.c	/^    monotime cow_updated;$/;"	m	struct:__anon30	file:
cport	src/cluster.h	/^    int cport;                  \/* Latest known cluster port of this node. *\/$/;"	m	struct:clusterNode
cport	src/cluster.h	/^    uint16_t cport;             \/* cluster port last time it was seen *\/$/;"	m	struct:__anon31
cport	src/cluster.h	/^    uint16_t cport;      \/* Sender TCP cluster bus port *\/$/;"	m	struct:__anon43
cpu_hot_state	src/server.h	/^    hotState cpu_hot_state;$/;"	m	struct:redisServer
crashlog_enabled	src/server.h	/^    int crashlog_enabled;           \/* Enable signal handler for crashlog.$/;"	m	struct:redisServer
crashlog_from_file	tests/support/util.tcl	/^proc crashlog_from_file {filename} {$/;"	p
crc16	src/crc16.c	/^uint16_t crc16(const char *buf, int len) {$/;"	f
crc16_slot_table	src/crc16_slottable.h	/^const char *crc16_slot_table[] = {$/;"	v
crc16tab	src/crc16.c	/^static const uint16_t crc16tab[256]= {$/;"	v	file:
crc64	src/crc64.c	/^uint64_t crc64(uint64_t crc, const unsigned char *s, uint64_t l) {$/;"	f
crc64Hash	utils/tracking_collisions.c	/^uint64_t crc64Hash(char *key, size_t len) {$/;"	f
crc64Test	src/crc64.c	/^int crc64Test(int argc, char *argv[], int accurate) {$/;"	f
crc64_init	src/crc64.c	/^void crc64_init(void) {$/;"	f
crc64_table	src/crc64.c	/^static uint64_t crc64_table[8][256] = {{0}};$/;"	v	file:
crc_reflect	src/crc64.c	/^static inline uint_fast64_t crc_reflect(uint_fast64_t data, size_t data_len) {$/;"	f	file:
crcfn16	src/crcspeed.h	/^typedef uint16_t (*crcfn16)(uint16_t, const void *, const uint64_t);$/;"	t
crcfn64	src/crcspeed.h	/^typedef uint64_t (*crcfn64)(uint64_t, const void *, const uint64_t);$/;"	t
crcspeed16big	src/crcspeed.c	/^uint16_t crcspeed16big(uint16_t big_table[8][256], uint16_t crc_in, void *buf,$/;"	f
crcspeed16big_init	src/crcspeed.c	/^void crcspeed16big_init(crcfn16 fn, uint16_t big_table[8][256]) {$/;"	f
crcspeed16little	src/crcspeed.c	/^uint16_t crcspeed16little(uint16_t little_table[8][256], uint16_t crc,$/;"	f
crcspeed16little_init	src/crcspeed.c	/^void crcspeed16little_init(crcfn16 crcfn, uint16_t table[8][256]) {$/;"	f
crcspeed16native	src/crcspeed.c	/^uint16_t crcspeed16native(uint16_t table[8][256], uint16_t crc, void *buf,$/;"	f
crcspeed16native_init	src/crcspeed.c	/^void crcspeed16native_init(crcfn16 fn, uint16_t table[8][256]) {$/;"	f
crcspeed64big	src/crcspeed.c	/^uint64_t crcspeed64big(uint64_t big_table[8][256], uint64_t crc, void *buf,$/;"	f
crcspeed64big_init	src/crcspeed.c	/^void crcspeed64big_init(crcfn64 fn, uint64_t big_table[8][256]) {$/;"	f
crcspeed64little	src/crcspeed.c	/^uint64_t crcspeed64little(uint64_t little_table[8][256], uint64_t crc,$/;"	f
crcspeed64little_init	src/crcspeed.c	/^void crcspeed64little_init(crcfn64 crcfn, uint64_t table[8][256]) {$/;"	f
crcspeed64native	src/crcspeed.c	/^uint64_t crcspeed64native(uint64_t table[8][256], uint64_t crc, void *buf,$/;"	f
crcspeed64native_init	src/crcspeed.c	/^void crcspeed64native_init(crcfn64 fn, uint64_t table[8][256]) {$/;"	f
creat	deps/jemalloc/include/jemalloc/internal/hooks.h	14;"	d
createAOFClient	src/aof.c	/^struct client *createAOFClient(void) {$/;"	f
createArray	deps/hiredis/read.h	/^    void *(*createArray)(const redisReadTask*, size_t);$/;"	m	struct:redisReplyObjectFunctions
createArrayObject	deps/hiredis/hiredis.c	/^static void *createArrayObject(const redisReadTask *task, size_t elements) {$/;"	f	file:
createBenchmarkThread	src/redis-benchmark.c	/^static benchmarkThread *createBenchmarkThread(int index) {$/;"	f	file:
createBool	deps/hiredis/read.h	/^    void *(*createBool)(const redisReadTask*, int);$/;"	m	struct:redisReplyObjectFunctions
createBoolConfig	src/config.c	1784;"	d	file:
createBoolObject	deps/hiredis/hiredis.c	/^static void *createBoolObject(const redisReadTask *task, int bval) {$/;"	f	file:
createClient	src/networking.c	/^client *createClient(connection *conn) {$/;"	f
createClient	src/redis-benchmark.c	/^static client createClient(char *cmd, size_t len, client from, int thread_id) {$/;"	f	file:
createClusterLink	src/cluster.c	/^clusterLink *createClusterLink(clusterNode *node) {$/;"	f
createClusterManagerCommand	src/redis-cli.c	/^static void createClusterManagerCommand(char *cmdname, int argc, char **argv) {$/;"	f	file:
createClusterNode	src/cluster.c	/^clusterNode *createClusterNode(char *nodename, int flags) {$/;"	f
createClusterNode	src/redis-benchmark.c	/^static clusterNode *createClusterNode(char *ip, int port) {$/;"	f	file:
createComplexDataset	tests/support/util.tcl	/^proc createComplexDataset {r ops {opt {}}} {$/;"	p
createDouble	deps/hiredis/read.h	/^    void *(*createDouble)(const redisReadTask*, double, char*, size_t);$/;"	m	struct:redisReplyObjectFunctions
createDoubleObject	deps/hiredis/hiredis.c	/^static void *createDoubleObject(const redisReadTask *task, double value, char *str, size_t len) {$/;"	f	file:
createDumpPayload	src/cluster.c	/^void createDumpPayload(rio *payload, robj *o, robj *key) {$/;"	f
createEmbeddedStringObject	src/object.c	/^robj *createEmbeddedStringObject(const char *ptr, size_t len) {$/;"	f
createEnumConfig	src/config.c	1925;"	d	file:
createFragObject	tests/modules/defragtest.c	/^struct FragObject *createFragObject(unsigned long len, unsigned long size, int maxstep) {$/;"	f
createGlobalStrings	tests/modules/defragtest.c	/^static void createGlobalStrings(RedisModuleCtx *ctx, int count)$/;"	f	file:
createHLLObject	src/hyperloglog.c	/^robj *createHLLObject(void) {$/;"	f
createHashObject	src/object.c	/^robj *createHashObject(void) {$/;"	f
createHelloTypeObject	src/modules/hellotype.c	/^struct HelloTypeObject *createHelloTypeObject(void) {$/;"	f
createInstanceLink	src/sentinel.c	/^instanceLink *createInstanceLink(void) {$/;"	f
createIntConfig	src/config.c	2090;"	d	file:
createIntList	src/ziplist.c	/^static unsigned char *createIntList() {$/;"	f	file:
createInteger	deps/hiredis/read.h	/^    void *(*createInteger)(const redisReadTask*, long long);$/;"	m	struct:redisReplyObjectFunctions
createIntegerObject	deps/hiredis/hiredis.c	/^static void *createIntegerObject(const redisReadTask *task, long long value) {$/;"	f	file:
createIntsetObject	src/object.c	/^robj *createIntsetObject(void) {$/;"	f
createLatencyReport	src/latency.c	/^sds createLatencyReport(void) {$/;"	f
createLazyFreeLinkObject	tests/modules/test_lazyfree.c	/^struct LazyFreeLinkObject *createLazyFreeLinkObject(void) {$/;"	f
createList	src/ziplist.c	/^static unsigned char *createList() {$/;"	f	file:
createLongConfig	src/config.c	2104;"	d	file:
createLongLongConfig	src/config.c	2118;"	d	file:
createMissingClients	src/redis-benchmark.c	/^static void createMissingClients(client c) {$/;"	f	file:
createModuleObject	src/object.c	/^robj *createModuleObject(moduleType *mt, void *value) {$/;"	f
createNil	deps/hiredis/read.h	/^    void *(*createNil)(const redisReadTask*);$/;"	m	struct:redisReplyObjectFunctions
createNilObject	deps/hiredis/hiredis.c	/^static void *createNilObject(const redisReadTask *task) {$/;"	f	file:
createObject	src/object.c	/^robj *createObject(int type, void *ptr) {$/;"	f
createObjectFromStreamID	src/t_stream.c	/^robj *createObjectFromStreamID(streamID *id) {$/;"	f
createOffTConfig	src/config.c	2153;"	d	file:
createPidFile	src/server.c	/^void createPidFile(void) {$/;"	f
createQuicklistObject	src/object.c	/^robj *createQuicklistObject(void) {$/;"	f
createRawStringObject	src/object.c	/^robj *createRawStringObject(const char *ptr, size_t len) {$/;"	f
createReplicationBacklog	src/replication.c	/^void createReplicationBacklog(void) {$/;"	f
createReplyObject	deps/hiredis/hiredis.c	/^static redisReply *createReplyObject(int type) {$/;"	f	file:
createSDSConfig	src/config.c	1869;"	d	file:
createSSLContext	src/tls.c	/^static SSL_CTX *createSSLContext(redisTLSContextConfig *ctx_config, int protocols, int client) {$/;"	f	file:
createSSizeTConfig	src/config.c	2139;"	d	file:
createSentinelAddr	src/sentinel.c	/^sentinelAddr *createSentinelAddr(char *hostname, int port) {$/;"	f
createSentinelRedisInstance	src/sentinel.c	/^sentinelRedisInstance *createSentinelRedisInstance(char *name, int flags, char *hostname, int port, int quorum, sentinelRedisInstance *master) {$/;"	f
createSet	src/intset.c	/^static intset *createSet(int bits, int size) {$/;"	f	file:
createSetObject	src/object.c	/^robj *createSetObject(void) {$/;"	f
createSharedObjects	src/server.c	/^void createSharedObjects(void) {$/;"	f
createSizeTConfig	src/config.c	2132;"	d	file:
createSocketAcceptHandler	src/server.c	/^int createSocketAcceptHandler(socketFds *sfd, aeFileProc *accept_handler) {$/;"	f
createSortOperation	src/sort.c	/^redisSortOperation *createSortOperation(int type, robj *pattern) {$/;"	f
createSparklineSequence	src/sparkline.c	/^struct sequence *createSparklineSequence(void) {$/;"	f
createStreamObject	src/object.c	/^robj *createStreamObject(void) {$/;"	f
createString	deps/hiredis/read.h	/^    void *(*createString)(const redisReadTask*, char*, size_t);$/;"	m	struct:redisReplyObjectFunctions
createStringConfig	src/config.c	1857;"	d	file:
createStringObject	deps/hiredis/hiredis.c	/^static void *createStringObject(const redisReadTask *task, char *str, size_t len) {$/;"	f	file:
createStringObject	src/object.c	/^robj *createStringObject(const char *ptr, size_t len) {$/;"	f
createStringObjectFromLongDouble	src/object.c	/^robj *createStringObjectFromLongDouble(long double value, int humanfriendly) {$/;"	f
createStringObjectFromLongLong	src/object.c	/^robj *createStringObjectFromLongLong(long long value) {$/;"	f
createStringObjectFromLongLongForValue	src/object.c	/^robj *createStringObjectFromLongLongForValue(long long value) {$/;"	f
createStringObjectFromLongLongWithOptions	src/object.c	/^robj *createStringObjectFromLongLongWithOptions(long long value, int valueobj) {$/;"	f
createTLSConnection	src/tls.c	/^static connection *createTLSConnection(int client_side) {$/;"	f	file:
createTimeTConfig	src/config.c	2146;"	d	file:
createUIntConfig	src/config.c	2097;"	d	file:
createULongConfig	src/config.c	2111;"	d	file:
createULongLongConfig	src/config.c	2125;"	d	file:
createZiplistObject	src/object.c	/^robj *createZiplistObject(void) {$/;"	f
createZsetObject	src/object.c	/^robj *createZsetObject(void) {$/;"	f
createZsetZiplistObject	src/object.c	/^robj *createZsetZiplistObject(void) {$/;"	f
create_aof	tests/integration/aof.tcl	/^proc create_aof {code} {$/;"	p
create_cluster	tests/cluster/cluster.tcl	/^proc create_cluster {masters slaves} {$/;"	p
create_cluster_with_mixedSlot	tests/cluster/tests/15-cluster-slots.tcl	/^proc create_cluster_with_mixedSlot {masters slaves} {$/;"	p
create_default_lex_zset	tests/unit/type/zset.tcl	/^        proc create_default_lex_zset {} {$/;"	p
create_default_zset	tests/unit/type/zset.tcl	/^        proc create_default_zset {} {$/;"	p
create_hash	tests/unit/type/hash.tcl	/^    proc create_hash {key entries} {$/;"	p
create_list	tests/unit/type/list.tcl	/^    proc create_list {key entries} {$/;"	p
create_random_dataset	tests/unit/sort.tcl	/^    proc create_random_dataset {num cmd} {$/;"	p
create_redis_master_slave_cluster	tests/instances.tcl	/^proc create_redis_master_slave_cluster n {$/;"	p
create_server_config_file	tests/support/server.tcl	/^proc create_server_config_file {filename config} {$/;"	p
create_set	tests/unit/type/set.tcl	/^    proc create_set {key entries} {$/;"	p
create_time	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	nstime_t		create_time;$/;"	m	struct:arena_s
create_zset	tests/unit/type/zset.tcl	/^    proc create_zset {key items} {$/;"	p
createconsumer	src/server.h	/^    *lastid, *ping, *setid, *keepttl, *load, *createconsumer,$/;"	m	struct:sharedObjectsStruct
createmeta	deps/lua/src/liolib.c	/^static void createmeta (lua_State *L) {$/;"	f	file:
createmetatable	deps/lua/src/lstrlib.c	/^static void createmetatable (lua_State *L) {$/;"	f	file:
createstdfile	deps/lua/src/liolib.c	/^static void createstdfile (lua_State *L, FILE *f, int k, const char *fname) {$/;"	f	file:
crlf	src/server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *pong, *space,$/;"	m	struct:sharedObjectsStruct
cronLoopCallback	tests/modules/hooks.c	/^void cronLoopCallback(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)$/;"	f
cronUpdateMemoryStats	src/server.c	/^void cronUpdateMemoryStats() {$/;"	f
cron_malloc_stats	src/server.h	/^    struct malloc_stats cron_malloc_stats; \/* sampled in serverCron(). *\/$/;"	m	struct:redisServer	typeref:struct:redisServer::malloc_stats
cronloops	src/server.h	/^    int cronloops;              \/* Number of times the cron function run *\/$/;"	m	struct:redisServer
csv	src/redis-benchmark.c	/^    int csv;$/;"	m	struct:config	file:
csvdump	tests/support/util.tcl	/^proc csvdump r {$/;"	p
csvstring	tests/support/util.tcl	/^proc csvstring s {$/;"	p
ctime	src/acl.c	/^    mstime_t ctime;     \/* Milliseconds time of last update to this entry. *\/$/;"	m	struct:ACLLogEntry	file:
ctime	src/cluster.h	/^    mstime_t ctime;             \/* Link creation time *\/$/;"	m	struct:clusterLink
ctime	src/cluster.h	/^    mstime_t ctime; \/* Node object creation time. *\/$/;"	m	struct:clusterNode
ctime	src/server.h	/^    time_t ctime;           \/* Client creation time. *\/$/;"	m	struct:client
ctime	utils/lru/lfu-simulation.c	/^    time_t ctime;       \/* Key creation time. *\/$/;"	m	struct:entry	file:
ctl	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	int (*ctl)(tsd_t *, const size_t *, size_t, void *, size_t *, void *,$/;"	m	struct:ctl_named_node_s
ctl_accum_arena_stats_u64	deps/jemalloc/src/ctl.c	/^ctl_accum_arena_stats_u64(arena_stats_u64_t *dst, arena_stats_u64_t *src) {$/;"	f	file:
ctl_arena_clear	deps/jemalloc/src/ctl.c	/^ctl_arena_clear(ctl_arena_t *ctl_arena) {$/;"	f	file:
ctl_arena_init	deps/jemalloc/src/ctl.c	/^ctl_arena_init(tsd_t *tsd, extent_hooks_t *extent_hooks) {$/;"	f	file:
ctl_arena_refresh	deps/jemalloc/src/ctl.c	/^ctl_arena_refresh(tsdn_t *tsdn, arena_t *arena, ctl_arena_t *ctl_sdarena,$/;"	f	file:
ctl_arena_s	deps/jemalloc/include/jemalloc/internal/ctl.h	/^struct ctl_arena_s {$/;"	s
ctl_arena_stats_amerge	deps/jemalloc/src/ctl.c	/^ctl_arena_stats_amerge(tsdn_t *tsdn, ctl_arena_t *ctl_arena, arena_t *arena) {$/;"	f	file:
ctl_arena_stats_read_u64	deps/jemalloc/src/ctl.c	/^ctl_arena_stats_read_u64(arena_stats_u64_t *p) {$/;"	f	file:
ctl_arena_stats_s	deps/jemalloc/include/jemalloc/internal/ctl.h	/^typedef struct ctl_arena_stats_s {$/;"	s
ctl_arena_stats_sdmerge	deps/jemalloc/src/ctl.c	/^ctl_arena_stats_sdmerge(ctl_arena_t *ctl_sdarena, ctl_arena_t *ctl_arena,$/;"	f	file:
ctl_arena_stats_t	deps/jemalloc/include/jemalloc/internal/ctl.h	/^} ctl_arena_stats_t;$/;"	t	typeref:struct:ctl_arena_stats_s
ctl_arena_t	deps/jemalloc/include/jemalloc/internal/ctl.h	/^typedef struct ctl_arena_s ctl_arena_t;$/;"	t	typeref:struct:ctl_arena_s
ctl_arenas	deps/jemalloc/src/ctl.c	/^static ctl_arenas_t	*ctl_arenas;$/;"	v	file:
ctl_arenas_s	deps/jemalloc/include/jemalloc/internal/ctl.h	/^typedef struct ctl_arenas_s {$/;"	s
ctl_arenas_t	deps/jemalloc/include/jemalloc/internal/ctl.h	/^} ctl_arenas_t;$/;"	t	typeref:struct:ctl_arenas_s
ctl_background_thread_stats_read	deps/jemalloc/src/ctl.c	/^ctl_background_thread_stats_read(tsdn_t *tsdn) {$/;"	f	file:
ctl_boot	deps/jemalloc/src/ctl.c	/^ctl_boot(void) {$/;"	f
ctl_bymib	deps/jemalloc/src/ctl.c	/^ctl_bymib(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f
ctl_byname	deps/jemalloc/src/ctl.c	/^ctl_byname(tsd_t *tsd, const char *name, void *oldp, size_t *oldlenp,$/;"	f
ctl_indexed_node	deps/jemalloc/src/ctl.c	/^ctl_indexed_node(const ctl_node_t *node) {$/;"	f	file:
ctl_indexed_node_s	deps/jemalloc/include/jemalloc/internal/ctl.h	/^typedef struct ctl_indexed_node_s {$/;"	s
ctl_indexed_node_t	deps/jemalloc/include/jemalloc/internal/ctl.h	/^} ctl_indexed_node_t;$/;"	t	typeref:struct:ctl_indexed_node_s
ctl_init	deps/jemalloc/src/ctl.c	/^ctl_init(tsd_t *tsd) {$/;"	f	file:
ctl_initialized	deps/jemalloc/src/ctl.c	/^static bool		ctl_initialized;$/;"	v	file:
ctl_lookup	deps/jemalloc/src/ctl.c	/^ctl_lookup(tsdn_t *tsdn, const char *name, ctl_node_t const **nodesp,$/;"	f	file:
ctl_mtx	deps/jemalloc/src/ctl.c	/^static malloc_mutex_t	ctl_mtx;$/;"	v	file:
ctl_named_children	deps/jemalloc/src/ctl.c	/^ctl_named_children(const ctl_named_node_t *node, size_t index) {$/;"	f	file:
ctl_named_node	deps/jemalloc/src/ctl.c	/^ctl_named_node(const ctl_node_t *node) {$/;"	f	file:
ctl_named_node_s	deps/jemalloc/include/jemalloc/internal/ctl.h	/^typedef struct ctl_named_node_s {$/;"	s
ctl_named_node_t	deps/jemalloc/include/jemalloc/internal/ctl.h	/^} ctl_named_node_t;$/;"	t	typeref:struct:ctl_named_node_s
ctl_nametomib	deps/jemalloc/src/ctl.c	/^ctl_nametomib(tsd_t *tsd, const char *name, size_t *mibp, size_t *miblenp) {$/;"	f
ctl_node_s	deps/jemalloc/include/jemalloc/internal/ctl.h	/^typedef struct ctl_node_s {$/;"	s
ctl_node_t	deps/jemalloc/include/jemalloc/internal/ctl.h	/^} ctl_node_t;$/;"	t	typeref:struct:ctl_node_s
ctl_postfork_child	deps/jemalloc/src/ctl.c	/^ctl_postfork_child(tsdn_t *tsdn) {$/;"	f
ctl_postfork_parent	deps/jemalloc/src/ctl.c	/^ctl_postfork_parent(tsdn_t *tsdn) {$/;"	f
ctl_prefork	deps/jemalloc/src/ctl.c	/^ctl_prefork(tsdn_t *tsdn) {$/;"	f
ctl_refresh	deps/jemalloc/src/ctl.c	/^ctl_refresh(tsdn_t *tsdn) {$/;"	f	file:
ctl_stats	deps/jemalloc/src/ctl.c	/^static ctl_stats_t	*ctl_stats;$/;"	v	file:
ctl_stats_s	deps/jemalloc/include/jemalloc/internal/ctl.h	/^typedef struct ctl_stats_s {$/;"	s
ctl_stats_t	deps/jemalloc/include/jemalloc/internal/ctl.h	/^} ctl_stats_t;$/;"	t	typeref:struct:ctl_stats_s
ctx	src/module.c	/^    RedisModuleCtx *ctx;$/;"	m	struct:RedisModuleCallReply	file:
ctx	src/module.c	/^    RedisModuleCtx *ctx;$/;"	m	struct:RedisModuleKey	file:
ctx	src/module.c	/^    RedisModuleCtx *ctx;$/;"	m	struct:__anon66	file:
ctx	src/server.h	/^    struct RedisModuleCtx *ctx; \/* Optional context, see RM_GetContextFromIO()*\/$/;"	m	struct:RedisModuleIO	typeref:struct:RedisModuleIO::RedisModuleCtx
ctx	tests/modules/scan.c	/^    RedisModuleCtx *ctx;$/;"	m	struct:__anon77	file:
cum_gctxs	deps/jemalloc/src/prof.c	/^static atomic_u_t	cum_gctxs; \/* Atomic counter. *\/$/;"	v	file:
cumbits	deps/jemalloc/include/jemalloc/internal/rtree.h	/^	unsigned		cumbits;$/;"	m	struct:rtree_level_s
cumulative_count	deps/hdr_histogram/hdr_histogram.h	/^    int64_t cumulative_count;$/;"	m	struct:hdr_iter
curbytes	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	uint64_t	curbytes;$/;"	m	struct:prof_cnt_s
curlextents	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	size_t		curlextents; \/* Derived. *\/$/;"	m	struct:arena_stats_large_s
curobjs	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	uint64_t	curobjs;$/;"	m	struct:prof_cnt_s
curpages	deps/jemalloc/src/extent.c	/^static atomic_zu_t curpages;$/;"	v	file:
currIsNewline	deps/lua/src/llex.c	33;"	d	file:
curr_func	deps/lua/src/lstate.h	59;"	d
curregs	deps/jemalloc/include/jemalloc/internal/bin_stats.h	/^	size_t		curregs;$/;"	m	struct:bin_stats_s
current	deps/lua/src/llex.h	/^  int current;  \/* current character (charint) *\/$/;"	m	struct:LexState
current	src/module.c	/^            void *current;         \/* Zset iterator current node. *\/$/;"	m	struct:RedisModuleKey::__anon62::__anon63	file:
current	src/quicklist.h	/^    quicklistNode *current;$/;"	m	struct:quicklistIter
current	src/server.h	/^    double current;$/;"	m	struct:hotState
currentEpoch	src/cluster.h	/^    uint64_t currentEpoch;  \/* The epoch accordingly to the sending node. *\/$/;"	m	struct:__anon43
currentEpoch	src/cluster.h	/^    uint64_t currentEpoch;$/;"	m	struct:clusterState
current_client	src/server.h	/^    client *current_client;     \/* Current client executing the command. *\/$/;"	m	struct:redisServer
current_depth	deps/lua/src/lua_cjson.c	/^    int current_depth;$/;"	m	struct:__anon102	file:
current_epoch	src/redis-cli.c	/^    uint64_t current_epoch;$/;"	m	struct:clusterManagerNode	file:
current_epoch	src/sentinel.c	/^    uint64_t current_epoch;         \/* Current epoch. *\/$/;"	m	struct:sentinelState	file:
current_sec_latency_histogram	src/redis-benchmark.c	/^    struct hdr_histogram* current_sec_latency_histogram;$/;"	m	struct:config	typeref:struct:config::hdr_histogram	file:
current_slot_index	src/redis-benchmark.c	/^    int current_slot_index;$/;"	m	struct:clusterNode	file:
currentid	src/module.c	/^            streamID currentid;    \/* Current entry while iterating. *\/$/;"	m	struct:RedisModuleKey::__anon62::__anon64	file:
currentline	deps/lua/src/ldebug.c	/^static int currentline (lua_State *L, CallInfo *ci) {$/;"	f	file:
currentline	deps/lua/src/lua.h	/^  int currentline;	\/* (l) *\/$/;"	m	struct:lua_Debug
currentline	src/scripting.c	/^    int currentline;    \/* Current line number. *\/$/;"	m	struct:ldbState	file:
currentpc	deps/lua/src/ldebug.c	/^static int currentpc (lua_State *L, CallInfo *ci) {$/;"	f	file:
currentwhite	deps/lua/src/lstate.h	/^  lu_byte currentwhite;$/;"	m	struct:global_State
curslabs	deps/jemalloc/include/jemalloc/internal/bin_stats.h	/^	size_t		curslabs;$/;"	m	struct:bin_stats_s
cursor	src/module.c	/^    int cursor;$/;"	m	struct:RedisModuleScanCursor	file:
cursor	src/module.c	/^    unsigned long *cursor;$/;"	m	struct:RedisModuleDefragCtx	file:
cvec	deps/linenoise/linenoise.h	/^  char **cvec;$/;"	m	struct:linenoiseCompletions
czero	src/server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *pong, *space,$/;"	m	struct:sharedObjectsStruct
d	deps/jemalloc/include/jemalloc/internal/div.h	/^	size_t d;$/;"	m	struct:div_info_s
d	deps/lua/src/lua_struct.c	/^  double d;$/;"	m	struct:cD	file:
d	src/dict.h	/^        double d;$/;"	m	union:dictEntry::__anon29
d	src/dict.h	/^    dict *d;$/;"	m	struct:dictIterator
d2s	deps/jemalloc/src/malloc_io.c	/^d2s(intmax_t x, char sign, char *s, size_t *slen_p) {$/;"	f	file:
d2string	src/util.c	/^int d2string(char *buf, size_t len, double value) {$/;"	f
daemonize	src/server.c	/^void daemonize(void) {$/;"	f
daemonize	src/server.h	/^    int daemonize;                  \/* True if running as a daemon *\/$/;"	m	struct:redisServer
dalloc	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^	extent_dalloc_t		*dalloc;$/;"	m	struct:extent_hooks_s
dallocx	src/zmalloc.c	80;"	d	file:
darwin_unsupported	deps/jemalloc/scripts/gen_run_tests.py	/^                  'dss:primary' in malloc_conf_opts)$/;"	v
data	deps/hiredis/async.h	/^        void *data;$/;"	m	struct:redisAsyncContext::__anon87
data	deps/hiredis/async.h	/^    void *data;$/;"	m	struct:redisAsyncContext
data	deps/jemalloc/include/jemalloc/internal/ckh.h	/^	const void *data;$/;"	m	struct:__anon150
data	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^	void *data;$/;"	m	struct:tsd_init_block_s
data	deps/lua/src/ldump.c	/^ void* data;$/;"	m	struct:__anon115	file:
data	deps/lua/src/lua_cjson.c	/^    const char *data;$/;"	m	struct:__anon102	file:
data	deps/lua/src/lzio.h	/^  void* data;			\/* additional data *\/$/;"	m	struct:Zio
data	src/cluster.h	/^    union clusterMsgData data;$/;"	m	struct:__anon43	typeref:union:__anon43::clusterMsgData
data	src/config.c	/^    typeData data; \/* The type specific data exposed used by the interface *\/$/;"	m	struct:standardConfig	file:
data	src/module.c	/^    void *data;                         \/* Private data for the callback. *\/$/;"	m	struct:RedisModuleTimer	file:
data	src/rax.h	/^    unsigned char data[];$/;"	m	struct:raxNode
data	src/rax.h	/^    void *data;             \/* Data associated to this key. *\/$/;"	m	struct:raxIterator
data	src/sha256.h	/^	BYTE data[64];$/;"	m	struct:__anon68
dataCleanup	deps/hiredis/async.h	/^    void (*dataCleanup)(void *privdata);$/;"	m	struct:redisAsyncContext
data_cleanup	deps/jemalloc/test/unit/tsd.c	/^data_cleanup(int *data) {$/;"	f
data_cleanup_count	deps/jemalloc/test/unit/tsd.c	/^static int data_cleanup_count;$/;"	v	file:
data_received	src/cluster.h	/^    mstime_t data_received;  \/* Unix time we received any data *\/$/;"	m	struct:clusterNode
databasesCron	src/server.c	/^void databasesCron(void) {$/;"	f
datalen	src/sha256.h	/^	WORD datalen;$/;"	m	struct:__anon68
dataset	src/server.h	/^    size_t dataset;$/;"	m	struct:redisMemOverhead
dataset_perc	src/server.h	/^    float dataset_perc;$/;"	m	struct:redisMemOverhead
datasize	src/redis-benchmark.c	/^    int datasize;$/;"	m	struct:config	file:
datatype	tests/modules/datatype.c	/^static RedisModuleType *datatype = NULL;$/;"	v	file:
datatype_attempts	tests/modules/defragtest.c	/^unsigned long int datatype_attempts = 0;$/;"	v
datatype_copy	tests/modules/datatype.c	/^static void *datatype_copy(RedisModuleString *fromkey, RedisModuleString *tokey, const void *value) {$/;"	f	file:
datatype_defragged	tests/modules/defragtest.c	/^unsigned long int datatype_defragged = 0;$/;"	v
datatype_dump	tests/modules/datatype.c	/^static int datatype_dump(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	file:
datatype_free	tests/modules/datatype.c	/^static void datatype_free(void *value) {$/;"	f	file:
datatype_get	tests/modules/datatype.c	/^static int datatype_get(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	file:
datatype_load	tests/modules/datatype.c	/^static void *datatype_load(RedisModuleIO *io, int encver) {$/;"	f	file:
datatype_restore	tests/modules/datatype.c	/^static int datatype_restore(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	file:
datatype_resumes	tests/modules/defragtest.c	/^unsigned long int datatype_resumes = 0;$/;"	v
datatype_save	tests/modules/datatype.c	/^static void datatype_save(RedisModuleIO *io, void *value) {$/;"	f	file:
datatype_set	tests/modules/datatype.c	/^static int datatype_set(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	file:
datatype_swap	tests/modules/datatype.c	/^static int datatype_swap(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	file:
datatype_wrong_cursor	tests/modules/defragtest.c	/^unsigned long int datatype_wrong_cursor = 0;$/;"	v
dataver	src/redismodule.h	/^    uint64_t dataver;   \/* Version of the structure we pass as 'data'. *\/$/;"	m	struct:RedisModuleEvent
daylight_active	src/server.h	/^    int daylight_active;        \/* Currently in daylight saving time. *\/$/;"	m	struct:redisServer
db	src/module.c	/^    redisDb *db;$/;"	m	struct:RedisModuleKey	file:
db	src/multi.c	/^    redisDb *db;$/;"	m	struct:watchedKey	file:
db	src/redismodule.h	/^    uint16_t db;            \/* Selected DB. *\/$/;"	m	struct:RedisModuleClientInfo
db	src/server.h	/^    redisDb *db;            \/* Pointer to currently SELECTed DB. *\/$/;"	m	struct:client
db	src/server.h	/^    redisDb *db;$/;"	m	struct:readyList
db	src/server.h	/^    redisDb *db;$/;"	m	struct:redisServer
db	src/server.h	/^    } *db;$/;"	m	struct:redisMemOverhead	typeref:struct:redisMemOverhead::__anon19
dbAdd	src/db.c	/^void dbAdd(redisDb *db, robj *key, robj *val) {$/;"	f
dbAddRDBLoad	src/db.c	/^int dbAddRDBLoad(redisDb *db, sds key, robj *val) {$/;"	f
dbAsyncDelete	src/lazyfree.c	/^int dbAsyncDelete(redisDb *db, robj *key) {$/;"	f
dbBackup	src/db.c	/^struct dbBackup {$/;"	s	file:
dbBackup	src/server.h	/^typedef struct dbBackup dbBackup;$/;"	t	typeref:struct:dbBackup
dbDelete	src/db.c	/^int dbDelete(redisDb *db, robj *key) {$/;"	f
dbDictType	src/server.c	/^dictType dbDictType = {$/;"	v
dbExpiresDictType	src/server.c	/^dictType dbExpiresDictType = {$/;"	v
dbOverwrite	src/db.c	/^void dbOverwrite(redisDb *db, robj *key, robj *val) {$/;"	f
dbRandomKey	src/db.c	/^robj *dbRandomKey(redisDb *db) {$/;"	f
dbSwapDatabases	src/db.c	/^int dbSwapDatabases(int id1, int id2) {$/;"	f
dbSyncDelete	src/db.c	/^int dbSyncDelete(redisDb *db, robj *key) {$/;"	f
dbTotalServerKeyCount	src/db.c	/^long long dbTotalServerKeyCount() {$/;"	f
dbUnshareStringValue	src/db.c	/^robj *dbUnshareStringValue(redisDb *db, robj *key, robj *o) {$/;"	f
db_debug	deps/lua/src/ldblib.c	/^static int db_debug (lua_State *L) {$/;"	f	file:
db_errorfb	deps/lua/src/ldblib.c	/^static int db_errorfb (lua_State *L) {$/;"	f	file:
db_getfenv	deps/lua/src/ldblib.c	/^static int db_getfenv (lua_State *L) {$/;"	f	file:
db_gethook	deps/lua/src/ldblib.c	/^static int db_gethook (lua_State *L) {$/;"	f	file:
db_getinfo	deps/lua/src/ldblib.c	/^static int db_getinfo (lua_State *L) {$/;"	f	file:
db_getlocal	deps/lua/src/ldblib.c	/^static int db_getlocal (lua_State *L) {$/;"	f	file:
db_getmetatable	deps/lua/src/ldblib.c	/^static int db_getmetatable (lua_State *L) {$/;"	f	file:
db_getregistry	deps/lua/src/ldblib.c	/^static int db_getregistry (lua_State *L) {$/;"	f	file:
db_getupvalue	deps/lua/src/ldblib.c	/^static int db_getupvalue (lua_State *L) {$/;"	f	file:
db_setfenv	deps/lua/src/ldblib.c	/^static int db_setfenv (lua_State *L) {$/;"	f	file:
db_sethook	deps/lua/src/ldblib.c	/^static int db_sethook (lua_State *L) {$/;"	f	file:
db_setlocal	deps/lua/src/ldblib.c	/^static int db_setlocal (lua_State *L) {$/;"	f	file:
db_setmetatable	deps/lua/src/ldblib.c	/^static int db_setmetatable (lua_State *L) {$/;"	f	file:
db_setupvalue	deps/lua/src/ldblib.c	/^static int db_setupvalue (lua_State *L) {$/;"	f	file:
dbarray	src/db.c	/^    redisDb *dbarray;$/;"	m	struct:dbBackup	file:
dbid	src/evict.c	/^    int dbid;                   \/* Key DB number. *\/$/;"	m	struct:evictionPoolEntry	file:
dbid	src/module.c	/^    int dbid;                           \/* Database number selected by the original client. *\/$/;"	m	struct:RedisModuleTimer	file:
dbid	src/module.c	/^    int dbid;           \/* Database number selected by the original client. *\/$/;"	m	struct:RedisModuleBlockedClient	file:
dbid	src/server.h	/^        size_t dbid;$/;"	m	struct:redisMemOverhead::__anon19
dbid	src/server.h	/^    int argc, dbid, target;$/;"	m	struct:redisOp
dblib	deps/lua/src/ldblib.c	/^static const luaL_Reg dblib[] = {$/;"	v	file:
dbnum	src/redis-benchmark.c	/^    int dbnum;$/;"	m	struct:config	file:
dbnum	src/redis-cli.c	/^    int dbnum;$/;"	m	struct:config	file:
dbnum	src/redismodule.h	/^    int32_t dbnum;          \/* Flushed database number, -1 for ALL. *\/$/;"	m	struct:RedisModuleFlushInfo
dbnum	src/server.h	/^    int dbnum;                      \/* Total number of configured DBs *\/$/;"	m	struct:redisServer
dbnum_first	src/redismodule.h	/^    int32_t dbnum_first;    \/* Swap Db first dbnum *\/$/;"	m	struct:RedisModuleSwapDbInfo
dbnum_second	src/redismodule.h	/^    int32_t dbnum_second;   \/* Swap Db second dbnum *\/$/;"	m	struct:RedisModuleSwapDbInfo
dbnumstr	src/redis-benchmark.c	/^    sds dbnumstr;$/;"	m	struct:config	file:
dbsizeCommand	src/db.c	/^void dbsizeCommand(client *c) {$/;"	f
de	src/server.h	/^    dictEntry *de;$/;"	m	struct:__anon26
de	src/t_zset.c	/^                dictEntry *de;$/;"	m	struct:__anon2::__anon3::_iterset::__anon5	file:
deadline	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	nstime_t		deadline;$/;"	m	struct:arena_decay_s
dealBuffer	src/controller.c	/^void dealBuffer(char* buffer) {$/;"	f
dealed_ops	src/cluster.h	/^    long long dealed_ops;$/;"	m	struct:slotState
debug	deps/lua/src/strbuf.h	/^    int debug;$/;"	m	struct:__anon105
debug	src/ziplist.c	1673;"	d	file:
debugCommand	src/debug.c	/^void debugCommand(client *c) {$/;"	f
debugDelay	src/debug.c	/^void debugDelay(int usec) {$/;"	f
debug_stats	deps/lua/src/strbuf.c	/^static inline void debug_stats(strbuf_t *s)$/;"	f	file:
debugf	src/rax.c	62;"	d	file:
debugf	src/rax.c	71;"	d	file:
debugnode	src/rax.c	69;"	d	file:
debugnode	src/rax.c	72;"	d	file:
decay_dirty	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	arena_stats_decay_t	decay_dirty;$/;"	m	struct:arena_stats_s
decay_dirty	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	arena_decay_t		decay_dirty; \/* dirty --> muzzy *\/$/;"	m	struct:arena_s
decay_muzzy	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	arena_stats_decay_t	decay_muzzy;$/;"	m	struct:arena_stats_s
decay_muzzy	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	arena_decay_t		decay_muzzy; \/* muzzy --> retained *\/$/;"	m	struct:arena_s
decay_ticker	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	ticker_t		decay_ticker;$/;"	m	struct:arena_tdata_s
decay_ticker_get	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_a.h	/^decay_ticker_get(tsd_t *tsd, unsigned ind) {$/;"	f
decay_ticker_helper	deps/jemalloc/test/unit/decay.c	/^decay_ticker_helper(unsigned arena_ind, int flags, bool dirty, ssize_t dt,$/;"	f	file:
decodeGeohash	src/geo.c	/^int decodeGeohash(double bits, double *xy) {$/;"	f
decodeHex	src/redis-cli.c	359;"	d	file:
decodeHexChar	src/redis-cli.c	358;"	d	file:
decodeTimeoutKey	src/timeout.c	/^void decodeTimeoutKey(unsigned char *buf, uint64_t *toptr, client **cptr) {$/;"	f
decode_hex4	deps/lua/src/lua_cjson.c	/^static int decode_hex4(const char *hex)$/;"	f	file:
decode_invalid_numbers	deps/lua/src/lua_cjson.c	/^    int decode_invalid_numbers;$/;"	m	struct:__anon101	file:
decode_max_depth	deps/lua/src/lua_cjson.c	/^    int decode_max_depth;$/;"	m	struct:__anon101	file:
decommit	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^	extent_decommit_t	*decommit;$/;"	m	struct:extent_hooks_s
decpoint	deps/lua/src/llex.h	/^  char decpoint;  \/* locale decimal point *\/$/;"	m	struct:LexState
decrCommand	src/t_string.c	/^void decrCommand(client *c) {$/;"	f
decrRefCount	src/object.c	/^void decrRefCount(robj *o) {$/;"	f
decrRefCountVoid	src/object.c	/^void decrRefCountVoid(void *o) {$/;"	f
decr_every	utils/lru/lfu-simulation.c	/^int decr_every = 1;$/;"	v
decrbyCommand	src/t_string.c	/^void decrbyCommand(client *c) {$/;"	f
decrtime	utils/lru/lfu-simulation.c	/^    uint16_t decrtime;  \/* (Reduced precision) time of last decrement. *\/$/;"	m	struct:entry	file:
defaultFunctions	deps/hiredis/hiredis.c	/^static redisReplyObjectFunctions defaultFunctions = {$/;"	v	file:
default_hooks	deps/jemalloc/test/include/test/extent_hooks.h	/^static extent_hooks_t *default_hooks;$/;"	v
default_username	src/server.h	/^    *getack, *special_asterick, *special_equals, *default_username,$/;"	m	struct:sharedObjectsStruct
default_value	src/config.c	/^    const char *default_value; \/* Default value of the config on rewrite. *\/$/;"	m	struct:sdsConfigData	file:
default_value	src/config.c	/^    const char *default_value; \/* Default value of the config on rewrite. *\/$/;"	m	struct:stringConfigData	file:
default_value	src/config.c	/^    const int default_value; \/* The default value of the config on rewrite *\/$/;"	m	struct:boolConfigData	file:
default_value	src/config.c	/^    const int default_value; \/* The default value of the config on rewrite *\/$/;"	m	struct:enumConfigData	file:
default_value	src/config.c	/^    const long long default_value; \/* The default value of the config on rewrite *\/$/;"	m	struct:numericConfigData	file:
default_zone	deps/jemalloc/src/zone.c	/^static malloc_zone_t *default_zone, *purgeable_zone;$/;"	v	file:
defaultoptions	deps/lua/src/lua_struct.c	107;"	d	file:
defrag	src/redismodule.h	/^    RedisModuleTypeDefragFunc defrag;$/;"	m	struct:RedisModuleTypeMethods
defrag	src/server.h	/^    moduleTypeDefragFunc defrag;$/;"	m	struct:RedisModuleType
defragDictBucketCallback	src/defrag.c	/^void defragDictBucketCallback(void *privdata, dictEntry **bucketref) {$/;"	f
defragGlobalStrings	tests/modules/defragtest.c	/^static int defragGlobalStrings(RedisModuleDefragCtx *ctx)$/;"	f	file:
defragHash	src/defrag.c	/^long defragHash(redisDb *db, dictEntry *kde) {$/;"	f
defragKey	src/defrag.c	/^long defragKey(redisDb *db, dictEntry *de) {$/;"	f
defragLater	src/defrag.c	/^void defragLater(redisDb *db, dictEntry *kde) {$/;"	f
defragLaterItem	src/defrag.c	/^int defragLaterItem(dictEntry *de, unsigned long *cursor, long long endtime) {$/;"	f
defragLaterStep	src/defrag.c	/^int defragLaterStep(redisDb *db, long long endtime) {$/;"	f
defragModule	src/defrag.c	/^long defragModule(redisDb *db, dictEntry *kde) {$/;"	f
defragOtherGlobals	src/defrag.c	/^long defragOtherGlobals() {$/;"	f
defragQuicklist	src/defrag.c	/^long defragQuicklist(redisDb *db, dictEntry *kde) {$/;"	f
defragRadixTree	src/defrag.c	/^long defragRadixTree(rax **raxref, int defrag_data, raxDefragFunction *element_cb, void *element_cb_data) {$/;"	f
defragRaxNode	src/defrag.c	/^int defragRaxNode(raxNode **noderef) {$/;"	f
defragScanCallback	src/defrag.c	/^void defragScanCallback(void *privdata, const dictEntry *de) {$/;"	f
defragSet	src/defrag.c	/^long defragSet(redisDb *db, dictEntry *kde) {$/;"	f
defragStream	src/defrag.c	/^long defragStream(redisDb *db, dictEntry *kde) {$/;"	f
defragStreamConsumer	src/defrag.c	/^void* defragStreamConsumer(raxIterator *ri, void *privdata, long *defragged) {$/;"	f
defragStreamConsumerGroup	src/defrag.c	/^void* defragStreamConsumerGroup(raxIterator *ri, void *privdata, long *defragged) {$/;"	f
defragStreamConsumerPendingEntry	src/defrag.c	/^void* defragStreamConsumerPendingEntry(raxIterator *ri, void *privdata, long *defragged) {$/;"	f
defragZsetSkiplist	src/defrag.c	/^long defragZsetSkiplist(redisDb *db, dictEntry *kde) {$/;"	f
defrag_cb	src/module.c	/^    RedisModuleDefragFunc defrag_cb;    \/* Callback for global data defrag. *\/$/;"	m	struct:RedisModule	file:
defrag_later	src/server.h	/^    list *defrag_later;         \/* List of key names to attempt to defrag one by one, gradually. *\/$/;"	m	struct:redisDb
defrag_later_current_key	src/defrag.c	/^static sds defrag_later_current_key = NULL;$/;"	v	file:
defrag_later_cursor	src/defrag.c	/^static unsigned long defrag_later_cursor = 0;$/;"	v	file:
defragged	src/defrag.c	/^    long defragged;$/;"	m	struct:__anon71	file:
defragged	src/module.c	/^    long defragged;$/;"	m	struct:RedisModuleDefragCtx	file:
deg_rad	src/geohash_helper.c	/^static inline double deg_rad(double ang) { return ang * D_R; }$/;"	f	file:
deinterleave64	src/geohash.c	/^static inline uint64_t deinterleave64(uint64_t interleaved) {$/;"	f	file:
del	src/server.h	/^    *unsubscribebulk, *psubscribebulk, *punsubscribebulk, *del, *unlink,$/;"	m	struct:sharedObjectsStruct
delCommand	src/db.c	/^void delCommand(client *c) {$/;"	f
delCommand	src/server.h	/^    struct redisCommand *delCommand, *multiCommand, *lpushCommand,$/;"	m	struct:redisServer	typeref:struct:redisServer::redisCommand
delGenericCommand	src/db.c	/^void delGenericCommand(client *c, int lazy) {$/;"	f
delKeysInSlot	src/db.c	/^unsigned int delKeysInSlot(unsigned int hashslot) {$/;"	f
delRead	deps/hiredis/adapters/qt.h	/^        void delRead() {$/;"	f	class:RedisQtAdapter
delRead	deps/hiredis/async.h	/^        void (*delRead)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon87
delWrite	deps/hiredis/adapters/qt.h	/^        void delWrite() {$/;"	f	class:RedisQtAdapter
delWrite	deps/hiredis/async.h	/^        void (*delWrite)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon87
delay	deps/lua/test/life.lua	/^function delay() -- NOTE: SYSTEM-DEPENDENT, adjust as necessary$/;"	f
delay_coalesce	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^	bool			delay_coalesce;$/;"	m	struct:extents_s
delivery_count	src/stream.h	/^    uint64_t delivery_count;    \/* Number of times this message was delivered.*\/$/;"	m	struct:streamNACK
delivery_time	src/stream.h	/^    mstime_t delivery_time;     \/* Last time this message was delivered. *\/$/;"	m	struct:streamNACK
deny_scripts_reconfig	src/sentinel.c	/^    int deny_scripts_reconfig; \/* Allow SENTINEL SET ... to change script$/;"	m	struct:sentinelState	file:
deriveAnnouncedPorts	src/cluster.c	/^void deriveAnnouncedPorts(int *announced_port, int *announced_pport,$/;"	f
desc	src/redis-cli.c	/^    char *desc;$/;"	m	struct:clusterManagerOptionDef	file:
destroy	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^	extent_destroy_t	*destroy;$/;"	m	struct:extent_hooks_s
destroy	deps/jemalloc/src/zone.c	/^	void (*destroy)(struct _malloc_zone_t *);$/;"	m	struct:_malloc_zone_t	file:
destroy_cb	deps/jemalloc/test/unit/rb.c	/^destroy_cb(node_t *node, void *data) {$/;"	f	file:
destroyed	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	ql_head(ctl_arena_t) destroyed;$/;"	m	struct:ctl_arenas_s
destroyed_link	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	ql_elm(ctl_arena_t) destroyed_link;$/;"	m	struct:ctl_arena_s
detect_debug_sleep	deps/hiredis/test.c	/^static int detect_debug_sleep(redisContext *c) {$/;"	f	file:
dh_params_file	src/server.h	/^    char *dh_params_file;$/;"	m	struct:redisTLSContextConfig
di	src/server.h	/^    dictIterator *di;$/;"	m	struct:__anon25
di	src/server.h	/^    dictIterator *di;$/;"	m	struct:__anon26
di	src/t_zset.c	/^                dictIterator *di;$/;"	m	struct:__anon2::__anon3::_iterset::__anon5	file:
dict	deps/hiredis/dict.h	/^typedef struct dict {$/;"	s
dict	deps/hiredis/dict.h	/^} dict;$/;"	t	typeref:struct:dict
dict	src/dict.h	/^typedef struct dict {$/;"	s
dict	src/dict.h	/^} dict;$/;"	t	typeref:struct:dict
dict	src/module.c	/^    RedisModuleDict *dict;$/;"	m	struct:RedisModuleDictIter	file:
dict	src/server.h	/^    dict *dict;                 \/* The keyspace for this DB *\/$/;"	m	struct:redisDb
dict	src/server.h	/^    dict *dict;$/;"	m	struct:zset
dict	src/t_zset.c	/^                dict *dict;$/;"	m	struct:__anon2::__anon3::_iterset::__anon5	file:
dictAdd	deps/hiredis/dict.c	/^static int dictAdd(dict *ht, void *key, void *val) {$/;"	f	file:
dictAdd	src/dict.c	/^int dictAdd(dict *d, void *key, void *val)$/;"	f
dictAddOrFind	src/dict.c	/^dictEntry *dictAddOrFind(dict *d, void *key) {$/;"	f
dictAddRaw	src/dict.c	/^dictEntry *dictAddRaw(dict *d, void *key, dictEntry **existing)$/;"	f
dictCStringKeyCompare	src/module.c	/^int dictCStringKeyCompare(void *privdata, const void *key1, const void *key2) {$/;"	f
dictCStringKeyHash	src/module.c	/^uint64_t dictCStringKeyHash(const void *key) {$/;"	f
dictCompareHashKeys	deps/hiredis/dict.h	101;"	d
dictCompareKeys	src/dict.h	139;"	d
dictCreate	deps/hiredis/dict.c	/^static dict *dictCreate(dictType *type, void *privDataPtr) {$/;"	f	file:
dictCreate	src/dict.c	/^dict *dictCreate(dictType *type,$/;"	f
dictDefragTables	src/defrag.c	/^long dictDefragTables(dict* d) {$/;"	f
dictDelete	deps/hiredis/dict.c	/^static int dictDelete(dict *ht, const void *key) {$/;"	f	file:
dictDelete	src/dict.c	/^int dictDelete(dict *ht, const void *key) {$/;"	f
dictDisableResize	src/dict.c	/^void dictDisableResize(void) {$/;"	f
dictEmpty	src/dict.c	/^void dictEmpty(dict *d, void(callback)(void*)) {$/;"	f
dictEnableResize	src/dict.c	/^void dictEnableResize(void) {$/;"	f
dictEncObjHash	src/server.c	/^uint64_t dictEncObjHash(const void *key) {$/;"	f
dictEncObjKeyCompare	src/server.c	/^int dictEncObjKeyCompare(void *privdata, const void *key1,$/;"	f
dictEntry	deps/hiredis/dict.h	/^typedef struct dictEntry {$/;"	s
dictEntry	deps/hiredis/dict.h	/^} dictEntry;$/;"	t	typeref:struct:dictEntry
dictEntry	src/dict.h	/^typedef struct dictEntry {$/;"	s
dictEntry	src/dict.h	/^} dictEntry;$/;"	t	typeref:struct:dictEntry
dictExpand	deps/hiredis/dict.c	/^static int dictExpand(dict *ht, unsigned long size) {$/;"	f	file:
dictExpand	src/dict.c	/^int dictExpand(dict *d, unsigned long size) {$/;"	f
dictExpandAllowed	src/server.c	/^int dictExpandAllowed(size_t moreMem, double usedRatio) {$/;"	f
dictFetchValue	src/dict.c	/^void *dictFetchValue(dict *d, const void *key) {$/;"	f
dictFind	deps/hiredis/dict.c	/^static dictEntry *dictFind(dict *ht, const void *key) {$/;"	f	file:
dictFind	src/dict.c	/^dictEntry *dictFind(dict *d, const void *key)$/;"	f
dictFindEntryRefByPtrAndHash	src/dict.c	/^dictEntry **dictFindEntryRefByPtrAndHash(dict *d, const void *oldptr, uint64_t hash) {$/;"	f
dictFingerprint	src/dict.c	/^long long dictFingerprint(dict *d) {$/;"	f
dictFreeEntryKey	deps/hiredis/dict.h	90;"	d
dictFreeEntryVal	deps/hiredis/dict.h	79;"	d
dictFreeKey	src/dict.h	128;"	d
dictFreeUnlinkedEntry	src/dict.c	/^void dictFreeUnlinkedEntry(dict *d, dictEntry *he) {$/;"	f
dictFreeVal	src/dict.h	108;"	d
dictGenCaseHashFunction	src/dict.c	/^uint64_t dictGenCaseHashFunction(const unsigned char *buf, int len) {$/;"	f
dictGenHashFunction	deps/hiredis/dict.c	/^static unsigned int dictGenHashFunction(const unsigned char *buf, int len) {$/;"	f	file:
dictGenHashFunction	src/dict.c	/^uint64_t dictGenHashFunction(const void *key, int len) {$/;"	f
dictGenericDelete	src/dict.c	/^static dictEntry *dictGenericDelete(dict *d, const void *key, int nofree) {$/;"	f	file:
dictGetDoubleVal	src/dict.h	149;"	d
dictGetEntryKey	deps/hiredis/dict.h	108;"	d
dictGetEntryVal	deps/hiredis/dict.h	109;"	d
dictGetFairRandomKey	src/dict.c	/^dictEntry *dictGetFairRandomKey(dict *d) {$/;"	f
dictGetHash	src/dict.c	/^uint64_t dictGetHash(dict *d, const void *key) {$/;"	f
dictGetHashFunctionSeed	src/dict.c	/^uint8_t *dictGetHashFunctionSeed(void) {$/;"	f
dictGetIterator	deps/hiredis/dict.c	/^static dictIterator *dictGetIterator(dict *ht) {$/;"	f	file:
dictGetIterator	src/dict.c	/^dictIterator *dictGetIterator(dict *d)$/;"	f
dictGetKey	src/dict.h	145;"	d
dictGetRandomKey	src/dict.c	/^dictEntry *dictGetRandomKey(dict *d)$/;"	f
dictGetSafeIterator	src/dict.c	/^dictIterator *dictGetSafeIterator(dict *d) {$/;"	f
dictGetSignedIntegerVal	src/dict.h	147;"	d
dictGetSomeKeys	src/dict.c	/^unsigned int dictGetSomeKeys(dict *d, dictEntry **des, unsigned int count) {$/;"	f
dictGetStats	src/dict.c	/^void dictGetStats(char *buf, size_t bufsize, dict *d) {$/;"	f
dictGetUnsignedIntegerVal	src/dict.h	148;"	d
dictGetVal	src/dict.h	146;"	d
dictHashKey	deps/hiredis/dict.h	106;"	d
dictHashKey	src/dict.h	144;"	d
dictInstancesValDestructor	src/sentinel.c	/^void dictInstancesValDestructor (void *privdata, void *obj) {$/;"	f
dictIsRehashing	src/dict.h	152;"	d
dictIterDefragEntry	src/defrag.c	/^long dictIterDefragEntry(dictIterator *iter) {$/;"	f
dictIterator	deps/hiredis/dict.h	/^typedef struct dictIterator {$/;"	s
dictIterator	deps/hiredis/dict.h	/^} dictIterator;$/;"	t	typeref:struct:dictIterator
dictIterator	src/dict.h	/^typedef struct dictIterator {$/;"	s
dictIterator	src/dict.h	/^} dictIterator;$/;"	t	typeref:struct:dictIterator
dictKeyCompare	utils/hashtable/rehashing.c	/^int dictKeyCompare(void *privdata, const void *key1, const void *key2) {$/;"	f
dictKeyHash	utils/hashtable/rehashing.c	/^unsigned int dictKeyHash(const void *keyp) {$/;"	f
dictListDestructor	src/redis-cli.c	/^void dictListDestructor(void *privdata, void *val)$/;"	f
dictListDestructor	src/server.c	/^void dictListDestructor(void *privdata, void *val)$/;"	f
dictNext	deps/hiredis/dict.c	/^static dictEntry *dictNext(dictIterator *iter) {$/;"	f	file:
dictNext	src/dict.c	/^dictEntry *dictNext(dictIterator *iter)$/;"	f
dictObjHash	src/server.c	/^uint64_t dictObjHash(const void *key) {$/;"	f
dictObjKeyCompare	src/server.c	/^int dictObjKeyCompare(void *privdata, const void *key1,$/;"	f
dictObjectDestructor	src/server.c	/^void dictObjectDestructor(void *privdata, void *val)$/;"	f
dictPauseRehashing	src/dict.h	153;"	d
dictRehash	src/dict.c	/^int dictRehash(dict *d, int n) {$/;"	f
dictRehashMilliseconds	src/dict.c	/^int dictRehashMilliseconds(dict *d, int ms) {$/;"	f
dictRelease	deps/hiredis/dict.c	/^static void dictRelease(dict *ht) {$/;"	f	file:
dictRelease	src/dict.c	/^void dictRelease(dict *d)$/;"	f
dictReleaseIterator	deps/hiredis/dict.c	/^static void dictReleaseIterator(dictIterator *iter) {$/;"	f	file:
dictReleaseIterator	src/dict.c	/^void dictReleaseIterator(dictIterator *iter)$/;"	f
dictReplace	deps/hiredis/dict.c	/^static int dictReplace(dict *ht, void *key, void *val) {$/;"	f	file:
dictReplace	src/dict.c	/^int dictReplace(dict *d, void *key, void *val)$/;"	f
dictResize	src/dict.c	/^int dictResize(dict *d)$/;"	f
dictResumeRehashing	src/dict.h	154;"	d
dictScan	src/dict.c	/^unsigned long dictScan(dict *d,$/;"	f
dictScanBucketFunction	src/dict.h	/^typedef void (dictScanBucketFunction)(void *privdata, dictEntry **bucketref);$/;"	t
dictScanFunction	src/dict.h	/^typedef void (dictScanFunction)(void *privdata, const dictEntry *de);$/;"	t
dictSdsCaseHash	src/server.c	/^uint64_t dictSdsCaseHash(const void *key) {$/;"	f
dictSdsDestructor	src/redis-cli.c	/^static void dictSdsDestructor(void *privdata, void *val)$/;"	f	file:
dictSdsDestructor	src/server.c	/^void dictSdsDestructor(void *privdata, void *val)$/;"	f
dictSdsHash	src/redis-benchmark.c	/^static uint64_t dictSdsHash(const void *key) {$/;"	f	file:
dictSdsHash	src/redis-cli.c	/^static uint64_t dictSdsHash(const void *key) {$/;"	f	file:
dictSdsHash	src/server.c	/^uint64_t dictSdsHash(const void *key) {$/;"	f
dictSdsKeyCaseCompare	src/server.c	/^int dictSdsKeyCaseCompare(void *privdata, const void *key1,$/;"	f
dictSdsKeyCompare	src/redis-benchmark.c	/^static int dictSdsKeyCompare(void *privdata, const void *key1,$/;"	f	file:
dictSdsKeyCompare	src/redis-cli.c	/^static int dictSdsKeyCompare(void *privdata, const void *key1,$/;"	f	file:
dictSdsKeyCompare	src/server.c	/^int dictSdsKeyCompare(void *privdata, const void *key1,$/;"	f
dictSetDoubleVal	src/dict.h	125;"	d
dictSetHashFunctionSeed	src/dict.c	/^void dictSetHashFunctionSeed(uint8_t *seed) {$/;"	f
dictSetHashKey	deps/hiredis/dict.h	94;"	d
dictSetHashVal	deps/hiredis/dict.h	83;"	d
dictSetKey	src/dict.h	132;"	d
dictSetSignedIntegerVal	src/dict.h	119;"	d
dictSetUnsignedIntegerVal	src/dict.h	122;"	d
dictSetVal	src/dict.h	112;"	d
dictSize	deps/hiredis/dict.h	111;"	d
dictSize	src/dict.h	151;"	d
dictSlots	deps/hiredis/dict.h	110;"	d
dictSlots	src/dict.h	150;"	d
dictStringHash	src/latency.c	/^uint64_t dictStringHash(const void *key) {$/;"	f
dictStringKeyCompare	src/latency.c	/^int dictStringKeyCompare(void *privdata, const void *key1, const void *key2) {$/;"	f
dictTest	src/dict.c	/^int dictTest(int argc, char **argv, int accurate) {$/;"	f
dictTryExpand	src/dict.c	/^int dictTryExpand(dict *d, unsigned long size) {$/;"	f
dictType	deps/hiredis/dict.h	/^typedef struct dictType {$/;"	s
dictType	deps/hiredis/dict.h	/^} dictType;$/;"	t	typeref:struct:dictType
dictType	src/dict.h	/^typedef struct dictType {$/;"	s
dictType	src/dict.h	/^} dictType;$/;"	t	typeref:struct:dictType
dictTypeExpandAllowed	src/dict.c	/^static int dictTypeExpandAllowed(dict *d) {$/;"	f	file:
dictTypeTest	utils/hashtable/rehashing.c	/^dictType dictTypeTest = {$/;"	v
dictUnlink	src/dict.c	/^dictEntry *dictUnlink(dict *ht, const void *key) {$/;"	f
dictVanillaFree	src/server.c	/^void dictVanillaFree(void *privdata, void *val)$/;"	f
dict_can_resize	src/dict.c	/^static int dict_can_resize = 1;$/;"	v	file:
dict_force_resize_ratio	src/dict.c	/^static unsigned int dict_force_resize_ratio = 5;$/;"	v	file:
dict_hash_function_seed	src/dict.c	/^static uint8_t dict_hash_function_seed[16];$/;"	v	file:
dict_json	deps/jemalloc/test/unit/emitter.c	/^static const char *dict_json =$/;"	v	file:
dict_table	deps/jemalloc/test/unit/emitter.c	/^static const char *dict_table =$/;"	v	file:
dictht	src/dict.h	/^typedef struct dictht {$/;"	s
dictht	src/dict.h	/^} dictht;$/;"	t	typeref:struct:dictht
did_alloc	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool did_alloc;$/;"	v
did_commit	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool did_commit;$/;"	v
did_dalloc	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool did_dalloc;$/;"	v
did_decommit	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool did_decommit;$/;"	v
did_destroy	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool did_destroy;$/;"	v
did_merge	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool did_merge;$/;"	v
did_prof_dump_open	deps/jemalloc/test/unit/prof_gdump.c	/^static bool did_prof_dump_open;$/;"	v	file:
did_prof_dump_open	deps/jemalloc/test/unit/prof_idump.c	/^static bool did_prof_dump_open;$/;"	v	file:
did_purge_forced	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool did_purge_forced;$/;"	v
did_purge_lazy	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool did_purge_lazy;$/;"	v
did_split	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool did_split;$/;"	v
die	deps/lua/src/strbuf.c	/^static void die(const char *fmt, ...)$/;"	f	file:
die	utils/install_server.sh	/^die () {$/;"	f
digest	src/redismodule.h	/^    RedisModuleTypeDigestFunc digest;$/;"	m	struct:RedisModuleTypeMethods
digest	src/server.h	/^    moduleTypeDigestFunc digest;$/;"	m	struct:RedisModuleType
digits10	src/util.c	/^uint32_t digits10(uint64_t v) {$/;"	f
direction	src/adlist.h	/^    int direction;$/;"	m	struct:listIter
direction	src/quicklist.h	/^    int direction;$/;"	m	struct:quicklistIter
direction	src/server.h	/^    unsigned char direction; \/* Iteration direction *\/$/;"	m	struct:__anon23
dirty	src/redis-cli.c	/^    int dirty;      \/* Node has changes that can be flushed *\/$/;"	m	struct:clusterManagerNode	file:
dirty	src/server.h	/^    long long dirty;                \/* Changes to DB from the last save *\/$/;"	m	struct:redisServer
dirty_before_bgsave	src/server.h	/^    long long dirty_before_bgsave;  \/* Used to restore dirty on failed BGSAVE *\/$/;"	m	struct:redisServer
dirty_decay_ms	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	ssize_t dirty_decay_ms;$/;"	m	struct:ctl_arena_s
dirty_decay_ms_default	deps/jemalloc/src/arena.c	/^static atomic_zd_t dirty_decay_ms_default;$/;"	v	file:
disableRawMode	deps/linenoise/linenoise.c	/^static void disableRawMode(int fd) {$/;"	f	file:
disableTracking	src/tracking.c	/^void disableTracking(client *c) {$/;"	f
disableWatchdog	src/debug.c	/^void disableWatchdog(void) {$/;"	f
disable_discharge_checking	deps/jemalloc/src/zone.c	/^	boolean_t (*disable_discharge_checking)(malloc_zone_t *);$/;"	m	struct:malloc_introspection_t	file:
disable_thp	src/server.h	/^    int disable_thp;                              \/* If true, disable THP by syscall *\/$/;"	m	struct:redisServer
discardCommand	src/multi.c	/^void discardCommand(client *c) {$/;"	f
discardDbBackup	src/db.c	/^void discardDbBackup(dbBackup *buckup, int flags, void(callback)(void*)) {$/;"	f
discardTransaction	src/multi.c	/^void discardTransaction(client *c) {$/;"	f
discharge	deps/jemalloc/src/zone.c	/^	void (*discharge)(malloc_zone_t *, void *);$/;"	m	struct:malloc_introspection_t	file:
discharge2anyreg	deps/lua/src/lcode.c	/^static void discharge2anyreg (FuncState *fs, expdesc *e) {$/;"	f	file:
discharge2reg	deps/lua/src/lcode.c	/^static void discharge2reg (FuncState *fs, expdesc *e, int reg) {$/;"	f	file:
dischargejpc	deps/lua/src/lcode.c	/^static void dischargejpc (FuncState *fs) {$/;"	f	file:
disconnect	deps/hiredis/test.c	/^static int disconnect(redisContext *c, int keep_fd) {$/;"	f	file:
disconnectAllBlockedClients	src/blocked.c	/^void disconnectAllBlockedClients(void) {$/;"	f
disconnectCallback	deps/hiredis/examples/example-ae.c	/^void disconnectCallback(const redisAsyncContext *c, int status) {$/;"	f
disconnectCallback	deps/hiredis/examples/example-ivykis.c	/^void disconnectCallback(const redisAsyncContext *c, int status) {$/;"	f
disconnectCallback	deps/hiredis/examples/example-libev.c	/^void disconnectCallback(const redisAsyncContext *c, int status) {$/;"	f
disconnectCallback	deps/hiredis/examples/example-libevent-ssl.c	/^void disconnectCallback(const redisAsyncContext *c, int status) {$/;"	f
disconnectCallback	deps/hiredis/examples/example-libevent.c	/^void disconnectCallback(const redisAsyncContext *c, int status) {$/;"	f
disconnectCallback	deps/hiredis/examples/example-libuv.c	/^void disconnectCallback(const redisAsyncContext *c, int status) {$/;"	f
disconnectCallback	deps/hiredis/examples/example-macosx.c	/^void disconnectCallback(const redisAsyncContext *c, int status) {$/;"	f
disconnectCallback	exp/exp2_micro.c	/^void disconnectCallback(const redisAsyncContext *c, int status) {$/;"	f
disconnectSlaves	src/networking.c	/^void disconnectSlaves(void) {$/;"	f
disconnect_callback	src/module.c	/^    RedisModuleDisconnectFunc disconnect_callback; \/* Called on disconnection.*\/$/;"	m	struct:RedisModuleBlockedClient	file:
disconnect_cb	deps/hiredis/examples/example-glib.c	/^disconnect_cb (const redisAsyncContext *ac G_GNUC_UNUSED,$/;"	f	file:
disconnected	src/sentinel.c	/^    int disconnected;      \/* Non-zero if we need to reconnect cc or pc. *\/$/;"	m	struct:instanceLink	file:
disklessLoadDiscardBackup	src/replication.c	/^void disklessLoadDiscardBackup(dbBackup *buckup, int flag) {$/;"	f
disklessLoadMakeBackup	src/replication.c	/^dbBackup *disklessLoadMakeBackup(void) {$/;"	f
disklessLoadRestoreBackup	src/replication.c	/^void disklessLoadRestoreBackup(dbBackup *buckup) {$/;"	f
dist	src/geo.h	/^    double dist;$/;"	m	struct:geoPoint
distsamples	src/redis-cli.c	/^struct distsamples {$/;"	s	file:
div_compute	deps/jemalloc/include/jemalloc/internal/div.h	/^div_compute(div_info_t *div_info, size_t n) {$/;"	f
div_info_s	deps/jemalloc/include/jemalloc/internal/div.h	/^struct div_info_s {$/;"	s
div_info_t	deps/jemalloc/include/jemalloc/internal/div.h	/^typedef struct div_info_s div_info_t;$/;"	t	typeref:struct:div_info_s
div_init	deps/jemalloc/src/div.c	/^div_init(div_info_t *div_info, size_t d) {$/;"	f
doBuild	cluster.sh	/^doBuild() {$/;"	f
doFastMemoryTest	src/debug.c	/^void doFastMemoryTest(void) {$/;"	f
doMerge	exp/5_merge_instance.sh	/^doMerge() {$/;"	f
do_arena_create	deps/jemalloc/test/unit/arena_reset.c	/^do_arena_create(extent_hooks_t *h) {$/;"	f	file:
do_arena_create	deps/jemalloc/test/unit/decay.c	/^do_arena_create(ssize_t dirty_decay_ms, ssize_t muzzy_decay_ms) {$/;"	f	file:
do_arena_create	deps/jemalloc/test/unit/retained.c	/^do_arena_create(extent_hooks_t *h) {$/;"	f	file:
do_arena_destroy	deps/jemalloc/test/unit/arena_reset.c	/^do_arena_destroy(unsigned arena_ind) {$/;"	f	file:
do_arena_destroy	deps/jemalloc/test/unit/decay.c	/^do_arena_destroy(unsigned arena_ind) {$/;"	f	file:
do_arena_destroy	deps/jemalloc/test/unit/retained.c	/^do_arena_destroy(unsigned arena_ind) {$/;"	f	file:
do_arena_reset	deps/jemalloc/test/unit/arena_reset.c	/^do_arena_reset(unsigned arena_ind) {$/;"	f	file:
do_arena_reset_destroy	deps/jemalloc/test/unit/arena_reset.c	/^do_arena_reset_destroy(const char *name, unsigned arena_ind) {$/;"	f	file:
do_arena_reset_post	deps/jemalloc/test/unit/arena_reset.c	/^do_arena_reset_post(void **ptrs, unsigned nptrs, unsigned arena_ind) {$/;"	f	file:
do_arena_reset_pre	deps/jemalloc/test/unit/arena_reset.c	/^do_arena_reset_pre(unsigned arena_ind, void ***ptrs, unsigned *nptrs) {$/;"	f	file:
do_bg_rm_call	tests/modules/blockedclient.c	/^int do_bg_rm_call(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
do_connect	deps/hiredis/test.c	/^static redisContext *do_connect(struct config config) {$/;"	f	file:
do_decay	deps/jemalloc/test/unit/decay.c	/^do_decay(unsigned arena_ind) {$/;"	f
do_epoch	deps/jemalloc/test/unit/decay.c	/^do_epoch(void) {$/;"	f
do_fork_thd	deps/jemalloc/test/unit/fork.c	/^do_fork_thd(void *arg) {$/;"	f	file:
do_get_active	deps/jemalloc/test/unit/retained.c	/^do_get_active(unsigned arena_ind) {$/;"	f	file:
do_get_mapped	deps/jemalloc/test/unit/retained.c	/^do_get_mapped(unsigned arena_ind) {$/;"	f	file:
do_get_size_impl	deps/jemalloc/test/unit/retained.c	/^do_get_size_impl(const char *cmd, unsigned arena_ind) {$/;"	f	file:
do_hook	deps/jemalloc/test/src/test.c	/^do_hook(bool *hook_ran, void (**hook)()) {$/;"	f	file:
do_mallocx	deps/jemalloc/test/unit/decay.c	/^do_mallocx(size_t size, int flags) {$/;"	f	file:
do_prof_reset	deps/jemalloc/test/unit/prof_reset.c	/^do_prof_reset(size_t lg_prof_sample) {$/;"	f	file:
do_purge	deps/jemalloc/test/unit/decay.c	/^do_purge(unsigned arena_ind) {$/;"	f
do_reconnect	deps/hiredis/test.c	/^static void do_reconnect(redisContext *c, struct config config) {$/;"	f	file:
do_recursion	deps/jemalloc/test/src/SFMT.c	/^static inline void do_recursion(w128_t *r, w128_t *a, w128_t *b, w128_t *c,$/;"	f	file:
do_refresh	deps/jemalloc/test/unit/retained.c	/^do_refresh(void) {$/;"	f	file:
do_rm_call	tests/modules/blockedclient.c	/^int do_rm_call(RedisModuleCtx *ctx, RedisModuleString **argv, int argc){$/;"	f
do_ssl_handshake	deps/hiredis/test.c	/^static void do_ssl_handshake(redisContext *c) {$/;"	f	file:
do_test_fork_multithreaded	deps/jemalloc/test/unit/fork.c	/^do_test_fork_multithreaded() {$/;"	f	file:
doargs	deps/lua/src/luac.c	/^static int doargs(int argc, char* argv[])$/;"	f	file:
docall	deps/lua/src/lua.c	/^static int docall (lua_State *L, int narg, int clear) {$/;"	f	file:
docufy	src/modules/gendoc.rb	/^def docufy(src,i)$/;"	f
dofile	deps/lua/src/lua.c	/^static int dofile (lua_State *L, const char *name) {$/;"	f	file:
doing	src/redis-check-rdb.c	/^    int doing;                      \/* The state while reading the RDB. *\/$/;"	m	struct:__anon61	file:
dojump	deps/lua/src/lvm.c	358;"	d	file:
dolibrary	deps/lua/src/lua.c	/^static int dolibrary (lua_State *L, const char *name) {$/;"	f	file:
done	src/module.c	/^    int done;$/;"	m	struct:RedisModuleScanCursor	file:
done_handler	src/module.c	/^    RedisModuleForkDoneHandler done_handler;$/;"	m	struct:RedisModuleForkInfo	file:
done_handler	tests/modules/fork.c	/^void done_handler(int exitcode, int bysignal, void *user_data) {$/;"	f
done_handler_user_data	src/module.c	/^    void* done_handler_user_data;$/;"	m	struct:RedisModuleForkInfo	file:
dooptions	deps/lua/src/loadlib.c	/^static void dooptions (lua_State *L, int n) {$/;"	f	file:
dostring	deps/lua/src/lua.c	/^static int dostring (lua_State *L, const char *s, const char *name) {$/;"	f	file:
dotty	deps/lua/src/lua.c	/^static void dotty (lua_State *L) {$/;"	f	file:
double_eq_rel	deps/jemalloc/test/unit/math.c	/^double_eq_rel(double a, double b, double max_rel_err, double max_abs_err) {$/;"	f	file:
down_after_period	src/sentinel.c	/^    mstime_t down_after_period; \/* Consider it down after that period. *\/$/;"	m	struct:sentinelRedisInstance	file:
dss	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	const char *dss;$/;"	m	struct:ctl_arena_s
dss_base	deps/jemalloc/src/extent_dss.c	/^static void		*dss_base;$/;"	v	file:
dss_exhausted	deps/jemalloc/src/extent_dss.c	/^static atomic_b_t	dss_exhausted;$/;"	v	file:
dss_extending	deps/jemalloc/src/extent_dss.c	/^static atomic_b_t	dss_extending;$/;"	v	file:
dss_max	deps/jemalloc/src/extent_dss.c	/^static atomic_p_t	dss_max;$/;"	v	file:
dss_prec	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	atomic_u_t		dss_prec;$/;"	m	struct:arena_s
dss_prec_default	deps/jemalloc/src/extent_dss.c	/^static atomic_u_t	dss_prec_default = ATOMIC_INIT($/;"	v	file:
dss_prec_disabled	deps/jemalloc/include/jemalloc/internal/extent_dss.h	/^	dss_prec_disabled  = 0,$/;"	e	enum:__anon152
dss_prec_limit	deps/jemalloc/include/jemalloc/internal/extent_dss.h	/^	dss_prec_limit     = 3$/;"	e	enum:__anon152
dss_prec_names	deps/jemalloc/src/extent_dss.c	/^const char	*dss_prec_names[] = {$/;"	v
dss_prec_primary	deps/jemalloc/include/jemalloc/internal/extent_dss.h	/^	dss_prec_primary   = 1,$/;"	e	enum:__anon152
dss_prec_secondary	deps/jemalloc/include/jemalloc/internal/extent_dss.h	/^	dss_prec_secondary = 2,$/;"	e	enum:__anon152
dss_prec_t	deps/jemalloc/include/jemalloc/internal/extent_dss.h	/^} dss_prec_t;$/;"	t	typeref:enum:__anon152
dstkey	src/t_zset.c	/^    robj                                *dstkey;$/;"	m	struct:zrange_result_handler	file:
dstobj	src/t_zset.c	/^    robj                                *dstobj;$/;"	m	struct:zrange_result_handler	file:
dtor_counter	deps/hiredis/test.c	/^    int dtor_counter;$/;"	m	struct:privdata	file:
dummy	deps/lua/src/lobject.h	/^  L_Umaxalign dummy;  \/* ensures maximum alignment for `local' udata *\/$/;"	m	union:Udata
dummy	deps/lua/src/lobject.h	/^  L_Umaxalign dummy;  \/* ensures maximum alignment for strings *\/$/;"	m	union:TString
dummy	deps/lua/src/lua_struct.c	/^  int dummy;$/;"	m	union:__anon112	file:
dummynode	deps/lua/src/ltable.c	73;"	d	file:
dummynode_	deps/lua/src/ltable.c	/^static const Node dummynode_ = {$/;"	v	file:
dumpCodeAroundEIP	src/debug.c	/^void dumpCodeAroundEIP(void *eip) {$/;"	f
dumpCommand	src/cluster.c	/^void dumpCommand(client *c) {$/;"	f
dumpX86Calls	src/debug.c	/^void dumpX86Calls(void *addr, size_t len) {$/;"	f
dump_cnts	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	prof_cnt_t		dump_cnts;$/;"	m	struct:prof_tctx_s
dump_link	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	rb_node(prof_gctx_t)	dump_link;$/;"	m	struct:prof_gctx_s
dump_server_log	tests/support/server.tcl	/^proc dump_server_log {srv} {$/;"	p
dumping	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	bool			dumping;$/;"	m	struct:prof_tdata_s
dumping	deps/lua/src/luac.c	/^static int dumping=1;			\/* dump bytecodes? *\/$/;"	v	file:
dup	src/adlist.h	/^    void *(*dup)(void *ptr);$/;"	m	struct:list
dupClientReplyValue	src/networking.c	/^void *dupClientReplyValue(void *o) {$/;"	f
dupSentinelAddr	src/sentinel.c	/^sentinelAddr *dupSentinelAddr(sentinelAddr *src) {$/;"	f
dupStringObject	src/object.c	/^robj *dupStringObject(const robj *o) {$/;"	f
duration	src/server.h	/^    long duration;          \/* Current command duration. Used for measuring latency of blocking\/non-blocking cmds *\/$/;"	m	struct:client
duration	src/slowlog.h	/^    long long duration; \/* Time spent by the query, in microseconds. *\/$/;"	m	struct:slowlogEntry
dval	deps/hiredis/hiredis.h	/^    double dval; \/* The double when type is REDIS_REPLY_DOUBLE *\/$/;"	m	struct:redisReply
dynamic	deps/lua/src/strbuf.h	/^    int dynamic;$/;"	m	struct:__anon105
dynamic_hz	src/server.h	/^    int dynamic_hz;             \/* Change hz value depending on # of clients. *\/$/;"	m	struct:redisServer
dynamic_opts_init	deps/jemalloc/src/jemalloc.c	/^dynamic_opts_init(dynamic_opts_t *dynamic_opts) {$/;"	f
dynamic_opts_s	deps/jemalloc/src/jemalloc.c	/^struct dynamic_opts_s {$/;"	s	file:
dynamic_opts_t	deps/jemalloc/src/jemalloc.c	/^typedef struct dynamic_opts_s dynamic_opts_t;$/;"	t	typeref:struct:dynamic_opts_s	file:
e_addr	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^	void			*e_addr;$/;"	m	struct:extent_s
e_bits	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^	uint64_t		e_bits;$/;"	m	struct:extent_s
e_bsize	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^		size_t			e_bsize;$/;"	m	union:extent_s::__anon134
e_prof_tctx	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^		atomic_p_t		e_prof_tctx;$/;"	m	union:extent_s::__anon135
e_size_esn	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^		size_t			e_size_esn;$/;"	m	union:extent_s::__anon134
e_slab_data	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^		arena_slab_data_t	e_slab_data;$/;"	m	union:extent_s::__anon135
east	src/geohash.h	/^    GeoHashBits east;$/;"	m	struct:__anon50
echoCommand	src/server.c	/^void echoCommand(client *c) {$/;"	f
el	src/redis-benchmark.c	/^    aeEventLoop *el;$/;"	m	struct:benchmarkThread	file:
el	src/redis-benchmark.c	/^    aeEventLoop *el;$/;"	m	struct:config	file:
el	src/server.h	/^    aeEventLoop *el;$/;"	m	struct:redisServer
elapsedMs	src/monotonic.h	/^static inline uint64_t elapsedMs(monotime start_time) {$/;"	f
elapsedStart	src/monotonic.h	/^static inline void elapsedStart(monotime *start_time) {$/;"	f
elapsedUs	src/monotonic.h	/^static inline uint64_t elapsedUs(monotime start_time) {$/;"	f
ele	src/server.h	/^    sds ele;$/;"	m	struct:zskiplistNode
ele	src/t_zset.c	/^    sds ele;$/;"	m	struct:__anon8	file:
element	deps/hiredis/hiredis.h	/^    struct redisReply **element; \/* elements vector for REDIS_REPLY_ARRAY *\/$/;"	m	struct:redisReply	typeref:struct:redisReply::redisReply
elements	deps/hiredis/hiredis.h	/^    size_t elements; \/* number of elements, for REDIS_REPLY_ARRAY *\/$/;"	m	struct:redisReply
elements	deps/hiredis/read.h	/^    long long elements; \/* number of elements in multibulk container *\/$/;"	m	struct:redisReadTask
elen	src/t_zset.c	/^    unsigned int elen;$/;"	m	struct:__anon8	file:
ell	src/t_zset.c	/^    long long ell;$/;"	m	struct:__anon8	file:
embedCommonConfig	src/config.c	1730;"	d	file:
embedCommonNumericalConfig	src/config.c	2079;"	d	file:
embedConfigInterface	src/config.c	1735;"	d	file:
emitResultFromCBuffer	src/t_zset.c	/^    zrangeResultEmitCBufferFunction      emitResultFromCBuffer;$/;"	m	struct:zrange_result_handler	file:
emitResultFromLongLong	src/t_zset.c	/^    zrangeResultEmitLongLongFunction     emitResultFromLongLong;$/;"	m	struct:zrange_result_handler	file:
emit_dict	deps/jemalloc/test/unit/emitter.c	/^emit_dict(emitter_t *emitter) {$/;"	f	file:
emit_json_arr	deps/jemalloc/test/unit/emitter.c	/^emit_json_arr(emitter_t *emitter) {$/;"	f	file:
emit_modal	deps/jemalloc/test/unit/emitter.c	/^emit_modal(emitter_t *emitter) {$/;"	f	file:
emit_nested_dict	deps/jemalloc/test/unit/emitter.c	/^static void emit_nested_dict(emitter_t *emitter) {$/;"	f	file:
emit_table_printf	deps/jemalloc/test/unit/emitter.c	/^emit_table_printf(emitter_t *emitter) {$/;"	f	file:
emit_table_row	deps/jemalloc/test/unit/emitter.c	/^emit_table_row(emitter_t *emitter) {$/;"	f	file:
emit_types	deps/jemalloc/test/unit/emitter.c	/^emit_types(emitter_t *emitter) {$/;"	f	file:
emitter_begin	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_begin(emitter_t *emitter) {$/;"	f
emitter_col_init	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_col_init(emitter_col_t *col, emitter_row_t *row) {$/;"	f
emitter_col_s	deps/jemalloc/include/jemalloc/internal/emitter.h	/^struct emitter_col_s {$/;"	s
emitter_col_t	deps/jemalloc/include/jemalloc/internal/emitter.h	/^typedef struct emitter_col_s emitter_col_t;$/;"	t	typeref:struct:emitter_col_s
emitter_dict_begin	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_dict_begin(emitter_t *emitter, const char *json_key,$/;"	f
emitter_dict_end	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_dict_end(emitter_t *emitter) {$/;"	f
emitter_end	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_end(emitter_t *emitter) {$/;"	f
emitter_gen_fmt	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_gen_fmt(char *out_fmt, size_t out_size, const char *fmt_specifier,$/;"	f
emitter_indent	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_indent(emitter_t *emitter) {$/;"	f
emitter_init	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_init(emitter_t *emitter, emitter_output_t emitter_output,$/;"	f
emitter_json_arr_begin	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_json_arr_begin(emitter_t *emitter, const char *json_key) {$/;"	f
emitter_json_arr_end	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_json_arr_end(emitter_t *emitter) {$/;"	f
emitter_json_arr_obj_begin	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_json_arr_obj_begin(emitter_t *emitter) {$/;"	f
emitter_json_arr_obj_end	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_json_arr_obj_end(emitter_t *emitter) {$/;"	f
emitter_json_arr_value	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_json_arr_value(emitter_t *emitter, emitter_type_t value_type,$/;"	f
emitter_json_dict_begin	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_json_dict_begin(emitter_t *emitter, const char *json_key) {$/;"	f
emitter_json_dict_end	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_json_dict_end(emitter_t *emitter) {$/;"	f
emitter_json_key_prefix	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_json_key_prefix(emitter_t *emitter) {$/;"	f
emitter_json_kv	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_json_kv(emitter_t *emitter, const char *json_key,$/;"	f
emitter_justify_e	deps/jemalloc/include/jemalloc/internal/emitter.h	/^enum emitter_justify_e {$/;"	g
emitter_justify_left	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	emitter_justify_left,$/;"	e	enum:emitter_justify_e
emitter_justify_none	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	emitter_justify_none$/;"	e	enum:emitter_justify_e
emitter_justify_right	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	emitter_justify_right,$/;"	e	enum:emitter_justify_e
emitter_justify_t	deps/jemalloc/include/jemalloc/internal/emitter.h	/^typedef enum emitter_justify_e emitter_justify_t;$/;"	t	typeref:enum:emitter_justify_e
emitter_kv	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_kv(emitter_t *emitter, const char *json_key, const char *table_key,$/;"	f
emitter_kv_note	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_kv_note(emitter_t *emitter, const char *json_key, const char *table_key,$/;"	f
emitter_nest_dec	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_nest_dec(emitter_t *emitter) {$/;"	f
emitter_nest_inc	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_nest_inc(emitter_t *emitter) {$/;"	f
emitter_output_e	deps/jemalloc/include/jemalloc/internal/emitter.h	/^enum emitter_output_e {$/;"	g
emitter_output_json	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	emitter_output_json,$/;"	e	enum:emitter_output_e
emitter_output_t	deps/jemalloc/include/jemalloc/internal/emitter.h	/^typedef enum emitter_output_e emitter_output_t;$/;"	t	typeref:enum:emitter_output_e
emitter_output_table	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	emitter_output_table$/;"	e	enum:emitter_output_e
emitter_print_value	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_print_value(emitter_t *emitter, emitter_justify_t justify, int width,$/;"	f
emitter_printf	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_printf(emitter_t *emitter, const char *format, ...) {$/;"	f
emitter_row_init	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_row_init(emitter_row_t *row) {$/;"	f
emitter_row_s	deps/jemalloc/include/jemalloc/internal/emitter.h	/^struct emitter_row_s {$/;"	s
emitter_row_t	deps/jemalloc/include/jemalloc/internal/emitter.h	/^typedef struct emitter_row_s emitter_row_t;$/;"	t	typeref:struct:emitter_row_s
emitter_s	deps/jemalloc/include/jemalloc/internal/emitter.h	/^struct emitter_s {$/;"	s
emitter_t	deps/jemalloc/include/jemalloc/internal/emitter.h	/^typedef struct emitter_s emitter_t;$/;"	t	typeref:struct:emitter_s
emitter_table_dict_begin	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_table_dict_begin(emitter_t *emitter, const char *table_key) {$/;"	f
emitter_table_dict_end	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_table_dict_end(emitter_t *emitter) {$/;"	f
emitter_table_kv	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_table_kv(emitter_t *emitter, const char *table_key,$/;"	f
emitter_table_printf	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_table_printf(emitter_t *emitter, const char *format, ...) {$/;"	f
emitter_table_row	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_table_row(emitter_t *emitter, emitter_row_t *row) {$/;"	f
emitter_type_bool	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	emitter_type_bool,$/;"	e	enum:emitter_type_e
emitter_type_e	deps/jemalloc/include/jemalloc/internal/emitter.h	/^enum emitter_type_e {$/;"	g
emitter_type_int	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	emitter_type_int,$/;"	e	enum:emitter_type_e
emitter_type_size	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	emitter_type_size,$/;"	e	enum:emitter_type_e
emitter_type_ssize	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	emitter_type_ssize,$/;"	e	enum:emitter_type_e
emitter_type_string	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	emitter_type_string,$/;"	e	enum:emitter_type_e
emitter_type_t	deps/jemalloc/include/jemalloc/internal/emitter.h	/^typedef enum emitter_type_e emitter_type_t;$/;"	t	typeref:enum:emitter_type_e
emitter_type_title	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	emitter_type_title,$/;"	e	enum:emitter_type_e
emitter_type_uint32	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	emitter_type_uint32,$/;"	e	enum:emitter_type_e
emitter_type_uint64	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	emitter_type_uint64,$/;"	e	enum:emitter_type_e
emitter_type_unsigned	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	emitter_type_unsigned,$/;"	e	enum:emitter_type_e
emptyDb	src/db.c	/^long long emptyDb(int dbnum, int flags, void(callback)(void*)) {$/;"	f
emptyDbAsync	src/lazyfree.c	/^void emptyDbAsync(redisDb *db) {$/;"	f
emptyDbStructure	src/db.c	/^long long emptyDbStructure(redisDb *dbarray, int dbnum, int async,$/;"	f
emptyarray	src/server.h	/^    *emptyarray, *wrongtypeerr, *nokeyerr, *syntaxerr, *sameobjecterr,$/;"	m	struct:sharedObjectsStruct
emptybuffer	deps/lua/src/lauxlib.c	/^static int emptybuffer (luaL_Buffer *B) {$/;"	f	file:
emptybulk	src/server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *pong, *space,$/;"	m	struct:sharedObjectsStruct
emptymap	src/server.h	/^    *colon, *queued, *null[4], *nullarray[4], *emptymap[4], *emptyset[4],$/;"	m	struct:sharedObjectsStruct
emptyscan	src/server.h	/^    *emptyscan, *multi, *exec, *left, *right, *hset, *srem, *xgroup, *xclaim,  $/;"	m	struct:sharedObjectsStruct
emptyset	src/server.h	/^    *colon, *queued, *null[4], *nullarray[4], *emptymap[4], *emptyset[4],$/;"	m	struct:sharedObjectsStruct
enableBcastTrackingForPrefix	src/tracking.c	/^void enableBcastTrackingForPrefix(client *c, char *prefix, size_t plen) {$/;"	f
enableClientTracking	deps/hiredis/examples/example-push.c	/^static void enableClientTracking(redisContext *c) {$/;"	f	file:
enableRawMode	deps/linenoise/linenoise.c	/^static int enableRawMode(int fd) {$/;"	f	file:
enableTracking	src/tracking.c	/^void enableTracking(client *c, uint64_t redirect_to, uint64_t options, robj **prefix, size_t numprefix) {$/;"	f
enableWatchdog	src/debug.c	/^void enableWatchdog(int period) {$/;"	f
enable_autogen	deps/jemalloc/Makefile	/^enable_autogen := 0$/;"	m
enable_discharge_checking	deps/jemalloc/src/zone.c	/^	boolean_t (*enable_discharge_checking)(malloc_zone_t *);$/;"	m	struct:malloc_introspection_t	file:
enable_ldb_on_eval	src/redis-cli.c	/^    int enable_ldb_on_eval; \/* Handle manual SCRIPT DEBUG + EVAL commands. *\/$/;"	m	struct:config	file:
enable_prof	deps/jemalloc/Makefile	/^enable_prof := 0$/;"	m
enable_tracking	src/redis-benchmark.c	/^    int enable_tracking;$/;"	m	struct:config	file:
enable_zone_allocator	deps/jemalloc/Makefile	/^enable_zone_allocator := $/;"	m
encodeTimeoutKey	src/timeout.c	/^void encodeTimeoutKey(unsigned char *buf, uint64_t timeout, client *c) {$/;"	f
encode_buf	deps/lua/src/lua_cjson.c	/^    strbuf_t encode_buf;$/;"	m	struct:__anon101	file:
encode_invalid_numbers	deps/lua/src/lua_cjson.c	/^    int encode_invalid_numbers;     \/* 2 => Encode as "null" *\/$/;"	m	struct:__anon101	file:
encode_keep_buffer	deps/lua/src/lua_cjson.c	/^    int encode_keep_buffer;$/;"	m	struct:__anon101	file:
encode_max_depth	deps/lua/src/lua_cjson.c	/^    int encode_max_depth;$/;"	m	struct:__anon101	file:
encode_number_precision	deps/lua/src/lua_cjson.c	/^    int encode_number_precision;$/;"	m	struct:__anon101	file:
encode_sparse_convert	deps/lua/src/lua_cjson.c	/^    int encode_sparse_convert;$/;"	m	struct:__anon101	file:
encode_sparse_ratio	deps/lua/src/lua_cjson.c	/^    int encode_sparse_ratio;$/;"	m	struct:__anon101	file:
encode_sparse_safe	deps/lua/src/lua_cjson.c	/^    int encode_sparse_safe;$/;"	m	struct:__anon101	file:
encoding	src/hyperloglog.c	/^    uint8_t encoding;   \/* HLL_DENSE or HLL_SPARSE. *\/$/;"	m	struct:hllhdr	file:
encoding	src/intset.h	/^    uint32_t encoding;$/;"	m	struct:intset
encoding	src/quicklist.h	/^    unsigned int encoding : 2;   \/* RAW==1 or LZF==2 *\/$/;"	m	struct:quicklistNode
encoding	src/server.h	/^    int encoding;$/;"	m	struct:__anon25
encoding	src/server.h	/^    int encoding;$/;"	m	struct:__anon26
encoding	src/server.h	/^    unsigned char encoding;$/;"	m	struct:__anon23
encoding	src/server.h	/^    unsigned encoding:4;$/;"	m	struct:redisObject
encoding	src/t_zset.c	/^    int encoding;$/;"	m	struct:__anon2	file:
encoding	src/ziplist.c	/^    unsigned char encoding;      \/* Set to ZIP_STR_* or ZIP_INT_* depending on$/;"	m	struct:zlentry	file:
end	src/module.c	/^            uint32_t end;          \/* End pos for positional ranges. *\/$/;"	m	struct:RedisModuleKey::__anon62::__anon63	file:
end	src/setproctitle.c	/^	char *base, *end;$/;"	m	struct:__anon60	file:
end_benchmark	src/dict.c	1219;"	d	file:
end_capture	deps/lua/src/lstrlib.c	/^static const char *end_capture (MatchState *ms, const char *s,$/;"	f	file:
end_ci	deps/lua/src/lstate.h	/^  CallInfo *end_ci;  \/* points after end of ci array*\/$/;"	m	struct:lua_State
end_key	src/stream.h	/^    uint64_t end_key[2];    \/* End key as 128 bit big endian. *\/$/;"	m	struct:streamIterator
end_tests	tests/instances.tcl	/^proc end_tests {} {$/;"	p
endian	deps/lua/src/lua_struct.c	/^  char endian;$/;"	m	union:__anon112	file:
endian	deps/lua/src/lua_struct.c	/^  int endian;$/;"	m	struct:Header	file:
endianconvTest	src/endianconv.c	/^int endianconvTest(int argc, char *argv[], int accurate) {$/;"	f
endpc	deps/lua/src/lobject.h	/^  int endpc;    \/* first point where variable is dead *\/$/;"	m	struct:LocVar
endpoint	deps/hiredis/hiredis.h	/^    } endpoint;$/;"	m	struct:__anon80	typeref:union:__anon80::__anon81
endtime	src/module.c	/^    long long int endtime;$/;"	m	struct:RedisModuleDefragCtx	file:
enq	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	bool			enq;$/;"	m	struct:prof_tdata_s
enq_gdump	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	bool			enq_gdump;$/;"	m	struct:prof_tdata_s
enq_idump	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	bool			enq_idump;$/;"	m	struct:prof_tdata_s
ensure_master_down	tests/sentinel/tests/07-down-conditions.tcl	/^proc ensure_master_down {} {$/;"	p
ensure_master_up	tests/sentinel/tests/07-down-conditions.tcl	/^proc ensure_master_up {} {$/;"	p
enterblock	deps/lua/src/lparser.c	/^static void enterblock (FuncState *fs, BlockCnt *bl, lu_byte isbreakable) {$/;"	f	file:
enterlevel	deps/lua/src/lparser.c	/^static void enterlevel (LexState *ls) {$/;"	f	file:
entry	deps/hiredis/dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator
entry	src/dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator
entry	src/server.h	/^    quicklistEntry entry; \/* Entry in quicklist *\/$/;"	m	struct:__anon24
entry	utils/lru/lfu-simulation.c	/^struct entry {$/;"	s	file:
entry_flags	src/stream.h	/^    int entry_flags;                    \/* Flags of entry we are emitting. *\/$/;"	m	struct:streamIterator
enumConfigData	src/config.c	/^typedef struct enumConfigData {$/;"	s	file:
enumConfigData	src/config.c	/^} enumConfigData;$/;"	t	typeref:struct:enumConfigData	file:
enum_value	src/config.c	/^    configEnum *enum_value; \/* The underlying enum type this data represents *\/$/;"	m	struct:enumConfigData	file:
enumd	src/config.c	/^    enumConfigData enumd;$/;"	m	union:typeData	file:
enumerate_discharged_pointers	deps/jemalloc/src/zone.c	/^	void (*enumerate_discharged_pointers)(malloc_zone_t *, void (^)(void *, void *));$/;"	m	struct:malloc_introspection_t	file:
enumerate_unavailable_without_blocks	deps/jemalloc/src/zone.c	/^	void *enumerate_unavailable_without_blocks;$/;"	m	struct:malloc_introspection_t	file:
enumerator	deps/jemalloc/src/zone.c	/^	kern_return_t (*enumerator)(task_t, void *, unsigned, vm_address_t, memory_reader_t, vm_range_recorder_t);$/;"	m	struct:malloc_introspection_t	file:
env	deps/lua/src/lobject.h	/^    struct Table *env;$/;"	m	struct:Udata::__anon108	typeref:struct:Udata::__anon108::Table
env	deps/lua/src/lstate.h	/^  TValue env;  \/* temporary place for environments *\/$/;"	m	struct:lua_State
env_string	deps/jemalloc/scripts/gen_travis.py	/^    env_string = ('{} COMPILER_FLAGS="{}" CONFIGURE_FLAGS="{}" '$/;"	v
epfd	src/ae_epoll.c	/^    int epfd;$/;"	m	struct:aeApiState	file:
epoch	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	nstime_t		epoch;$/;"	m	struct:arena_decay_s
epoch	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	uint64_t epoch;$/;"	m	struct:ctl_arenas_s
epoch	deps/jemalloc/test/unit/retained.c	/^static atomic_u_t	epoch;$/;"	v	file:
epoch_ctl	deps/jemalloc/src/ctl.c	/^epoch_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	file:
epos	src/redis-check-aof.c	/^static off_t epos;$/;"	v	file:
eptr	src/t_zset.c	/^                unsigned char *eptr, *sptr;$/;"	m	struct:__anon2::__anon3::_iterzset::__anon6	file:
eq_event	deps/lua/doc/manual.html	/^     function eq_event (op1, op2)$/;"	f
equalStringObjects	src/object.c	/^int equalStringObjects(robj *a, robj *b) {$/;"	f
equalobj	deps/lua/src/lvm.h	21;"	d
er	src/module.c	/^            int er;                \/* Zset iterator end reached flag$/;"	m	struct:RedisModuleKey::__anon62::__anon63	file:
err	deps/hiredis/async.h	/^    int err;$/;"	m	struct:redisAsyncContext
err	deps/hiredis/hiredis.h	/^    int err; \/* Error flags, 0 when there is no error *\/$/;"	m	struct:redisContext
err	deps/hiredis/read.h	/^    int err; \/* Error flags, 0 when there is no error *\/$/;"	m	struct:redisReader
err	deps/lua/src/lua_cmsgpack.c	/^    int err;$/;"	m	struct:mp_cur	file:
err	src/server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *pong, *space,$/;"	m	struct:sharedObjectsStruct
err_log	src/controller.c	/^char err_log[LOGSIZE];$/;"	v
errfile	deps/lua/src/lauxlib.c	/^static int errfile (lua_State *L, const char *what, int fnameindex) {$/;"	f	file:
errfunc	deps/lua/src/lstate.h	/^  ptrdiff_t errfunc;  \/* current error handling function (stack index) *\/$/;"	m	struct:lua_State
error	deps/lua/src/lundump.c	/^static void error(LoadState* S, const char* why)$/;"	f	file:
error	deps/lua/src/lundump.c	32;"	d	file:
error	src/redis-check-aof.c	/^static char error[1044];$/;"	v	file:
error	src/redis-check-rdb.c	/^    char error[1024];$/;"	m	struct:__anon61	file:
error	src/server.h	/^    int error;          \/* True if error condition happened. *\/$/;"	m	struct:RedisModuleIO
error	src/setproctitle.c	/^	int error;$/;"	m	struct:__anon60	file:
errorJmp	deps/lua/src/lstate.h	/^  struct lua_longjmp *errorJmp;  \/* current error recover point *\/$/;"	m	struct:lua_State	typeref:struct:lua_State::lua_longjmp
error_expected	deps/lua/src/lparser.c	/^static void error_expected (LexState *ls, int token) {$/;"	f	file:
error_set	src/redis-check-rdb.c	/^    int error_set;                  \/* True if error is populated. *\/$/;"	m	struct:__anon61	file:
errorfromcode	deps/lua/src/loadlib.c	/^static const char *errorfromcode (NSObjectFileImageReturnCode ret) {$/;"	f	file:
errorlimit	deps/lua/src/lparser.c	/^static void errorlimit (FuncState *fs, int limit, const char *what) {$/;"	f	file:
errorrstat	tests/support/util.tcl	/^proc errorrstat {cmd r} {$/;"	p
errors	src/redis-cli.c	/^    list *errors;$/;"	m	struct:clusterManager	file:
errors	src/server.h	/^    rax *errors;                \/* Errors table *\/$/;"	m	struct:redisServer
errorstat	tests/cluster/tests/18-info.tcl	/^proc errorstat {instace cmd} {$/;"	p
errorstat	tests/unit/info.tcl	/^proc errorstat {cmd} {$/;"	p
errstr	deps/hiredis/async.h	/^    char *errstr;$/;"	m	struct:redisAsyncContext
errstr	deps/hiredis/hiredis.h	/^    char errstr[128]; \/* String representation of error when applicable *\/$/;"	m	struct:redisContext
errstr	deps/hiredis/read.h	/^    char errstr[128]; \/* String representation of error when applicable *\/$/;"	m	struct:redisReader
escape2char	deps/lua/src/lua_cjson.c	/^    char escape2char[256];  \/* Decoding *\/$/;"	m	struct:__anon101	file:
estimate	deps/lua/src/lstate.h	/^  lu_mem estimate;  \/* an estimate of number of bytes actually in use *\/$/;"	m	struct:global_State
estimateObjectIdleTime	src/evict.c	/^unsigned long long estimateObjectIdleTime(robj *o) {$/;"	f
estr	src/t_zset.c	/^    unsigned char *estr;$/;"	m	struct:__anon8	file:
esz	deps/jemalloc/test/unit/retained.c	/^static size_t		esz;$/;"	v	file:
ev	deps/hiredis/adapters/libevent.h	/^    struct event *ev;$/;"	m	struct:redisLibeventEvents	typeref:struct:redisLibeventEvents::event
ev	deps/hiredis/async.h	/^    } ev;$/;"	m	struct:redisAsyncContext	typeref:struct:redisAsyncContext::__anon87
eval	src/redis-cli.c	/^    char *eval;$/;"	m	struct:config	file:
eval	src/server.h	/^    *script, *replconf, *eval, *persist, *set, *pexpireat, *pexpire, $/;"	m	struct:sharedObjectsStruct
evalCommand	src/scripting.c	/^void evalCommand(client *c) {$/;"	f
evalGenericCommand	src/scripting.c	/^void evalGenericCommand(client *c, int evalsha) {$/;"	f
evalGenericCommandWithDebugging	src/scripting.c	/^void evalGenericCommandWithDebugging(client *c, int evalsha) {$/;"	f
evalGetKeys	src/db.c	/^int evalGetKeys(struct redisCommand *cmd, robj **argv, int argc, getKeysResult *result) {$/;"	f
evalMode	src/redis-cli.c	/^static int evalMode(int argc, char **argv) {$/;"	f	file:
evalShaCommand	src/scripting.c	/^void evalShaCommand(client *c) {$/;"	f
eval_ldb	src/redis-cli.c	/^    int eval_ldb;$/;"	m	struct:config	file:
eval_ldb_end	src/redis-cli.c	/^    int eval_ldb_end;   \/* Lua debugging session ended. *\/$/;"	m	struct:config	file:
eval_ldb_sync	src/redis-cli.c	/^    int eval_ldb_sync;  \/* Ask for synchronous mode of the Lua debugger. *\/$/;"	m	struct:config	file:
event	deps/lua/src/lua.h	/^  int event;$/;"	m	struct:lua_Debug
event	src/module.c	/^    RedisModuleEvent event;$/;"	m	struct:RedisModuleEventListener	file:
event_log	tests/modules/hooks.c	/^RedisModuleDict *event_log = NULL;$/;"	v
event_mask	src/module.c	/^    int event_mask;$/;"	m	struct:RedisModuleKeyspaceSubscriber	file:
events	deps/hiredis/adapters/libuv.h	/^  int                events;$/;"	m	struct:redisLibuvEvents
events	src/ae.h	/^    aeFileEvent *events; \/* Registered events *\/$/;"	m	struct:aeEventLoop
events	src/ae_epoll.c	/^    struct epoll_event *events;$/;"	m	struct:aeApiState	typeref:struct:aeApiState::epoll_event	file:
events	src/ae_kqueue.c	/^    struct kevent *events;$/;"	m	struct:aeApiState	typeref:struct:aeApiState::kevent	file:
events_processed_while_blocked	src/server.h	/^    long long events_processed_while_blocked; \/* processEventsWhileBlocked() *\/$/;"	m	struct:redisServer
evictPolicyToString	src/config.c	/^const char *evictPolicyToString(void) {$/;"	f
evictionPoolAlloc	src/evict.c	/^void evictionPoolAlloc(void) {$/;"	f
evictionPoolEntry	src/evict.c	/^struct evictionPoolEntry {$/;"	s	file:
evictionPoolPopulate	src/evict.c	/^void evictionPoolPopulate(int dbid, dict *sampledict, dict *keydict, struct evictionPoolEntry *pool) {$/;"	f
evictionTimeLimitUs	src/evict.c	/^static unsigned long evictionTimeLimitUs() {$/;"	f	file:
evictionTimeProc	src/evict.c	/^static int evictionTimeProc($/;"	f	file:
evport_debug	src/ae_evport.c	/^static int evport_debug = 0;$/;"	v	file:
exec	src/server.h	/^    *emptyscan, *multi, *exec, *left, *right, *hset, *srem, *xgroup, *xclaim,  $/;"	m	struct:sharedObjectsStruct
execBenchmarkThread	src/redis-benchmark.c	/^static void *execBenchmarkThread(void *ptr) {$/;"	f	file:
execCommand	src/multi.c	/^void execCommand(client *c) {$/;"	f
execCommand	src/server.h	/^                        *zpopmaxCommand, *sremCommand, *execCommand,$/;"	m	struct:redisServer	typeref:struct:redisServer::
execCommandAbort	src/multi.c	/^void execCommandAbort(client *c, sds error) {$/;"	f
execCommandPropagateExec	src/multi.c	/^void execCommandPropagateExec(int dbid) {$/;"	f
execCommandPropagateMulti	src/multi.c	/^void execCommandPropagateMulti(int dbid) {$/;"	f
exec_argv	src/server.h	/^    char **exec_argv;           \/* Executable argv vector (copy). *\/$/;"	m	struct:redisServer
exec_instance	tests/instances.tcl	/^proc exec_instance {type dirname cfgfile} {$/;"	p
execaborterr	src/server.h	/^    *masterdownerr, *roslaveerr, *execaborterr, *noautherr, *noreplicaserr,$/;"	m	struct:sharedObjectsStruct
executable	src/server.h	/^    char *executable;           \/* Absolute executable file path. *\/$/;"	m	struct:redisServer
execute_test_code	tests/test_helper.tcl	/^proc execute_test_code {name filename code} {$/;"	p
execute_test_file	tests/test_helper.tcl	/^proc execute_test_file name {$/;"	p
existsCommand	src/db.c	/^void existsCommand(client *c) {$/;"	f
exitFromChild	src/server.c	/^void exitFromChild(int retcode) {$/;"	f
exitted_with_code	tests/modules/fork.c	/^int exitted_with_code = -1;$/;"	v
exp1	deps/lua/src/lparser.c	/^static int exp1 (LexState *ls) {$/;"	f	file:
exp2reg	deps/lua/src/lcode.c	/^static void exp2reg (FuncState *fs, expdesc *e, int reg) {$/;"	f	file:
expandAllowed	src/dict.h	/^    int (*expandAllowed)(size_t moreMem, double usedRatio);$/;"	m	struct:dictType
expandProcTitleTemplate	src/server.c	/^static sds expandProcTitleTemplate(const char *template, const char *title) {$/;"	f	file:
expdesc	deps/lua/src/lparser.h	/^typedef struct expdesc {$/;"	s
expdesc	deps/lua/src/lparser.h	/^} expdesc;$/;"	t	typeref:struct:expdesc
expect	src/lzf_c.c	79;"	d	file:
expect	src/lzf_c.c	82;"	d	file:
expect_false	src/lzf_c.c	86;"	d	file:
expect_no_logging	deps/jemalloc/test/unit/log.c	/^expect_no_logging(const char *names) {$/;"	f	file:
expect_true	src/lzf_c.c	87;"	d	file:
expireCommand	src/expire.c	/^void expireCommand(client *c) {$/;"	f
expireCommand	src/server.h	/^                        *expireCommand, *pexpireCommand, *xclaimCommand,$/;"	m	struct:redisServer	typeref:struct:redisServer::
expireGenericCommand	src/expire.c	/^void expireGenericCommand(client *c, long long basetime, int unit) {$/;"	f
expireIfNeeded	src/db.c	/^int expireIfNeeded(redisDb *db, robj *key) {$/;"	f
expireSlaveKeys	src/expire.c	/^void expireSlaveKeys(void) {$/;"	f
expireatCommand	src/expire.c	/^void expireatCommand(client *c) {$/;"	f
expired	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	bool			expired;$/;"	m	struct:prof_tdata_s
expires	src/redis-check-rdb.c	/^    unsigned long expires;          \/* Number of keys with an expire. *\/$/;"	m	struct:__anon61	file:
expires	src/server.h	/^    dict *expires;              \/* Timeout of keys with a timeout set *\/$/;"	m	struct:redisDb
expires_cursor	src/server.h	/^    unsigned long expires_cursor; \/* Cursor of the active expire cycle. *\/$/;"	m	struct:redisDb
expkind	deps/lua/src/lparser.h	/^} expkind;$/;"	t	typeref:enum:__anon93
explist1	deps/lua/src/lparser.c	/^static int explist1 (LexState *ls, expdesc *v) {$/;"	f	file:
export_malloc_conf	deps/jemalloc/test/test.sh	/^export_malloc_conf() {$/;"	f
expr	deps/lua/src/lparser.c	/^static void expr (LexState *ls, expdesc *v) {$/;"	f	file:
exprstat	deps/lua/src/lparser.c	/^static void exprstat (LexState *ls) {$/;"	f	file:
extent	deps/jemalloc/include/jemalloc/internal/base_structs.h	/^	extent_t	extent;$/;"	m	struct:base_block_s
extent_activate_locked	deps/jemalloc/src/extent.c	/^extent_activate_locked(tsdn_t *tsdn, arena_t *arena, extents_t *extents,$/;"	f	file:
extent_ad_comp	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_ad_comp(const extent_t *a, const extent_t *b) {$/;"	f
extent_addr_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_addr_get(const extent_t *extent) {$/;"	f
extent_addr_randomize	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_addr_randomize(UNUSED tsdn_t *tsdn, extent_t *extent, size_t alignment) {$/;"	f
extent_addr_set	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_addr_set(extent_t *extent, void *addr) {$/;"	f
extent_alloc	deps/jemalloc/src/extent.c	/^extent_alloc(tsdn_t *tsdn, arena_t *arena) {$/;"	f
extent_alloc_core	deps/jemalloc/src/extent.c	/^extent_alloc_core(tsdn_t *tsdn, arena_t *arena, void *new_addr, size_t size,$/;"	f	file:
extent_alloc_default	deps/jemalloc/src/extent.c	/^extent_alloc_default(extent_hooks_t *extent_hooks, void *new_addr, size_t size,$/;"	f	file:
extent_alloc_default_impl	deps/jemalloc/src/extent.c	/^extent_alloc_default_impl(tsdn_t *tsdn, arena_t *arena, void *new_addr,$/;"	f	file:
extent_alloc_dss	deps/jemalloc/src/extent_dss.c	/^extent_alloc_dss(tsdn_t *tsdn, arena_t *arena, void *new_addr, size_t size,$/;"	f
extent_alloc_hook	deps/jemalloc/test/include/test/extent_hooks.h	/^extent_alloc_hook(extent_hooks_t *extent_hooks, void *new_addr, size_t size,$/;"	f
extent_alloc_mmap	deps/jemalloc/src/extent_mmap.c	/^extent_alloc_mmap(void *new_addr, size_t size, size_t alignment, bool *zero,$/;"	f
extent_alloc_retained	deps/jemalloc/src/extent.c	/^extent_alloc_retained(tsdn_t *tsdn, arena_t *arena,$/;"	f	file:
extent_alloc_t	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^typedef void *(extent_alloc_t)(extent_hooks_t *, void *, size_t, size_t, bool *,$/;"	t
extent_alloc_wrapper	deps/jemalloc/src/extent.c	/^extent_alloc_wrapper(tsdn_t *tsdn, arena_t *arena,$/;"	f
extent_alloc_wrapper_hard	deps/jemalloc/src/extent.c	/^extent_alloc_wrapper_hard(tsdn_t *tsdn, arena_t *arena,$/;"	f	file:
extent_arena_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_arena_get(const extent_t *extent) {$/;"	f
extent_arena_set	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_arena_set(extent_t *extent, arena_t *arena) {$/;"	f
extent_avail	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	extent_tree_t		extent_avail;$/;"	m	struct:arena_s
extent_avail_mtx	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	malloc_mutex_t		extent_avail_mtx;$/;"	m	struct:arena_s
extent_base_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_base_get(const extent_t *extent) {$/;"	f
extent_before_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_before_get(const extent_t *extent) {$/;"	f
extent_binit	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_binit(extent_t *extent, void *addr, size_t bsize, size_t sn) {$/;"	f
extent_boot	deps/jemalloc/src/extent.c	/^extent_boot(void) {$/;"	f
extent_bsize_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_bsize_get(const extent_t *extent) {$/;"	f
extent_bsize_set	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_bsize_set(extent_t *extent, size_t bsize) {$/;"	f
extent_can_coalesce	deps/jemalloc/src/extent.c	/^extent_can_coalesce(arena_t *arena, extents_t *extents, const extent_t *inner,$/;"	f	file:
extent_coalesce	deps/jemalloc/src/extent.c	/^extent_coalesce(tsdn_t *tsdn, arena_t *arena, extent_hooks_t **r_extent_hooks,$/;"	f	file:
extent_commit_default	deps/jemalloc/src/extent.c	/^extent_commit_default(extent_hooks_t *extent_hooks, void *addr, size_t size,$/;"	f	file:
extent_commit_hook	deps/jemalloc/test/include/test/extent_hooks.h	/^extent_commit_hook(extent_hooks_t *extent_hooks, void *addr, size_t size,$/;"	f
extent_commit_impl	deps/jemalloc/src/extent.c	/^extent_commit_impl(tsdn_t *tsdn, arena_t *arena,$/;"	f	file:
extent_commit_t	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^typedef bool (extent_commit_t)(extent_hooks_t *, void *, size_t, size_t, size_t,$/;"	t
extent_commit_wrapper	deps/jemalloc/src/extent.c	/^extent_commit_wrapper(tsdn_t *tsdn, arena_t *arena,$/;"	f
extent_committed_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_committed_get(const extent_t *extent) {$/;"	f
extent_committed_set	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_committed_set(extent_t *extent, bool committed) {$/;"	f
extent_dalloc	deps/jemalloc/src/extent.c	/^extent_dalloc(tsdn_t *tsdn, arena_t *arena, extent_t *extent) {$/;"	f
extent_dalloc_default	deps/jemalloc/src/extent.c	/^extent_dalloc_default(extent_hooks_t *extent_hooks, void *addr, size_t size,$/;"	f	file:
extent_dalloc_default_impl	deps/jemalloc/src/extent.c	/^extent_dalloc_default_impl(void *addr, size_t size) {$/;"	f	file:
extent_dalloc_gap	deps/jemalloc/src/extent.c	/^extent_dalloc_gap(tsdn_t *tsdn, arena_t *arena, extent_t *extent) {$/;"	f
extent_dalloc_hook	deps/jemalloc/test/include/test/extent_hooks.h	/^extent_dalloc_hook(extent_hooks_t *extent_hooks, void *addr, size_t size,$/;"	f
extent_dalloc_mmap	deps/jemalloc/src/extent_mmap.c	/^extent_dalloc_mmap(void *addr, size_t size) {$/;"	f
extent_dalloc_t	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^typedef bool (extent_dalloc_t)(extent_hooks_t *, void *, size_t, bool,$/;"	t
extent_dalloc_unmap	deps/jemalloc/test/unit/arena_reset.c	/^extent_dalloc_unmap(extent_hooks_t *extent_hooks, void *addr, size_t size,$/;"	f	file:
extent_dalloc_wrapper	deps/jemalloc/src/extent.c	/^extent_dalloc_wrapper(tsdn_t *tsdn, arena_t *arena,$/;"	f
extent_dalloc_wrapper_try	deps/jemalloc/src/extent.c	/^extent_dalloc_wrapper_try(tsdn_t *tsdn, arena_t *arena,$/;"	f	file:
extent_deactivate	deps/jemalloc/src/extent.c	/^extent_deactivate(tsdn_t *tsdn, arena_t *arena, extents_t *extents,$/;"	f	file:
extent_deactivate_locked	deps/jemalloc/src/extent.c	/^extent_deactivate_locked(tsdn_t *tsdn, arena_t *arena, extents_t *extents,$/;"	f	file:
extent_decommit_default	deps/jemalloc/src/extent.c	/^extent_decommit_default(extent_hooks_t *extent_hooks, void *addr, size_t size,$/;"	f	file:
extent_decommit_hook	deps/jemalloc/test/include/test/extent_hooks.h	/^extent_decommit_hook(extent_hooks_t *extent_hooks, void *addr, size_t size,$/;"	f
extent_decommit_t	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^typedef bool (extent_decommit_t)(extent_hooks_t *, void *, size_t, size_t,$/;"	t
extent_decommit_wrapper	deps/jemalloc/src/extent.c	/^extent_decommit_wrapper(tsdn_t *tsdn, arena_t *arena,$/;"	f
extent_deregister	deps/jemalloc/src/extent.c	/^extent_deregister(tsdn_t *tsdn, extent_t *extent) {$/;"	f	file:
extent_deregister_impl	deps/jemalloc/src/extent.c	/^extent_deregister_impl(tsdn_t *tsdn, extent_t *extent, bool gdump) {$/;"	f	file:
extent_deregister_no_gdump_sub	deps/jemalloc/src/extent.c	/^extent_deregister_no_gdump_sub(tsdn_t *tsdn, extent_t *extent) {$/;"	f	file:
extent_destroy_default	deps/jemalloc/src/extent.c	/^extent_destroy_default(extent_hooks_t *extent_hooks, void *addr, size_t size,$/;"	f	file:
extent_destroy_default_impl	deps/jemalloc/src/extent.c	/^extent_destroy_default_impl(void *addr, size_t size) {$/;"	f	file:
extent_destroy_hook	deps/jemalloc/test/include/test/extent_hooks.h	/^extent_destroy_hook(extent_hooks_t *extent_hooks, void *addr, size_t size,$/;"	f
extent_destroy_t	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^typedef void (extent_destroy_t)(extent_hooks_t *, void *, size_t, bool,$/;"	t
extent_destroy_wrapper	deps/jemalloc/src/extent.c	/^extent_destroy_wrapper(tsdn_t *tsdn, arena_t *arena,$/;"	f
extent_dss_boot	deps/jemalloc/src/extent_dss.c	/^extent_dss_boot(void) {$/;"	f
extent_dss_extending_finish	deps/jemalloc/src/extent_dss.c	/^extent_dss_extending_finish(void) {$/;"	f	file:
extent_dss_extending_start	deps/jemalloc/src/extent_dss.c	/^extent_dss_extending_start(void) {$/;"	f	file:
extent_dss_max_update	deps/jemalloc/src/extent_dss.c	/^extent_dss_max_update(void *new_addr) {$/;"	f	file:
extent_dss_mergeable	deps/jemalloc/src/extent_dss.c	/^extent_dss_mergeable(void *addr_a, void *addr_b) {$/;"	f
extent_dss_prec_get	deps/jemalloc/src/extent_dss.c	/^extent_dss_prec_get(void) {$/;"	f
extent_dss_prec_set	deps/jemalloc/src/extent_dss.c	/^extent_dss_prec_set(dss_prec_t dss_prec) {$/;"	f
extent_dss_sbrk	deps/jemalloc/src/extent_dss.c	/^extent_dss_sbrk(intptr_t increment) {$/;"	f	file:
extent_dumpable_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_dumpable_get(const extent_t *extent) {$/;"	f
extent_dumpable_set	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_dumpable_set(extent_t *extent, bool dumpable) {$/;"	f
extent_ead_comp	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_ead_comp(const extent_t *a, const extent_t *b) {$/;"	f
extent_esn_comp	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_esn_comp(const extent_t *a, const extent_t *b) {$/;"	f
extent_esn_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_esn_get(const extent_t *extent) {$/;"	f
extent_esn_set	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_esn_set(extent_t *extent, size_t esn) {$/;"	f
extent_esnead_comp	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_esnead_comp(const extent_t *a, const extent_t *b) {$/;"	f
extent_gdump_add	deps/jemalloc/src/extent.c	/^extent_gdump_add(tsdn_t *tsdn, const extent_t *extent) {$/;"	f	file:
extent_gdump_sub	deps/jemalloc/src/extent.c	/^extent_gdump_sub(tsdn_t *tsdn, const extent_t *extent) {$/;"	f	file:
extent_grow_mtx	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	malloc_mutex_t		extent_grow_mtx;$/;"	m	struct:arena_s
extent_grow_next	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	pszind_t		extent_grow_next;$/;"	m	struct:arena_s
extent_grow_retained	deps/jemalloc/src/extent.c	/^extent_grow_retained(tsdn_t *tsdn, arena_t *arena,$/;"	f	file:
extent_heap_t	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^typedef ph(extent_t) extent_heap_t;$/;"	t
extent_hook_post_reentrancy	deps/jemalloc/src/extent.c	/^extent_hook_post_reentrancy(tsdn_t *tsdn) {$/;"	f	file:
extent_hook_pre_reentrancy	deps/jemalloc/src/extent.c	/^extent_hook_pre_reentrancy(tsdn_t *tsdn, arena_t *arena) {$/;"	f	file:
extent_hooks	deps/jemalloc/include/jemalloc/internal/base_structs.h	/^	atomic_p_t	extent_hooks;$/;"	m	struct:base_s
extent_hooks_assure_initialized	deps/jemalloc/src/extent.c	/^extent_hooks_assure_initialized(arena_t *arena,$/;"	f	file:
extent_hooks_default	deps/jemalloc/src/extent.c	/^const extent_hooks_t	extent_hooks_default = {$/;"	v
extent_hooks_get	deps/jemalloc/src/extent.c	/^extent_hooks_get(arena_t *arena) {$/;"	f
extent_hooks_prep	deps/jemalloc/test/include/test/extent_hooks.h	/^extent_hooks_prep(void) {$/;"	f
extent_hooks_s	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^struct extent_hooks_s {$/;"	s
extent_hooks_set	deps/jemalloc/src/extent.c	/^extent_hooks_set(tsd_t *tsd, arena_t *arena, extent_hooks_t *extent_hooks) {$/;"	f
extent_hooks_t	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^typedef struct extent_hooks_s extent_hooks_t;$/;"	t	typeref:struct:extent_hooks_s
extent_in_dss	deps/jemalloc/src/extent_dss.c	/^extent_in_dss(void *addr) {$/;"	f
extent_in_dss_helper	deps/jemalloc/src/extent_dss.c	/^extent_in_dss_helper(void *addr, void *max) {$/;"	f	file:
extent_init	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_init(extent_t *extent, arena_t *arena, void *addr, size_t size,$/;"	f
extent_interior_deregister	deps/jemalloc/src/extent.c	/^extent_interior_deregister(tsdn_t *tsdn, rtree_ctx_t *rtree_ctx,$/;"	f	file:
extent_interior_register	deps/jemalloc/src/extent.c	/^extent_interior_register(tsdn_t *tsdn, rtree_ctx_t *rtree_ctx, extent_t *extent,$/;"	f	file:
extent_last_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_last_get(const extent_t *extent) {$/;"	f
extent_list_append	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_list_append(extent_list_t *list, extent_t *extent) {$/;"	f
extent_list_first	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_list_first(const extent_list_t *list) {$/;"	f
extent_list_init	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_list_init(extent_list_t *list) {$/;"	f
extent_list_last	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_list_last(const extent_list_t *list) {$/;"	f
extent_list_prepend	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_list_prepend(extent_list_t *list, extent_t *extent) {$/;"	f
extent_list_remove	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_list_remove(extent_list_t *list, extent_t *extent) {$/;"	f
extent_list_replace	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_list_replace(extent_list_t *list, extent_t *to_remove,$/;"	f
extent_list_t	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^typedef ql_head(extent_t) extent_list_t;$/;"	t
extent_lock	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_lock(tsdn_t *tsdn, extent_t *extent) {$/;"	f
extent_lock2	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_lock2(tsdn_t *tsdn, extent_t *extent1, extent_t *extent2) {$/;"	f
extent_lock_from_addr	deps/jemalloc/src/extent.c	/^extent_lock_from_addr(tsdn_t *tsdn, rtree_ctx_t *rtree_ctx, void *addr) {$/;"	f	file:
extent_merge_default	deps/jemalloc/src/extent.c	/^extent_merge_default(extent_hooks_t *extent_hooks, void *addr_a, size_t size_a,$/;"	f	file:
extent_merge_default_impl	deps/jemalloc/src/extent.c	/^extent_merge_default_impl(void *addr_a, void *addr_b) {$/;"	f	file:
extent_merge_hook	deps/jemalloc/test/include/test/extent_hooks.h	/^extent_merge_hook(extent_hooks_t *extent_hooks, void *addr_a, size_t size_a,$/;"	f
extent_merge_impl	deps/jemalloc/src/extent.c	/^extent_merge_impl(tsdn_t *tsdn, arena_t *arena,$/;"	f	file:
extent_merge_t	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^typedef bool (extent_merge_t)(extent_hooks_t *, void *, size_t, void *, size_t,$/;"	t
extent_merge_wrapper	deps/jemalloc/src/extent.c	/^extent_merge_wrapper(tsdn_t *tsdn, arena_t *arena,$/;"	f
extent_mutex_pool	deps/jemalloc/src/extent.c	/^mutex_pool_t	extent_mutex_pool;$/;"	v
extent_nfree_dec	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_nfree_dec(extent_t *extent) {$/;"	f
extent_nfree_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_nfree_get(const extent_t *extent) {$/;"	f
extent_nfree_inc	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_nfree_inc(extent_t *extent) {$/;"	f
extent_nfree_set	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_nfree_set(extent_t *extent, unsigned nfree) {$/;"	f
extent_past_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_past_get(const extent_t *extent) {$/;"	f
extent_prof_tctx_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_prof_tctx_get(const extent_t *extent) {$/;"	f
extent_prof_tctx_set	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_prof_tctx_set(extent_t *extent, prof_tctx_t *tctx) {$/;"	f
extent_purge_forced_default	deps/jemalloc/src/extent.c	/^extent_purge_forced_default(extent_hooks_t *extent_hooks, void *addr,$/;"	f	file:
extent_purge_forced_hook	deps/jemalloc/test/include/test/extent_hooks.h	/^extent_purge_forced_hook(extent_hooks_t *extent_hooks, void *addr, size_t size,$/;"	f
extent_purge_forced_impl	deps/jemalloc/src/extent.c	/^extent_purge_forced_impl(tsdn_t *tsdn, arena_t *arena,$/;"	f	file:
extent_purge_forced_wrapper	deps/jemalloc/src/extent.c	/^extent_purge_forced_wrapper(tsdn_t *tsdn, arena_t *arena,$/;"	f
extent_purge_lazy_default	deps/jemalloc/src/extent.c	/^extent_purge_lazy_default(extent_hooks_t *extent_hooks, void *addr, size_t size,$/;"	f	file:
extent_purge_lazy_hook	deps/jemalloc/test/include/test/extent_hooks.h	/^extent_purge_lazy_hook(extent_hooks_t *extent_hooks, void *addr, size_t size,$/;"	f
extent_purge_lazy_impl	deps/jemalloc/src/extent.c	/^extent_purge_lazy_impl(tsdn_t *tsdn, arena_t *arena,$/;"	f	file:
extent_purge_lazy_wrapper	deps/jemalloc/src/extent.c	/^extent_purge_lazy_wrapper(tsdn_t *tsdn, arena_t *arena,$/;"	f
extent_purge_t	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^typedef bool (extent_purge_t)(extent_hooks_t *, void *, size_t, size_t, size_t,$/;"	t
extent_record	deps/jemalloc/src/extent.c	/^extent_record(tsdn_t *tsdn, arena_t *arena, extent_hooks_t **r_extent_hooks,$/;"	f	file:
extent_recycle	deps/jemalloc/src/extent.c	/^extent_recycle(tsdn_t *tsdn, arena_t *arena, extent_hooks_t **r_extent_hooks,$/;"	f	file:
extent_recycle_extract	deps/jemalloc/src/extent.c	/^extent_recycle_extract(tsdn_t *tsdn, arena_t *arena,$/;"	f	file:
extent_recycle_split	deps/jemalloc/src/extent.c	/^extent_recycle_split(tsdn_t *tsdn, arena_t *arena,$/;"	f	file:
extent_register	deps/jemalloc/src/extent.c	/^extent_register(tsdn_t *tsdn, extent_t *extent) {$/;"	f	file:
extent_register_impl	deps/jemalloc/src/extent.c	/^extent_register_impl(tsdn_t *tsdn, extent_t *extent, bool gdump_add) {$/;"	f	file:
extent_register_no_gdump_add	deps/jemalloc/src/extent.c	/^extent_register_no_gdump_add(tsdn_t *tsdn, extent_t *extent) {$/;"	f	file:
extent_reregister	deps/jemalloc/src/extent.c	/^extent_reregister(tsdn_t *tsdn, extent_t *extent) {$/;"	f	file:
extent_rtree_leaf_elm_try_lock	deps/jemalloc/src/extent.c	/^extent_rtree_leaf_elm_try_lock(tsdn_t *tsdn, rtree_leaf_elm_t *elm,$/;"	f	file:
extent_rtree_leaf_elms_lookup	deps/jemalloc/src/extent.c	/^extent_rtree_leaf_elms_lookup(tsdn_t *tsdn, rtree_ctx_t *rtree_ctx,$/;"	f	file:
extent_rtree_write_acquired	deps/jemalloc/src/extent.c	/^extent_rtree_write_acquired(tsdn_t *tsdn, rtree_leaf_elm_t *elm_a,$/;"	f	file:
extent_s	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^struct extent_s {$/;"	s
extent_size_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_size_get(const extent_t *extent) {$/;"	f
extent_size_quantize_ceil	deps/jemalloc/src/extent.c	/^extent_size_quantize_ceil(size_t size) {$/;"	f	file:
extent_size_quantize_floor	deps/jemalloc/src/extent.c	/^extent_size_quantize_floor(size_t size) {$/;"	f	file:
extent_size_set	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_size_set(extent_t *extent, size_t size) {$/;"	f
extent_slab_data_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_slab_data_get(extent_t *extent) {$/;"	f
extent_slab_data_get_const	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_slab_data_get_const(const extent_t *extent) {$/;"	f
extent_slab_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_slab_get(const extent_t *extent) {$/;"	f
extent_slab_set	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_slab_set(extent_t *extent, bool slab) {$/;"	f
extent_sn_comp	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_sn_comp(const extent_t *a, const extent_t *b) {$/;"	f
extent_sn_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_sn_get(const extent_t *extent) {$/;"	f
extent_sn_next	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	atomic_zu_t		extent_sn_next;$/;"	m	struct:arena_s
extent_sn_next	deps/jemalloc/include/jemalloc/internal/base_structs.h	/^	size_t		extent_sn_next;$/;"	m	struct:base_s
extent_sn_set	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_sn_set(extent_t *extent, size_t sn) {$/;"	f
extent_snad_comp	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_snad_comp(const extent_t *a, const extent_t *b) {$/;"	f
extent_split_default	deps/jemalloc/src/extent.c	/^extent_split_default(extent_hooks_t *extent_hooks, void *addr, size_t size,$/;"	f	file:
extent_split_hook	deps/jemalloc/test/include/test/extent_hooks.h	/^extent_split_hook(extent_hooks_t *extent_hooks, void *addr, size_t size,$/;"	f
extent_split_impl	deps/jemalloc/src/extent.c	/^extent_split_impl(tsdn_t *tsdn, arena_t *arena,$/;"	f	file:
extent_split_interior	deps/jemalloc/src/extent.c	/^extent_split_interior(tsdn_t *tsdn, arena_t *arena,$/;"	f	file:
extent_split_interior_cant_alloc	deps/jemalloc/src/extent.c	/^	extent_split_interior_cant_alloc,$/;"	e	enum:__anon129	file:
extent_split_interior_error	deps/jemalloc/src/extent.c	/^	extent_split_interior_error$/;"	e	enum:__anon129	file:
extent_split_interior_ok	deps/jemalloc/src/extent.c	/^	extent_split_interior_ok,$/;"	e	enum:__anon129	file:
extent_split_interior_result_t	deps/jemalloc/src/extent.c	/^} extent_split_interior_result_t;$/;"	t	typeref:enum:__anon129	file:
extent_split_t	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^typedef bool (extent_split_t)(extent_hooks_t *, void *, size_t, size_t, size_t,$/;"	t
extent_split_wrapper	deps/jemalloc/src/extent.c	/^extent_split_wrapper(tsdn_t *tsdn, arena_t *arena,$/;"	f
extent_state_active	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^	extent_state_active   = 0,$/;"	e	enum:__anon133
extent_state_dirty	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^	extent_state_dirty    = 1,$/;"	e	enum:__anon133
extent_state_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_state_get(const extent_t *extent) {$/;"	f
extent_state_muzzy	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^	extent_state_muzzy    = 2,$/;"	e	enum:__anon133
extent_state_retained	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^	extent_state_retained = 3$/;"	e	enum:__anon133
extent_state_set	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_state_set(extent_t *extent, extent_state_t state) {$/;"	f
extent_state_t	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^} extent_state_t;$/;"	t	typeref:enum:__anon133
extent_szind_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_szind_get(const extent_t *extent) {$/;"	f
extent_szind_get_maybe_invalid	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_szind_get_maybe_invalid(const extent_t *extent) {$/;"	f
extent_szind_set	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_szind_set(extent_t *extent, szind_t szind) {$/;"	f
extent_t	deps/jemalloc/include/jemalloc/internal/extent_types.h	/^typedef struct extent_s extent_t;$/;"	t	typeref:struct:extent_s
extent_tree_t	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^typedef ph(extent_t) extent_tree_t;$/;"	t
extent_try_coalesce	deps/jemalloc/src/extent.c	/^extent_try_coalesce(tsdn_t *tsdn, arena_t *arena,$/;"	f	file:
extent_try_delayed_coalesce	deps/jemalloc/src/extent.c	/^extent_try_delayed_coalesce(tsdn_t *tsdn, arena_t *arena,$/;"	f	file:
extent_unlock	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_unlock(tsdn_t *tsdn, extent_t *extent) {$/;"	f
extent_unlock2	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_unlock2(tsdn_t *tsdn, extent_t *extent1, extent_t *extent2) {$/;"	f
extent_usize_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_usize_get(const extent_t *extent) {$/;"	f
extent_zeroed_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_zeroed_get(const extent_t *extent) {$/;"	f
extent_zeroed_set	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_zeroed_set(extent_t *extent, bool zeroed) {$/;"	f
extents_alloc	deps/jemalloc/src/extent.c	/^extents_alloc(tsdn_t *tsdn, arena_t *arena, extent_hooks_t **r_extent_hooks,$/;"	f
extents_best_fit_locked	deps/jemalloc/src/extent.c	/^extents_best_fit_locked(tsdn_t *tsdn, arena_t *arena, extents_t *extents,$/;"	f	file:
extents_bitmap_info	deps/jemalloc/src/extent.c	/^static const bitmap_info_t extents_bitmap_info =$/;"	v	file:
extents_dalloc	deps/jemalloc/src/extent.c	/^extents_dalloc(tsdn_t *tsdn, arena_t *arena, extent_hooks_t **r_extent_hooks,$/;"	f
extents_dirty	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	extents_t		extents_dirty;$/;"	m	struct:arena_s
extents_evict	deps/jemalloc/src/extent.c	/^extents_evict(tsdn_t *tsdn, arena_t *arena, extent_hooks_t **r_extent_hooks,$/;"	f
extents_first_fit_locked	deps/jemalloc/src/extent.c	/^extents_first_fit_locked(tsdn_t *tsdn, arena_t *arena, extents_t *extents,$/;"	f	file:
extents_fit_alignment	deps/jemalloc/src/extent.c	/^extents_fit_alignment(extents_t *extents, size_t min_size, size_t max_size,$/;"	f	file:
extents_fit_locked	deps/jemalloc/src/extent.c	/^extents_fit_locked(tsdn_t *tsdn, arena_t *arena, extents_t *extents,$/;"	f	file:
extents_insert_locked	deps/jemalloc/src/extent.c	/^extents_insert_locked(tsdn_t *tsdn, extents_t *extents, extent_t *extent) {$/;"	f	file:
extents_leak	deps/jemalloc/src/extent.c	/^extents_leak(tsdn_t *tsdn, arena_t *arena, extent_hooks_t **r_extent_hooks,$/;"	f	file:
extents_muzzy	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	extents_t		extents_muzzy;$/;"	m	struct:arena_s
extents_npages_get	deps/jemalloc/src/extent.c	/^extents_npages_get(extents_t *extents) {$/;"	f
extents_postfork_child	deps/jemalloc/src/extent.c	/^extents_postfork_child(tsdn_t *tsdn, extents_t *extents) {$/;"	f
extents_postfork_parent	deps/jemalloc/src/extent.c	/^extents_postfork_parent(tsdn_t *tsdn, extents_t *extents) {$/;"	f
extents_prefork	deps/jemalloc/src/extent.c	/^extents_prefork(tsdn_t *tsdn, extents_t *extents) {$/;"	f
extents_remove_locked	deps/jemalloc/src/extent.c	/^extents_remove_locked(tsdn_t *tsdn, extents_t *extents, extent_t *extent) {$/;"	f	file:
extents_retained	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	extents_t		extents_retained;$/;"	m	struct:arena_s
extents_rtree	deps/jemalloc/src/extent.c	/^rtree_t		extents_rtree;$/;"	v
extents_s	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^struct extents_s {$/;"	s
extents_state_get	deps/jemalloc/src/extent.c	/^extents_state_get(const extents_t *extents) {$/;"	f
extents_t	deps/jemalloc/include/jemalloc/internal/extent_types.h	/^typedef struct extents_s extents_t;$/;"	t	typeref:struct:extents_s
extra	src/quicklist.h	/^    unsigned int extra : 10; \/* more bits to steal for future usage *\/$/;"	m	struct:quicklistNode
extractBoxOrReply	src/geo.c	/^int extractBoxOrReply(client *c, robj **argv, double *conversion,$/;"	f
extractDistanceOrReply	src/geo.c	/^int extractDistanceOrReply(client *c, robj **argv,$/;"	f
extractLongLatOrReply	src/geo.c	/^int extractLongLatOrReply(client *c, robj **argv, double *xy) {$/;"	f
extractUnitOrReply	src/geo.c	/^double extractUnitOrReply(client *c, robj *unit) {$/;"	f
extraline	deps/lua/src/lauxlib.c	/^  int extraline;$/;"	m	struct:LoadF	file:
f	deps/jemalloc/configure	/^    f()$/;"	f
f	deps/lua/doc/manual.html	/^     function f () <em>body<\/em> end$/;"	f
f	deps/lua/doc/manual.html	/^     function f(a, b) end$/;"	f
f	deps/lua/src/lauxlib.c	/^  FILE *f;$/;"	m	struct:LoadF	file:
f	deps/lua/src/lobject.h	/^  lua_CFunction f;$/;"	m	struct:CClosure
f	deps/lua/src/lparser.h	/^  Proto *f;  \/* current function header *\/$/;"	m	struct:FuncState
f	deps/lua/src/lparser.h	/^  int f;  \/* patch list of `exit when false' *\/$/;"	m	struct:expdesc
f	deps/lua/test/bisect.lua	/^function f(x)$/;"	f
f	exp/merge.py	/^f=open(HOTFILE, "r");$/;"	v
f	exp/slot_log_dealer.py	/^f=open(SLOT_FILE, "r");$/;"	v
f_Ccall	deps/lua/src/lapi.c	/^static void f_Ccall (lua_State *L, void *ud) {$/;"	f	file:
f_call	deps/lua/src/lapi.c	/^static void f_call (lua_State *L, void *ud) {$/;"	f	file:
f_content	exp/merge.py	/^f_content  = f.readlines();$/;"	v
f_content	exp/merge.py	/^f_content=[ _.strip().split() for _ in f_content ]$/;"	v
f_flush	deps/lua/src/liolib.c	/^static int f_flush (lua_State *L) {$/;"	f	file:
f_isLua	deps/lua/src/lstate.h	61;"	d
f_lines	deps/lua/src/liolib.c	/^static int f_lines (lua_State *L) {$/;"	f	file:
f_list	exp/slot_log_dealer.py	/^f_list = f.readlines();$/;"	v
f_luaopen	deps/lua/src/lstate.c	/^static void f_luaopen (lua_State *L, void *ud) {$/;"	f	file:
f_parser	deps/lua/src/ldo.c	/^static void f_parser (lua_State *L, void *ud) {$/;"	f	file:
f_read	deps/lua/src/liolib.c	/^static int f_read (lua_State *L) {$/;"	f	file:
f_seek	deps/lua/src/liolib.c	/^static int f_seek (lua_State *L) {$/;"	f	file:
f_setvbuf	deps/lua/src/liolib.c	/^static int f_setvbuf (lua_State *L) {$/;"	f	file:
f_write	deps/lua/src/liolib.c	/^static int f_write (lua_State *L) {$/;"	f	file:
factorial	deps/jemalloc/test/unit/math.c	/^factorial(unsigned x) {$/;"	f	file:
fail	src/cluster.h	/^    } fail;$/;"	m	union:clusterMsgData	typeref:struct:clusterMsgData::__anon38
fail	tests/support/test.tcl	/^proc fail {msg} {$/;"	p
failTest	src/modules/testmodule.c	/^int failTest(RedisModuleCtx *ctx, const char *msg) {$/;"	f
fail_reports	src/cluster.h	/^    list *fail_reports;         \/* List of nodes signaling this as failing *\/$/;"	m	struct:clusterNode
fail_time	src/cluster.h	/^    mstime_t fail_time;      \/* Unix time when FAIL flag was set *\/$/;"	m	struct:clusterNode
failed	src/server.c	/^    int failed;$/;"	m	struct:redisTest	file:
failed_calls	src/server.h	/^    long long microseconds, calls, rejected_calls, failed_calls;$/;"	m	struct:redisCommand
failoverCommand	src/replication.c	/^void failoverCommand(client *c) {$/;"	f
failover_auth_count	src/cluster.h	/^    int failover_auth_count;    \/* Number of votes received so far. *\/$/;"	m	struct:clusterState
failover_auth_epoch	src/cluster.h	/^    uint64_t failover_auth_epoch; \/* Epoch of the current election. *\/$/;"	m	struct:clusterState
failover_auth_rank	src/cluster.h	/^    int failover_auth_rank;     \/* This slave rank for current auth request. *\/$/;"	m	struct:clusterState
failover_auth_sent	src/cluster.h	/^    int failover_auth_sent;     \/* True if we already asked for votes. *\/$/;"	m	struct:clusterState
failover_auth_time	src/cluster.h	/^    mstime_t failover_auth_time; \/* Time of previous or next election. *\/$/;"	m	struct:clusterState
failover_delay_logged	src/sentinel.c	/^    mstime_t failover_delay_logged; \/* For what failover_start_time value we$/;"	m	struct:sentinelRedisInstance	file:
failover_end_time	src/server.h	/^    mstime_t failover_end_time; \/* Deadline for failover command. *\/$/;"	m	struct:redisServer
failover_epoch	src/sentinel.c	/^    uint64_t failover_epoch; \/* Epoch of the currently started failover. *\/$/;"	m	struct:sentinelRedisInstance	file:
failover_start_time	src/sentinel.c	/^    mstime_t failover_start_time;   \/* Last failover attempt start time. *\/$/;"	m	struct:sentinelRedisInstance	file:
failover_state	src/sentinel.c	/^    int failover_state; \/* See SENTINEL_FAILOVER_STATE_* defines. *\/$/;"	m	struct:sentinelRedisInstance	file:
failover_state	src/server.h	/^    int failover_state; \/* Failover state *\/$/;"	m	struct:redisServer
failover_state	src/server.h	/^} failover_state;$/;"	t	typeref:enum:__anon16
failover_state_change_time	src/sentinel.c	/^    mstime_t failover_state_change_time;$/;"	m	struct:sentinelRedisInstance	file:
failover_timeout	src/sentinel.c	/^    mstime_t failover_timeout;      \/* Max time to refresh failover state. *\/$/;"	m	struct:sentinelRedisInstance	file:
fails	deps/hiredis/test.c	/^static int tests = 0, fails = 0, skips = 0;$/;"	v	file:
false	deps/jemalloc/include/msvc_compat/C99/stdbool.h	16;"	d
fasttm	deps/lua/src/ltm.h	44;"	d
fatal	deps/lua/src/luac.c	/^static void fatal(const char* message)$/;"	f	file:
fd	deps/hiredis/adapters/ae.h	/^    int fd;$/;"	m	struct:redisAeEvents
fd	deps/hiredis/adapters/ivykis.h	/^    struct iv_fd fd;$/;"	m	struct:redisIvykisEvents	typeref:struct:redisIvykisEvents::iv_fd
fd	deps/hiredis/hiredis.h	/^        redisFD fd;$/;"	m	union:__anon80::__anon81
fd	deps/hiredis/hiredis.h	/^    redisFD fd;$/;"	m	struct:redisContext
fd	src/ae.h	/^    int fd;$/;"	m	struct:aeFiredEvent
fd	src/bio.c	/^    int fd; \/* Fd for file based background jobs *\/$/;"	m	struct:bio_job	file:
fd	src/connection.h	/^    int fd;$/;"	m	struct:connection
fd	src/rio.h	/^            int fd;       \/* File descriptor. *\/$/;"	m	struct:_rio::__anon54::__anon58
fd	src/rio.h	/^        } fd;$/;"	m	union:_rio::__anon54	typeref:struct:_rio::__anon54::__anon58
fd	src/sentinel.c	/^    int fd;$/;"	m	struct:redisAeEvents	file:
fd	src/server.h	/^    int fd[CONFIG_BINDADDR_MAX];$/;"	m	struct:socketFds
feedAppendOnlyFile	src/aof.c	/^void feedAppendOnlyFile(struct redisCommand *cmd, int dictid, robj **argv, int argc) {$/;"	f
feedReplicationBacklog	src/replication.c	/^void feedReplicationBacklog(void *ptr, size_t len) {$/;"	f
feedReplicationBacklogWithObject	src/replication.c	/^void feedReplicationBacklogWithObject(robj *o) {$/;"	f
fetchClusterConfiguration	src/redis-benchmark.c	/^static int fetchClusterConfiguration() {$/;"	f	file:
fetchClusterSlotsConfiguration	src/redis-benchmark.c	/^static int fetchClusterSlotsConfiguration(client c) {$/;"	f	file:
ffs	deps/jemalloc/include/msvc_compat/strings.h	/^static __forceinline int ffs(int x) {$/;"	f
ffs	deps/jemalloc/include/msvc_compat/strings.h	55;"	d
ffs_llu	deps/jemalloc/include/jemalloc/internal/bit_util.h	/^ffs_llu(unsigned long long bitmap) {$/;"	f
ffs_lu	deps/jemalloc/include/jemalloc/internal/bit_util.h	/^ffs_lu(unsigned long bitmap) {$/;"	f
ffs_u	deps/jemalloc/include/jemalloc/internal/bit_util.h	/^ffs_u(unsigned bitmap) {$/;"	f
ffs_u32	deps/jemalloc/include/jemalloc/internal/bit_util.h	/^ffs_u32(uint32_t bitmap) {$/;"	f
ffs_u64	deps/jemalloc/include/jemalloc/internal/bit_util.h	/^ffs_u64(uint64_t bitmap) {$/;"	f
ffs_zu	deps/jemalloc/include/jemalloc/internal/bit_util.h	/^ffs_zu(size_t bitmap) {$/;"	f
ffsl	deps/jemalloc/include/msvc_compat/strings.h	/^static __forceinline int ffsl(long x) {$/;"	f
ffsl	deps/jemalloc/include/msvc_compat/strings.h	54;"	d
ffsll	deps/jemalloc/include/msvc_compat/strings.h	/^static __forceinline int ffsll(unsigned __int64 x) {$/;"	f
ffsll	deps/jemalloc/include/msvc_compat/strings.h	53;"	d
fib	deps/lua/test/fib.lua	/^function fib(n)$/;"	f
field	deps/lua/src/lparser.c	/^static void field (LexState *ls, expdesc *v) {$/;"	f	file:
field	tests/unit/moduleapi/infotest.tcl	/^proc field {info property} {$/;"	p
field_buf	src/stream.h	/^    unsigned char field_buf[LP_INTBUF_SIZE];$/;"	m	struct:streamIterator
file	src/rio.h	/^        } file;$/;"	m	union:_rio::__anon54	typeref:struct:_rio::__anon54::__anon56
fileerror	deps/lua/src/liolib.c	/^static void fileerror (lua_State *L, int arg, const char *filename) {$/;"	f	file:
fill	src/quicklist.h	/^    int fill : QL_FILL_BITS;              \/* fill factor for individual nodes *\/$/;"	m	struct:quicklist
fill_array32	deps/jemalloc/test/src/SFMT.c	/^void fill_array32(sfmt_t *ctx, uint32_t *array, int size) {$/;"	f
fill_array64	deps/jemalloc/test/src/SFMT.c	/^void fill_array64(sfmt_t *ctx, uint64_t *array, int size) {$/;"	f
filter	tests/modules/commandfilter.c	/^static RedisModuleCommandFilter *filter = NULL;$/;"	v	file:
filter 	deps/lua/test/sieve.lua	/^function filter (p, g)$/;"	f
filter_samples	utils/hyperloglog/hll-gnuplot-graph.rb	/^def filter_samples(numsets,max,step,filter)$/;"	f	class:run_experiment
filters	src/module.c	/^    list *filters;  \/* List of filters the module has registered. *\/$/;"	m	struct:RedisModule	file:
finalizeResultEmission	src/t_zset.c	/^    zrangeResultFinalizeFunction         finalizeResultEmission;$/;"	m	struct:zrange_result_handler	file:
finalizerProc	src/ae.h	/^    aeEventFinalizerProc *finalizerProc;$/;"	m	struct:aeTimeEvent
findBigKeys	src/redis-cli.c	/^static void findBigKeys(int memkeys, unsigned memkeys_samples) {$/;"	f	file:
findHotKeys	src/redis-cli.c	/^static void findHotKeys(void) {$/;"	f	file:
findKeyWithType	tests/support/util.tcl	/^proc findKeyWithType {r type} {$/;"	p
findReplica	src/replication.c	/^static client *findReplica(char *host, int port) {$/;"	f	file:
find_available_port	tests/support/util.tcl	/^proc find_available_port {start count} {$/;"	p
find_non_empty_master	tests/cluster/tests/14-consistency-check.tcl	/^proc find_non_empty_master {} {$/;"	p
find_valgrind_errors	tests/support/util.tcl	/^proc find_valgrind_errors {stderr on_termination} {$/;"	p
findfile	deps/lua/src/loadlib.c	/^static const char *findfile (lua_State *L, const char *name,$/;"	f	file:
findindex	deps/lua/src/ltable.c	/^static int findindex (lua_State *L, Table *t, StkId key) {$/;"	f	file:
findlocal	deps/lua/src/ldebug.c	/^static const char *findlocal (lua_State *L, CallInfo *ci, int n) {$/;"	f	file:
fingerprint	src/dict.h	/^    long long fingerprint;$/;"	m	struct:dictIterator
fini_gen_rand	deps/jemalloc/test/src/SFMT.c	/^void fini_gen_rand(sfmt_t *ctx) {$/;"	f
finish	deps/hiredis/examples/example-qt.h	/^        void finish() { emit finished(); }$/;"	f	class:ExampleQt
fired	src/ae.h	/^    aeFiredEvent *fired; \/* Fired events *\/$/;"	m	struct:aeEventLoop
firstkey	src/server.h	/^    int firstkey; \/* The first argument that's a key (0 = no keys) *\/$/;"	m	struct:redisCommand
fix_cluster	tests/cluster/tests/includes/utils.tcl	/^proc fix_cluster {addr} {$/;"	p
fixed_time_expire	src/server.h	/^    long fixed_time_expire;     \/* If > 0, expire keys against server.mstime. *\/$/;"	m	struct:redisServer
fixjump	deps/lua/src/lcode.c	/^static void fixjump (FuncState *fs, int pc, int dest) {$/;"	f	file:
flag	src/acl.c	/^    uint64_t flag;$/;"	m	struct:ACLCategoryItem	file:
flag	src/acl.c	/^    uint64_t flag;$/;"	m	struct:ACLUserFlag	file:
flag	src/cluster.c	/^    uint16_t flag;$/;"	m	struct:redisNodeFlags	file:
flagTransaction	src/multi.c	/^void flagTransaction(client *c) {$/;"	f
flag_opt_junk_alloc	deps/jemalloc/src/jemalloc.c	/^	flag_opt_junk_alloc	= (1U),$/;"	e	enum:__anon131	file:
flag_opt_junk_free	deps/jemalloc/src/jemalloc.c	/^	flag_opt_junk_free	= (1U << 1),$/;"	e	enum:__anon131	file:
flag_opt_utrace	deps/jemalloc/src/jemalloc.c	/^	flag_opt_utrace		= (1U << 3),$/;"	e	enum:__anon131	file:
flag_opt_xmalloc	deps/jemalloc/src/jemalloc.c	/^	flag_opt_xmalloc	= (1U << 4)$/;"	e	enum:__anon131	file:
flag_opt_zero	deps/jemalloc/src/jemalloc.c	/^	flag_opt_zero		= (1U << 2),$/;"	e	enum:__anon131	file:
flags	deps/hiredis/adapters/libevent.h	/^    short flags;$/;"	m	struct:redisLibeventEvents
flags	deps/hiredis/hiredis.h	/^    int flags;$/;"	m	struct:redisContext
flags	deps/hiredis/sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:hisdshdr16
flags	deps/hiredis/sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:hisdshdr32
flags	deps/hiredis/sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:hisdshdr64
flags	deps/hiredis/sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:hisdshdr8
flags	deps/hiredis/sds.h	/^    unsigned char flags; \/* 3 lsb of type, and 5 msb of string length *\/$/;"	m	struct:hisdshdr5
flags	deps/lua/src/lobject.h	/^  lu_byte flags;  \/* 1<<p means tagmethod(p) is not present *\/ $/;"	m	struct:Table
flags	src/ae.h	/^    int flags;$/;"	m	struct:aeEventLoop
flags	src/cluster.h	/^    int flags;      \/* CLUSTER_NODE_... *\/$/;"	m	struct:clusterNode
flags	src/cluster.h	/^    uint16_t flags;             \/* node->flags copy *\/$/;"	m	struct:__anon31
flags	src/cluster.h	/^    uint16_t flags;      \/* Sender node flags *\/$/;"	m	struct:__anon43
flags	src/config.c	/^    const unsigned int flags; \/* Flags for this specific config *\/$/;"	m	struct:standardConfig	file:
flags	src/connection.h	/^    short int flags;$/;"	m	struct:connection
flags	src/module.c	/^    int flags;                      \/* REDISMODULE_CTX_... flags. *\/$/;"	m	struct:RedisModuleCtx	file:
flags	src/module.c	/^    int flags;      \/* REDISMODULE_REPLYFLAG_...  *\/$/;"	m	struct:RedisModuleCallReply	file:
flags	src/module.c	/^    int flags;$/;"	m	struct:RedisModuleCommandFilter	file:
flags	src/module.c	/^    int flags;$/;"	m	struct:moduleClusterNodeInfo	file:
flags	src/rax.h	/^    int flags;$/;"	m	struct:raxIterator
flags	src/redis-benchmark.c	/^    int flags;$/;"	m	struct:clusterNode	file:
flags	src/redis-cli.c	/^    int flags;$/;"	m	struct:clusterManagerCommand	file:
flags	src/redis-cli.c	/^    int flags;$/;"	m	struct:clusterManagerNode	file:
flags	src/redismodule.h	/^    uint64_t flags;         \/* REDISMODULE_CLIENTINFO_FLAG_* *\/$/;"	m	struct:RedisModuleClientInfo
flags	src/rio.h	/^    uint64_t cksum, flags;$/;"	m	struct:_rio
flags	src/sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr16
flags	src/sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr32
flags	src/sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr64
flags	src/sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr8
flags	src/sds.h	/^    unsigned char flags; \/* 3 lsb of type, and 5 msb of string length *\/$/;"	m	struct:sdshdr5
flags	src/sentinel.c	/^    int flags;              \/* Script job flags: SENTINEL_SCRIPT_* *\/$/;"	m	struct:sentinelScriptJob	file:
flags	src/sentinel.c	/^    int flags;      \/* See SRI_... defines *\/$/;"	m	struct:sentinelRedisInstance	file:
flags	src/server.h	/^    uint64_t flags;         \/* Client flags: CLIENT_* macros. *\/$/;"	m	struct:client
flags	src/server.h	/^    uint64_t flags; \/* See USER_FLAG_* *\/$/;"	m	struct:__anon18
flags	src/server.h	/^    uint64_t flags; \/* The actual flags, obtained from the 'sflags' field. *\/$/;"	m	struct:redisCommand
flags	src/t_zset.c	/^    int flags;$/;"	m	struct:__anon8	file:
flags	src/tls.c	/^    int flags;$/;"	m	struct:tls_connection	file:
flags_str	src/redis-cli.c	/^    list *flags_str; \/* Flags string representations *\/$/;"	m	struct:clusterManagerNode	file:
flib	deps/lua/src/liolib.c	/^static const luaL_Reg flib[] = {$/;"	v	file:
flush	src/rio.h	/^    int (*flush)(struct _rio *);$/;"	m	struct:_rio
flushAllDataAndResetRDB	src/db.c	/^void flushAllDataAndResetRDB(int flags) {$/;"	f
flushAppendOnlyFile	src/aof.c	/^void flushAppendOnlyFile(int force) {$/;"	f
flushSlaveKeysWithExpireList	src/expire.c	/^void flushSlaveKeysWithExpireList(void) {$/;"	f
flushSlavesOutputBuffers	src/networking.c	/^void flushSlavesOutputBuffers(void) {$/;"	f
flushallCommand	src/db.c	/^void flushallCommand(client *c) {$/;"	f
flushdbCallback	src/modules/hellohook.c	/^void flushdbCallback(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)$/;"	f
flushdbCallback	tests/modules/hooks.c	/^void flushdbCallback(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)$/;"	f
flushdbCommand	src/db.c	/^void flushdbCommand(client *c) {$/;"	f
fn	deps/hiredis/async.h	/^    redisCallbackFn *fn;$/;"	m	struct:redisCallback
fn	deps/hiredis/read.h	/^    redisReplyObjectFunctions *fn;$/;"	m	struct:redisReader
fn	src/module.c	/^    RedisModuleScanCB fn;$/;"	m	struct:__anon66	file:
fn	src/module.c	/^    RedisModuleScanKeyCB fn;$/;"	m	struct:__anon67	file:
fnames	deps/lua/src/liolib.c	/^static const char *const fnames[] = {"input", "output"};$/;"	v	file:
foo	deps/jemalloc/configure	/^		foo();$/;"	f
foo	deps/lua/doc/manual.html	/^     function foo (a)$/;"	f
for_one	src/server.h	/^    int for_one;$/;"	m	struct:redisServer
forbody	deps/lua/src/lparser.c	/^static void forbody (LexState *ls, int base, int line, int nvars, int isnum) {$/;"	f	file:
force	src/server.h	/^    *time, *pxat, *px, *retrycount, *force, *justid, $/;"	m	struct:sharedObjectsStruct
forceCommandPropagation	src/server.c	/^void forceCommandPropagation(client *c, int flags) {$/;"	f
force_cancel_loop	src/redis-cli.c	/^static volatile sig_atomic_t force_cancel_loop = 0;$/;"	v	file:
force_failover	src/server.h	/^    int force_failover; \/* If true then failover will be foreced at the$/;"	m	struct:redisServer
force_ivsalloc	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool force_ivsalloc =$/;"	v
force_kill_all_servers	tests/test_helper.tcl	/^proc force_kill_all_servers {} {$/;"	p
force_lock	deps/jemalloc/src/zone.c	/^	void (*force_lock)(malloc_zone_t *);$/;"	m	struct:malloc_introspection_t	file:
force_unlock	deps/jemalloc/src/zone.c	/^	void (*force_unlock)(malloc_zone_t *);$/;"	m	struct:malloc_introspection_t	file:
foreach	deps/lua/src/ltablib.c	/^static int foreach (lua_State *L) {$/;"	f	file:
foreach_instance_id	tests/instances.tcl	/^proc foreach_instance_id {instances idvar code} {$/;"	p
foreach_redis_id	tests/instances.tcl	/^proc foreach_redis_id {idvar code} {$/;"	p
foreach_sentinel_id	tests/instances.tcl	/^proc foreach_sentinel_id {idvar code} {$/;"	p
foreachi	deps/lua/src/ltablib.c	/^static int foreachi (lua_State *L) {$/;"	f	file:
fork_create	tests/modules/fork.c	/^int fork_create(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
fork_exitcode	tests/modules/fork.c	/^int fork_exitcode(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
fork_kill	tests/modules/fork.c	/^int fork_kill(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
forked	src/scripting.c	/^    int forked; \/* Is this a fork()ed debugging session? *\/$/;"	m	struct:ldbState	file:
forking	deps/jemalloc/include/jemalloc/internal/witness.h	/^	bool forking;$/;"	m	struct:witness_tsd_s
forlist	deps/lua/src/lparser.c	/^static void forlist (LexState *ls, TString *indexname) {$/;"	f	file:
formatCommand	tests/support/util.tcl	/^proc formatCommand {args} {$/;"	p
format_command	tests/unit/quit.tcl	/^    proc format_command {args} {$/;"	p
format_head_string	deps/hdr_histogram/hdr_histogram.c	/^static const char* format_head_string(format_type format)$/;"	f	file:
format_line_string	deps/hdr_histogram/hdr_histogram.c	/^static void format_line_string(char* str, size_t len, int significant_figures, format_type format)$/;"	f	file:
format_output	tests/integration/redis-cli.tcl	/^    proc format_output {output} {$/;"	p
format_type	deps/hdr_histogram/hdr_histogram.h	/^} format_type;$/;"	t	typeref:enum:__anon118
fornum	deps/lua/src/lparser.c	/^static void fornum (LexState *ls, TString *varname, int line) {$/;"	f	file:
forstat	deps/lua/src/lparser.c	/^static void forstat (LexState *ls, int line) {$/;"	f	file:
forward	src/server.h	/^        struct zskiplistNode *forward;$/;"	m	struct:zskiplistNode::zskiplistLevel	typeref:struct:zskiplistNode::zskiplistLevel::zskiplistNode
forward_all	src/server.h	/^    int forward_all;$/;"	m	struct:redisServer
forward_time	src/cluster.h	/^    bool forward_time;$/;"	m	struct:clusterState
forwarding_cb	deps/jemalloc/test/unit/emitter.c	/^forwarding_cb(void *buf_descriptor_v, const char *str) {$/;"	f	file:
fp	src/rio.h	/^            FILE *fp;$/;"	m	struct:_rio::__anon54::__anon56
fpconv_g_fmt	deps/lua/src/fpconv.c	/^int fpconv_g_fmt(char *str, double num, int precision)$/;"	f
fpconv_init	deps/lua/src/fpconv.c	/^void fpconv_init()$/;"	f
fpconv_init	deps/lua/src/fpconv.h	/^static inline void fpconv_init()$/;"	f
fpconv_strtod	deps/lua/src/fpconv.c	/^double fpconv_strtod(const char *nptr, char **endptr)$/;"	f
fpconv_update_locale	deps/lua/src/fpconv.c	/^static void fpconv_update_locale()$/;"	f	file:
fptr	src/server.h	/^    unsigned char *fptr, *vptr;$/;"	m	struct:__anon26
fragCreateCommand	tests/modules/defragtest.c	/^static int fragCreateCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	file:
fragResetStatsCommand	tests/modules/defragtest.c	/^static int fragResetStatsCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	file:
frealloc	deps/lua/src/lstate.h	/^  lua_Alloc frealloc;  \/* function to reallocate memory *\/$/;"	m	struct:global_State
free	deps/jemalloc/src/zone.c	/^	void (*free)(struct _malloc_zone_t *, void *);$/;"	m	struct:_malloc_zone_t	file:
free	deps/lua/src/lua_cmsgpack.c	/^    size_t len, free;$/;"	m	struct:mp_buf	file:
free	src/adlist.h	/^    void (*free)(void *ptr);$/;"	m	struct:list
free	src/aof.c	/^    unsigned long used, free;$/;"	m	struct:aofrwblock	file:
free	src/redismodule.h	/^    RedisModuleTypeFreeFunc free;$/;"	m	struct:RedisModuleTypeMethods
free	src/server.h	/^    moduleTypeFreeFunc free;$/;"	m	struct:RedisModuleType
free	src/zmalloc.c	73;"	d	file:
free	src/zmalloc.c	78;"	d	file:
freeAllClients	src/redis-benchmark.c	/^static void freeAllClients(void) {$/;"	f	file:
freeBenchmarkThread	src/redis-benchmark.c	/^static void freeBenchmarkThread(benchmarkThread *thread) {$/;"	f	file:
freeBenchmarkThreads	src/redis-benchmark.c	/^static void freeBenchmarkThreads() {$/;"	f	file:
freeCallback	src/dict.c	/^void freeCallback(void *privdata, void *val) {$/;"	f
freeClient	src/networking.c	/^void freeClient(client *c) {$/;"	f
freeClient	src/redis-benchmark.c	/^static void freeClient(client c) {$/;"	f	file:
freeClientArgv	src/networking.c	/^static void freeClientArgv(client *c) {$/;"	f	file:
freeClientAsync	src/networking.c	/^void freeClientAsync(client *c) {$/;"	f
freeClientMultiState	src/multi.c	/^void freeClientMultiState(client *c) {$/;"	f
freeClientOriginalArgv	src/networking.c	/^void freeClientOriginalArgv(client *c) {$/;"	f
freeClientReplyValue	src/networking.c	/^void freeClientReplyValue(void *o) {$/;"	f
freeClientsInAsyncFreeQueue	src/networking.c	/^int freeClientsInAsyncFreeQueue(void) {$/;"	f
freeClusterLink	src/cluster.c	/^void freeClusterLink(clusterLink *link) {$/;"	f
freeClusterManager	src/redis-cli.c	/^static void freeClusterManager(void) {$/;"	f	file:
freeClusterManagerNode	src/redis-cli.c	/^static void freeClusterManagerNode(clusterManagerNode *node) {$/;"	f	file:
freeClusterManagerNodeFlags	src/redis-cli.c	/^static void freeClusterManagerNodeFlags(list *flags) {$/;"	f	file:
freeClusterNode	src/cluster.c	/^void freeClusterNode(clusterNode *n) {$/;"	f
freeClusterNode	src/redis-benchmark.c	/^static void freeClusterNode(clusterNode *node) {$/;"	f	file:
freeClusterNodes	src/redis-benchmark.c	/^static void freeClusterNodes() {$/;"	f	file:
freeCompletions	deps/linenoise/linenoise.c	/^static void freeCompletions(linenoiseCompletions *lc) {$/;"	f	file:
freeFakeClient	src/aof.c	/^void freeFakeClient(struct client *c) {$/;"	f
freeFakeClientArgv	src/aof.c	/^void freeFakeClientArgv(struct client *c) {$/;"	f
freeFn	deps/hiredis/alloc.h	/^    void (*freeFn)(void*);$/;"	m	struct:hiredisAllocFuncs
freeHashObject	src/object.c	/^void freeHashObject(robj *o) {$/;"	f
freeHintsCallback	deps/linenoise/linenoise.c	/^static linenoiseFreeHintsCallback *freeHintsCallback = NULL;$/;"	v	file:
freeHintsCallback	src/redis-cli.c	/^static void freeHintsCallback(void *ptr) {$/;"	f	file:
freeHistory	deps/linenoise/linenoise.c	/^static void freeHistory(void) {$/;"	f	file:
freeListObject	src/object.c	/^void freeListObject(robj *o) {$/;"	f
freeLuaScriptsAsync	src/lazyfree.c	/^void freeLuaScriptsAsync(dict *lua_scripts) {$/;"	f
freeMemoryGetNotCountedMemory	src/evict.c	/^size_t freeMemoryGetNotCountedMemory(void) {$/;"	f
freeMemoryOverheadData	src/object.c	/^void freeMemoryOverheadData(struct redisMemOverhead *mh) {$/;"	f
freeModuleObject	src/object.c	/^void freeModuleObject(robj *o) {$/;"	f
freeObjAsync	src/lazyfree.c	/^void freeObjAsync(robj *key, robj *obj) {$/;"	f
freeObject	deps/hiredis/read.h	/^    void (*freeObject)(void*);$/;"	m	struct:redisReplyObjectFunctions
freeRedisConfig	src/redis-benchmark.c	/^static void freeRedisConfig(redisConfig *cfg) {$/;"	f	file:
freeRedisRunLoop	deps/hiredis/adapters/macosx.h	/^static int freeRedisRunLoop(RedisRunLoop* redisRunLoop) {$/;"	f
freeReplicationBacklog	src/replication.c	/^void freeReplicationBacklog(void) {$/;"	f
freeReplyObject	deps/hiredis/hiredis.c	/^void freeReplyObject(void *reply) {$/;"	f
freeSentinelConfig	src/sentinel.c	/^void freeSentinelConfig() {$/;"	f
freeSentinelLoadQueueEntry	src/sentinel.c	/^void freeSentinelLoadQueueEntry(void *item) {$/;"	f
freeSetObject	src/object.c	/^void freeSetObject(robj *o) {$/;"	f
freeSlotsToKeysMap	src/db.c	/^void freeSlotsToKeysMap(rax *rt, int async) {$/;"	f
freeSlotsToKeysMapAsync	src/lazyfree.c	/^void freeSlotsToKeysMapAsync(rax *rt) {$/;"	f
freeSparklineSequence	src/sparkline.c	/^void freeSparklineSequence(struct sequence *seq) {$/;"	f
freeStream	src/t_stream.c	/^void freeStream(stream *s) {$/;"	f
freeStreamObject	src/object.c	/^void freeStreamObject(robj *o) {$/;"	f
freeStringObject	src/object.c	/^void freeStringObject(robj *o) {$/;"	f
freeTrackingRadixTree	src/tracking.c	/^void freeTrackingRadixTree(rax *rt) {$/;"	f
freeTrackingRadixTreeAsync	src/lazyfree.c	/^void freeTrackingRadixTreeAsync(rax *tracking) {$/;"	f
freeTrackingRadixTreeCallback	src/tracking.c	/^void freeTrackingRadixTreeCallback(void *rt) {$/;"	f
freeZsetObject	src/object.c	/^void freeZsetObject(robj *o) {$/;"	f
free_args	src/bio.c	/^    void *free_args[]; \/* List of arguments to be passed to the free function *\/$/;"	m	struct:bio_job	file:
free_definite_size	deps/jemalloc/src/zone.c	/^	void (*free_definite_size)(struct _malloc_zone_t *, void *, size_t);$/;"	m	struct:_malloc_zone_t	file:
free_effort	src/redismodule.h	/^    RedisModuleTypeFreeEffortFunc free_effort;$/;"	m	struct:RedisModuleTypeMethods
free_effort	src/server.h	/^    moduleTypeFreeEffortFunc free_effort;$/;"	m	struct:RedisModuleType
free_fn	src/bio.c	/^    lazy_free_fn *free_fn; \/* Function that will free the provided arguments *\/$/;"	m	struct:bio_job	file:
free_privctx	deps/hiredis/hiredis.h	/^    void (*free_privctx)(void *);$/;"	m	struct:redisContextFuncs
free_privdata	deps/hiredis/hiredis.h	/^    void (*free_privdata)(void *);$/;"	m	struct:__anon80
free_privdata	deps/hiredis/hiredis.h	/^    void (*free_privdata)(void *);$/;"	m	struct:redisContext
free_privdata	deps/hiredis/test.c	/^void free_privdata(void *privdata) {$/;"	f
free_privdata	src/module.c	/^    void (*free_privdata)(RedisModuleCtx*,void*);\/* privdata cleanup callback.*\/$/;"	m	struct:RedisModuleBlockedClient	file:
freeaddrinfo	deps/hiredis/sockcompat.h	78;"	d
freeexp	deps/lua/src/lcode.c	/^static void freeexp (FuncState *fs, expdesc *e) {$/;"	f	file:
freeobj	deps/lua/src/lgc.c	/^static void freeobj (lua_State *L, GCObject *o) {$/;"	f	file:
freereg	deps/lua/src/lcode.c	/^static void freereg (FuncState *fs, int reg) {$/;"	f	file:
freereg	deps/lua/src/lparser.h	/^  int freereg;  \/* first free register *\/$/;"	m	struct:FuncState
freestack	deps/lua/src/lstate.c	/^static void freestack (lua_State *L, lua_State *L1) {$/;"	f	file:
friends	src/redis-cli.c	/^    list *friends;$/;"	m	struct:clusterManagerNode	file:
from	src/redis-cli.c	/^    char *from;$/;"	m	struct:clusterManagerCommand	file:
from_askpass	src/redis-cli.c	/^    int from_askpass;$/;"	m	struct:clusterManagerCommand	file:
from_pass	src/redis-cli.c	/^    char *from_pass;$/;"	m	struct:clusterManagerCommand	file:
from_user	src/redis-cli.c	/^    char *from_user;$/;"	m	struct:clusterManagerCommand	file:
fromstate	deps/lua/src/lstate.c	28;"	d	file:
fs	deps/lua/src/llex.h	/^  struct FuncState *fs;  \/* `FuncState' is private to the parser *\/$/;"	m	struct:LexState	typeref:struct:LexState::FuncState
fsl_aofrw	tests/modules/blockonkeys.c	/^void fsl_aofrw(RedisModuleIO *aof, RedisModuleString *key, void *value) {$/;"	f
fsl_bpop	tests/modules/blockonkeys.c	/^int fsl_bpop(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
fsl_bpopgt	tests/modules/blockonkeys.c	/^int fsl_bpopgt(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
fsl_bpoppush	tests/modules/blockonkeys.c	/^int fsl_bpoppush(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
fsl_free	tests/modules/blockonkeys.c	/^void fsl_free(void *value) {$/;"	f
fsl_getall	tests/modules/blockonkeys.c	/^int fsl_getall(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
fsl_push	tests/modules/blockonkeys.c	/^int fsl_push(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
fsl_rdb_load	tests/modules/blockonkeys.c	/^void *fsl_rdb_load(RedisModuleIO *rdb, int encver) {$/;"	f
fsl_rdb_save	tests/modules/blockonkeys.c	/^void fsl_rdb_save(RedisModuleIO *rdb, void *value) {$/;"	f
fsl_t	tests/modules/blockonkeys.c	/^} fsl_t; \/* Fixed-size list *\/$/;"	t	typeref:struct:__anon78	file:
fsl_type_create	tests/modules/blockonkeys.c	/^fsl_t *fsl_type_create() {$/;"	f
fsl_type_free	tests/modules/blockonkeys.c	/^void fsl_type_free(fsl_t *o) {$/;"	f
fsltype	tests/modules/blockonkeys.c	/^static RedisModuleType *fsltype = NULL;$/;"	v	file:
full	src/redis-cli.c	/^    sds full;$/;"	m	struct:__anon13	file:
func	deps/lua/src/lapi.c	/^  StkId func;$/;"	m	struct:CallS	file:
func	deps/lua/src/lapi.c	/^  lua_CFunction func;$/;"	m	struct:CCallS	file:
func	deps/lua/src/lauxlib.h	/^  lua_CFunction func;$/;"	m	struct:luaL_Reg
func	deps/lua/src/lstate.h	/^  StkId func;  \/* function index in the stack *\/$/;"	m	struct:CallInfo
func	src/module.c	/^    RedisModuleCmdFunc func;$/;"	m	struct:RedisModuleCommandProxy	file:
func	src/module.c	/^    void *func;$/;"	m	struct:RedisModuleSharedAPI	file:
func1	deps/jemalloc/test/src/SFMT.c	/^static uint32_t func1(uint32_t x) {$/;"	f	file:
func2	deps/jemalloc/test/src/SFMT.c	/^static uint32_t func2(uint32_t x) {$/;"	f	file:
func_to_hook	deps/jemalloc/test/unit/hooks.c	/^func_to_hook(int arg1, int arg2) {$/;"	f	file:
func_to_hook	deps/jemalloc/test/unit/hooks.c	15;"	d	file:
funcargs	deps/lua/src/lparser.c	/^static void funcargs (LexState *ls, expdesc *f) {$/;"	f	file:
funcinfo	deps/lua/src/ldebug.c	/^static void funcinfo (lua_Debug *ar, Closure *cl) {$/;"	f	file:
funcname	deps/lua/src/lparser.c	/^static int funcname (LexState *ls, expdesc *v) {$/;"	f	file:
funcs	deps/hiredis/hiredis.h	/^    const redisContextFuncs *funcs;   \/* Function table *\/$/;"	m	struct:redisContext
funcstat	deps/lua/src/lparser.c	/^static void funcstat (LexState *ls, int line) {$/;"	f	file:
function_event	deps/lua/doc/manual.html	/^     function function_event (func, ...)$/;"	f
functions	deps/lua/doc/contents.html	/^<H3><A NAME="functions">Lua functions<\/A><\/H3>$/;"	a
g	deps/lua/doc/manual.html	/^     function g(a, b, ...) end$/;"	f
g	deps/lua/src/lstate.c	/^  global_State g;$/;"	m	struct:LG	file:
g_iofile	deps/lua/src/liolib.c	/^static int g_iofile (lua_State *L, int f, const char *mode) {$/;"	f	file:
g_read	deps/lua/src/liolib.c	/^static int g_read (lua_State *L, FILE *f, int first) {$/;"	f	file:
g_write	deps/lua/src/liolib.c	/^static int g_write (lua_State *L, FILE *f, int arg) {$/;"	f	file:
gai_strerror	deps/hiredis/sockcompat.h	76;"	d
gai_strerror	deps/hiredis/sockcompat.h	77;"	d
gc	deps/lua/src/lobject.h	/^  GCObject *gc;$/;"	m	union:__anon106
gc_event	deps/lua/doc/manual.html	/^     function gc_event (udata)$/;"	f
gc_ticker	deps/jemalloc/include/jemalloc/internal/tcache_structs.h	/^	ticker_t	gc_ticker;$/;"	m	struct:tcache_s
gcdept	deps/lua/src/lstate.h	/^  lu_mem gcdept;  \/* how much GC is `behind schedule' *\/$/;"	m	struct:global_State
gch	deps/lua/src/lstate.h	/^  GCheader gch;$/;"	m	union:GCObject
gclist	deps/lua/src/lobject.h	/^  GCObject *gclist;$/;"	m	struct:Proto
gclist	deps/lua/src/lobject.h	/^  GCObject *gclist;$/;"	m	struct:Table
gclist	deps/lua/src/lstate.h	/^  GCObject *gclist;$/;"	m	struct:lua_State
gco2cl	deps/lua/src/lstate.h	153;"	d
gco2h	deps/lua/src/lstate.h	154;"	d
gco2p	deps/lua/src/lstate.h	155;"	d
gco2th	deps/lua/src/lstate.h	159;"	d
gco2ts	deps/lua/src/lstate.h	150;"	d
gco2u	deps/lua/src/lstate.h	152;"	d
gco2uv	deps/lua/src/lstate.h	156;"	d
gcpause	deps/lua/src/lstate.h	/^  int gcpause;  \/* size of pause between successive GCs *\/$/;"	m	struct:global_State
gcstate	deps/lua/src/lstate.h	/^  lu_byte gcstate;  \/* state of garbage collector *\/$/;"	m	struct:global_State
gcstepmul	deps/lua/src/lstate.h	/^  int gcstepmul;  \/* GC `granularity' *\/$/;"	m	struct:global_State
gctm	deps/lua/src/loadlib.c	/^static int gctm (lua_State *L) {$/;"	f	file:
gctx	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	prof_gctx_t		*gctx;$/;"	m	struct:prof_tctx_s
gctx_locks	deps/jemalloc/src/prof.c	/^static malloc_mutex_t	*gctx_locks;$/;"	v	file:
gcvalue	deps/lua/src/lobject.h	91;"	d
gen 	deps/lua/test/sieve.lua	/^function gen (n)$/;"	f
genBenchmarkRandomData	src/redis-benchmark.c	/^static void genBenchmarkRandomData(char *data, int count) {$/;"	f	file:
genClientAddrString	src/networking.c	/^void genClientAddrString(client *client, char *addr,$/;"	f
genModulesInfoString	src/module.c	/^sds genModulesInfoString(sds info) {$/;"	f
genModulesInfoStringRenderModuleOptions	src/module.c	/^sds genModulesInfoStringRenderModuleOptions(struct RedisModule *module) {$/;"	f
genModulesInfoStringRenderModulesList	src/module.c	/^sds genModulesInfoStringRenderModulesList(list *l) {$/;"	f
genRedisInfoString	src/server.c	/^sds genRedisInfoString(const char *section) {$/;"	f
gen_mallctl_str	deps/jemalloc/test/unit/stats.c	/^gen_mallctl_str(char *cmd, char *name, unsigned arena_ind) {$/;"	f	file:
gen_mutex_ctl_str	deps/jemalloc/src/stats.c	/^gen_mutex_ctl_str(char *str, size_t buf_len, const char *prefix,$/;"	f	file:
gen_rand32	deps/jemalloc/test/src/SFMT.c	/^uint32_t gen_rand32(sfmt_t *ctx) {$/;"	f
gen_rand32_range	deps/jemalloc/test/src/SFMT.c	/^uint32_t gen_rand32_range(sfmt_t *ctx, uint32_t limit) {$/;"	f
gen_rand64	deps/jemalloc/test/src/SFMT.c	/^uint64_t gen_rand64(sfmt_t *ctx) {$/;"	f
gen_rand64_range	deps/jemalloc/test/src/SFMT.c	/^uint64_t gen_rand64_range(sfmt_t *ctx, uint64_t limit) {$/;"	f
gen_rand_all	deps/jemalloc/test/include/test/SFMT-alti.h	/^static inline void gen_rand_all(sfmt_t *ctx) {$/;"	f
gen_rand_all	deps/jemalloc/test/include/test/SFMT-sse2.h	/^static inline void gen_rand_all(sfmt_t *ctx) {$/;"	f
gen_rand_all	deps/jemalloc/test/src/SFMT.c	/^static inline void gen_rand_all(sfmt_t *ctx) {$/;"	f	file:
gen_rand_array	deps/jemalloc/test/include/test/SFMT-alti.h	/^static inline void gen_rand_array(sfmt_t *ctx, w128_t *array, int size) {$/;"	f
gen_rand_array	deps/jemalloc/test/include/test/SFMT-sse2.h	/^static inline void gen_rand_array(sfmt_t *ctx, w128_t *array, int size) {$/;"	f
gen_rand_array	deps/jemalloc/test/src/SFMT.c	/^static inline void gen_rand_array(sfmt_t *ctx, w128_t *array, int size) {$/;"	f	file:
gen_write_load	tests/helpers/gen_write_load.tcl	/^proc gen_write_load {host port seconds tls} {$/;"	p
generateSkyline	src/lolwut6.c	/^void generateSkyline(lwCanvas *canvas) {$/;"	f
generateSkyscraper	src/lolwut6.c	/^void generateSkyscraper(lwCanvas *canvas, struct skyscraper *si) {$/;"	f
generate_cert	utils/gen-test-certs.sh	/^generate_cert() {$/;"	f
generate_collections	tests/integration/corrupt-dump-fuzzer.tcl	/^proc generate_collections {suffix elements} {$/;"	p
generate_commands	utils/generate-command-help.rb	/^def generate_commands$/;"	f	class:generate_groups
generate_dirty	deps/jemalloc/test/unit/decay.c	/^generate_dirty(unsigned arena_ind, size_t size) {$/;"	f	file:
generate_fuzzy_traffic_on_key	tests/support/util.tcl	/^proc generate_fuzzy_traffic_on_key {key duration} {$/;"	p
generate_groups	utils/generate-command-help.rb	/^def generate_groups$/;"	f
generate_types	tests/integration/corrupt-dump-fuzzer.tcl	/^proc generate_types {} {$/;"	p
generatefib 	deps/lua/test/fibfor.lua	/^function generatefib (n)$/;"	f
genericGetKeys	src/db.c	/^int genericGetKeys(int storeKeyOfs, int keyCountOfs, int firstKeyOfs, int keyStep,$/;"	f
genericHgetallCommand	src/t_hash.c	/^void genericHgetallCommand(client *c, int flags) {$/;"	f
genericSetKey	src/db.c	/^void genericSetKey(client *c, redisDb *db, robj *key, robj *val, int keepttl, int signal) {$/;"	f
genericZpopCommand	src/t_zset.c	/^void genericZpopCommand(client *c, robj **keyv, int keyc, int where, int emitkey, robj *countarg) {$/;"	f
genericZrangebylexCommand	src/t_zset.c	/^void genericZrangebylexCommand(zrange_result_handler *handler,$/;"	f
genericZrangebyrankCommand	src/t_zset.c	/^void genericZrangebyrankCommand(zrange_result_handler *handler,$/;"	f
genericZrangebyscoreCommand	src/t_zset.c	/^void genericZrangebyscoreCommand(zrange_result_handler *handler,$/;"	f
generic_reader	deps/lua/src/lbaselib.c	/^static const char *generic_reader (lua_State *L, void *ud, size_t *size) {$/;"	f	file:
genrand64_int63	src/mt19937-64.c	/^long long genrand64_int63(void)$/;"	f
genrand64_int64	src/mt19937-64.c	/^unsigned long long genrand64_int64(void)$/;"	f
genrand64_real1	src/mt19937-64.c	/^double genrand64_real1(void)$/;"	f
genrand64_real2	src/mt19937-64.c	/^double genrand64_real2(void)$/;"	f
genrand64_real3	src/mt19937-64.c	/^double genrand64_real3(void)$/;"	f
genrand_real1	deps/jemalloc/test/include/test/SFMT.h	/^static inline double genrand_real1(sfmt_t *ctx) {$/;"	f
genrand_real2	deps/jemalloc/test/include/test/SFMT.h	/^static inline double genrand_real2(sfmt_t *ctx) {$/;"	f
genrand_real3	deps/jemalloc/test/include/test/SFMT.h	/^static inline double genrand_real3(sfmt_t *ctx) {$/;"	f
genrand_res53	deps/jemalloc/test/include/test/SFMT.h	/^static inline double genrand_res53(sfmt_t *ctx) {$/;"	f
genrand_res53_mix	deps/jemalloc/test/include/test/SFMT.h	/^static inline double genrand_res53_mix(sfmt_t *ctx) {$/;"	f
genstr	src/quicklist.c	/^static char *genstr(char *prefix, int i) {$/;"	f	file:
geoAppendIfWithinShape	src/geo.c	/^int geoAppendIfWithinShape(geoArray *ga, GeoShape *shape, double score, sds member) {$/;"	f
geoArray	src/geo.h	/^typedef struct geoArray {$/;"	s
geoArray	src/geo.h	/^} geoArray;$/;"	t	typeref:struct:geoArray
geoArrayAppend	src/geo.c	/^geoPoint *geoArrayAppend(geoArray *ga) {$/;"	f
geoArrayCreate	src/geo.c	/^geoArray *geoArrayCreate(void) {$/;"	f
geoArrayFree	src/geo.c	/^void geoArrayFree(geoArray *ga) {$/;"	f
geoGetPointsInRange	src/geo.c	/^int geoGetPointsInRange(robj *zobj, double min, double max, GeoShape *shape, geoArray *ga, unsigned long limit) {$/;"	f
geoPoint	src/geo.h	/^typedef struct geoPoint {$/;"	s
geoPoint	src/geo.h	/^} geoPoint;$/;"	t	typeref:struct:geoPoint
geo_degrad	tests/unit/geo.tcl	/^proc geo_degrad deg {expr {$deg*(atan(1)*8\/360)}}$/;"	p
geo_distance	tests/unit/geo.tcl	/^proc geo_distance {lon1d lat1d lon2d lat2d} {$/;"	p
geo_raddeg	tests/unit/geo.tcl	/^proc geo_raddeg rad {expr {$rad\/(atan(1)*8\/360)}}$/;"	p
geo_random_point	tests/unit/geo.tcl	/^proc geo_random_point {lonvar latvar} {$/;"	p
geoaddCommand	src/geo.c	/^void geoaddCommand(client *c) {$/;"	f
geodistCommand	src/geo.c	/^void geodistCommand(client *c) {$/;"	f
geohashAlign52Bits	src/geohash_helper.c	/^GeoHashFix52Bits geohashAlign52Bits(const GeoHashBits hash) {$/;"	f
geohashBoundingBox	src/geohash_helper.c	/^int geohashBoundingBox(GeoShape *shape, double *bounds) {$/;"	f
geohashCalculateAreasByShapeWGS84	src/geohash_helper.c	/^GeoHashRadius geohashCalculateAreasByShapeWGS84(GeoShape *shape) {$/;"	f
geohashCommand	src/geo.c	/^void geohashCommand(client *c) {$/;"	f
geohashDecode	src/geohash.c	/^int geohashDecode(const GeoHashRange long_range, const GeoHashRange lat_range,$/;"	f
geohashDecodeAreaToLongLat	src/geohash.c	/^int geohashDecodeAreaToLongLat(const GeoHashArea *area, double *xy) {$/;"	f
geohashDecodeToLongLatType	src/geohash.c	/^int geohashDecodeToLongLatType(const GeoHashBits hash, double *xy) {$/;"	f
geohashDecodeToLongLatWGS84	src/geohash.c	/^int geohashDecodeToLongLatWGS84(const GeoHashBits hash, double *xy) {$/;"	f
geohashDecodeType	src/geohash.c	/^int geohashDecodeType(const GeoHashBits hash, GeoHashArea *area) {$/;"	f
geohashDecodeWGS84	src/geohash.c	/^int geohashDecodeWGS84(const GeoHashBits hash, GeoHashArea *area) {$/;"	f
geohashEncode	src/geohash.c	/^int geohashEncode(const GeoHashRange *long_range, const GeoHashRange *lat_range,$/;"	f
geohashEncodeType	src/geohash.c	/^int geohashEncodeType(double longitude, double latitude, uint8_t step, GeoHashBits *hash) {$/;"	f
geohashEncodeWGS84	src/geohash.c	/^int geohashEncodeWGS84(double longitude, double latitude, uint8_t step,$/;"	f
geohashEstimateStepsByRadius	src/geohash_helper.c	/^uint8_t geohashEstimateStepsByRadius(double range_meters, double lat) {$/;"	f
geohashGetCoordRange	src/geohash.c	/^void geohashGetCoordRange(GeoHashRange *long_range, GeoHashRange *lat_range) {$/;"	f
geohashGetDistance	src/geohash_helper.c	/^double geohashGetDistance(double lon1d, double lat1d, double lon2d, double lat2d) {$/;"	f
geohashGetDistanceIfInRadius	src/geohash_helper.c	/^int geohashGetDistanceIfInRadius(double x1, double y1,$/;"	f
geohashGetDistanceIfInRadiusWGS84	src/geohash_helper.c	/^int geohashGetDistanceIfInRadiusWGS84(double x1, double y1, double x2,$/;"	f
geohashGetDistanceIfInRectangle	src/geohash_helper.c	/^int geohashGetDistanceIfInRectangle(double width_m, double height_m, double x1, double y1,$/;"	f
geohashNeighbors	src/geohash.c	/^void geohashNeighbors(const GeoHashBits *hash, GeoHashNeighbors *neighbors) {$/;"	f
geohash_move_x	src/geohash.c	/^static void geohash_move_x(GeoHashBits *hash, int8_t d) {$/;"	f	file:
geohash_move_y	src/geohash.c	/^static void geohash_move_y(GeoHashBits *hash, int8_t d) {$/;"	f	file:
geoposCommand	src/geo.c	/^void geoposCommand(client *c) {$/;"	f
georadiusCommand	src/geo.c	/^void georadiusCommand(client *c) {$/;"	f
georadiusGeneric	src/geo.c	/^void georadiusGeneric(client *c, int srcKeyIndex, int flags) {$/;"	f
georadiusGetKeys	src/db.c	/^int georadiusGetKeys(struct redisCommand *cmd, robj **argv, int argc, getKeysResult *result) {$/;"	f
georadiusbymemberCommand	src/geo.c	/^void georadiusbymemberCommand(client *c) {$/;"	f
georadiusbymemberroCommand	src/geo.c	/^void georadiusbymemberroCommand(client *c) {$/;"	f
georadiusroCommand	src/geo.c	/^void georadiusroCommand(client *c) {$/;"	f
geosearchCommand	src/geo.c	/^void geosearchCommand(client *c) {$/;"	f
geosearchstoreCommand	src/geo.c	/^void geosearchstoreCommand(client *c) {$/;"	f
get	src/config.c	/^    void (*get)(client *c, typeData data);$/;"	m	struct:typeInterface	file:
get-result-with-name	utils/speed-regression.tcl	/^proc get-result-with-name {output name} {$/;"	p
get-test-names	utils/speed-regression.tcl	/^proc get-test-names output {$/;"	p
getAbsolutePath	src/util.c	/^sds getAbsolutePath(char *filename) {$/;"	f
getAllClientsInfoString	src/networking.c	/^sds getAllClientsInfoString(int type) {$/;"	f
getAllocatorFragmentation	src/defrag.c	/^float getAllocatorFragmentation(size_t *out_frag_bytes) {$/;"	f
getAverageCpuUsage	exp/exp3.sh	/^getAverageCpuUsage() {$/;"	f
getBMode	deps/lua/src/lopcodes.h	255;"	d
getBitOffsetFromArgument	src/bitops.c	/^int getBitOffsetFromArgument(client *c, robj *o, size_t *offset, int hash, int bits) {$/;"	f
getBitfieldTypeFromArgument	src/bitops.c	/^int getBitfieldTypeFromArgument(client *c, robj *o, int *sign, int *bits) {$/;"	f
getBlockedTypeByType	src/blocked.c	/^static int getBlockedTypeByType(int type) {$/;"	f	file:
getCMode	deps/lua/src/lopcodes.h	256;"	d
getCPUStat	exp/log_dealer.sh	/^getCPUStat() {$/;"	f
getCallback	deps/hiredis/examples/example-ae.c	/^void getCallback(redisAsyncContext *c, void *r, void *privdata) {$/;"	f
getCallback	deps/hiredis/examples/example-ivykis.c	/^void getCallback(redisAsyncContext *c, void *r, void *privdata) {$/;"	f
getCallback	deps/hiredis/examples/example-libev.c	/^void getCallback(redisAsyncContext *c, void *r, void *privdata) {$/;"	f
getCallback	deps/hiredis/examples/example-libevent-ssl.c	/^void getCallback(redisAsyncContext *c, void *r, void *privdata) {$/;"	f
getCallback	deps/hiredis/examples/example-libevent.c	/^void getCallback(redisAsyncContext *c, void *r, void *privdata) {$/;"	f
getCallback	deps/hiredis/examples/example-libuv.c	/^void getCallback(redisAsyncContext *c, void *r, void *privdata) {$/;"	f
getCallback	deps/hiredis/examples/example-macosx.c	/^void getCallback(redisAsyncContext *c, void *r, void *privdata) {$/;"	f
getCallback	deps/hiredis/examples/example-qt.cpp	/^void getCallback(redisAsyncContext *, void * r, void * privdata) {$/;"	f
getCallback	exp/exp2_micro.c	/^void getCallback(redisAsyncContext *c, void *r, void *privdata) {$/;"	f
getClientOutputBufferMemoryUsage	src/networking.c	/^unsigned long getClientOutputBufferMemoryUsage(client *c) {$/;"	f
getClientPeerId	src/networking.c	/^char *getClientPeerId(client *c) {$/;"	f
getClientSockname	src/networking.c	/^char *getClientSockname(client *c) {$/;"	f
getClientType	src/networking.c	/^int getClientType(client *c) {$/;"	f
getClientTypeByName	src/networking.c	/^int getClientTypeByName(char *name) {$/;"	f
getClientTypeName	src/networking.c	/^char *getClientTypeName(int class) {$/;"	f
getClientsMaxBuffers	src/networking.c	/^void getClientsMaxBuffers(unsigned long *longest_output_list,$/;"	f
getClusterConnectionsCount	src/cluster.c	/^unsigned long getClusterConnectionsCount(void) {$/;"	f
getClusterHostFromCmdArgs	src/redis-cli.c	/^static int getClusterHostFromCmdArgs(int argc, char **argv,$/;"	f	file:
getClusterStatus	exp/exp1.sh	/^getClusterStatus() {$/;"	f
getColumns	deps/linenoise/linenoise.c	/^static int getColumns(int ifd, int ofd) {$/;"	f	file:
getCommand	exp/log_dealer.sh	/^getCommand() {$/;"	f
getCommand	src/t_string.c	/^void getCommand(client *c) {$/;"	f
getCpu	exp/log_dealer.sh	/^getCpu() {$/;"	f
getCursorPosition	deps/linenoise/linenoise.c	/^static int getCursorPosition(int ifd, int ofd) {$/;"	f	file:
getDbSize	src/redis-cli.c	/^static int getDbSize(void) {$/;"	f	file:
getDecodedObject	src/object.c	/^robj *getDecodedObject(robj *o) {$/;"	f
getDotfilePath	src/redis-cli.c	/^static sds getDotfilePath(char *envoverride, char *dotfilename) {$/;"	f	file:
getDoubleFromObject	src/object.c	/^int getDoubleFromObject(const robj *o, double *target) {$/;"	f
getDoubleFromObjectOrReply	src/object.c	/^int getDoubleFromObjectOrReply(client *c, robj *o, double *target, const char *msg) {$/;"	f
getExpansiveClientsInfo	src/server.c	/^void getExpansiveClientsInfo(size_t *in_usage, size_t *out_usage) {$/;"	f
getExpire	src/db.c	/^long long getExpire(redisDb *db, robj *key) {$/;"	f
getF	deps/lua/src/lauxlib.c	/^static const char *getF (lua_State *L, void *ud, size_t *size) {$/;"	f	file:
getFailoverStateString	src/replication.c	/^const char *getFailoverStateString() {$/;"	f
getFlushCommandFlags	src/db.c	/^int getFlushCommandFlags(client *c, int *flags) {$/;"	f
getForwardAim	src/server.c	/^clusterNode* getForwardAim(int slot) {$/;"	f
getGenericCommand	src/t_string.c	/^int getGenericCommand(client *c) {$/;"	f
getHotSlot	exp/exp1.sh	/^getHotSlot() {$/;"	f
getHotnessFile	exp/exp3.sh	/^getHotnessFile() {$/;"	f
getHotnessTag	exp/exp1.sh	/^getHotnessTag() {$/;"	f
getHotnessTag	exp/inithg.sh	/^getHotnessTag() {$/;"	f
getIOPendingCount	src/networking.c	/^static inline unsigned long getIOPendingCount(int i) {$/;"	f	file:
getInfoField	src/redis-cli.c	/^static char *getInfoField(char *info, char *field) {$/;"	f	file:
getInfoProperty	tests/support/util.tcl	/^proc getInfoProperty {infostr property} {$/;"	p
getInstantaneousMetric	src/server.c	/^long long getInstantaneousMetric(int metric) {$/;"	f
getIntFromObjectOrReply	src/object.c	/^int getIntFromObjectOrReply(client *c, robj *o, int *target, const char *msg) {$/;"	f
getKey	exp/merge.py	/^def getKey(x):$/;"	f
getKeyFreqs	src/redis-cli.c	/^static void getKeyFreqs(redisReply *keys, unsigned long long *freqs) {$/;"	f	file:
getKeySizes	src/redis-cli.c	/^static void getKeySizes(redisReply *keys, typeinfo **types,$/;"	f	file:
getKeyTypes	src/redis-cli.c	/^static void getKeyTypes(dict *types_dict, redisReply *keys, typeinfo **types) {$/;"	f	file:
getKeysFreeResult	src/db.c	/^void getKeysFreeResult(getKeysResult *result) {$/;"	f
getKeysFromCommand	src/db.c	/^int getKeysFromCommand(struct redisCommand *cmd, robj **argv, int argc, getKeysResult *result) {$/;"	f
getKeysInSlot	src/db.c	/^unsigned int getKeysInSlot(unsigned int hashslot, robj **keys, unsigned int count, unsigned int based) {$/;"	f
getKeysPrepareResult	src/db.c	/^int *getKeysPrepareResult(getKeysResult *result, int numkeys) {$/;"	f
getKeysResult	src/server.h	/^} getKeysResult;$/;"	t	typeref:struct:__anon21
getKeysUsingCommandTable	src/db.c	/^int getKeysUsingCommandTable(struct redisCommand *cmd,robj **argv, int argc, getKeysResult *result) {$/;"	f
getLRUClock	src/evict.c	/^unsigned int getLRUClock(void) {$/;"	f
getListPositionFromObjectOrReply	src/t_list.c	/^int getListPositionFromObjectOrReply(client *c, robj *arg, int *position) {$/;"	f
getLongDoubleFromObject	src/object.c	/^int getLongDoubleFromObject(robj *o, long double *target) {$/;"	f
getLongDoubleFromObjectOrReply	src/object.c	/^int getLongDoubleFromObjectOrReply(client *c, robj *o, long double *target, const char *msg) {$/;"	f
getLongFromObjectOrReply	src/object.c	/^int getLongFromObjectOrReply(client *c, robj *o, long *target, const char *msg) {$/;"	f
getLongInfoField	src/redis-cli.c	/^static long getLongInfoField(char *info, char *field) {$/;"	f	file:
getLongLongFromObject	src/object.c	/^int getLongLongFromObject(robj *o, long long *target) {$/;"	f
getLongLongFromObjectOrReply	src/object.c	/^int getLongLongFromObjectOrReply(client *c, robj *o, long long *target, const char *msg) {$/;"	f
getMaxmemoryState	src/evict.c	/^int getMaxmemoryState(size_t *total, size_t *logical, size_t *tofree, float *level) {$/;"	f
getMcontextEip	src/debug.c	/^static void *getMcontextEip(ucontext_t *uc) {$/;"	f	file:
getMemoryDoctorReport	src/object.c	/^sds getMemoryDoctorReport(void) {$/;"	f
getMemoryOverheadData	src/object.c	/^struct redisMemOverhead *getMemoryOverheadData(void) {$/;"	f
getMonotonicUs	src/monotonic.c	/^monotime (*getMonotonicUs)(void) = NULL;$/;"	v
getMonotonicUs_aarch64	src/monotonic.c	/^static monotime getMonotonicUs_aarch64() {$/;"	f	file:
getMonotonicUs_posix	src/monotonic.c	/^static monotime getMonotonicUs_posix() {$/;"	f	file:
getMonotonicUs_x86	src/monotonic.c	/^static monotime getMonotonicUs_x86() {$/;"	f	file:
getNodeByQuery	src/cluster.c	/^clusterNode *getNodeByQuery(client *c, struct redisCommand *cmd, robj **argv, int argc, int *hashslot, int *error_code) {$/;"	f
getNodeNameFromIPPort	exp/5_merge_instance.sh	/^getNodeNameFromIPPort() {$/;"	f
getNodeNameFromIPPort	exp/exp4.sh	/^getNodeNameFromIPPort() {$/;"	f
getNodeNameFromPort	exp/1_build_redis_cluster.sh	/^getNodeNameFromPort() {$/;"	f
getNodeNameFromPort	exp/inithg.sh	/^getNodeNameFromPort() {$/;"	f
getNodeNameFromSlot	exp/1_build_redis_cluster.sh	/^getNodeNameFromSlot() {$/;"	f
getNodeNameFromSlot	exp/exp4.sh	/^getNodeNameFromSlot() {$/;"	f
getNodeNameFromSlot	exp/inithg.sh	/^getNodeNameFromSlot() {$/;"	f
getNormalHot	exp/exp1.sh	/^getNormalHot() {$/;"	f
getObjectReadOnlyString	src/bitops.c	/^unsigned char *getObjectReadOnlyString(robj *o, long *len, char *llbuf) {$/;"	f
getObjectTypeName	src/db.c	/^char* getObjectTypeName(robj *o) {$/;"	f
getOneNodeRedisStat	exp/4_monitor.sh	/^getOneNodeRedisStat() {$/;"	f
getOpMode	deps/lua/src/lopcodes.h	254;"	d
getPara	exp/exp1.sh	/^getPara() {$/;"	f
getParaSingle	exp/exp1.sh	/^getParaSingle() {$/;"	f
getPositiveLongFromObjectOrReply	src/object.c	/^int getPositiveLongFromObjectOrReply(client *c, robj *o, long *target, const char *msg) {$/;"	f
getPsyncInitialOffset	src/replication.c	/^long long getPsyncInitialOffset(void) {$/;"	f
getRDB	src/redis-cli.c	/^static void getRDB(clusterManagerNode *node) {$/;"	f	file:
getRandomBytes	src/util.c	/^void getRandomBytes(unsigned char *p, size_t len) {$/;"	f
getRandomHexChars	src/util.c	/^void getRandomHexChars(char *p, size_t len) {$/;"	f
getRangeLongFromObjectOrReply	src/object.c	/^int getRangeLongFromObjectOrReply(client *c, robj *o, long min, long max, long *target, const char *msg) {$/;"	f
getRedisConfig	src/redis-benchmark.c	/^static redisConfig *getRedisConfig(const char *ip, int port,$/;"	f	file:
getRedisContext	src/redis-benchmark.c	/^static redisContext *getRedisContext(const char *ip, int port,$/;"	f	file:
getRedisStat	exp/4_monitor.sh	/^getRedisStat() {$/;"	f
getRedisStat	exp/log_dealer.sh	/^getRedisStat() {$/;"	f
getS	deps/lua/src/lauxlib.c	/^static const char *getS (lua_State *L, void *ud, size_t *size) {$/;"	f	file:
getSafeInfoString	src/server.c	/^const char *getSafeInfoString(const char *s, size_t len, char **tmp) {$/;"	f
getSdsArrayFromArgv	src/redis-cli.c	/^static sds *getSdsArrayFromArgv(int argc, char **argv, int quoted) {$/;"	f	file:
getSentinelRedisInstanceByAddrAndRunID	src/sentinel.c	/^sentinelRedisInstance *getSentinelRedisInstanceByAddrAndRunID(dict *instances, char *addr, int port, char *runid) {$/;"	f
getSignedBitfield	src/bitops.c	/^int64_t getSignedBitfield(unsigned char *p, uint64_t offset, uint64_t bits) {$/;"	f
getSize	exp/log_dealer.sh	/^getSize() {$/;"	f
getSlaveKeyWithExpireCount	src/expire.c	/^size_t getSlaveKeyWithExpireCount(void) {$/;"	f
getSlot	exp/log_dealer.sh	/^getSlot() {$/;"	f
getSlotOrReply	src/cluster.c	/^int getSlotOrReply(client *c, robj *o) {$/;"	f
getSlotStat	exp/log_dealer.sh	/^getSlotStat() {$/;"	f
getStringObjectFromListPosition	src/t_list.c	/^robj *getStringObjectFromListPosition(int position) {$/;"	f
getStringObjectLen	src/networking.c	/^size_t getStringObjectLen(robj *o) {$/;"	f
getStringObjectSdsUsedMemory	src/networking.c	/^size_t getStringObjectSdsUsedMemory(robj *o) {$/;"	f
getTestProcByName	src/server.c	/^redisTestProc *getTestProcByName(const char *name) {$/;"	f
getTimeZone	src/util.c	/^long getTimeZone(void) {$/;"	f
getTimeoutFromObjectOrReply	src/timeout.c	/^int getTimeoutFromObjectOrReply(client *c, robj *object, mstime_t *timeout, int unit) {$/;"	f
getUnsignedBitfield	src/bitops.c	/^uint64_t getUnsignedBitfield(unsigned char *p, uint64_t offset, uint64_t bits) {$/;"	f
getYCSB	exp/log_dealer.sh	/^getYCSB() {$/;"	f
getYCSBStat	exp/log_dealer.sh	/^getYCSBStat() {$/;"	f
get_ack_from_slaves	src/server.h	/^    int get_ack_from_slaves;            \/* If true we send REPLCONF GETACK. *\/$/;"	m	struct:redisServer
get_arena_dirty_npurge	deps/jemalloc/test/unit/decay.c	/^get_arena_dirty_npurge(unsigned arena_ind) {$/;"	f	file:
get_arena_muzzy_npurge	deps/jemalloc/test/unit/decay.c	/^get_arena_muzzy_npurge(unsigned arena_ind) {$/;"	f	file:
get_arena_npurge	deps/jemalloc/test/unit/decay.c	/^get_arena_npurge(unsigned arena_ind) {$/;"	f	file:
get_arena_npurge_impl	deps/jemalloc/test/unit/decay.c	/^get_arena_npurge_impl(const char *mibname, unsigned arena_ind) {$/;"	f	file:
get_arena_pdirty	deps/jemalloc/test/unit/decay.c	/^get_arena_pdirty(unsigned arena_ind) {$/;"	f	file:
get_arena_pmuzzy	deps/jemalloc/test/unit/decay.c	/^get_arena_pmuzzy(unsigned arena_ind) {$/;"	f	file:
get_bucket_index	deps/hdr_histogram/hdr_histogram.c	/^static int32_t get_bucket_index(const struct hdr_histogram* h, int64_t value)$/;"	f	file:
get_child_pid	tests/support/util.tcl	/^proc get_child_pid {idx} {$/;"	p
get_cluster_nodes	tests/cluster/cluster.tcl	/^proc get_cluster_nodes id {$/;"	p
get_compTM	deps/lua/src/lvm.c	/^static const TValue *get_compTM (lua_State *L, Table *mt1, Table *mt2,$/;"	f	file:
get_cpu_metrics	tests/integration/replication.tcl	/^proc get_cpu_metrics { statfile } {$/;"	p
get_cpu_proc_occupy	tmp/getcpu.cpp	/^static inline unsigned long get_cpu_proc_occupy(int pid)$/;"	f	file:
get_cpu_total_occupy	tmp/getcpu.cpp	/^static inline unsigned long get_cpu_total_occupy()$/;"	f	file:
get_defrag_hint	deps/jemalloc/src/jemalloc.c	/^get_defrag_hint(void* ptr) {$/;"	f
get_errno	deps/jemalloc/include/jemalloc/internal/util.h	/^get_errno(void) {$/;"	f
get_fdlink	tests/sentinel/tests/helpers/check_leaked_fds.tcl	/^proc get_fdlink {_pid fd} {$/;"	p
get_fsl	tests/modules/blockonkeys.c	/^int get_fsl(RedisModuleCtx *ctx, RedisModuleString *keyname, int mode, int create, fsl_t **fsl, int reply_on_failure) {$/;"	f
get_idstring	deps/jemalloc/test/src/SFMT.c	/^const char *get_idstring(void) {$/;"	f
get_info_field	tests/instances.tcl	/^proc get_info_field {info field} {$/;"	p
get_instance_attrib	tests/instances.tcl	/^proc get_instance_attrib {type id attrib} {$/;"	p
get_instance_id_by_port	tests/instances.tcl	/^proc get_instance_id_by_port {type port} {$/;"	p
get_items	tmp/getcpu.cpp	/^static const char* get_items(const char* buffer, unsigned int item)$/;"	f	file:
get_keys	tests/unit/type/hash.tcl	/^    proc get_keys {l} {$/;"	p
get_keys	tests/unit/type/zset.tcl	/^    proc get_keys {l} {$/;"	p
get_large_size	deps/jemalloc/test/integration/mallocx.c	/^get_large_size(size_t ind) {$/;"	f	file:
get_large_size	deps/jemalloc/test/integration/rallocx.c	/^get_large_size(size_t ind) {$/;"	f	file:
get_large_size	deps/jemalloc/test/integration/xallocx.c	/^get_large_size(size_t ind) {$/;"	f	file:
get_large_size	deps/jemalloc/test/unit/arena_reset.c	/^get_large_size(size_t ind) {$/;"	f	file:
get_last_error	src/connection.h	/^    const char *(*get_last_error)(struct connection *conn);$/;"	m	struct:ConnectionType
get_lg_prof_sample	deps/jemalloc/test/unit/prof_reset.c	/^get_lg_prof_sample(void) {$/;"	f	file:
get_max_size_class	deps/jemalloc/test/unit/size_classes.c	/^get_max_size_class(void) {$/;"	f	file:
get_min_array_size32	deps/jemalloc/test/src/SFMT.c	/^int get_min_array_size32(void) {$/;"	f
get_min_array_size64	deps/jemalloc/test/src/SFMT.c	/^int get_min_array_size64(void) {$/;"	f
get_myself	tests/cluster/cluster.tcl	/^proc get_myself id {$/;"	p
get_nlarge	deps/jemalloc/test/integration/mallocx.c	/^get_nlarge(void) {$/;"	f	file:
get_nlarge	deps/jemalloc/test/integration/rallocx.c	/^get_nlarge(void) {$/;"	f	file:
get_nlarge	deps/jemalloc/test/integration/xallocx.c	/^get_nlarge(void) {$/;"	f	file:
get_nlarge	deps/jemalloc/test/unit/arena_reset.c	/^get_nlarge(void) {$/;"	f	file:
get_node_by_id	tests/cluster/cluster.tcl	/^proc get_node_by_id {instance_id node_id} {$/;"	p
get_nsizes_impl	deps/jemalloc/test/integration/mallocx.c	/^get_nsizes_impl(const char *cmd) {$/;"	f	file:
get_nsizes_impl	deps/jemalloc/test/integration/rallocx.c	/^get_nsizes_impl(const char *cmd) {$/;"	f	file:
get_nsizes_impl	deps/jemalloc/test/integration/xallocx.c	/^get_nsizes_impl(const char *cmd) {$/;"	f	file:
get_nsizes_impl	deps/jemalloc/test/unit/arena_reset.c	/^get_nsizes_impl(const char *cmd) {$/;"	f	file:
get_nsmall	deps/jemalloc/test/integration/xallocx.c	/^get_nsmall(void) {$/;"	f	file:
get_nsmall	deps/jemalloc/test/unit/arena_reset.c	/^get_nsmall(void) {$/;"	f	file:
get_one_of_my_replica	tests/cluster/tests/14-consistency-check.tcl	/^proc get_one_of_my_replica {id} {$/;"	p
get_oom_score_adj	tests/unit/oom-score-adj.tcl	/^        proc get_oom_score_adj {{pid ""}} {$/;"	p
get_parent_pid	tests/sentinel/tests/helpers/check_leaked_fds.tcl	/^proc get_parent_pid {_pid} {$/;"	p
get_prompt	deps/lua/src/lua.c	/^static const char *get_prompt (lua_State *L, int firstline) {$/;"	f	file:
get_rate_str	deps/jemalloc/src/stats.c	/^get_rate_str(uint64_t dividend, uint64_t divisor, char str[6]) {$/;"	f	file:
get_redis_tcp_options	deps/hiredis/test.c	/^redisOptions get_redis_tcp_options(struct config config) {$/;"	f
get_redis_version	deps/hiredis/test.c	/^void get_redis_version(redisContext *c, int *majorptr, int *minorptr) {$/;"	f
get_section_heading	src/modules/gendoc.rb	/^def get_section_heading(src, i)$/;"	f
get_size_impl	deps/jemalloc/test/integration/mallocx.c	/^get_size_impl(const char *cmd, size_t ind) {$/;"	f	file:
get_size_impl	deps/jemalloc/test/integration/rallocx.c	/^get_size_impl(const char *cmd, size_t ind) {$/;"	f	file:
get_size_impl	deps/jemalloc/test/integration/xallocx.c	/^get_size_impl(const char *cmd, size_t ind) {$/;"	f	file:
get_size_impl	deps/jemalloc/test/unit/arena_reset.c	/^get_size_impl(const char *cmd, size_t ind) {$/;"	f	file:
get_small_size	deps/jemalloc/test/integration/xallocx.c	/^get_small_size(size_t ind) {$/;"	f	file:
get_small_size	deps/jemalloc/test/unit/arena_reset.c	/^get_small_size(size_t ind) {$/;"	f	file:
get_sub_bucket_index	deps/hdr_histogram/hdr_histogram.c	/^static int32_t get_sub_bucket_index(int64_t value, int32_t bucket_index, int32_t unit_magnitude)$/;"	f	file:
get_type	src/connection.h	/^    int (*get_type)(struct connection *conn);$/;"	m	struct:ConnectionType
getack	src/server.h	/^    *getack, *special_asterick, *special_equals, *default_username,$/;"	m	struct:sharedObjectsStruct
getaddrinfo	deps/hiredis/sockcompat.h	75;"	d
getapifuncptr	src/module.c	/^    void *getapifuncptr;            \/* NOTE: Must be the first field. *\/$/;"	m	struct:RedisModuleCtx	file:
getargs	deps/lua/src/lua.c	/^static int getargs (lua_State *L, char **argv, int n) {$/;"	f	file:
getbinhandler	deps/lua/doc/manual.html	/^     function getbinhandler (op1, op2, event)$/;"	f
getbinopr	deps/lua/src/lparser.c	/^static BinOpr getbinopr (int op) {$/;"	f	file:
getbitCommand	src/bitops.c	/^void getbitCommand(client *c) {$/;"	f
getboolfield	deps/lua/src/loslib.c	/^static int getboolfield (lua_State *L, const char *key) {$/;"	f	file:
getcode	deps/lua/src/lcode.h	39;"	d
getcomphandler	deps/lua/doc/manual.html	/^     function getcomphandler (op1, op2, event)$/;"	f
getcurrenv	deps/lua/src/lapi.c	/^static Table *getcurrenv (lua_State *L) {$/;"	f	file:
getdelCommand	src/t_string.c	/^void getdelCommand(client *c) {$/;"	f
getexCommand	src/t_string.c	/^void getexCommand(client *c) {$/;"	f
getfield	deps/lua/src/loslib.c	/^static int getfield (lua_State *L, const char *key, int d) {$/;"	f	file:
getfreepos	deps/lua/src/ltable.c	/^static Node *getfreepos (Table *t) {$/;"	f	file:
getfunc	deps/lua/src/lbaselib.c	/^static void getfunc (lua_State *L, int opt) {$/;"	f	file:
getfuncname	deps/lua/src/ldebug.c	/^static const char *getfuncname (lua_State *L, CallInfo *ci, const char **name) {$/;"	f	file:
gethooktable	deps/lua/src/ldblib.c	/^static void gethooktable (lua_State *L) {$/;"	f	file:
getinteger	deps/lua/src/lua_struct.c	/^static lua_Number getinteger (const char *buff, int endian,$/;"	f	file:
getiofile	deps/lua/src/liolib.c	/^static FILE *getiofile (lua_State *L, int findex) {$/;"	f	file:
getjump	deps/lua/src/lcode.c	/^static int getjump (FuncState *fs, int pc) {$/;"	f	file:
getjumpcontrol	deps/lua/src/lcode.c	/^static Instruction *getjumpcontrol (FuncState *fs, int pc) {$/;"	f	file:
getkeys_command	tests/modules/getkeys.c	/^int getkeys_command(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
getkeys_fixed	tests/modules/getkeys.c	/^int getkeys_fixed(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
getkeys_introspect	tests/modules/getkeys.c	/^int getkeys_introspect(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
getkeys_proc	src/server.h	/^    redisGetKeysProc *getkeys_proc;$/;"	m	struct:redisCommand
getline	deps/lua/src/ldebug.h	16;"	d
getlocvar	deps/lua/src/lparser.c	32;"	d	file:
getluaproto	deps/lua/src/ldebug.c	/^static Proto *getluaproto (CallInfo *ci) {$/;"	f	file:
getn	deps/lua/src/ltablib.c	/^static int getn (lua_State *L) {$/;"	f	file:
getnum	deps/lua/src/lua_struct.c	/^static int getnum (lua_State *L, const char **fmt, int df) {$/;"	f	file:
getobjname	deps/lua/src/ldebug.c	/^static const char *getobjname (lua_State *L, CallInfo *ci, int stackpos,$/;"	f	file:
getrangeCommand	src/t_string.c	/^void getrangeCommand(client *c) {$/;"	f
getrdb_mode	src/redis-cli.c	/^    int getrdb_mode;$/;"	m	struct:config	file:
getsetCommand	src/t_string.c	/^void getsetCommand(client *c) {$/;"	f
getsizes	deps/lua/src/lauxlib.c	/^static void getsizes (lua_State *L) {$/;"	f	file:
getsockopt	deps/hiredis/sockcompat.h	83;"	d
getstr	deps/lua/src/lobject.h	210;"	d
gettable_event	deps/lua/doc/manual.html	/^     function gettable_event (table, key)$/;"	f
getthread	deps/lua/src/ldblib.c	/^static lua_State *getthread (lua_State *L, int *arg) {$/;"	f	file:
gettoalign	deps/lua/src/lua_struct.c	/^static int gettoalign (size_t len, Header *h, int opt, size_t size) {$/;"	f	file:
getunopr	deps/lua/src/lparser.c	/^static UnOpr getunopr (int op) {$/;"	f	file:
gfasttm	deps/lua/src/ltm.h	41;"	d
gfind_nodef	deps/lua/src/lstrlib.c	/^static int gfind_nodef (lua_State *L) {$/;"	f	file:
gkey	deps/lua/src/ltable.h	14;"	d
global	src/modules/helloacl.c	/^static RedisModuleUser *global;$/;"	v	file:
global	tests/modules/auth.c	/^static RedisModuleUser *global = NULL;$/;"	v	file:
globalL	deps/lua/src/lua.c	/^static lua_State *globalL = NULL;$/;"	v	file:
global_State	deps/lua/src/lstate.h	/^typedef struct global_State {$/;"	s
global_State	deps/lua/src/lstate.h	/^} global_State;$/;"	t	typeref:struct:global_State
global_attempts	tests/modules/defragtest.c	/^unsigned long int global_attempts = 0;$/;"	v
global_auth_client_id	src/modules/helloacl.c	/^static uint64_t global_auth_client_id = 0;$/;"	v	file:
global_defragged	tests/modules/defragtest.c	/^unsigned long int global_defragged = 0;$/;"	v
global_mutex_names	deps/jemalloc/src/stats.c	/^const char *global_mutex_names[mutex_prof_num_global_mutexes] = {$/;"	v
global_strings	tests/modules/defragtest.c	/^RedisModuleString **global_strings = NULL;$/;"	v
global_strings_len	tests/modules/defragtest.c	/^int global_strings_len = 0;$/;"	v
gmatch	deps/lua/src/lstrlib.c	/^static int gmatch (lua_State *L) {$/;"	f	file:
gmatch_aux	deps/lua/src/lstrlib.c	/^static int gmatch_aux (lua_State *L) {$/;"	f	file:
gnext	deps/lua/src/ltable.h	16;"	d
gnode	deps/lua/src/ltable.h	13;"	d
good_size	deps/jemalloc/src/zone.c	/^	size_t (*good_size)(malloc_zone_t *, size_t);$/;"	m	struct:malloc_introspection_t	file:
gopher_enabled	src/server.h	/^    int gopher_enabled;         \/* If true the server will reply to gopher$/;"	m	struct:redisServer
gossip	src/cluster.h	/^        clusterMsgDataGossip gossip[1];$/;"	m	struct:clusterMsgData::__anon37
gray	deps/lua/src/lstate.h	/^  GCObject *gray;  \/* list of gray objects *\/$/;"	m	struct:global_State
gray2black	deps/lua/src/lgc.h	73;"	d
grayagain	deps/lua/src/lstate.h	/^  GCObject *grayagain;  \/* list of objects to be traversed atomically *\/$/;"	m	struct:global_State
group	src/help.h	/^  int group;$/;"	m	struct:commandHelp
group_offset	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^	size_t group_offset;$/;"	m	struct:bitmap_level_s
groupname	src/stream.h	/^    robj *groupname;$/;"	m	struct:streamPropInfo
growCI	deps/lua/src/ldo.c	/^static CallInfo *growCI (lua_State *L) {$/;"	f	file:
gt	deps/lua/src/lstate.h	22;"	d
gval	deps/lua/src/ltable.h	15;"	d
h	deps/hdr_histogram/hdr_histogram.h	/^    const struct hdr_histogram* h;$/;"	m	struct:hdr_iter	typeref:struct:hdr_iter::hdr_histogram
h	deps/lua/src/lparser.h	/^  Table *h;  \/* table to find (and reuse) elements in `k' *\/$/;"	m	struct:FuncState
h	deps/lua/src/lstate.h	/^  struct Table h;$/;"	m	union:GCObject	typeref:struct:GCObject::Table
h_steps	deps/jemalloc/src/arena.c	/^const uint64_t h_steps[SMOOTHSTEP_NSTEPS] = {$/;"	v
had_conf_error	deps/jemalloc/src/jemalloc.c	/^static bool had_conf_error = false;$/;"	v	file:
handle	deps/hiredis/adapters/libuv.h	/^  uv_poll_t          handle;$/;"	m	struct:redisLibuvEvents
handle	src/module.c	/^    void *handle;   \/* Module dlopen() handle. *\/$/;"	m	struct:RedisModule	file:
handleBlockedClientsTimeout	src/timeout.c	/^void handleBlockedClientsTimeout(void) {$/;"	f
handleClientsBlockedOnKeys	src/blocked.c	/^void handleClientsBlockedOnKeys(void) {$/;"	f
handleClientsWithPendingReadsUsingThreads	src/networking.c	/^int handleClientsWithPendingReadsUsingThreads(void) {$/;"	f
handleClientsWithPendingWrites	src/networking.c	/^int handleClientsWithPendingWrites(void) {$/;"	f
handleClientsWithPendingWritesUsingThreads	src/networking.c	/^int handleClientsWithPendingWritesUsingThreads(void) {$/;"	f
handleLinkIOError	src/cluster.c	/^void handleLinkIOError(clusterLink *link) {$/;"	f
handleOOM	deps/jemalloc/src/jemalloc_cpp.cpp	/^handleOOM(std::size_t size, bool nothrow) {$/;"	f	file:
handleSSLReturnCode	src/tls.c	/^static int handleSSLReturnCode(tls_connection *conn, int ret_value, WantIOType *want) {$/;"	f	file:
handle_luainit	deps/lua/src/lua.c	/^static int handle_luainit (lua_State *L) {$/;"	f	file:
handle_script	deps/lua/src/lua.c	/^static int handle_script (lua_State *L, char **argv, int n) {$/;"	f	file:
handshaking	src/redis-cli.c	/^    int handshaking;$/;"	m	struct:clusterManagerLink	file:
hard_limit_bytes	src/server.h	/^    unsigned long long hard_limit_bytes;$/;"	m	struct:clientBufferLimitsConfig
harndfieldReplyWithZiplist	src/t_hash.c	/^static void harndfieldReplyWithZiplist(client *c, unsigned int count, ziplistEntry *keys, ziplistEntry *vals) {$/;"	f	file:
hasActiveChildProcess	src/server.c	/^int hasActiveChildProcess() {$/;"	f
has_buckets	deps/hdr_histogram/hdr_histogram.c	/^static bool has_buckets(struct hdr_iter* iter)$/;"	f	file:
has_flag	tests/cluster/cluster.tcl	/^proc has_flag {node flag} {$/;"	p
has_next	deps/hdr_histogram/hdr_histogram.c	/^static bool has_next(struct hdr_iter* iter)$/;"	f	file:
hash	deps/jemalloc/include/jemalloc/internal/ckh.h	/^	ckh_hash_t *hash;$/;"	m	struct:__anon151
hash	deps/jemalloc/include/jemalloc/internal/hash.h	/^hash(const void *key, size_t len, const uint32_t seed, size_t r_hash[2]) {$/;"	f
hash	deps/lua/src/lobject.h	/^    unsigned int hash;$/;"	m	struct:TString::__anon107
hash	deps/lua/src/lstate.h	/^  GCObject **hash;$/;"	m	struct:stringtable
hash	src/geohash.h	/^    GeoHashBits hash;$/;"	m	struct:__anon49
hash	src/geohash_helper.h	/^    GeoHashBits hash;$/;"	m	struct:__anon59
hashCallback	src/dict.c	/^uint64_t hashCallback(const void *key) {$/;"	f
hashDictType	src/server.c	/^dictType hashDictType = {$/;"	v
hashFunction	deps/hiredis/dict.h	/^    unsigned int (*hashFunction)(const void *key);$/;"	m	struct:dictType
hashFunction	src/dict.h	/^    uint64_t (*hashFunction)(const void *key);$/;"	m	struct:dictType
hashReplyFromZiplistEntry	src/t_hash.c	/^void hashReplyFromZiplistEntry(client *c, ziplistEntry *e) {$/;"	f
hashSdsFromZiplistEntry	src/t_hash.c	/^sds hashSdsFromZiplistEntry(ziplistEntry *e) {$/;"	f
hashTypeConvert	src/t_hash.c	/^void hashTypeConvert(robj *o, int enc) {$/;"	f
hashTypeConvertZiplist	src/t_hash.c	/^void hashTypeConvertZiplist(robj *o, int enc) {$/;"	f
hashTypeCurrentFromHashTable	src/t_hash.c	/^sds hashTypeCurrentFromHashTable(hashTypeIterator *hi, int what) {$/;"	f
hashTypeCurrentFromZiplist	src/t_hash.c	/^void hashTypeCurrentFromZiplist(hashTypeIterator *hi, int what,$/;"	f
hashTypeCurrentObject	src/t_hash.c	/^void hashTypeCurrentObject(hashTypeIterator *hi, int what, unsigned char **vstr, unsigned int *vlen, long long *vll) {$/;"	f
hashTypeCurrentObjectNewSds	src/t_hash.c	/^sds hashTypeCurrentObjectNewSds(hashTypeIterator *hi, int what) {$/;"	f
hashTypeDelete	src/t_hash.c	/^int hashTypeDelete(robj *o, sds field) {$/;"	f
hashTypeDup	src/t_hash.c	/^robj *hashTypeDup(robj *o) {$/;"	f
hashTypeExists	src/t_hash.c	/^int hashTypeExists(robj *o, sds field) {$/;"	f
hashTypeGetFromHashTable	src/t_hash.c	/^sds hashTypeGetFromHashTable(robj *o, sds field) {$/;"	f
hashTypeGetFromZiplist	src/t_hash.c	/^int hashTypeGetFromZiplist(robj *o, sds field,$/;"	f
hashTypeGetValue	src/t_hash.c	/^int hashTypeGetValue(robj *o, sds field, unsigned char **vstr, unsigned int *vlen, long long *vll) {$/;"	f
hashTypeGetValueLength	src/t_hash.c	/^size_t hashTypeGetValueLength(robj *o, sds field) {$/;"	f
hashTypeGetValueObject	src/t_hash.c	/^robj *hashTypeGetValueObject(robj *o, sds field) {$/;"	f
hashTypeInitIterator	src/t_hash.c	/^hashTypeIterator *hashTypeInitIterator(robj *subject) {$/;"	f
hashTypeIterator	src/server.h	/^} hashTypeIterator;$/;"	t	typeref:struct:__anon26
hashTypeLength	src/t_hash.c	/^unsigned long hashTypeLength(const robj *o) {$/;"	f
hashTypeLookupWriteOrCreate	src/t_hash.c	/^robj *hashTypeLookupWriteOrCreate(client *c, robj *key) {$/;"	f
hashTypeNext	src/t_hash.c	/^int hashTypeNext(hashTypeIterator *hi) {$/;"	f
hashTypeRandomElement	src/t_hash.c	/^void hashTypeRandomElement(robj *hashobj, unsigned long hashsize, ziplistEntry *key, ziplistEntry *val) {$/;"	f
hashTypeReleaseIterator	src/t_hash.c	/^void hashTypeReleaseIterator(hashTypeIterator *hi) {$/;"	f
hashTypeSet	src/t_hash.c	/^int hashTypeSet(robj *o, sds field, sds value, int flags) {$/;"	f
hashTypeTryConversion	src/t_hash.c	/^void hashTypeTryConversion(robj *o, robj **argv, int start, int end) {$/;"	f
hashZiplistValidateIntegrity	src/t_hash.c	/^int hashZiplistValidateIntegrity(unsigned char *zl, size_t size, int deep) {$/;"	f
hash_fmix_32	deps/jemalloc/include/jemalloc/internal/hash.h	/^hash_fmix_32(uint32_t h) {$/;"	f
hash_fmix_64	deps/jemalloc/include/jemalloc/internal/hash.h	/^hash_fmix_64(uint64_t k) {$/;"	f
hash_get_block_32	deps/jemalloc/include/jemalloc/internal/hash.h	/^hash_get_block_32(const uint32_t *p, int i) {$/;"	f
hash_get_block_64	deps/jemalloc/include/jemalloc/internal/hash.h	/^hash_get_block_64(const uint64_t *p, int i) {$/;"	f
hash_max_ziplist_entries	src/server.h	/^    size_t hash_max_ziplist_entries;$/;"	m	struct:redisServer
hash_max_ziplist_value	src/server.h	/^    size_t hash_max_ziplist_value;$/;"	m	struct:redisServer
hash_rotl_32	deps/jemalloc/include/jemalloc/internal/hash.h	/^hash_rotl_32(uint32_t x, int8_t r) {$/;"	f
hash_rotl_64	deps/jemalloc/include/jemalloc/internal/hash.h	/^hash_rotl_64(uint64_t x, int8_t r) {$/;"	f
hash_set	tests/modules/hash.c	/^int hash_set(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
hash_variant_bits	deps/jemalloc/test/unit/hash.c	/^hash_variant_bits(hash_variant_t variant) {$/;"	f	file:
hash_variant_string	deps/jemalloc/test/unit/hash.c	/^hash_variant_string(hash_variant_t variant) {$/;"	f	file:
hash_variant_t	deps/jemalloc/test/unit/hash.c	/^} hash_variant_t;$/;"	t	typeref:enum:__anon122	file:
hash_variant_verify	deps/jemalloc/test/unit/hash.c	/^hash_variant_verify(hash_variant_t variant) {$/;"	f	file:
hash_variant_verify_key	deps/jemalloc/test/unit/hash.c	/^hash_variant_verify_key(hash_variant_t variant, uint8_t *key) {$/;"	f	file:
hash_variant_x64_128	deps/jemalloc/test/unit/hash.c	/^	hash_variant_x64_128$/;"	e	enum:__anon122	file:
hash_variant_x86_128	deps/jemalloc/test/unit/hash.c	/^	hash_variant_x86_128,$/;"	e	enum:__anon122	file:
hash_variant_x86_32	deps/jemalloc/test/unit/hash.c	/^	hash_variant_x86_32,$/;"	e	enum:__anon122	file:
hash_x64_128	deps/jemalloc/include/jemalloc/internal/hash.h	/^hash_x64_128(const void *key, const int len, const uint32_t seed,$/;"	f
hash_x86_128	deps/jemalloc/include/jemalloc/internal/hash.h	/^hash_x86_128(const void *key, const int len, uint32_t seed,$/;"	f
hash_x86_32	deps/jemalloc/include/jemalloc/internal/hash.h	/^hash_x86_32(const void *key, int len, uint32_t seed) {$/;"	f
hashboolean	deps/lua/src/ltable.c	53;"	d	file:
hashmod	deps/lua/src/ltable.c	60;"	d	file:
hashnum	deps/lua/src/ltable.c	/^static Node *hashnum (const Table *t, lua_Number n) {$/;"	f	file:
hashpointer	deps/lua/src/ltable.c	63;"	d	file:
hashpow2	deps/lua/src/ltable.c	50;"	d	file:
hashstr	deps/lua/src/ltable.c	52;"	d	file:
hasjumps	deps/lua/src/lcode.c	27;"	d	file:
hasmultret	deps/lua/src/lparser.c	30;"	d	file:
have_background_thread	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool have_background_thread =$/;"	v
have_copy	src/cluster.h	/^    int have_copy;$/;"	m	struct:slotState
have_dss	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool have_dss =$/;"	v
have_dss	deps/jemalloc/test/integration/MALLOCX_ARENA.c	/^static bool have_dss =$/;"	v	file:
have_madvise_huge	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool have_madvise_huge =$/;"	v
have_percpu_arena	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool have_percpu_arena =$/;"	v
hdelCommand	src/t_hash.c	/^void hdelCommand(client *c) {$/;"	f
hdr_add	deps/hdr_histogram/hdr_histogram.c	/^int64_t hdr_add(struct hdr_histogram* h, const struct hdr_histogram* from)$/;"	f
hdr_add_while_correcting_for_coordinated_omission	deps/hdr_histogram/hdr_histogram.c	/^int64_t hdr_add_while_correcting_for_coordinated_omission($/;"	f
hdr_alloc	deps/hdr_histogram/hdr_histogram.c	/^int hdr_alloc(int64_t highest_trackable_value, int significant_figures, struct hdr_histogram** result)$/;"	f
hdr_atomic_add_fetch_64	deps/hdr_histogram/hdr_atomic.h	/^static inline int64_t hdr_atomic_add_fetch_64(volatile int64_t* field, int64_t value)$/;"	f
hdr_atomic_add_fetch_64	deps/hdr_histogram/hdr_atomic.h	/^static int64_t __inline hdr_atomic_add_fetch_64(volatile int64_t* field, int64_t value)$/;"	f
hdr_atomic_add_fetch_64	deps/hdr_histogram/hdr_atomic.h	89;"	d
hdr_atomic_compare_exchange_64	deps/hdr_histogram/hdr_atomic.h	/^static bool __inline hdr_atomic_compare_exchange_64(volatile int64_t* field, int64_t* expected, int64_t desired)$/;"	f
hdr_atomic_compare_exchange_64	deps/hdr_histogram/hdr_atomic.h	/^static inline bool hdr_atomic_compare_exchange_64(volatile int64_t* field, int64_t* expected, int64_t desired)$/;"	f
hdr_atomic_compare_exchange_64	deps/hdr_histogram/hdr_atomic.h	90;"	d
hdr_atomic_exchange_64	deps/hdr_histogram/hdr_atomic.h	/^static inline int64_t hdr_atomic_exchange_64(volatile int64_t* field, int64_t value)$/;"	f
hdr_atomic_exchange_64	deps/hdr_histogram/hdr_atomic.h	/^static int64_t __inline hdr_atomic_exchange_64(volatile int64_t* field, int64_t value)$/;"	f
hdr_atomic_exchange_64	deps/hdr_histogram/hdr_atomic.h	88;"	d
hdr_atomic_load_64	deps/hdr_histogram/hdr_atomic.h	/^static inline int64_t hdr_atomic_load_64(int64_t* field)$/;"	f
hdr_atomic_load_64	deps/hdr_histogram/hdr_atomic.h	/^static int64_t __inline hdr_atomic_load_64(int64_t* field)$/;"	f
hdr_atomic_load_64	deps/hdr_histogram/hdr_atomic.h	86;"	d
hdr_atomic_load_pointer	deps/hdr_histogram/hdr_atomic.h	/^static inline void* hdr_atomic_load_pointer(void** pointer)$/;"	f
hdr_atomic_load_pointer	deps/hdr_histogram/hdr_atomic.h	/^static void __inline * hdr_atomic_load_pointer(void** pointer)$/;"	f
hdr_atomic_load_pointer	deps/hdr_histogram/hdr_atomic.h	84;"	d
hdr_atomic_store_64	deps/hdr_histogram/hdr_atomic.h	/^static inline void hdr_atomic_store_64(int64_t* field, int64_t value)$/;"	f
hdr_atomic_store_64	deps/hdr_histogram/hdr_atomic.h	/^static void __inline hdr_atomic_store_64(int64_t* field, int64_t value)$/;"	f
hdr_atomic_store_64	deps/hdr_histogram/hdr_atomic.h	87;"	d
hdr_atomic_store_pointer	deps/hdr_histogram/hdr_atomic.h	/^static inline void hdr_atomic_store_pointer(void** pointer, void* value)$/;"	f
hdr_atomic_store_pointer	deps/hdr_histogram/hdr_atomic.h	/^static void hdr_atomic_store_pointer(void** pointer, void* value)$/;"	f
hdr_atomic_store_pointer	deps/hdr_histogram/hdr_atomic.h	85;"	d
hdr_calculate_bucket_config	deps/hdr_histogram/hdr_histogram.c	/^int hdr_calculate_bucket_config($/;"	f
hdr_close	deps/hdr_histogram/hdr_histogram.c	/^void hdr_close(struct hdr_histogram* h)$/;"	f
hdr_count_at_index	deps/hdr_histogram/hdr_histogram.c	/^int64_t hdr_count_at_index(const struct hdr_histogram* h, int32_t index)$/;"	f
hdr_count_at_value	deps/hdr_histogram/hdr_histogram.c	/^int64_t hdr_count_at_value(const struct hdr_histogram* h, int64_t value)$/;"	f
hdr_get_memory_size	deps/hdr_histogram/hdr_histogram.c	/^size_t hdr_get_memory_size(struct hdr_histogram *h)$/;"	f
hdr_histogram	deps/hdr_histogram/hdr_histogram.h	/^struct hdr_histogram$/;"	s
hdr_histogram_bucket_config	deps/hdr_histogram/hdr_histogram.h	/^struct hdr_histogram_bucket_config$/;"	s
hdr_init	deps/hdr_histogram/hdr_histogram.c	/^int hdr_init($/;"	f
hdr_init_preallocated	deps/hdr_histogram/hdr_histogram.c	/^void hdr_init_preallocated(struct hdr_histogram* h, struct hdr_histogram_bucket_config* cfg)$/;"	f
hdr_iter	deps/hdr_histogram/hdr_histogram.h	/^struct hdr_iter$/;"	s
hdr_iter_init	deps/hdr_histogram/hdr_histogram.c	/^void hdr_iter_init(struct hdr_iter* iter, const struct hdr_histogram* h)$/;"	f
hdr_iter_linear	deps/hdr_histogram/hdr_histogram.h	/^struct hdr_iter_linear$/;"	s
hdr_iter_linear_init	deps/hdr_histogram/hdr_histogram.c	/^void hdr_iter_linear_init(struct hdr_iter* iter, const struct hdr_histogram* h, int64_t value_units_per_bucket)$/;"	f
hdr_iter_linear_set_value_units_per_bucket	deps/hdr_histogram/hdr_histogram.c	/^void hdr_iter_linear_set_value_units_per_bucket(struct hdr_iter* iter, int64_t value_units_per_bucket)$/;"	f
hdr_iter_log	deps/hdr_histogram/hdr_histogram.h	/^struct hdr_iter_log$/;"	s
hdr_iter_log_init	deps/hdr_histogram/hdr_histogram.c	/^void hdr_iter_log_init($/;"	f
hdr_iter_next	deps/hdr_histogram/hdr_histogram.c	/^bool hdr_iter_next(struct hdr_iter* iter)$/;"	f
hdr_iter_percentile_init	deps/hdr_histogram/hdr_histogram.c	/^void hdr_iter_percentile_init(struct hdr_iter* iter, const struct hdr_histogram* h, int32_t ticks_per_half_distance)$/;"	f
hdr_iter_percentiles	deps/hdr_histogram/hdr_histogram.h	/^struct hdr_iter_percentiles$/;"	s
hdr_iter_recorded	deps/hdr_histogram/hdr_histogram.h	/^struct hdr_iter_recorded$/;"	s
hdr_iter_recorded_init	deps/hdr_histogram/hdr_histogram.c	/^void hdr_iter_recorded_init(struct hdr_iter* iter, const struct hdr_histogram* h)$/;"	f
hdr_lowest_equivalent_value	deps/hdr_histogram/hdr_histogram.c	/^int64_t hdr_lowest_equivalent_value(const struct hdr_histogram* h, int64_t value)$/;"	f
hdr_max	deps/hdr_histogram/hdr_histogram.c	/^int64_t hdr_max(const struct hdr_histogram* h)$/;"	f
hdr_mean	deps/hdr_histogram/hdr_histogram.c	/^double hdr_mean(const struct hdr_histogram* h)$/;"	f
hdr_median_equivalent_value	deps/hdr_histogram/hdr_histogram.c	/^int64_t hdr_median_equivalent_value(const struct hdr_histogram *h, int64_t value)$/;"	f
hdr_min	deps/hdr_histogram/hdr_histogram.c	/^int64_t hdr_min(const struct hdr_histogram* h)$/;"	f
hdr_next_non_equivalent_value	deps/hdr_histogram/hdr_histogram.c	/^int64_t hdr_next_non_equivalent_value(const struct hdr_histogram *h, int64_t value)$/;"	f
hdr_percentiles_print	deps/hdr_histogram/hdr_histogram.c	/^int hdr_percentiles_print($/;"	f
hdr_record_corrected_value	deps/hdr_histogram/hdr_histogram.c	/^bool hdr_record_corrected_value(struct hdr_histogram* h, int64_t value, int64_t expected_interval)$/;"	f
hdr_record_corrected_value_atomic	deps/hdr_histogram/hdr_histogram.c	/^bool hdr_record_corrected_value_atomic(struct hdr_histogram* h, int64_t value, int64_t expected_interval)$/;"	f
hdr_record_corrected_values	deps/hdr_histogram/hdr_histogram.c	/^bool hdr_record_corrected_values(struct hdr_histogram* h, int64_t value, int64_t count, int64_t expected_interval)$/;"	f
hdr_record_corrected_values_atomic	deps/hdr_histogram/hdr_histogram.c	/^bool hdr_record_corrected_values_atomic(struct hdr_histogram* h, int64_t value, int64_t count, int64_t expected_interval)$/;"	f
hdr_record_value	deps/hdr_histogram/hdr_histogram.c	/^bool hdr_record_value(struct hdr_histogram* h, int64_t value)$/;"	f
hdr_record_value_atomic	deps/hdr_histogram/hdr_histogram.c	/^bool hdr_record_value_atomic(struct hdr_histogram* h, int64_t value)$/;"	f
hdr_record_values	deps/hdr_histogram/hdr_histogram.c	/^bool hdr_record_values(struct hdr_histogram* h, int64_t value, int64_t count)$/;"	f
hdr_record_values_atomic	deps/hdr_histogram/hdr_histogram.c	/^bool hdr_record_values_atomic(struct hdr_histogram* h, int64_t value, int64_t count)$/;"	f
hdr_reset	deps/hdr_histogram/hdr_histogram.c	/^void hdr_reset(struct hdr_histogram *h)$/;"	f
hdr_reset_internal_counters	deps/hdr_histogram/hdr_histogram.c	/^void hdr_reset_internal_counters(struct hdr_histogram* h)$/;"	f
hdr_size_of_equivalent_value_range	deps/hdr_histogram/hdr_histogram.c	/^int64_t hdr_size_of_equivalent_value_range(const struct hdr_histogram* h, int64_t value)$/;"	f
hdr_stddev	deps/hdr_histogram/hdr_histogram.c	/^double hdr_stddev(const struct hdr_histogram* h)$/;"	f
hdr_value_at_index	deps/hdr_histogram/hdr_histogram.c	/^int64_t hdr_value_at_index(const struct hdr_histogram *h, int32_t index)$/;"	f
hdr_value_at_percentile	deps/hdr_histogram/hdr_histogram.c	/^int64_t hdr_value_at_percentile(const struct hdr_histogram* h, double percentile)$/;"	f
hdr_values_are_equivalent	deps/hdr_histogram/hdr_histogram.c	/^bool hdr_values_are_equivalent(const struct hdr_histogram* h, int64_t a, int64_t b)$/;"	f
head	deps/hiredis/async.h	/^    redisCallback *head, *tail;$/;"	m	struct:redisCallbackList
head	src/adlist.h	/^    listNode *head;$/;"	m	struct:list
head	src/modules/hellotype.c	/^    struct HelloTypeNode *head;$/;"	m	struct:HelloTypeObject	typeref:struct:HelloTypeObject::HelloTypeNode	file:
head	src/quicklist.h	/^    quicklistNode *head;$/;"	m	struct:quicklist
head	src/rax.h	/^    raxNode *head;$/;"	m	struct:rax
head	tests/modules/test_lazyfree.c	/^    struct LazyFreeLinkNode *head;$/;"	m	struct:LazyFreeLinkObject	typeref:struct:LazyFreeLinkObject::LazyFreeLinkNode	file:
header	src/server.h	/^    struct zskiplistNode *header, *tail;$/;"	m	struct:zskiplist	typeref:struct:zskiplist::zskiplistNode
headersize	src/ziplist.c	/^    unsigned int headersize;     \/* prevrawlensize + lensize. *\/$/;"	m	struct:zlentry	file:
heap_print	deps/jemalloc/test/unit/ph.c	/^heap_print(const heap_t *heap) {$/;"	f	file:
heap_t	deps/jemalloc/test/unit/ph.c	/^typedef ph(node_t) heap_t;$/;"	t	file:
heap_validate	deps/jemalloc/test/unit/ph.c	/^heap_validate(const heap_t *heap) {$/;"	f	file:
heaps	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^	extent_heap_t		heaps[NPSIZES+1];$/;"	m	struct:extents_s
height	src/geohash.h	/^            double height;$/;"	m	struct:__anon51::__anon52::__anon53
height	src/lolwut.h	/^    int height;$/;"	m	struct:lwCanvas
height	src/lolwut6.c	/^    int height;     \/* Pixels height. *\/$/;"	m	struct:skyscraper	file:
helloCommand	src/networking.c	/^void helloCommand(client *c) {$/;"	f
helpEntries	src/redis-cli.c	/^static helpEntry *helpEntries;$/;"	v	file:
helpEntriesLen	src/redis-cli.c	/^static int helpEntriesLen;$/;"	v	file:
helpEntry	src/redis-cli.c	/^} helpEntry;$/;"	t	typeref:struct:__anon13	file:
helpMsg	exp/2_run_ycsb.sh	/^helpMsg() {$/;"	f
hex_digit_to_int	src/sds.c	/^int hex_digit_to_int(char c) {$/;"	f
hexdigit2int	deps/lua/src/lua_cjson.c	/^static int hexdigit2int(char hex)$/;"	f	file:
hexistsCommand	src/t_hash.c	/^void hexistsCommand(client *c) {$/;"	f
hg_instance	exp/exp2_micro.c	/^struct HotGroupNode hg_instance[] = {$/;"	v	typeref:struct:HotGroupNode
hgetCommand	src/t_hash.c	/^void hgetCommand(client *c) {$/;"	f
hgetallCommand	src/t_hash.c	/^void hgetallCommand(client *c) {$/;"	f
hi_calloc	deps/hiredis/alloc.c	/^void *hi_calloc(size_t nmemb, size_t size) {$/;"	f
hi_calloc	deps/hiredis/alloc.h	/^static inline void *hi_calloc(size_t nmemb, size_t size) {$/;"	f
hi_calloc_fail	deps/hiredis/test.c	/^static void *hi_calloc_fail(size_t nmemb, size_t size) {$/;"	f	file:
hi_free	deps/hiredis/alloc.c	/^void hi_free(void *ptr) {$/;"	f
hi_free	deps/hiredis/alloc.h	/^static inline void hi_free(void *ptr) {$/;"	f
hi_hex_digit_to_int	deps/hiredis/sds.c	/^static int hi_hex_digit_to_int(char c) {$/;"	f	file:
hi_malloc	deps/hiredis/alloc.c	/^void *hi_malloc(size_t size) {$/;"	f
hi_malloc	deps/hiredis/alloc.h	/^static inline void *hi_malloc(size_t size) {$/;"	f
hi_malloc_fail	deps/hiredis/test.c	/^static void *hi_malloc_fail(size_t size) {$/;"	f	file:
hi_malloc_safe	deps/hiredis/test.c	/^void *hi_malloc_safe(size_t size) {$/;"	f
hi_realloc	deps/hiredis/alloc.c	/^void *hi_realloc(void *ptr, size_t size) {$/;"	f
hi_realloc	deps/hiredis/alloc.h	/^static inline void *hi_realloc(void *ptr, size_t size) {$/;"	f
hi_realloc_fail	deps/hiredis/test.c	/^static void *hi_realloc_fail(void *ptr, size_t size) {$/;"	f	file:
hi_s_free	deps/hiredis/sdsalloc.h	44;"	d
hi_s_malloc	deps/hiredis/sdsalloc.h	42;"	d
hi_s_realloc	deps/hiredis/sdsalloc.h	43;"	d
hi_sdsAllocPtr	deps/hiredis/sds.c	/^void *hi_sdsAllocPtr(hisds s) {$/;"	f
hi_sdsAllocSize	deps/hiredis/sds.c	/^size_t hi_sdsAllocSize(hisds s) {$/;"	f
hi_sdsHdrSize	deps/hiredis/sds.c	/^static inline int hi_sdsHdrSize(char type) {$/;"	f	file:
hi_sdsIncrLen	deps/hiredis/sds.c	/^void hi_sdsIncrLen(hisds s, int incr) {$/;"	f
hi_sdsMakeRoomFor	deps/hiredis/sds.c	/^hisds hi_sdsMakeRoomFor(hisds s, size_t addlen) {$/;"	f
hi_sdsRemoveFreeSpace	deps/hiredis/sds.c	/^hisds hi_sdsRemoveFreeSpace(hisds s) {$/;"	f
hi_sdsReqType	deps/hiredis/sds.c	/^static inline char hi_sdsReqType(size_t string_size) {$/;"	f	file:
hi_sdsTest	deps/hiredis/sds.c	/^int hi_sdsTest(void) {$/;"	f
hi_sds_free	deps/hiredis/sds.c	/^void hi_sds_free(void *ptr) { hi_s_free(ptr); }$/;"	f
hi_sds_malloc	deps/hiredis/sds.c	/^void *hi_sds_malloc(size_t size) { return hi_s_malloc(size); }$/;"	f
hi_sds_realloc	deps/hiredis/sds.c	/^void *hi_sds_realloc(void *ptr, size_t size) { return hi_s_realloc(ptr,size); }$/;"	f
hi_sdsalloc	deps/hiredis/sds.h	/^static inline size_t hi_sdsalloc(const hisds s) {$/;"	f
hi_sdsavail	deps/hiredis/sds.h	/^static inline size_t hi_sdsavail(const hisds s) {$/;"	f
hi_sdscat	deps/hiredis/sds.c	/^hisds hi_sdscat(hisds s, const char *t) {$/;"	f
hi_sdscatfmt	deps/hiredis/sds.c	/^hisds hi_sdscatfmt(hisds s, char const *fmt, ...) {$/;"	f
hi_sdscatlen	deps/hiredis/sds.c	/^hisds hi_sdscatlen(hisds s, const void *t, size_t len) {$/;"	f
hi_sdscatprintf	deps/hiredis/sds.c	/^hisds hi_sdscatprintf(hisds s, const char *fmt, ...) {$/;"	f
hi_sdscatrepr	deps/hiredis/sds.c	/^hisds hi_sdscatrepr(hisds s, const char *p, size_t len) {$/;"	f
hi_sdscatsds	deps/hiredis/sds.c	/^hisds hi_sdscatsds(hisds s, const hisds t) {$/;"	f
hi_sdscatvprintf	deps/hiredis/sds.c	/^hisds hi_sdscatvprintf(hisds s, const char *fmt, va_list ap) {$/;"	f
hi_sdsclear	deps/hiredis/sds.c	/^void hi_sdsclear(hisds s) {$/;"	f
hi_sdscmp	deps/hiredis/sds.c	/^int hi_sdscmp(const hisds s1, const hisds s2) {$/;"	f
hi_sdscpy	deps/hiredis/sds.c	/^hisds hi_sdscpy(hisds s, const char *t) {$/;"	f
hi_sdscpylen	deps/hiredis/sds.c	/^hisds hi_sdscpylen(hisds s, const char *t, size_t len) {$/;"	f
hi_sdsdup	deps/hiredis/sds.c	/^hisds hi_sdsdup(const hisds s) {$/;"	f
hi_sdsempty	deps/hiredis/sds.c	/^hisds hi_sdsempty(void) {$/;"	f
hi_sdsfree	deps/hiredis/sds.c	/^void hi_sdsfree(hisds s) {$/;"	f
hi_sdsfreesplitres	deps/hiredis/sds.c	/^void hi_sdsfreesplitres(hisds *tokens, int count) {$/;"	f
hi_sdsfromlonglong	deps/hiredis/sds.c	/^hisds hi_sdsfromlonglong(long long value) {$/;"	f
hi_sdsgrowzero	deps/hiredis/sds.c	/^hisds hi_sdsgrowzero(hisds s, size_t len) {$/;"	f
hi_sdsinclen	deps/hiredis/sds.h	/^static inline void hi_sdsinclen(hisds s, size_t inc) {$/;"	f
hi_sdsjoin	deps/hiredis/sds.c	/^hisds hi_sdsjoin(char **argv, int argc, char *sep) {$/;"	f
hi_sdsjoinsds	deps/hiredis/sds.c	/^hisds hi_sdsjoinsds(hisds *argv, int argc, const char *sep, size_t seplen) {$/;"	f
hi_sdslen	deps/hiredis/sds.h	/^static inline size_t hi_sdslen(const hisds s) {$/;"	f
hi_sdsll2str	deps/hiredis/sds.c	/^int hi_sdsll2str(char *s, long long value) {$/;"	f
hi_sdsmapchars	deps/hiredis/sds.c	/^hisds hi_sdsmapchars(hisds s, const char *from, const char *to, size_t setlen) {$/;"	f
hi_sdsnew	deps/hiredis/sds.c	/^hisds hi_sdsnew(const char *init) {$/;"	f
hi_sdsnewlen	deps/hiredis/sds.c	/^hisds hi_sdsnewlen(const void *init, size_t initlen) {$/;"	f
hi_sdsrange	deps/hiredis/sds.c	/^int hi_sdsrange(hisds s, ssize_t start, ssize_t end) {$/;"	f
hi_sdssetalloc	deps/hiredis/sds.h	/^static inline void hi_sdssetalloc(hisds s, size_t newlen) {$/;"	f
hi_sdssetlen	deps/hiredis/sds.h	/^static inline void hi_sdssetlen(hisds s, size_t newlen) {$/;"	f
hi_sdssplitargs	deps/hiredis/sds.c	/^hisds *hi_sdssplitargs(const char *line, int *argc) {$/;"	f
hi_sdssplitlen	deps/hiredis/sds.c	/^hisds *hi_sdssplitlen(const char *s, int len, const char *sep, int seplen, int *count) {$/;"	f
hi_sdstolower	deps/hiredis/sds.c	/^void hi_sdstolower(hisds s) {$/;"	f
hi_sdstoupper	deps/hiredis/sds.c	/^void hi_sdstoupper(hisds s) {$/;"	f
hi_sdstrim	deps/hiredis/sds.c	/^hisds hi_sdstrim(hisds s, const char *cset) {$/;"	f
hi_sdsull2str	deps/hiredis/sds.c	/^int hi_sdsull2str(char *s, unsigned long long v) {$/;"	f
hi_sdsupdatelen	deps/hiredis/sds.c	/^void hi_sdsupdatelen(hisds s) {$/;"	f
hi_strdup	deps/hiredis/alloc.c	/^char *hi_strdup(const char *str) {$/;"	f
hi_strdup	deps/hiredis/alloc.h	/^static inline char *hi_strdup(const char *str) {$/;"	f
highest_equivalent_value	deps/hdr_histogram/hdr_histogram.c	/^static int64_t highest_equivalent_value(const struct hdr_histogram* h, int64_t value)$/;"	f	file:
highest_equivalent_value	deps/hdr_histogram/hdr_histogram.h	/^    int64_t highest_equivalent_value;$/;"	m	struct:hdr_iter
highest_trackable_value	deps/hdr_histogram/hdr_histogram.h	/^    int64_t highest_trackable_value;$/;"	m	struct:hdr_histogram
highest_trackable_value	deps/hdr_histogram/hdr_histogram.h	/^    int64_t highest_trackable_value;$/;"	m	struct:hdr_histogram_bucket_config
highpages	deps/jemalloc/src/extent.c	/^static atomic_zu_t highpages;$/;"	v	file:
hincrbyCommand	src/t_hash.c	/^void hincrbyCommand(client *c) {$/;"	f
hincrbyfloatCommand	src/t_hash.c	/^void hincrbyfloatCommand(client *c) {$/;"	f
hints	deps/linenoise/example.c	/^char *hints(const char *buf, int *color, int *bold) {$/;"	f
hints	src/redis-cli.c	/^    int hints;$/;"	m	struct:pref	file:
hintsCallback	deps/linenoise/linenoise.c	/^static linenoiseHintsCallback *hintsCallback = NULL;$/;"	v	file:
hintsCallback	src/redis-cli.c	/^static char *hintsCallback(const char *buf, int *color, int *bold) {$/;"	f	file:
hiredisAllocFns	deps/hiredis/alloc.c	/^hiredisAllocFuncs hiredisAllocFns = {$/;"	v
hiredisAllocFuncs	deps/hiredis/alloc.h	/^typedef struct hiredisAllocFuncs {$/;"	s
hiredisAllocFuncs	deps/hiredis/alloc.h	/^} hiredisAllocFuncs;$/;"	t	typeref:struct:hiredisAllocFuncs
hiredisResetAllocators	deps/hiredis/alloc.c	/^void hiredisResetAllocators(void) {$/;"	f
hiredisSetAllocators	deps/hiredis/alloc.c	/^hiredisAllocFuncs hiredisSetAllocators(hiredisAllocFuncs *override) {$/;"	f
hisds	deps/hiredis/sds.h	/^typedef char *hisds;$/;"	t
hisdshdr16	deps/hiredis/sds.h	/^struct __attribute__ ((__packed__)) hisdshdr16 {$/;"	s
hisdshdr32	deps/hiredis/sds.h	/^struct __attribute__ ((__packed__)) hisdshdr32 {$/;"	s
hisdshdr5	deps/hiredis/sds.h	/^struct __attribute__ ((__packed__)) hisdshdr5 {$/;"	s
hisdshdr64	deps/hiredis/sds.h	/^struct __attribute__ ((__packed__)) hisdshdr64 {$/;"	s
hisdshdr8	deps/hiredis/sds.h	/^struct __attribute__ ((__packed__)) hisdshdr8 {$/;"	s
history	deps/linenoise/linenoise.c	/^static char **history = NULL;$/;"	v	file:
history_index	deps/linenoise/linenoise.c	/^    int history_index;  \/* The history index we are currently editing. *\/$/;"	m	struct:linenoiseState	file:
history_len	deps/linenoise/linenoise.c	/^static int history_len = 0;$/;"	v	file:
history_max_len	deps/linenoise/linenoise.c	/^static int history_max_len = LINENOISE_DEFAULT_HISTORY_MAX_LEN;$/;"	v	file:
hits	utils/lru/lfu-simulation.c	/^    uint64_t hits;      \/* Number of real accesses. *\/$/;"	m	struct:entry	file:
hkeysCommand	src/t_hash.c	/^void hkeysCommand(client *c) {$/;"	f
hlenCommand	src/t_hash.c	/^void hlenCommand(client *c) {$/;"	f
hllAdd	src/hyperloglog.c	/^int hllAdd(robj *o, unsigned char *ele, size_t elesize) {$/;"	f
hllCount	src/hyperloglog.c	/^uint64_t hllCount(struct hllhdr *hdr, int *invalid) {$/;"	f
hllDenseAdd	src/hyperloglog.c	/^int hllDenseAdd(uint8_t *registers, unsigned char *ele, size_t elesize) {$/;"	f
hllDenseRegHisto	src/hyperloglog.c	/^void hllDenseRegHisto(uint8_t *registers, int* reghisto) {$/;"	f
hllDenseSet	src/hyperloglog.c	/^int hllDenseSet(uint8_t *registers, long index, uint8_t count) {$/;"	f
hllMerge	src/hyperloglog.c	/^int hllMerge(uint8_t *max, robj *hll) {$/;"	f
hllPatLen	src/hyperloglog.c	/^int hllPatLen(unsigned char *ele, size_t elesize, long *regp) {$/;"	f
hllRawRegHisto	src/hyperloglog.c	/^void hllRawRegHisto(uint8_t *registers, int* reghisto) {$/;"	f
hllSigma	src/hyperloglog.c	/^double hllSigma(double x) {$/;"	f
hllSparseAdd	src/hyperloglog.c	/^int hllSparseAdd(robj *o, unsigned char *ele, size_t elesize) {$/;"	f
hllSparseRegHisto	src/hyperloglog.c	/^void hllSparseRegHisto(uint8_t *sparse, int sparselen, int *invalid, int* reghisto) {$/;"	f
hllSparseSet	src/hyperloglog.c	/^int hllSparseSet(robj *o, long index, uint8_t count) {$/;"	f
hllSparseToDense	src/hyperloglog.c	/^int hllSparseToDense(robj *o) {$/;"	f
hllTau	src/hyperloglog.c	/^double hllTau(double x) {$/;"	f
hll_sparse_max_bytes	src/server.h	/^    size_t hll_sparse_max_bytes;$/;"	m	struct:redisServer
hllhdr	src/hyperloglog.c	/^struct hllhdr {$/;"	s	file:
hmgetCommand	src/t_hash.c	/^void hmgetCommand(client *c) {$/;"	f
hook	deps/jemalloc/test/unit/hooks.c	/^hook() {$/;"	f	file:
hook	deps/lua/src/lstate.h	/^  lua_Hook hook;$/;"	m	struct:lua_State
hook	deps/lua/test/trace-calls.lua	/^local function hook(event)$/;"	f
hook_called	deps/jemalloc/test/unit/hooks.c	/^static bool hook_called = false;$/;"	v	file:
hookcount	deps/lua/src/lstate.h	/^  int hookcount;$/;"	m	struct:lua_State
hookf	deps/lua/src/ldblib.c	/^static void hookf (lua_State *L, lua_Debug *ar) {$/;"	f	file:
hookmask	deps/lua/src/lstate.h	/^  lu_byte hookmask;$/;"	m	struct:lua_State
hooks	deps/jemalloc/test/include/test/extent_hooks.h	/^static extent_hooks_t hooks = {$/;"	v
hooks_arena_new_hook	deps/jemalloc/src/hooks.c	/^void (*hooks_arena_new_hook)() = NULL;$/;"	v
hooks_libc_hook	deps/jemalloc/src/hooks.c	/^void (*hooks_libc_hook)() = NULL;$/;"	v
hooks_not_null	deps/jemalloc/test/unit/base.c	/^static extent_hooks_t hooks_not_null = {$/;"	v	file:
hooks_null	deps/jemalloc/test/unit/base.c	/^static extent_hooks_t hooks_null = {$/;"	v	file:
hooks_orig	deps/jemalloc/test/unit/arena_reset.c	/^static extent_hooks_t hooks_orig;$/;"	v	file:
hooks_unmap	deps/jemalloc/test/unit/arena_reset.c	/^static extent_hooks_t hooks_unmap = {$/;"	v	file:
host	deps/hiredis/hiredis.h	/^        char *host;$/;"	m	struct:redisContext::__anon83
host	deps/hiredis/test.c	/^        const char *host;$/;"	m	struct:config::__anon90	file:
host	deps/hiredis/test.c	/^        const char *host;$/;"	m	struct:config::__anon92	file:
host	exp/exp2_micro.c	/^    char* host;$/;"	m	struct:HotGroupNode	file:
hostip	src/redis-benchmark.c	/^    const char *hostip;$/;"	m	struct:config	file:
hostip	src/redis-cli.c	/^    char *hostip;$/;"	m	struct:config	file:
hostname	src/sentinel.c	/^    char *hostname;         \/* Hostname OR address, as specified *\/$/;"	m	struct:sentinelAddr	file:
hostport	src/redis-benchmark.c	/^    int hostport;$/;"	m	struct:config	file:
hostport	src/redis-cli.c	/^    int hostport;$/;"	m	struct:config	file:
hostsocket	src/redis-benchmark.c	/^    const char *hostsocket;$/;"	m	struct:config	file:
hostsocket	src/redis-cli.c	/^    char *hostsocket;$/;"	m	struct:config	file:
hot	src/server.h	/^    double hot[3];     \/\/ short_time middle_time long_time$/;"	m	struct:hotState
hotState	src/server.h	/^typedef struct hotState {$/;"	s
hotState	src/server.h	/^} hotState;$/;"	t	typeref:struct:hotState
hot_tag	src/server.h	/^    double hot_tag[3]; \/\/ short_time middle_time long_time$/;"	m	struct:hotState
hotgroup	src/cluster.h	/^    } hotgroup;$/;"	m	union:clusterMsgData	typeref:struct:clusterMsgData::__anon42
hotkeys	src/redis-cli.c	/^    int hotkeys;$/;"	m	struct:config	file:
hotness	exp/merge.py	/^hotness=0.0$/;"	v
hotness	src/cluster.h	/^    double hotness[3];$/;"	m	struct:__anon43
hotness	src/cluster.h	/^    int hotness; \/\/ 0 for normal, 1 for hot, -1 for cold$/;"	m	struct:slotState
hotness	src/server.h	/^    int hotness; \/\/ 0 for warm, 1 for hot, -1 for cold.$/;"	m	struct:redisServer
hrandfieldCommand	src/t_hash.c	/^void hrandfieldCommand(client *c) {$/;"	f
hrandfieldWithCountCommand	src/t_hash.c	/^void hrandfieldWithCountCommand(client *c, long l, int withvalues) {$/;"	f
hscanCommand	src/t_hash.c	/^void hscanCommand(client *c) {$/;"	f
hset	src/server.h	/^    *emptyscan, *multi, *exec, *left, *right, *hset, *srem, *xgroup, *xclaim,  $/;"	m	struct:sharedObjectsStruct
hsetCommand	src/t_hash.c	/^void hsetCommand(client *c) {$/;"	f
hsetnxCommand	src/t_hash.c	/^void hsetnxCommand(client *c) {$/;"	f
hstrlenCommand	src/t_hash.c	/^void hstrlenCommand(client *c) {$/;"	f
ht	deps/hiredis/dict.h	/^    dict *ht;$/;"	m	struct:dictIterator
ht	src/dict.h	/^    dictht ht[2];$/;"	m	struct:dict
ht	src/t_zset.c	/^            } ht;$/;"	m	union:__anon2::__anon3::_iterset	typeref:struct:__anon2::__anon3::_iterset::__anon5	file:
htNeedsResize	src/server.c	/^int htNeedsResize(dict *dict) {$/;"	f
htonu64	src/endianconv.h	67;"	d
htonu64	src/endianconv.h	70;"	d
hvalsCommand	src/t_hash.c	/^void hvalsCommand(client *c) {$/;"	f
hvalue	deps/lua/src/lobject.h	99;"	d
hz	src/redismodule.h	/^    int32_t hz;             \/* Approximate number of events per second. *\/$/;"	m	struct:RedisModuleCronLoopInfo
hz	src/redismodule.h	/^    int32_t hz;             \/* Approximate number of events per second. *\/$/;"	m	struct:RedisModuleLoadingProgressInfo
hz	src/server.h	/^    int hz;                     \/* serverCron() calls frequency in hertz *\/$/;"	m	struct:redisServer
hz	src/server.h	1160;"	d
i	exp/slot_log_dealer.py	/^i = 0$/;"	v
i	src/config.c	/^        int *i;$/;"	m	union:numericConfigData::__anon45	file:
i64	src/bitops.c	/^    int64_t i64;        \/* Increment amount (INCRBY) or SET value *\/$/;"	m	struct:bitfieldOp	file:
iABC	deps/lua/src/lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
iABx	deps/lua/src/lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
iAmMaster	src/server.c	/^int iAmMaster(void) {$/;"	f
iAsBx	deps/lua/src/lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
i_ci	deps/lua/src/lua.h	/^  int i_ci;  \/* active function *\/$/;"	m	struct:lua_Debug
i_gamma	deps/jemalloc/test/include/test/math.h	/^i_gamma(double x, double p, double ln_gamma_p) {$/;"	f
i_key	deps/lua/src/lobject.h	/^  TKey i_key;$/;"	m	struct:Node
i_val	deps/lua/src/lobject.h	/^  TValue i_val;$/;"	m	struct:Node
iaalloc	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_c.h	/^iaalloc(tsdn_t *tsdn, const void *ptr) {$/;"	f
ialloc	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_c.h	/^ialloc(tsd_t *tsd, size_t size, szind_t ind, bool zero, bool slow_path) {$/;"	f
iallocztm	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_c.h	/^iallocztm(tsdn_t *tsdn, size_t size, szind_t ind, bool zero, tcache_t *tcache,$/;"	f
iarena_cleanup	deps/jemalloc/src/jemalloc.c	/^iarena_cleanup(tsd_t *tsd) {$/;"	f
id	deps/jemalloc/test/unit/ql.c	/^	char id;$/;"	m	struct:list_s	file:
id	deps/jemalloc/test/unit/qr.c	/^	char id;$/;"	m	struct:ring_s	file:
id	src/ae.h	/^    long long id; \/* time event identifier. *\/$/;"	m	struct:aeTimeEvent
id	src/redismodule.h	/^    uint64_t id;            \/* Client ID. *\/$/;"	m	struct:RedisModuleClientInfo
id	src/redismodule.h	/^    uint64_t id;        \/* REDISMODULE_EVENT_... defines. *\/$/;"	m	struct:RedisModuleEvent
id	src/server.h	/^    int id;                     \/* Database ID *\/$/;"	m	struct:redisDb
id	src/server.h	/^    int id;     \/* Command ID. This is a progressive ID starting from 0 that$/;"	m	struct:redisCommand
id	src/server.h	/^    uint64_t id;            \/* Client incremental unique ID. *\/$/;"	m	struct:client
id	src/server.h	/^    uint64_t id; \/* Higher 54 bits of type ID + 10 lower bits of encoding ver. *\/$/;"	m	struct:RedisModuleType
id	src/slowlog.h	/^    long long id;       \/* Unique entry identifier. *\/$/;"	m	struct:slowlogEntry
id	src/t_stream.c	/^    streamID id; \/* User-provided ID, for XADD only. *\/$/;"	m	struct:__anon11	file:
id_given	src/t_stream.c	/^    int id_given; \/* Was an ID different than "*" specified? for XADD only. *\/$/;"	m	struct:__anon11	file:
idalloc	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_c.h	/^idalloc(tsd_t *tsd, void *ptr) {$/;"	f
idalloctm	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_c.h	/^idalloctm(tsdn_t *tsdn, void *ptr, tcache_t *tcache, alloc_ctx_t *alloc_ctx,$/;"	f
idle	src/evict.c	/^    unsigned long long idle;    \/* Object idle time (inverse frequency for LFU) *\/$/;"	m	struct:evictionPoolEntry	file:
idlemode	src/redis-benchmark.c	/^    int idlemode;$/;"	m	struct:config	file:
idx	deps/hiredis/read.h	/^    int idx; \/* index in parent (array) object *\/$/;"	m	struct:redisReadTask
idx	deps/jemalloc/test/src/SFMT.c	/^    int idx;$/;"	m	struct:sfmt_s	file:
idx	src/latency.h	/^    int idx; \/* Index of the next sample to store. *\/$/;"	m	struct:latencyTimeSeries
idx	src/server.h	/^        int idx;$/;"	m	struct:redisServer::__anon20
idxof	deps/jemalloc/test/src/SFMT.c	/^static inline int idxof(int i) {$/;"	f	file:
iealloc	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_b.h	/^iealloc(tsdn_t *tsdn, const void *ptr) {$/;"	f
ifd	deps/linenoise/linenoise.c	/^    int ifd;            \/* Terminal stdin file descriptor. *\/$/;"	m	struct:linenoiseState	file:
ifree	deps/jemalloc/src/jemalloc.c	/^ifree(tsd_t *tsd, void *ptr, tcache_t *tcache, bool slow_path) {$/;"	f
ifstat	deps/lua/src/lparser.c	/^static void ifstat (LexState *ls, int line) {$/;"	f	file:
iget_defrag_hint	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_c.h	/^iget_defrag_hint(tsdn_t *tsdn, void* ptr) {$/;"	f
ignore_warnings	src/server.h	/^    char *ignore_warnings;      \/* Config: warnings that should be ignored. *\/$/;"	m	struct:redisServer
ii	src/server.h	/^    int ii; \/* intset iterator *\/$/;"	m	struct:__anon25
ii	src/t_zset.c	/^                int ii;$/;"	m	struct:__anon2::__anon3::_iterset::__anon4	file:
imalloc	deps/jemalloc/src/jemalloc.c	/^imalloc(static_opts_t *sopts, dynamic_opts_t *dopts) {$/;"	f
imalloc_body	deps/jemalloc/src/jemalloc.c	/^imalloc_body(static_opts_t *sopts, dynamic_opts_t *dopts, tsd_t *tsd) {$/;"	f
imalloc_no_sample	deps/jemalloc/src/jemalloc.c	/^imalloc_no_sample(static_opts_t *sopts, dynamic_opts_t *dopts, tsd_t *tsd,$/;"	f
imalloc_sample	deps/jemalloc/src/jemalloc.c	/^imalloc_sample(static_opts_t *sopts, dynamic_opts_t *dopts, tsd_t *tsd,$/;"	f
importing	src/redis-benchmark.c	/^    sds *importing; \/* An array of sds where even strings are slots and odd$/;"	m	struct:clusterNode	file:
importing	src/redis-cli.c	/^    sds *importing; \/* An array of sds where even strings are slots and odd$/;"	m	struct:clusterManagerNode	file:
importing_count	src/redis-benchmark.c	/^    int importing_count; \/* Length of the importing array (importing slots*2) *\/$/;"	m	struct:clusterNode	file:
importing_count	src/redis-cli.c	/^    int importing_count; \/* Length of the importing array (importing slots*2) *\/$/;"	m	struct:clusterManagerNode	file:
importing_slots_from	src/cluster.h	/^    clusterNode *importing_slots_from[CLUSTER_SLOTS];$/;"	m	struct:clusterState
in_call	src/module.c	/^    int in_call;    \/* RM_Call() nesting level *\/$/;"	m	struct:RedisModule	file:
in_dict_field	src/module.c	/^    int in_dict_field;  \/* indication that we're currently appending to a dict *\/$/;"	m	struct:RedisModuleInfoCtx	file:
in_eval	src/server.h	/^    int in_eval;                \/* Are we inside EVAL? *\/$/;"	m	struct:redisServer
in_exec	src/server.h	/^    int in_exec;                \/* Are we inside EXEC? *\/$/;"	m	struct:redisServer
in_fork_child	src/server.h	/^    int in_fork_child;          \/* indication that this is a fork child *\/$/;"	m	struct:redisServer
in_hook	src/module.c	/^    int in_hook;    \/* Hooks callback nesting level for this module (0 or 1). *\/$/;"	m	struct:RedisModule	file:
in_log_command	tests/modules/commandfilter.c	/^static int in_log_command = 0;$/;"	v	file:
in_multi	src/redis-cli.c	/^    int in_multi;$/;"	m	struct:config	file:
in_section	src/module.c	/^    int in_section;     \/* indication if we're in an active section or not *\/$/;"	m	struct:RedisModuleInfoCtx	file:
inallocx	deps/jemalloc/src/jemalloc.c	/^inallocx(tsdn_t *tsdn, size_t size, int flags) {$/;"	f
inc_ci	deps/lua/src/ldo.c	260;"	d	file:
inclinenumber	deps/lua/src/llex.c	/^static void inclinenumber (LexState *ls) {$/;"	f	file:
include_rows	deps/jemalloc/scripts/gen_travis.py	/^include_rows = ""$/;"	v
incomplete	deps/lua/src/lua.c	/^static int incomplete (lua_State *L, int status) {$/;"	f	file:
incrCommand	src/t_string.c	/^void incrCommand(client *c) {$/;"	f
incrDecrCommand	src/t_string.c	/^void incrDecrCommand(client *c, long long incr) {$/;"	f
incrRefCount	src/object.c	/^void incrRefCount(robj *o) {$/;"	f
incr_top	deps/lua/src/ldo.h	22;"	d
incrbyCommand	src/t_string.c	/^void incrbyCommand(client *c) {$/;"	f
incrbyfloatCommand	src/t_string.c	/^void incrbyfloatCommand(client *c) {$/;"	f
increment	deps/lua/src/strbuf.h	/^    int increment;$/;"	m	struct:__anon105
incrementErrorCount	src/server.c	/^void incrementErrorCount(const char *fullerr, size_t namelen) {$/;"	f
incrementallyRehash	src/server.c	/^int incrementallyRehash(int dbid) {$/;"	f
ind	deps/jemalloc/include/jemalloc/internal/base_structs.h	/^	unsigned	ind;$/;"	m	struct:base_s
ind	deps/jemalloc/scripts/gen_run_tests.py	/^ind = 0$/;"	v
indefinite_sleep	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^	atomic_b_t		indefinite_sleep;$/;"	m	struct:background_thread_info_s
index	deps/hiredis/dict.h	/^    int index;$/;"	m	struct:dictIterator
index	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	const ctl_named_node_t *(*index)(tsdn_t *, const size_t *, size_t,$/;"	m	struct:ctl_indexed_node_s
index	deps/lua/doc/contents.html	/^<H2><A NAME="index">Index<\/A><\/H2>$/;"	a
index	deps/lua/src/lua_cjson.c	/^    int index;$/;"	m	struct:__anon103	file:
index	exp/merge.py	/^    index = 1;$/;"	v
index	exp/slot_log_dealer.py	/^        index = int(before[m][0])$/;"	v
index	src/dict.h	/^    long index;$/;"	m	struct:dictIterator
index	src/redis-benchmark.c	/^    int index;$/;"	m	struct:benchmarkThread	file:
index2adr	deps/lua/src/lapi.c	/^static TValue *index2adr (lua_State *L, int idx) {$/;"	f	file:
indexupvalue	deps/lua/src/lparser.c	/^static int indexupvalue (FuncState *fs, TString *name, expdesc *v) {$/;"	f	file:
info	deps/lua/src/lparser.h	/^    struct { int info, aux; } s;$/;"	m	struct:expdesc::__anon94::__anon95
info	deps/lua/src/lparser.h	/^  lu_byte info;$/;"	m	struct:upvaldesc
info	src/module.c	/^    sds info;           \/* info string we collected so far *\/$/;"	m	struct:RedisModuleInfoCtx	file:
info	src/sentinel.c	/^    sds info; \/* cached INFO output *\/$/;"	m	struct:sentinelRedisInstance	file:
infoCommand	src/server.c	/^void infoCommand(client *c) {$/;"	f
info_cb	src/module.c	/^    RedisModuleInfoFunc info_cb; \/* Callback for module to add INFO fields. *\/$/;"	m	struct:RedisModule	file:
info_get	tests/modules/infotest.c	/^int info_get(RedisModuleCtx *ctx, RedisModuleString **argv, int argc, char field_type)$/;"	f
info_getc	tests/modules/infotest.c	/^int info_getc(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
info_getd	tests/modules/infotest.c	/^int info_getd(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
info_geti	tests/modules/infotest.c	/^int info_geti(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
info_gets	tests/modules/infotest.c	/^int info_gets(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
info_getu	tests/modules/infotest.c	/^int info_getu(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
info_memory	tests/unit/pendingquerybuf.tcl	/^proc info_memory {r property} {$/;"	p
info_refresh	src/sentinel.c	/^    mstime_t info_refresh;  \/* Time at which we received INFO output from it. *\/$/;"	m	struct:sentinelRedisInstance	file:
info_section_from_redis	src/sentinel.c	3893;"	d	file:
info_tailcall	deps/lua/src/ldebug.c	/^static void info_tailcall (lua_Debug *ar) {$/;"	f	file:
information_type	src/childinfo.c	/^    childInfoType information_type; \/* Type of information *\/$/;"	m	struct:__anon30	file:
init	deps/lua/src/lstrlib.c	/^    const char *init;$/;"	m	struct:MatchState::__anon114	file:
init	src/config.c	/^    void (*init)(typeData data);$/;"	m	struct:typeInterface	file:
initBenchmarkThreads	src/redis-benchmark.c	/^static void initBenchmarkThreads() {$/;"	f	file:
initClientMultiState	src/multi.c	/^void initClientMultiState(client *c) {$/;"	f
initConfigValues	src/config.c	/^void initConfigValues() {$/;"	f
initCryptoLocks	src/tls.c	/^static void initCryptoLocks(void) {$/;"	f	file:
initEntry	src/quicklist.c	82;"	d	file:
initOpensslLocks	deps/hiredis/ssl.c	/^static int initOpensslLocks(void) {$/;"	f	file:
initSentinel	src/sentinel.c	/^void initSentinel(void) {$/;"	f
initSentinelConfig	src/sentinel.c	/^void initSentinelConfig(void) {$/;"	f
initServer	src/server.c	/^void initServer(void) {$/;"	f
initServerConfig	src/server.c	/^void initServerConfig(void) {$/;"	f
initStaticStringObject	src/server.h	703;"	d
initThreadedIO	src/networking.c	/^void initThreadedIO(void) {$/;"	f
init_by_array	deps/jemalloc/test/src/SFMT.c	/^sfmt_t *init_by_array(uint32_t *init_key, int key_length) {$/;"	f
init_by_array64	src/mt19937-64.c	/^void init_by_array64(unsigned long long init_key[],$/;"	f
init_by_array_32_expected	deps/jemalloc/test/unit/SFMT.c	/^static const uint32_t init_by_array_32_expected[] = {$/;"	v	file:
init_by_array_64_expected	deps/jemalloc/test/unit/SFMT.c	/^static const uint64_t init_by_array_64_expected[] = {$/;"	v	file:
init_entries	deps/jemalloc/test/unit/ql.c	/^init_entries(list_t *entries, unsigned nentries) {$/;"	f	file:
init_entries	deps/jemalloc/test/unit/qr.c	/^init_entries(ring_t *entries) {$/;"	f	file:
init_exp	deps/lua/src/lparser.c	/^static void init_exp (expdesc *e, expkind k, int i) {$/;"	f	file:
init_gen_rand	deps/jemalloc/test/src/SFMT.c	/^sfmt_t *init_gen_rand(uint32_t seed) {$/;"	f
init_gen_rand_32_expected	deps/jemalloc/test/unit/SFMT.c	/^static const uint32_t init_gen_rand_32_expected[] = {$/;"	v	file:
init_gen_rand_64_expected	deps/jemalloc/test/unit/SFMT.c	/^static const uint64_t init_gen_rand_64_expected[] = {$/;"	v	file:
init_genrand64	src/mt19937-64.c	/^void init_genrand64(unsigned long long seed)$/;"	f
init_init_lock	deps/jemalloc/src/jemalloc.c	/^static const void (WINAPI *init_init_lock)(void) = _init_init_lock;$/;"	v	file:
init_lock	deps/jemalloc/include/jemalloc/internal/rtree.h	/^	malloc_mutex_t		init_lock;$/;"	m	struct:rtree_s
init_lock	deps/jemalloc/src/jemalloc.c	/^static malloc_mutex_t	init_lock = MALLOC_MUTEX_INITIALIZER;$/;"	v	file:
init_lock	deps/jemalloc/src/jemalloc.c	/^static malloc_mutex_t	init_lock = SRWLOCK_INIT;$/;"	v	file:
init_lock	deps/jemalloc/src/jemalloc.c	/^static malloc_mutex_t	init_lock;$/;"	v	file:
init_lock_initialized	deps/jemalloc/src/jemalloc.c	/^static bool init_lock_initialized = false;$/;"	v	file:
init_opt_stats_print_opts	deps/jemalloc/src/jemalloc.c	/^init_opt_stats_print_opts(const char *v, size_t vlen) {$/;"	f	file:
init_system_thp_mode	deps/jemalloc/src/pages.c	/^thp_mode_t init_system_thp_mode;$/;"	v
init_thp_state	deps/jemalloc/src/pages.c	/^init_thp_state(void) {$/;"	f	file:
initial_memory_usage	src/server.h	/^    size_t initial_memory_usage; \/* Bytes used after initialization. *\/$/;"	m	struct:redisServer
initializeSentinelConfig	src/sentinel.c	/^void initializeSentinelConfig() {$/;"	f
initialized	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	bool initialized;$/;"	m	struct:ctl_arena_s
initialized	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^	bool initialized;$/;"	m	struct:__anon142
initialized	deps/jemalloc/include/jemalloc/internal/tsd_win.h	/^	bool initialized;$/;"	m	struct:__anon141
initialized	deps/jemalloc/test/src/SFMT.c	/^    int initialized;$/;"	m	struct:sfmt_s	file:
inline	deps/hiredis/win32.h	8;"	d
inline	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	10;"	d
inline	src/lzf_c.c	80;"	d	file:
inline	src/lzf_c.c	83;"	d	file:
inputCatSds	src/object.c	/^void inputCatSds(void *result, const char *str) {$/;"	f
insertHelper	src/ziplist.c	/^static unsigned char *insertHelper(unsigned char *zl, char ch, size_t len, unsigned char *pos) {$/;"	f	file:
inst_metric	src/server.h	/^    } inst_metric[STATS_METRIC_COUNT];$/;"	m	struct:redisServer	typeref:struct:redisServer::__anon20
install_suffix	deps/jemalloc/Makefile	/^install_suffix := $/;"	m
instanceHotMetric	src/server.c	/^void instanceHotMetric(int time_period, int tag) {$/;"	f
instanceHotMetricUpdate	src/cluster.c	/^void instanceHotMetricUpdate() {$/;"	f
instanceHotnessMetric	src/server.c	/^void instanceHotnessMetric() {$/;"	f
instanceLink	src/sentinel.c	/^typedef struct instanceLink {$/;"	s	file:
instanceLink	src/sentinel.c	/^} instanceLink;$/;"	t	typeref:struct:instanceLink	file:
instanceLinkCloseConnection	src/sentinel.c	/^void instanceLinkCloseConnection(instanceLink *link, redisAsyncContext *c) {$/;"	f
instanceLinkConnectionError	src/sentinel.c	/^void instanceLinkConnectionError(const redisAsyncContext *c) {$/;"	f
instanceLinkNegotiateTLS	src/sentinel.c	/^static int instanceLinkNegotiateTLS(redisAsyncContext *context) {$/;"	f	file:
instance_is_killed	tests/instances.tcl	/^proc instance_is_killed {type id} {$/;"	p
instancesDictType	src/sentinel.c	/^dictType instancesDictType = {$/;"	v
int16_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^   typedef signed __int16    int16_t;$/;"	t
int16_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^   typedef signed short      int16_t;$/;"	t
int32_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^   typedef signed __int32    int32_t;$/;"	t
int32_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^   typedef signed int        int32_t;$/;"	t
int32_t	deps/lua/src/lua_bit.c	/^typedef __int32 int32_t;$/;"	t	file:
int64_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef signed __int64       int64_t;$/;"	t
int8_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^   typedef signed __int8     int8_t;$/;"	t
int8_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^   typedef signed char       int8_t;$/;"	t
int_fast16_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef int16_t   int_fast16_t;$/;"	t
int_fast32_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef int32_t   int_fast32_t;$/;"	t
int_fast64_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef int64_t   int_fast64_t;$/;"	t
int_fast8_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef int8_t    int_fast8_t;$/;"	t
int_least16_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef int16_t   int_least16_t;$/;"	t
int_least32_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef int32_t   int_least32_t;$/;"	t
int_least64_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef int64_t   int_least64_t;$/;"	t
int_least8_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef int8_t    int_least8_t;$/;"	t
int_val	deps/jemalloc/include/jemalloc/internal/emitter.h	/^		int int_val;$/;"	m	union:emitter_col_s::__anon136
integer	deps/hiredis/hiredis.h	/^    long long integer; \/* The integer when type is REDIS_REPLY_INTEGER *\/$/;"	m	struct:redisReply
integers	src/server.h	/^    *integers[OBJ_SHARED_INTEGERS],$/;"	m	struct:sharedObjectsStruct
interactive	src/redis-cli.c	/^    int interactive;$/;"	m	struct:config	file:
interface	src/config.c	/^    typeInterface interface; \/* The function pointers that define the type interface *\/$/;"	m	struct:standardConfig	file:
interleave64	src/geohash.c	/^static inline uint64_t interleave64(uint32_t xlo, uint32_t ylo) {$/;"	f	file:
internal	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	atomic_zu_t		internal;$/;"	m	struct:arena_stats_s
interval	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	nstime_t		interval;$/;"	m	struct:arena_decay_s
interval	src/redis-cli.c	/^    long interval;$/;"	m	struct:config	file:
intmax_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef int64_t   intmax_t;$/;"	t
intptr_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^   typedef _W64 signed int   intptr_t;$/;"	t
intptr_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^   typedef signed __int64    intptr_t;$/;"	t
intrev16	src/endianconv.c	/^uint16_t intrev16(uint16_t v) {$/;"	f
intrev16ifbe	src/endianconv.h	52;"	d
intrev16ifbe	src/endianconv.h	59;"	d
intrev32	src/endianconv.c	/^uint32_t intrev32(uint32_t v) {$/;"	f
intrev32ifbe	src/endianconv.h	53;"	d
intrev32ifbe	src/endianconv.h	60;"	d
intrev64	src/endianconv.c	/^uint64_t intrev64(uint64_t v) {$/;"	f
intrev64ifbe	src/endianconv.h	54;"	d
intrev64ifbe	src/endianconv.h	61;"	d
intrinsicLatencyMode	src/redis-cli.c	/^static void intrinsicLatencyMode(void) {$/;"	f	file:
intrinsicLatencyModeStop	src/redis-cli.c	/^static void intrinsicLatencyModeStop(int s) {$/;"	f	file:
intrinsic_latency_duration	src/redis-cli.c	/^    int intrinsic_latency_duration;$/;"	m	struct:config	file:
intrinsic_latency_mode	src/redis-cli.c	/^    int intrinsic_latency_mode;$/;"	m	struct:config	file:
introspect	deps/jemalloc/src/zone.c	/^	struct malloc_introspection_t *introspect;$/;"	m	struct:_malloc_zone_t	typeref:struct:_malloc_zone_t::malloc_introspection_t	file:
intset	src/intset.h	/^typedef struct intset {$/;"	s
intset	src/intset.h	/^} intset;$/;"	t	typeref:struct:intset
intsetAdd	src/intset.c	/^intset *intsetAdd(intset *is, int64_t value, uint8_t *success) {$/;"	f
intsetBlobLen	src/intset.c	/^size_t intsetBlobLen(intset *is) {$/;"	f
intsetFind	src/intset.c	/^uint8_t intsetFind(intset *is, int64_t value) {$/;"	f
intsetGet	src/intset.c	/^uint8_t intsetGet(intset *is, uint32_t pos, int64_t *value) {$/;"	f
intsetLen	src/intset.c	/^uint32_t intsetLen(const intset *is) {$/;"	f
intsetMoveTail	src/intset.c	/^static void intsetMoveTail(intset *is, uint32_t from, uint32_t to) {$/;"	f	file:
intsetNew	src/intset.c	/^intset *intsetNew(void) {$/;"	f
intsetRandom	src/intset.c	/^int64_t intsetRandom(intset *is) {$/;"	f
intsetRemove	src/intset.c	/^intset *intsetRemove(intset *is, int64_t value, int *success) {$/;"	f
intsetResize	src/intset.c	/^static intset *intsetResize(intset *is, uint32_t len) {$/;"	f	file:
intsetSearch	src/intset.c	/^static uint8_t intsetSearch(intset *is, int64_t value, uint32_t *pos) {$/;"	f	file:
intsetTest	src/intset.c	/^int intsetTest(int argc, char **argv, int accurate) {$/;"	f
intsetUpgradeAndAdd	src/intset.c	/^static intset *intsetUpgradeAndAdd(intset *is, int64_t value) {$/;"	f	file:
intsetValidateIntegrity	src/intset.c	/^int intsetValidateIntegrity(const unsigned char *p, size_t size, int deep) {$/;"	f
intval	tests/modules/datatype.c	/^    long long intval;$/;"	m	struct:__anon79	file:
invalid	deps/hiredis/async.h	/^        redisCallbackList invalid;$/;"	m	struct:redisAsyncContext::__anon88
invalid_alignment_string	deps/jemalloc/src/jemalloc.c	/^	const char *invalid_alignment_string;$/;"	m	struct:static_opts_s	file:
invalid_hll_err	src/hyperloglog.c	/^static char *invalid_hll_err = "-INVALIDOBJ Corrupted HLL object detected";$/;"	v	file:
invertjump	deps/lua/src/lcode.c	/^static void invertjump (FuncState *fs, expdesc *e) {$/;"	f	file:
io	src/rio.h	/^    } io;$/;"	m	struct:_rio	typeref:union:_rio::__anon54
io_close	deps/lua/src/liolib.c	/^static int io_close (lua_State *L) {$/;"	f	file:
io_fclose	deps/lua/src/liolib.c	/^static int io_fclose (lua_State *L) {$/;"	f	file:
io_flush	deps/lua/src/liolib.c	/^static int io_flush (lua_State *L) {$/;"	f	file:
io_gc	deps/lua/src/liolib.c	/^static int io_gc (lua_State *L) {$/;"	f	file:
io_input	deps/lua/src/liolib.c	/^static int io_input (lua_State *L) {$/;"	f	file:
io_lines	deps/lua/src/liolib.c	/^static int io_lines (lua_State *L) {$/;"	f	file:
io_noclose	deps/lua/src/liolib.c	/^static int io_noclose (lua_State *L) {$/;"	f	file:
io_open	deps/lua/src/liolib.c	/^static int io_open (lua_State *L) {$/;"	f	file:
io_output	deps/lua/src/liolib.c	/^static int io_output (lua_State *L) {$/;"	f	file:
io_pclose	deps/lua/src/liolib.c	/^static int io_pclose (lua_State *L) {$/;"	f	file:
io_popen	deps/lua/src/liolib.c	/^static int io_popen (lua_State *L) {$/;"	f	file:
io_read	deps/lua/src/liolib.c	/^static int io_read (lua_State *L) {$/;"	f	file:
io_readline	deps/lua/src/liolib.c	/^static int io_readline (lua_State *L) {$/;"	f	file:
io_threads	src/networking.c	/^pthread_t io_threads[IO_THREADS_MAX_NUM];$/;"	v
io_threads_active	src/server.h	/^    int io_threads_active;      \/* Is IO threads currently active? *\/$/;"	m	struct:redisServer
io_threads_do_reads	src/server.h	/^    int io_threads_do_reads;    \/* Read and parse from IO threads? *\/$/;"	m	struct:redisServer
io_threads_list	src/networking.c	/^list *io_threads_list[IO_THREADS_MAX_NUM];$/;"	v
io_threads_mutex	src/networking.c	/^pthread_mutex_t io_threads_mutex[IO_THREADS_MAX_NUM];$/;"	v
io_threads_num	src/server.h	/^    int io_threads_num;         \/* Number of IO threads to use. *\/$/;"	m	struct:redisServer
io_threads_op	src/networking.c	/^int io_threads_op;      \/* IO_THREADS_OP_WRITE or IO_THREADS_OP_READ. *\/$/;"	v
io_threads_pending	src/networking.c	/^redisAtomic unsigned long io_threads_pending[IO_THREADS_MAX_NUM];$/;"	v
io_tmpfile	deps/lua/src/liolib.c	/^static int io_tmpfile (lua_State *L) {$/;"	f	file:
io_tostring	deps/lua/src/liolib.c	/^static int io_tostring (lua_State *L) {$/;"	f	file:
io_type	deps/lua/src/liolib.c	/^static int io_type (lua_State *L) {$/;"	f	file:
io_write	deps/lua/src/liolib.c	/^static int io_write (lua_State *L) {$/;"	f	file:
ioctl	deps/hiredis/sockcompat.h	80;"	d
iolib	deps/lua/src/liolib.c	/^static const luaL_Reg iolib[] = {$/;"	v	file:
ip	deps/hiredis/hiredis.h	/^            const char *ip;$/;"	m	struct:__anon80::__anon81::__anon82
ip	src/cluster.h	/^    char ip[NET_IP_STR_LEN];  \/* IP address last time it was seen *\/$/;"	m	struct:__anon31
ip	src/cluster.h	/^    char ip[NET_IP_STR_LEN];  \/* Latest known IP address of this node *\/$/;"	m	struct:clusterNode
ip	src/module.c	/^    char ip[NET_IP_STR_LEN];$/;"	m	struct:moduleClusterNodeInfo	file:
ip	src/redis-benchmark.c	/^    char *ip;$/;"	m	struct:clusterNode	file:
ip	src/redis-cli.c	/^    char *ip;$/;"	m	struct:clusterManagerNode	file:
ip	src/sentinel.c	/^    char *ip;               \/* Always a resolved address *\/$/;"	m	struct:sentinelAddr	file:
ip_len	src/anet.h	49;"	d
ipairsaux	deps/lua/src/lbaselib.c	/^static int ipairsaux (lua_State *L) {$/;"	f	file:
ipalloc	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_c.h	/^ipalloc(tsd_t *tsd, size_t usize, size_t alignment, bool zero) {$/;"	f
ipalloct	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_c.h	/^ipalloct(tsdn_t *tsdn, size_t usize, size_t alignment, bool zero,$/;"	f
ipallocztm	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_c.h	/^ipallocztm(tsdn_t *tsdn, size_t usize, size_t alignment, bool zero,$/;"	f
ipfd	src/server.h	/^    socketFds ipfd;             \/* TCP socket file descriptors *\/$/;"	m	struct:redisServer
iralloc	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_c.h	/^iralloc(tsd_t *tsd, void *ptr, size_t oldsize, size_t size, size_t alignment,$/;"	f
iralloct	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_c.h	/^iralloct(tsdn_t *tsdn, void *ptr, size_t oldsize, size_t size, size_t alignment,$/;"	f
iralloct_realign	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_c.h	/^iralloct_realign(tsdn_t *tsdn, void *ptr, size_t oldsize, size_t size,$/;"	f
irallocx_prof	deps/jemalloc/src/jemalloc.c	/^irallocx_prof(tsd_t *tsd, void *old_ptr, size_t old_usize, size_t size,$/;"	f
irallocx_prof_sample	deps/jemalloc/src/jemalloc.c	/^irallocx_prof_sample(tsdn_t *tsdn, void *old_ptr, size_t old_usize,$/;"	f	file:
irealloc_prof	deps/jemalloc/src/jemalloc.c	/^irealloc_prof(tsd_t *tsd, void *old_ptr, size_t old_usize, size_t usize,$/;"	f
irealloc_prof_sample	deps/jemalloc/src/jemalloc.c	/^irealloc_prof_sample(tsd_t *tsd, void *old_ptr, size_t old_usize, size_t usize,$/;"	f	file:
is	src/t_zset.c	/^                intset *is;$/;"	m	struct:__anon2::__anon3::_iterset::__anon4	file:
is	src/t_zset.c	/^            } is;$/;"	m	union:__anon2::__anon3::_iterset	typeref:struct:__anon2::__anon3::_iterset::__anon4	file:
isColorTerm	src/redis-cli.c	/^int isColorTerm(void) {$/;"	f
isEvictionProcRunning	src/evict.c	/^static int isEvictionProcRunning = 0;$/;"	v	file:
isHLLObjectOrReply	src/hyperloglog.c	/^int isHLLObjectOrReply(client *c, robj *o) {$/;"	f
isHexChar	src/redis-cli.c	357;"	d	file:
isInvalidateReply	src/redis-cli.c	/^static int isInvalidateReply(redisReply *reply) {$/;"	f	file:
isLfunction	deps/lua/src/lobject.h	316;"	d
isLua	deps/lua/src/lstate.h	62;"	d
isMutuallyExclusiveChildType	src/server.c	/^int isMutuallyExclusiveChildType(int type) {$/;"	f
isObjectRepresentableAsLongLong	src/object.c	/^int isObjectRepresentableAsLongLong(robj *o, long long *llval) {$/;"	f
isSafeToPerformEvictions	src/evict.c	/^static int isSafeToPerformEvictions(void) {$/;"	f	file:
isSdsRepresentableAsLongLong	src/object.c	/^int isSdsRepresentableAsLongLong(sds s, long long *llval) {$/;"	f
isUnsupportedTerm	deps/linenoise/linenoise.c	/^static int isUnsupportedTerm(void) {$/;"	f	file:
isValidAOFfilename	src/config.c	/^static int isValidAOFfilename(char *val, const char **err) {$/;"	f	file:
isValidDBfilename	src/config.c	/^static int isValidDBfilename(char *val, const char **err) {$/;"	f	file:
isValidProcTitleTemplate	src/config.c	/^static int isValidProcTitleTemplate(char *val, const char **err) {$/;"	f	file:
is_a_slow_computer	tests/test_helper.tcl	/^proc is_a_slow_computer {} {$/;"	p
is_alive	tests/instances.tcl	/^proc is_alive pid {$/;"	p
is_alive	tests/support/server.tcl	/^proc is_alive config {$/;"	p
is_copied	src/cluster.h	/^    int is_copied;$/;"	m	struct:slotState
is_copying	src/cluster.h	/^    int is_copying;$/;"	m	struct:slotState
is_fetching_slots	src/redis-benchmark.c	/^    redisAtomic int is_fetching_slots;$/;"	m	struct:config	file:
is_func_line	src/modules/gendoc.rb	/^def is_func_line(src, i)$/;"	f
is_hex_digit	src/sds.c	/^int is_hex_digit(char c) {$/;"	f
is_hot_instance	src/cluster.h	/^    int is_hot_instance;$/;"	m	struct:clusterNode
is_hot_instance	src/cluster.h	/^    uint16_t is_hot_instance;$/;"	m	struct:__anon43
is_leap_year	src/localtime.c	/^static int is_leap_year(time_t year) {$/;"	f	file:
is_memory	src/config.c	/^    int is_memory; \/* Indicates if this value can be loaded as a memory value *\/$/;"	m	struct:numericConfigData	file:
is_section_doc	src/modules/gendoc.rb	/^def is_section_doc(src, i)$/;"	f
is_sync	src/cluster.h	/^    bool is_sync;$/;"	m	struct:clusterState
is_synced	src/cluster.h	/^    int is_synced;$/;"	m	struct:slotState
is_updating_slots	src/redis-benchmark.c	/^    redisAtomic int is_updating_slots;$/;"	m	struct:config	file:
is_updating_slots_mutex	src/redis-benchmark.c	/^    pthread_mutex_t is_updating_slots_mutex;$/;"	m	struct:config	file:
is_valid_fn	src/config.c	/^    int (*is_valid_fn)(char* val, const char **err); \/* Optional function to check validity of new value (generic doc above) *\/$/;"	m	struct:stringConfigData	file:
is_valid_fn	src/config.c	/^    int (*is_valid_fn)(int val, const char **err); \/* Optional function to check validity of new value (generic doc above) *\/$/;"	m	struct:boolConfigData	file:
is_valid_fn	src/config.c	/^    int (*is_valid_fn)(int val, const char **err); \/* Optional function to check validity of new value (generic doc above) *\/$/;"	m	struct:enumConfigData	file:
is_valid_fn	src/config.c	/^    int (*is_valid_fn)(long long val, const char **err); \/* Optional function to check validity of new value (generic doc above) *\/$/;"	m	struct:numericConfigData	file:
is_valid_fn	src/config.c	/^    int (*is_valid_fn)(sds val, const char **err); \/* Optional function to check validity of new value (generic doc above) *\/$/;"	m	struct:sdsConfigData	file:
is_vararg	deps/lua/src/lobject.h	/^  lu_byte is_vararg;$/;"	m	struct:Proto
isalloc	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_c.h	/^isalloc(tsdn_t *tsdn, const void *ptr) {$/;"	f
isblack	deps/lua/src/lgc.h	66;"	d
isblank	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_decls.h	/^isblank(int c) {$/;"	f
isbreakable	deps/lua/src/lparser.c	/^  lu_byte isbreakable;  \/* true if `block' is a loop *\/$/;"	m	struct:BlockCnt	file:
iscfunction	deps/lua/src/lobject.h	315;"	d
iscleared	deps/lua/src/lgc.c	/^static int iscleared (const TValue *o, int iskey) {$/;"	f	file:
iscollectable	deps/lua/src/lobject.h	189;"	d
iscompr	src/rax.h	/^    uint32_t iscompr:1;   \/* Node is compressed. *\/$/;"	m	struct:raxNode
isdalloct	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_c.h	/^isdalloct(tsdn_t *tsdn, void *ptr, size_t size, tcache_t *tcache,$/;"	f
isdead	deps/lua/src/lgc.h	70;"	d
isfinalized	deps/lua/src/lgc.c	43;"	d	file:
isfinite	src/solarisfixes.h	40;"	d
isfinite	src/solarisfixes.h	41;"	d
isfree	deps/jemalloc/src/jemalloc.c	/^isfree(tsd_t *tsd, void *ptr, size_t usize, tcache_t *tcache, bool slow_path) {$/;"	f
isgray	deps/lua/src/lgc.h	67;"	d
isinf	deps/lua/src/lua_cjson.c	61;"	d	file:
isinf	src/solarisfixes.h	45;"	d
isinf	src/solarisfixes.h	46;"	d
isinstack	deps/lua/src/ldebug.c	/^static int isinstack (CallInfo *ci, const TValue *o) {$/;"	f	file:
iskey	src/rax.h	/^    uint32_t iskey:1;     \/* Does this node contain a key? *\/$/;"	m	struct:raxNode
isnan	src/solarisfixes.h	35;"	d
isnan	src/solarisfixes.h	36;"	d
isnull	src/rax.h	/^    uint32_t isnull:1;    \/* Associated value is NULL (don't store it). *\/$/;"	m	struct:raxNode
isnumeral	deps/lua/src/lcode.c	/^static int isnumeral(expdesc *e) {$/;"	f	file:
isp2	deps/lua/src/lua_struct.c	62;"	d	file:
issueCommand	src/redis-cli.c	/^static int issueCommand(int argc, char **argv) {$/;"	f	file:
issueCommandRepeat	src/redis-cli.c	/^static int issueCommandRepeat(int argc, char **argv, long repeat) {$/;"	f	file:
isthreaded	deps/jemalloc/include/jemalloc/internal/mutex.h	125;"	d
isthreaded	deps/jemalloc/include/jemalloc/internal/mutex.h	126;"	d
isthreaded	deps/jemalloc/src/mutex.c	/^bool isthreaded = false;$/;"	v
iswhite	deps/lua/src/lgc.h	65;"	d
item_at_depth	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	bool item_at_depth;$/;"	m	struct:emitter_s
item_size	deps/jemalloc/src/jemalloc.c	/^	size_t item_size;$/;"	m	struct:dynamic_opts_s	file:
items	src/rax.h	/^    size_t items, maxitems; \/* Number of items contained and total space. *\/$/;"	m	struct:raxStack
iter	src/module.c	/^    void *iter;     \/* Iterator. *\/$/;"	m	struct:RedisModuleKey	file:
iter	src/server.h	/^    quicklistIter *iter;$/;"	m	struct:__anon23
iter	src/t_zset.c	/^    } iter;$/;"	m	struct:__anon2	typeref:union:__anon2::__anon3	file:
iter_linear_next	deps/hdr_histogram/hdr_histogram.c	/^static bool iter_linear_next(struct hdr_iter* iter)$/;"	f	file:
iteration	deps/jemalloc/include/jemalloc/internal/spin.h	/^	unsigned iteration;$/;"	m	struct:__anon139
iterset	src/t_zset.c	/^typedef union _iterset iterset;$/;"	t	typeref:union:_iterset	file:
iterzset	src/t_zset.c	/^typedef union _iterzset iterzset;$/;"	t	typeref:union:_iterzset	file:
itrprintr	src/quicklist.c	/^static int itrprintr(quicklist *ql, int print) {$/;"	f	file:
itrprintr_rev	src/quicklist.c	/^static int itrprintr_rev(quicklist *ql, int print) {$/;"	f	file:
ivsalloc	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_c.h	/^ivsalloc(tsdn_t *tsdn, const void *ptr) {$/;"	f
ixalloc	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_c.h	/^ixalloc(tsdn_t *tsdn, void *ptr, size_t oldsize, size_t size, size_t extra,$/;"	f
ixallocx_helper	deps/jemalloc/src/jemalloc.c	/^ixallocx_helper(tsdn_t *tsdn, void *ptr, size_t old_usize, size_t size,$/;"	f
ixallocx_prof	deps/jemalloc/src/jemalloc.c	/^ixallocx_prof(tsd_t *tsd, void *ptr, size_t old_usize, size_t size,$/;"	f
ixallocx_prof_sample	deps/jemalloc/src/jemalloc.c	/^ixallocx_prof_sample(tsdn_t *tsdn, void *ptr, size_t old_usize, size_t size,$/;"	f	file:
je_calloc	deps/jemalloc/src/jemalloc.c	/^void *__libc_calloc(size_t n, size_t size) PREALIAS(je_calloc);$/;"	v
je_dallocx	deps/jemalloc/src/jemalloc.c	/^je_dallocx(void *ptr, int flags) {$/;"	f
je_free	deps/jemalloc/src/jemalloc.c	/^je_free(void *ptr) {$/;"	f
je_free	deps/jemalloc/src/jemalloc.c	/^void __libc_free(void* ptr) PREALIAS(je_free);$/;"	v
je_mallctl	deps/jemalloc/src/jemalloc.c	/^je_mallctl(const char *name, void *oldp, size_t *oldlenp, void *newp,$/;"	f
je_mallctlbymib	deps/jemalloc/src/jemalloc.c	/^je_mallctlbymib(const size_t *mib, size_t miblen, void *oldp, size_t *oldlenp,$/;"	f
je_mallctlnametomib	deps/jemalloc/src/jemalloc.c	/^je_mallctlnametomib(const char *name, size_t *mibp, size_t *miblenp) {$/;"	f
je_malloc	deps/jemalloc/src/jemalloc.c	/^void *__libc_malloc(size_t size) PREALIAS(je_malloc);$/;"	v
je_malloc_message	deps/jemalloc/src/malloc_io.c	/^JEMALLOC_EXPORT void	(*je_malloc_message)(void *, const char *s);$/;"	v
je_malloc_stats_print	deps/jemalloc/src/jemalloc.c	/^je_malloc_stats_print(void (*write_cb)(void *, const char *), void *cbopaque,$/;"	f
je_malloc_usable_size	deps/jemalloc/src/jemalloc.c	/^je_malloc_usable_size(JEMALLOC_USABLE_SIZE_CONST void *ptr) {$/;"	f
je_memalign	deps/jemalloc/src/jemalloc.c	/^void *__libc_memalign(size_t align, size_t s) PREALIAS(je_memalign);$/;"	v
je_posix_memalign	deps/jemalloc/src/jemalloc.c	/^int __posix_memalign(void** r, size_t a, size_t s) PREALIAS(je_posix_memalign);$/;"	v
je_posix_memalign	deps/jemalloc/src/jemalloc.c	/^je_posix_memalign(void **memptr, size_t alignment, size_t size) {$/;"	f
je_rallocx	deps/jemalloc/src/jemalloc.c	/^je_rallocx(void *ptr, size_t size, int flags) {$/;"	f
je_realloc	deps/jemalloc/src/jemalloc.c	/^je_realloc(void *ptr, size_t size) {$/;"	f
je_realloc	deps/jemalloc/src/jemalloc.c	/^void *__libc_realloc(void* ptr, size_t size) PREALIAS(je_realloc);$/;"	v
je_sdallocx	deps/jemalloc/src/jemalloc.c	/^je_sdallocx(void *ptr, size_t size, int flags) {$/;"	f
je_valloc	deps/jemalloc/src/jemalloc.c	/^void *__libc_valloc(size_t size) PREALIAS(je_valloc);$/;"	v
je_xallocx	deps/jemalloc/src/jemalloc.c	/^je_xallocx(void *ptr, size_t size, size_t extra, int flags) {$/;"	f
jemalloc_bg_thread	src/server.h	/^    int jemalloc_bg_thread;         \/* Enable jemalloc background thread *\/$/;"	m	struct:redisServer
jemalloc_constructor	deps/jemalloc/src/jemalloc.c	/^jemalloc_constructor(void) {$/;"	f	file:
jemalloc_postfork_child	deps/jemalloc/src/jemalloc.c	/^jemalloc_postfork_child(void) {$/;"	f
jemalloc_postfork_parent	deps/jemalloc/src/jemalloc.c	/^jemalloc_postfork_parent(void)$/;"	f
jemalloc_prefork	deps/jemalloc/src/jemalloc.c	/^jemalloc_prefork(void)$/;"	f
jemalloc_purge	src/zmalloc.c	/^int jemalloc_purge() {$/;"	f
jemalloc_secure_getenv	deps/jemalloc/src/jemalloc.c	/^jemalloc_secure_getenv(const char *name) {$/;"	f	file:
jemalloc_zone	deps/jemalloc/src/zone.c	/^static malloc_zone_t jemalloc_zone;$/;"	v	file:
jemalloc_zone_introspect	deps/jemalloc/src/zone.c	/^static struct malloc_introspection_t jemalloc_zone_introspect;$/;"	v	typeref:struct:malloc_introspection_t	file:
jitter_state	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	uint64_t		jitter_state;$/;"	m	struct:arena_decay_s
jpc	deps/lua/src/lparser.h	/^  int jpc;  \/* list of pending jumps to `pc' *\/$/;"	m	struct:FuncState
json_append_array	deps/lua/src/lua_cjson.c	/^static void json_append_array(lua_State *l, json_config_t *cfg, int current_depth,$/;"	f	file:
json_append_data	deps/lua/src/lua_cjson.c	/^static void json_append_data(lua_State *l, json_config_t *cfg,$/;"	f	file:
json_append_number	deps/lua/src/lua_cjson.c	/^static void json_append_number(lua_State *l, json_config_t *cfg,$/;"	f	file:
json_append_object	deps/lua/src/lua_cjson.c	/^static void json_append_object(lua_State *l, json_config_t *cfg,$/;"	f	file:
json_append_string	deps/lua/src/lua_cjson.c	/^static void json_append_string(lua_State *l, strbuf_t *json, int lindex)$/;"	f	file:
json_append_unicode_escape	deps/lua/src/lua_cjson.c	/^static int json_append_unicode_escape(json_parse_t *json)$/;"	f	file:
json_arg_init	deps/lua/src/lua_cjson.c	/^static json_config_t *json_arg_init(lua_State *l, int args)$/;"	f	file:
json_arr_json	deps/jemalloc/test/unit/emitter.c	/^static const char *json_arr_json =$/;"	v	file:
json_arr_table	deps/jemalloc/test/unit/emitter.c	/^static const char *json_arr_table = "";$/;"	v	file:
json_cfg_decode_invalid_numbers	deps/lua/src/lua_cjson.c	/^static int json_cfg_decode_invalid_numbers(lua_State *l)$/;"	f	file:
json_cfg_decode_max_depth	deps/lua/src/lua_cjson.c	/^static int json_cfg_decode_max_depth(lua_State *l)$/;"	f	file:
json_cfg_encode_invalid_numbers	deps/lua/src/lua_cjson.c	/^static int json_cfg_encode_invalid_numbers(lua_State *l)$/;"	f	file:
json_cfg_encode_keep_buffer	deps/lua/src/lua_cjson.c	/^static int json_cfg_encode_keep_buffer(lua_State *l)$/;"	f	file:
json_cfg_encode_max_depth	deps/lua/src/lua_cjson.c	/^static int json_cfg_encode_max_depth(lua_State *l)$/;"	f	file:
json_cfg_encode_number_precision	deps/lua/src/lua_cjson.c	/^static int json_cfg_encode_number_precision(lua_State *l)$/;"	f	file:
json_cfg_encode_sparse_array	deps/lua/src/lua_cjson.c	/^static int json_cfg_encode_sparse_array(lua_State *l)$/;"	f	file:
json_check_encode_depth	deps/lua/src/lua_cjson.c	/^static void json_check_encode_depth(lua_State *l, json_config_t *cfg,$/;"	f	file:
json_config_t	deps/lua/src/lua_cjson.c	/^} json_config_t;$/;"	t	typeref:struct:__anon101	file:
json_create_config	deps/lua/src/lua_cjson.c	/^static void json_create_config(lua_State *l)$/;"	f	file:
json_decode	deps/lua/src/lua_cjson.c	/^static int json_decode(lua_State *l)$/;"	f	file:
json_decode_ascend	deps/lua/src/lua_cjson.c	/^static inline void json_decode_ascend(json_parse_t *json)$/;"	f	file:
json_decode_descend	deps/lua/src/lua_cjson.c	/^static void json_decode_descend(lua_State *l, json_parse_t *json, int slots)$/;"	f	file:
json_destroy_config	deps/lua/src/lua_cjson.c	/^static int json_destroy_config(lua_State *l)$/;"	f	file:
json_encode	deps/lua/src/lua_cjson.c	/^static int json_encode(lua_State *l)$/;"	f	file:
json_encode_exception	deps/lua/src/lua_cjson.c	/^static void json_encode_exception(lua_State *l, json_config_t *cfg, strbuf_t *json, int lindex,$/;"	f	file:
json_enum_option	deps/lua/src/lua_cjson.c	/^static int json_enum_option(lua_State *l, int optindex, int *setting,$/;"	f	file:
json_fetch_config	deps/lua/src/lua_cjson.c	/^static json_config_t *json_fetch_config(lua_State *l)$/;"	f	file:
json_integer_option	deps/lua/src/lua_cjson.c	/^static int json_integer_option(lua_State *l, int optindex, int *setting,$/;"	f	file:
json_is_invalid_number	deps/lua/src/lua_cjson.c	/^static int json_is_invalid_number(json_parse_t *json)$/;"	f	file:
json_next_number_token	deps/lua/src/lua_cjson.c	/^static void json_next_number_token(json_parse_t *json, json_token_t *token)$/;"	f	file:
json_next_string_token	deps/lua/src/lua_cjson.c	/^static void json_next_string_token(json_parse_t *json, json_token_t *token)$/;"	f	file:
json_next_token	deps/lua/src/lua_cjson.c	/^static void json_next_token(json_parse_t *json, json_token_t *token)$/;"	f	file:
json_parse_array_context	deps/lua/src/lua_cjson.c	/^static void json_parse_array_context(lua_State *l, json_parse_t *json)$/;"	f	file:
json_parse_object_context	deps/lua/src/lua_cjson.c	/^static void json_parse_object_context(lua_State *l, json_parse_t *json)$/;"	f	file:
json_parse_t	deps/lua/src/lua_cjson.c	/^} json_parse_t;$/;"	t	typeref:struct:__anon102	file:
json_process_value	deps/lua/src/lua_cjson.c	/^static void json_process_value(lua_State *l, json_parse_t *json,$/;"	f	file:
json_protect_conversion	deps/lua/src/lua_cjson.c	/^static int json_protect_conversion(lua_State *l)$/;"	f	file:
json_set_token_error	deps/lua/src/lua_cjson.c	/^static void json_set_token_error(json_token_t *token, json_parse_t *json,$/;"	f	file:
json_throw_parse_error	deps/lua/src/lua_cjson.c	/^static void json_throw_parse_error(lua_State *l, json_parse_t *json,$/;"	f	file:
json_token_t	deps/lua/src/lua_cjson.c	/^} json_token_t;$/;"	t	typeref:struct:__anon103	file:
json_token_type_name	deps/lua/src/lua_cjson.c	/^static const char *json_token_type_name[] = {$/;"	v	file:
json_token_type_t	deps/lua/src/lua_cjson.c	/^} json_token_type_t;$/;"	t	typeref:enum:__anon100	file:
json_verify_invalid_number_setting	deps/lua/src/lua_cjson.c	/^void json_verify_invalid_number_setting(lua_State *l, int *setting)$/;"	f
json_verify_invalid_number_setting	deps/lua/src/lua_cjson.c	335;"	d	file:
jumponcond	deps/lua/src/lcode.c	/^static int jumponcond (FuncState *fs, expdesc *e, int cond) {$/;"	f	file:
justid	src/server.h	/^    *time, *pxat, *px, *retrycount, *force, *justid, $/;"	m	struct:sharedObjectsStruct
justify	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	emitter_justify_t justify;$/;"	m	struct:emitter_col_s
k	deps/lua/src/lobject.h	/^  TValue *k;  \/* constants used by the function *\/$/;"	m	struct:Proto
k	deps/lua/src/lparser.h	/^  expkind k;$/;"	m	struct:expdesc
k	deps/lua/src/lparser.h	/^  lu_byte k;$/;"	m	struct:upvaldesc
k	src/sha256.c	/^static const WORD k[64] = {$/;"	v	file:
keepalive	src/redis-benchmark.c	/^    int keepalive;$/;"	m	struct:config	file:
keepttl	src/server.h	/^    *lastid, *ping, *setid, *keepttl, *load, *createconsumer,$/;"	m	struct:sharedObjectsStruct
key	deps/hiredis/dict.h	/^    void *key;$/;"	m	struct:dictEntry
key	deps/hiredis/test.c	/^        const char *key;$/;"	m	struct:config::__anon92	file:
key	deps/jemalloc/include/jemalloc/internal/ckh.h	/^	const void *key;$/;"	m	struct:__anon150
key	deps/jemalloc/test/unit/ph.c	/^	uint64_t key;$/;"	m	struct:node_s	file:
key	deps/jemalloc/test/unit/rb.c	/^	uint64_t key;$/;"	m	struct:node_s	file:
key	src/cli_common.h	/^    char *key;$/;"	m	struct:cliSSLconfig
key	src/dict.h	/^    void *key;$/;"	m	struct:dictEntry
key	src/evict.c	/^    sds key;                    \/* Key name. *\/$/;"	m	struct:evictionPoolEntry	file:
key	src/module.c	/^    RedisModuleKey *key;$/;"	m	struct:__anon67	file:
key	src/module.c	/^    robj *key;      \/* Key name object. *\/$/;"	m	struct:RedisModuleKey	file:
key	src/multi.c	/^    robj *key;$/;"	m	struct:watchedKey	file:
key	src/rax.h	/^    unsigned char *key;     \/* The current string. *\/$/;"	m	struct:raxIterator
key	src/redis-check-rdb.c	/^    robj *key;                      \/* Current key we are reading. *\/$/;"	m	struct:__anon61	file:
key	src/server.h	/^    robj *key;$/;"	m	struct:readyList
key	src/server.h	/^    struct redisObject *key;    \/* Optional name of key processed *\/$/;"	m	struct:RedisModuleIO	typeref:struct:RedisModuleIO::redisObject
key2tval	deps/lua/src/ltable.h	18;"	d
keyCompare	deps/hiredis/dict.h	/^    int (*keyCompare)(void *privdata, const void *key1, const void *key2);$/;"	m	struct:dictType
keyCompare	src/dict.h	/^    int (*keyCompare)(void *privdata, const void *key1, const void *key2);$/;"	m	struct:dictType
keyDestructor	deps/hiredis/dict.h	/^    void (*keyDestructor)(void *privdata, void *key);$/;"	m	struct:dictType
keyDestructor	src/dict.h	/^    void (*keyDestructor)(void *privdata, void *key);$/;"	m	struct:dictType
keyDup	deps/hiredis/dict.h	/^    void *(*keyDup)(void *privdata, const void *key);$/;"	m	struct:dictType
keyDup	src/dict.h	/^    void *(*keyDup)(void *privdata, const void *key);$/;"	m	struct:dictType
keyHashSlot	src/cluster.c	/^unsigned int keyHashSlot(char *key, int keylen) {$/;"	f
keyIsExpired	src/db.c	/^int keyIsExpired(redisDb *db, robj *key) {$/;"	f
key_file	src/server.h	/^    char *key_file;                 \/* Private key filename for cert_file *\/$/;"	m	struct:redisTLSContextConfig
key_file_pass	src/server.h	/^    char *key_file_pass;            \/* Optional password for key_file *\/$/;"	m	struct:redisTLSContextConfig
key_len	src/rax.h	/^    size_t key_len;         \/* Current key length. *\/$/;"	m	struct:raxIterator
key_load_delay	src/server.h	/^    int key_load_delay;             \/* Delay in microseconds between keys while$/;"	m	struct:redisServer
key_max	src/rax.h	/^    size_t key_max;         \/* Max key len the current key buffer can hold. *\/$/;"	m	struct:raxIterator
key_static_string	src/rax.h	/^    unsigned char key_static_string[RAX_ITER_STATIC_LEN];$/;"	m	struct:raxIterator
key_type	src/redis-check-rdb.c	/^    int key_type;                   \/* Current key type if != -1. *\/$/;"	m	struct:__anon61	file:
keycomp	deps/jemalloc/include/jemalloc/internal/ckh.h	/^	ckh_keycomp_t *keycomp;$/;"	m	struct:__anon151
keylistDictType	src/server.c	/^dictType keylistDictType = {$/;"	v
keyname	src/stream.h	/^    robj *keyname;$/;"	m	struct:streamPropInfo
keys	src/childinfo.c	/^    size_t keys;$/;"	m	struct:__anon30	file:
keys	src/cluster.h	/^    char* keys;$/;"	m	struct:cacheOps
keys	src/redis-check-rdb.c	/^    unsigned long keys;             \/* Number of keys processed. *\/$/;"	m	struct:__anon61	file:
keys	src/server.h	/^    dict *keys;             \/* The keys we are waiting to terminate a blocking$/;"	m	struct:blockingState
keys	src/server.h	/^    int *keys;                          \/* Key indices array, points to keysbuf or heap *\/$/;"	m	struct:__anon21
keys	src/tracking.c	/^    rax *keys;      \/* Keys modified in the current event loop cycle. *\/$/;"	m	struct:bcastState	file:
keysCommand	src/db.c	/^void keysCommand(client *c) {$/;"	f
keys_result	src/module.c	/^    getKeysResult *keys_result;$/;"	m	struct:RedisModuleCtx	file:
keysbuf	src/server.h	/^    int keysbuf[MAX_KEYS_BUFFER];       \/* Pre-allocated buffer, to save heap allocations *\/$/;"	m	struct:__anon21
keysize	src/redis-benchmark.c	/^    int keysize;$/;"	m	struct:config	file:
keyspaceEventsFlagsToString	src/notify.c	/^sds keyspaceEventsFlagsToString(int flags) {$/;"	f
keyspaceEventsStringToFlags	src/notify.c	/^int keyspaceEventsStringToFlags(char *classes) {$/;"	f
keyspace_size	utils/lru/lfu-simulation.c	/^int keyspace_size = 1000000;$/;"	v
keystep	src/server.h	/^    int keystep;  \/* The step between first and last key *\/$/;"	m	struct:redisCommand
killAppendOnlyChild	src/aof.c	/^void killAppendOnlyChild(void) {$/;"	f
killIOThreads	src/networking.c	/^void killIOThreads(void) {$/;"	f
killMainThread	src/debug.c	/^static void killMainThread(void) {$/;"	f	file:
killRDBChild	src/rdb.c	/^void killRDBChild(void) {$/;"	f
killThreads	src/debug.c	/^void killThreads(void) {$/;"	f
kill_clients	tests/test_helper.tcl	/^proc kill_clients {} {$/;"	p
kill_instance	tests/instances.tcl	/^proc kill_instance {type id} {$/;"	p
kill_server	tests/support/server.tcl	/^proc kill_server config {$/;"	p
kname	deps/lua/src/ldebug.c	/^static const char *kname (Proto *p, int c) {$/;"	f	file:
kqfd	src/ae_kqueue.c	/^    int kqfd;$/;"	m	struct:aeApiState	file:
l	deps/lua/src/lobject.h	/^    } l;$/;"	m	union:UpVal::__anon109	typeref:struct:UpVal::__anon109::__anon110
l	deps/lua/src/lobject.h	/^  LClosure l;$/;"	m	union:Closure
l	deps/lua/src/lstate.c	/^  lua_State l;$/;"	m	struct:LG	file:
l	src/config.c	/^        long *l;$/;"	m	union:numericConfigData::__anon45	file:
l2_cache	deps/jemalloc/include/jemalloc/internal/rtree_tsd.h	/^	rtree_ctx_cache_elm_t	l2_cache[RTREE_CTX_NCACHE_L2];$/;"	m	struct:rtree_ctx_s
l_G	deps/lua/src/lstate.h	/^  global_State *l_G;$/;"	m	struct:lua_State
l_alloc	deps/lua/src/lauxlib.c	/^static void *l_alloc (void *ud, void *ptr, size_t osize, size_t nsize) {$/;"	f	file:
l_d	deps/lua/src/luaconf.h	/^union luai_Cast { double l_d; long l_l; };$/;"	m	union:luai_Cast
l_gt	deps/lua/src/lstate.h	/^  TValue l_gt;  \/* table of globals *\/$/;"	m	struct:lua_State
l_isfalse	deps/lua/src/lobject.h	103;"	d
l_l	deps/lua/src/luaconf.h	/^union luai_Cast { double l_d; long l_l; };$/;"	m	union:luai_Cast
l_mem	deps/lua/src/llimits.h	/^typedef LUAI_MEM l_mem;$/;"	t
l_message	deps/lua/src/lua.c	/^static void l_message (const char *pname, const char *msg) {$/;"	f	file:
l_registry	deps/lua/src/lstate.h	/^  TValue l_registry;$/;"	m	struct:global_State
l_setbit	deps/lua/src/lgc.h	32;"	d
l_strcmp	deps/lua/src/lvm.c	/^static int l_strcmp (const TString *ls, const TString *rs) {$/;"	f	file:
l_uacNumber	deps/lua/src/llimits.h	/^typedef LUAI_UACNUMBER l_uacNumber;$/;"	t
label	src/sparkline.h	/^    char *label;$/;"	m	struct:sample
label_margin_top	src/sparkline.c	/^static int label_margin_top = 1;$/;"	v	file:
labels	src/sparkline.h	/^    int labels;$/;"	m	struct:sequence
laction	deps/lua/src/lua.c	/^static void laction (int i) {$/;"	f	file:
lambda1	deps/jemalloc/configure	/^      lambda1();$/;"	f
lambda2	deps/jemalloc/configure	/^      lambda2();$/;"	f
lapi_c	deps/lua/src/lapi.c	13;"	d	file:
lapi_h	deps/lua/src/lapi.h	8;"	d
large	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	extent_list_t		large;$/;"	m	struct:arena_s
large_dalloc	deps/jemalloc/src/large.c	/^large_dalloc(tsdn_t *tsdn, extent_t *extent) {$/;"	f
large_dalloc_finish	deps/jemalloc/src/large.c	/^large_dalloc_finish(tsdn_t *tsdn, extent_t *extent) {$/;"	f
large_dalloc_finish_impl	deps/jemalloc/src/large.c	/^large_dalloc_finish_impl(tsdn_t *tsdn, arena_t *arena, extent_t *extent) {$/;"	f	file:
large_dalloc_junk	deps/jemalloc/src/large.c	/^large_dalloc_junk_t *JET_MUTABLE large_dalloc_junk = large_dalloc_junk_impl;$/;"	v
large_dalloc_junk_impl	deps/jemalloc/src/large.c	/^large_dalloc_junk_impl(void *ptr, size_t size) {$/;"	f	file:
large_dalloc_junk_intercept	deps/jemalloc/test/unit/junk.c	/^large_dalloc_junk_intercept(void *ptr, size_t usize) {$/;"	f	file:
large_dalloc_junk_orig	deps/jemalloc/test/unit/junk.c	/^static large_dalloc_junk_t *large_dalloc_junk_orig;$/;"	v	file:
large_dalloc_junk_t	deps/jemalloc/include/jemalloc/internal/large_externs.h	/^typedef void (large_dalloc_junk_t)(void *, size_t);$/;"	t
large_dalloc_maybe_junk	deps/jemalloc/src/large.c	/^large_dalloc_maybe_junk_t *JET_MUTABLE large_dalloc_maybe_junk =$/;"	v
large_dalloc_maybe_junk_impl	deps/jemalloc/src/large.c	/^large_dalloc_maybe_junk_impl(void *ptr, size_t size) {$/;"	f	file:
large_dalloc_maybe_junk_intercept	deps/jemalloc/test/unit/junk.c	/^large_dalloc_maybe_junk_intercept(void *ptr, size_t usize) {$/;"	f	file:
large_dalloc_maybe_junk_orig	deps/jemalloc/test/unit/junk.c	/^static large_dalloc_maybe_junk_t *large_dalloc_maybe_junk_orig;$/;"	v	file:
large_dalloc_maybe_junk_t	deps/jemalloc/include/jemalloc/internal/large_externs.h	/^typedef void (large_dalloc_maybe_junk_t)(void *, size_t);$/;"	t
large_dalloc_prep_impl	deps/jemalloc/src/large.c	/^large_dalloc_prep_impl(tsdn_t *tsdn, arena_t *arena, extent_t *extent,$/;"	f	file:
large_dalloc_prep_junked_locked	deps/jemalloc/src/large.c	/^large_dalloc_prep_junked_locked(tsdn_t *tsdn, extent_t *extent) {$/;"	f
large_malloc	deps/jemalloc/src/large.c	/^large_malloc(tsdn_t *tsdn, arena_t *arena, size_t usize, bool zero) {$/;"	f
large_mtx	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	malloc_mutex_t		large_mtx;$/;"	m	struct:arena_s
large_palloc	deps/jemalloc/src/large.c	/^large_palloc(tsdn_t *tsdn, arena_t *arena, size_t usize, size_t alignment,$/;"	f
large_prof_tctx_get	deps/jemalloc/src/large.c	/^large_prof_tctx_get(tsdn_t *tsdn, const extent_t *extent) {$/;"	f
large_prof_tctx_reset	deps/jemalloc/src/large.c	/^large_prof_tctx_reset(tsdn_t *tsdn, extent_t *extent) {$/;"	f
large_prof_tctx_set	deps/jemalloc/src/large.c	/^large_prof_tctx_set(tsdn_t *tsdn, extent_t *extent, prof_tctx_t *tctx) {$/;"	f
large_ralloc	deps/jemalloc/src/large.c	/^large_ralloc(tsdn_t *tsdn, arena_t *arena, extent_t *extent, size_t usize,$/;"	f
large_ralloc_move_helper	deps/jemalloc/src/large.c	/^large_ralloc_move_helper(tsdn_t *tsdn, arena_t *arena, size_t usize,$/;"	f	file:
large_ralloc_no_move	deps/jemalloc/src/large.c	/^large_ralloc_no_move(tsdn_t *tsdn, extent_t *extent, size_t usize_min,$/;"	f
large_ralloc_no_move_expand	deps/jemalloc/src/large.c	/^large_ralloc_no_move_expand(tsdn_t *tsdn, extent_t *extent, size_t usize,$/;"	f	file:
large_ralloc_no_move_shrink	deps/jemalloc/src/large.c	/^large_ralloc_no_move_shrink(tsdn_t *tsdn, extent_t *extent, size_t usize) {$/;"	f	file:
large_salloc	deps/jemalloc/src/large.c	/^large_salloc(tsdn_t *tsdn, const extent_t *extent) {$/;"	f
lastLen	deps/hiredis/ssl.c	/^    size_t lastLen;$/;"	m	struct:redisSSL	file:
lastVoteEpoch	src/cluster.h	/^    uint64_t lastVoteEpoch;     \/* Epoch of the last vote granted. *\/$/;"	m	struct:clusterState
last_avail_time	src/sentinel.c	/^    mstime_t last_avail_time; \/* Last time the instance replied to ping with$/;"	m	struct:instanceLink	file:
last_cmd_type	src/redis-cli.c	/^    int last_cmd_type;$/;"	m	struct:config	file:
last_dbid	src/cluster.c	/^    long last_dbid;$/;"	m	struct:migrateCachedSocket	file:
last_errno	src/connection.h	/^    int last_errno;$/;"	m	struct:connection
last_hello_time	src/sentinel.c	/^    mstime_t last_hello_time; \/* Only used if SRI_SENTINEL is set. Last time$/;"	m	struct:sentinelRedisInstance	file:
last_id	src/stream.h	/^    streamID last_id;       \/* Last delivered (not acknowledged) ID for this$/;"	m	struct:streamCG
last_id	src/stream.h	/^    streamID last_id;       \/* Zero if there are yet no items. *\/$/;"	m	struct:stream
last_master_down_reply_time	src/sentinel.c	/^    mstime_t last_master_down_reply_time; \/* Time of last reply to$/;"	m	struct:sentinelRedisInstance	file:
last_ping_time	src/sentinel.c	/^    mstime_t last_ping_time;  \/* Time at which we sent the last ping. This is$/;"	m	struct:instanceLink	file:
last_pong_time	src/sentinel.c	/^    mstime_t last_pong_time;  \/* Last time the instance replied to ping,$/;"	m	struct:instanceLink	file:
last_printed_bytes	src/redis-benchmark.c	/^    int last_printed_bytes;$/;"	m	struct:config	file:
last_pub_time	src/sentinel.c	/^    mstime_t last_pub_time;   \/* Last time we sent hello via Pub\/Sub. *\/$/;"	m	struct:sentinelRedisInstance	file:
last_reconn_time	src/sentinel.c	/^    mstime_t last_reconn_time;  \/* Last reconnection attempt performed when$/;"	m	struct:instanceLink	file:
last_sample_count	src/server.h	/^        long long last_sample_count;\/* Count in last sample *\/$/;"	m	struct:redisServer::__anon20
last_sample_time	src/server.h	/^        long long last_sample_time; \/* Timestamp of last sample in ms *\/$/;"	m	struct:redisServer::__anon20
last_set_cursor	tests/modules/defragtest.c	/^unsigned long int last_set_cursor = 0;$/;"	v
last_thd	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	tsdn_t		*last_thd;$/;"	m	struct:arena_s
last_use_time	src/cluster.c	/^    time_t last_use_time;$/;"	m	struct:migrateCachedSocket	file:
last_val_int	tests/modules/hooks.c	/^    long last_val_int;$/;"	m	struct:EventElement	file:
last_val_string	tests/modules/hooks.c	/^    RedisModuleString *last_val_string;$/;"	m	struct:EventElement	file:
lastbgsave_status	src/server.h	/^    int lastbgsave_status;          \/* C_OK or C_ERR *\/$/;"	m	struct:redisServer
lastbgsave_try	src/server.h	/^    time_t lastbgsave_try;          \/* Unix time of last attempted bgsave *\/$/;"	m	struct:redisServer
lastcmd	src/server.h	/^    struct redisCommand *cmd, *lastcmd;  \/* Last command executed. *\/$/;"	m	struct:client	typeref:struct:client::
lastfree	deps/lua/src/lobject.h	/^  Node *lastfree;  \/* any free position is before this position *\/$/;"	m	struct:Table
lastid	src/server.h	/^    *lastid, *ping, *setid, *keepttl, *load, *createconsumer,$/;"	m	struct:sharedObjectsStruct
lastinteraction	src/server.h	/^    time_t lastinteraction; \/* Time of the last interaction, used for timeout *\/$/;"	m	struct:client
lastkey	src/server.h	/^    int lastkey;  \/* The last argument that's a key *\/$/;"	m	struct:redisCommand
lastline	deps/lua/src/llex.h	/^  int lastline;  \/* line of last token `consumed' *\/$/;"	m	struct:LexState
lastlinedefined	deps/lua/src/lobject.h	/^  int lastlinedefined;$/;"	m	struct:Proto
lastlinedefined	deps/lua/src/lua.h	/^  int lastlinedefined;	\/* (S) *\/$/;"	m	struct:lua_Debug
lastlistfield	deps/lua/src/lparser.c	/^static void lastlistfield (FuncState *fs, struct ConsControl *cc) {$/;"	f	file:
lastsave	src/server.h	/^    time_t lastsave;                \/* Unix time of last successful save *\/$/;"	m	struct:redisServer
lastsaveCommand	src/db.c	/^void lastsaveCommand(client *c) {$/;"	f
lasttarget	deps/lua/src/lparser.h	/^  int lasttarget;   \/* `pc' of last `jump target' *\/$/;"	m	struct:FuncState
latency	src/latency.h	/^    uint32_t latency; \/* Latency in milliseconds. *\/$/;"	m	struct:latencySample
latency	src/redis-benchmark.c	/^    long long latency;      \/* Request latency *\/$/;"	m	struct:_client	file:
latencyAddSample	src/latency.c	/^void latencyAddSample(const char *event, mstime_t latency) {$/;"	f
latencyAddSampleIfNeeded	src/latency.h	85;"	d
latencyCommand	src/latency.c	/^void latencyCommand(client *c) {$/;"	f
latencyCommandGenSparkeline	src/latency.c	/^sds latencyCommandGenSparkeline(char *event, struct latencyTimeSeries *ts) {$/;"	f
latencyCommandReplyWithLatestEvents	src/latency.c	/^void latencyCommandReplyWithLatestEvents(client *c) {$/;"	f
latencyCommandReplyWithSamples	src/latency.c	/^void latencyCommandReplyWithSamples(client *c, struct latencyTimeSeries *ts) {$/;"	f
latencyDistMode	src/redis-cli.c	/^static void latencyDistMode(void) {$/;"	f	file:
latencyEndMonitor	src/latency.h	80;"	d
latencyMode	src/redis-cli.c	/^static void latencyMode(void) {$/;"	f	file:
latencyModePrint	src/redis-cli.c	/^static void latencyModePrint(long long min, long long max, double avg, long long count) {$/;"	f	file:
latencyMonitorInit	src/latency.c	/^void latencyMonitorInit(void) {$/;"	f
latencyRemoveNestedEvent	src/latency.h	91;"	d
latencyResetEvent	src/latency.c	/^int latencyResetEvent(char *event_to_reset) {$/;"	f
latencySample	src/latency.h	/^struct latencySample {$/;"	s
latencyStartMonitor	src/latency.h	72;"	d
latencyStats	src/latency.h	/^struct latencyStats {$/;"	s
latencyTimeSeries	src/latency.h	/^struct latencyTimeSeries {$/;"	s
latencyTimeSeriesDictType	src/latency.c	/^dictType latencyTimeSeriesDictType = {$/;"	v
latency_dist_mode	src/redis-cli.c	/^    int latency_dist_mode;$/;"	m	struct:config	file:
latency_events	src/server.h	/^    dict *latency_events;$/;"	m	struct:redisServer
latency_histogram	src/redis-benchmark.c	/^    struct hdr_histogram* latency_histogram;$/;"	m	struct:config	typeref:struct:config::hdr_histogram	file:
latency_history	src/redis-cli.c	/^    int latency_history;$/;"	m	struct:config	file:
latency_mode	src/redis-cli.c	/^    int latency_mode;$/;"	m	struct:config	file:
latency_monitor_threshold	src/server.h	/^    long long latency_monitor_threshold;$/;"	m	struct:redisServer
latitude	src/geo.h	/^    double latitude;$/;"	m	struct:geoPoint
latitude	src/geohash.h	/^    GeoHashRange latitude;$/;"	m	struct:__anon49
lauxlib_c	deps/lua/src/lauxlib.c	20;"	d	file:
lauxlib_h	deps/lua/src/lauxlib.h	9;"	d
lazyFreeLuaScripts	src/lazyfree.c	/^void lazyFreeLuaScripts(void *args[]) {$/;"	f
lazyFreeTrackingTable	src/lazyfree.c	/^void lazyFreeTrackingTable(void *args[]) {$/;"	f
lazy_free_fn	src/bio.h	/^typedef void lazy_free_fn(void *args[]);$/;"	t
lazyfreeFreeDatabase	src/lazyfree.c	/^void lazyfreeFreeDatabase(void *args[]) {$/;"	f
lazyfreeFreeObject	src/lazyfree.c	/^void lazyfreeFreeObject(void *args[]) {$/;"	f
lazyfreeFreeSlotsMap	src/lazyfree.c	/^void lazyfreeFreeSlotsMap(void *args[]) {$/;"	f
lazyfreeGetFreeEffort	src/lazyfree.c	/^size_t lazyfreeGetFreeEffort(robj *key, robj *obj) {$/;"	f
lazyfreeGetFreedObjectsCount	src/lazyfree.c	/^size_t lazyfreeGetFreedObjectsCount(void) {$/;"	f
lazyfreeGetPendingObjectsCount	src/lazyfree.c	/^size_t lazyfreeGetPendingObjectsCount(void) {$/;"	f
lazyfree_lazy_eviction	src/server.h	/^    int lazyfree_lazy_eviction;$/;"	m	struct:redisServer
lazyfree_lazy_expire	src/server.h	/^    int lazyfree_lazy_expire;$/;"	m	struct:redisServer
lazyfree_lazy_server_del	src/server.h	/^    int lazyfree_lazy_server_del;$/;"	m	struct:redisServer
lazyfree_lazy_user_del	src/server.h	/^    int lazyfree_lazy_user_del;$/;"	m	struct:redisServer
lazyfree_lazy_user_flush	src/server.h	/^    int lazyfree_lazy_user_flush;$/;"	m	struct:redisServer
lazyfree_objects	src/lazyfree.c	/^static redisAtomic size_t lazyfree_objects = 0;$/;"	v	file:
lazyfreed_objects	src/lazyfree.c	/^static redisAtomic size_t lazyfreed_objects = 0;$/;"	v	file:
lbaselib_c	deps/lua/src/lbaselib.c	14;"	d	file:
lcode_c	deps/lua/src/lcode.c	10;"	d	file:
lcode_h	deps/lua/src/lcode.h	8;"	d
lconfig_h	deps/lua/src/luaconf.h	9;"	d
lcsGetKeys	src/db.c	/^int lcsGetKeys(struct redisCommand *cmd, robj **argv, int argc, getKeysResult *result) {$/;"	f
ld2string	src/util.c	/^int ld2string(char *buf, size_t len, long double value, ld2string_mode mode) {$/;"	f
ld2string_mode	src/util.h	/^} ld2string_mode;$/;"	t	typeref:enum:__anon12
ldb	src/scripting.c	/^} ldb;$/;"	v	typeref:struct:ldbState
ldbAddBreakpoint	src/scripting.c	/^int ldbAddBreakpoint(int line) {$/;"	f
ldbBreak	src/scripting.c	/^void ldbBreak(sds *argv, int argc) {$/;"	f
ldbCatStackValue	src/scripting.c	/^sds ldbCatStackValue(sds s, lua_State *lua, int idx) {$/;"	f
ldbCatStackValueRec	src/scripting.c	/^sds ldbCatStackValueRec(sds s, lua_State *lua, int idx, int level) {$/;"	f
ldbDelBreakpoint	src/scripting.c	/^int ldbDelBreakpoint(int line) {$/;"	f
ldbDisable	src/scripting.c	/^void ldbDisable(client *c) {$/;"	f
ldbEnable	src/scripting.c	/^void ldbEnable(client *c) {$/;"	f
ldbEndSession	src/scripting.c	/^void ldbEndSession(client *c) {$/;"	f
ldbEval	src/scripting.c	/^void ldbEval(lua_State *lua, sds *argv, int argc) {$/;"	f
ldbFlushLog	src/scripting.c	/^void ldbFlushLog(list *log) {$/;"	f
ldbGetSourceLine	src/scripting.c	/^char *ldbGetSourceLine(int line) {$/;"	f
ldbInit	src/scripting.c	/^void ldbInit(void) {$/;"	f
ldbIsBreakpoint	src/scripting.c	/^int ldbIsBreakpoint(int line) {$/;"	f
ldbKillForkedSessions	src/scripting.c	/^void ldbKillForkedSessions(void) {$/;"	f
ldbList	src/scripting.c	/^void ldbList(int around, int context) {$/;"	f
ldbLog	src/scripting.c	/^void ldbLog(sds entry) {$/;"	f
ldbLogRedisReply	src/scripting.c	/^void ldbLogRedisReply(char *reply) {$/;"	f
ldbLogSourceLine	src/scripting.c	/^void ldbLogSourceLine(int lnum) {$/;"	f
ldbLogStackValue	src/scripting.c	/^void ldbLogStackValue(lua_State *lua, char *prefix) {$/;"	f
ldbLogWithMaxLen	src/scripting.c	/^void ldbLogWithMaxLen(sds entry) {$/;"	f
ldbMaxlen	src/scripting.c	/^void ldbMaxlen(sds *argv, int argc) {$/;"	f
ldbPendingChildren	src/scripting.c	/^int ldbPendingChildren(void) {$/;"	f
ldbPrint	src/scripting.c	/^void ldbPrint(lua_State *lua, char *varname) {$/;"	f
ldbPrintAll	src/scripting.c	/^void ldbPrintAll(lua_State *lua) {$/;"	f
ldbRedis	src/scripting.c	/^void ldbRedis(lua_State *lua, sds *argv, int argc) {$/;"	f
ldbRedisProtocolToHuman	src/scripting.c	/^char *ldbRedisProtocolToHuman(sds *o, char *reply) {$/;"	f
ldbRedisProtocolToHuman_Bool	src/scripting.c	/^char *ldbRedisProtocolToHuman_Bool(sds *o, char *reply) {$/;"	f
ldbRedisProtocolToHuman_Bulk	src/scripting.c	/^char *ldbRedisProtocolToHuman_Bulk(sds *o, char *reply) {$/;"	f
ldbRedisProtocolToHuman_Double	src/scripting.c	/^char *ldbRedisProtocolToHuman_Double(sds *o, char *reply) {$/;"	f
ldbRedisProtocolToHuman_Int	src/scripting.c	/^char *ldbRedisProtocolToHuman_Int(sds *o, char *reply) {$/;"	f
ldbRedisProtocolToHuman_Map	src/scripting.c	/^char *ldbRedisProtocolToHuman_Map(sds *o, char *reply) {$/;"	f
ldbRedisProtocolToHuman_MultiBulk	src/scripting.c	/^char *ldbRedisProtocolToHuman_MultiBulk(sds *o, char *reply) {$/;"	f
ldbRedisProtocolToHuman_Null	src/scripting.c	/^char *ldbRedisProtocolToHuman_Null(sds *o, char *reply) {$/;"	f
ldbRedisProtocolToHuman_Set	src/scripting.c	/^char *ldbRedisProtocolToHuman_Set(sds *o, char *reply) {$/;"	f
ldbRedisProtocolToHuman_Status	src/scripting.c	/^char *ldbRedisProtocolToHuman_Status(sds *o, char *reply) {$/;"	f
ldbRemoveChild	src/scripting.c	/^int ldbRemoveChild(pid_t pid) {$/;"	f
ldbRepl	src/scripting.c	/^int ldbRepl(lua_State *lua) {$/;"	f
ldbReplParseCommand	src/scripting.c	/^sds *ldbReplParseCommand(int *argcp) {$/;"	f
ldbSendLogs	src/scripting.c	/^void ldbSendLogs(void) {$/;"	f
ldbStartSession	src/scripting.c	/^int ldbStartSession(client *c) {$/;"	f
ldbState	src/scripting.c	/^struct ldbState {$/;"	s	file:
ldbTrace	src/scripting.c	/^void ldbTrace(lua_State *lua) {$/;"	f
ldblib_c	deps/lua/src/ldblib.c	12;"	d	file:
ldebug_c	deps/lua/src/ldebug.c	13;"	d	file:
ldebug_h	deps/lua/src/ldebug.h	8;"	d
ldo_c	deps/lua/src/ldo.c	12;"	d	file:
ldo_h	deps/lua/src/ldo.h	8;"	d
ldump_c	deps/lua/src/ldump.c	9;"	d	file:
le_bits	deps/jemalloc/include/jemalloc/internal/rtree.h	/^	atomic_p_t	le_bits;$/;"	m	struct:rtree_leaf_elm_s
le_event	deps/lua/doc/manual.html	/^     function le_event (op1, op2)$/;"	f
leader	src/sentinel.c	/^    char *leader;       \/* If this is a master instance, this is the runid of$/;"	m	struct:sentinelRedisInstance	file:
leaderVotesDictType	src/sentinel.c	/^dictType leaderVotesDictType = {$/;"	v
leader_epoch	src/sentinel.c	/^    uint64_t leader_epoch; \/* Epoch of the 'leader' field. *\/$/;"	m	struct:sentinelRedisInstance	file:
leaf	deps/jemalloc/include/jemalloc/internal/rtree_tsd.h	/^	rtree_leaf_elm_t	*leaf;$/;"	m	struct:rtree_ctx_cache_elm_s
leafkey	deps/jemalloc/include/jemalloc/internal/rtree_tsd.h	/^	uintptr_t		leafkey;$/;"	m	struct:rtree_ctx_cache_elm_s
leak_ngctx	deps/jemalloc/src/prof.c	/^	size_t	leak_ngctx;$/;"	m	struct:prof_gctx_merge_iter_arg_s	file:
leaveblock	deps/lua/src/lparser.c	/^static void leaveblock (FuncState *fs) {$/;"	f	file:
leavelevel	deps/lua/src/lparser.c	282;"	d	file:
left	deps/lua/src/lparser.c	/^  lu_byte left;  \/* left priority for each binary operator *\/$/;"	m	struct:__anon113	file:
left	deps/lua/src/lua_cmsgpack.c	/^    size_t left;$/;"	m	struct:mp_cur	file:
left	src/server.h	/^    *emptyscan, *multi, *exec, *left, *right, *hset, *srem, *xgroup, *xclaim,  $/;"	m	struct:sharedObjectsStruct
len	deps/hiredis/hiredis.h	/^    size_t len; \/* Length of string *\/$/;"	m	struct:redisReply
len	deps/hiredis/read.h	/^    size_t len; \/* Buffer length *\/$/;"	m	struct:redisReader
len	deps/hiredis/sds.h	/^    uint16_t len; \/* used *\/$/;"	m	struct:hisdshdr16
len	deps/hiredis/sds.h	/^    uint32_t len; \/* used *\/$/;"	m	struct:hisdshdr32
len	deps/hiredis/sds.h	/^    uint64_t len; \/* used *\/$/;"	m	struct:hisdshdr64
len	deps/hiredis/sds.h	/^    uint8_t len; \/* used *\/$/;"	m	struct:hisdshdr8
len	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	unsigned	len;$/;"	m	struct:prof_bt_s
len	deps/jemalloc/test/unit/emitter.c	/^	size_t len;$/;"	m	struct:buf_descriptor_s	file:
len	deps/jemalloc/test/unit/stats_print.c	/^	size_t		len;$/;"	m	struct:__anon121	file:
len	deps/jemalloc/test/unit/stats_print.c	/^	size_t	len; \/* Number of characters preceding '\\0' in buf. *\/$/;"	m	struct:parser_s	file:
len	deps/linenoise/linenoise.c	/^    int len;$/;"	m	struct:abuf	file:
len	deps/linenoise/linenoise.c	/^    size_t len;         \/* Current edited line length. *\/$/;"	m	struct:linenoiseState	file:
len	deps/linenoise/linenoise.h	/^  size_t len;$/;"	m	struct:linenoiseCompletions
len	deps/lua/src/lobject.h	/^    size_t len;$/;"	m	struct:TString::__anon107
len	deps/lua/src/lobject.h	/^    size_t len;$/;"	m	struct:Udata::__anon108
len	deps/lua/src/lstrlib.c	/^    ptrdiff_t len;$/;"	m	struct:MatchState::__anon114	file:
len	deps/lua/src/lua_cmsgpack.c	/^    size_t len, free;$/;"	m	struct:mp_buf	file:
len	src/adlist.h	/^    unsigned long len;$/;"	m	struct:list
len	src/cluster.h	/^    uint32_t len;           \/* ID of the sender module. *\/$/;"	m	struct:__anon36
len	src/module.c	/^    size_t len;     \/* Len of strings or num of elements of arrays. *\/$/;"	m	struct:RedisModuleCallReply	file:
len	src/modules/hellotype.c	/^    size_t len; \/* Number of elements added. *\/$/;"	m	struct:HelloTypeObject	file:
len	src/quicklist.h	/^    unsigned long len;          \/* number of quicklistNodes *\/$/;"	m	struct:quicklist
len	src/redis-cli.c	/^    int len;                    \/* Actual length of the array *\/$/;"	m	struct:clusterManagerNodeArray	file:
len	src/sds.h	/^    uint16_t len; \/* used *\/$/;"	m	struct:sdshdr16
len	src/sds.h	/^    uint32_t len; \/* used *\/$/;"	m	struct:sdshdr32
len	src/sds.h	/^    uint64_t len; \/* used *\/$/;"	m	struct:sdshdr64
len	src/sds.h	/^    uint8_t len; \/* used *\/$/;"	m	struct:sdshdr8
len	src/ziplist.c	/^    unsigned int len;            \/* Bytes used to represent the actual entry.$/;"	m	struct:zlentry	file:
len	tests/modules/defragtest.c	/^    unsigned long len;$/;"	m	struct:FragObject	file:
len	tests/modules/test_lazyfree.c	/^    size_t len; \/* Number of elements added. *\/$/;"	m	struct:LazyFreeLinkObject	file:
len_event	deps/lua/doc/manual.html	/^     function len_event (op)$/;"	f
length	deps/lua/src/strbuf.h	/^    int length;$/;"	m	struct:__anon105
length	src/intset.h	/^    uint32_t length;$/;"	m	struct:intset
length	src/server.h	/^    unsigned long length;$/;"	m	struct:zskiplist
length	src/sparkline.h	/^    int length;$/;"	m	struct:sequence
length	src/stream.h	/^    uint64_t length;        \/* Number of elements inside this stream. *\/$/;"	m	struct:stream
length	tests/modules/blockonkeys.c	/^    long long length;$/;"	m	struct:__anon78	file:
lensize	src/ziplist.c	/^    unsigned int lensize;        \/* Bytes used to encode this entry type\/len.$/;"	m	struct:zlentry	file:
lessequal	deps/lua/src/lvm.c	/^static int lessequal (lua_State *L, const TValue *l, const TValue *r) {$/;"	f	file:
level	deps/lua/src/lstrlib.c	/^  int level;  \/* total number of captures (finished or unfinished) *\/$/;"	m	struct:MatchState	file:
level	src/server.h	/^    int level;$/;"	m	struct:zskiplist
level	src/server.h	/^    } level[];$/;"	m	struct:zskiplistNode	typeref:struct:zskiplistNode::zskiplistLevel
levels	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^	bitmap_level_t levels[BITMAP_MAX_LEVELS+1];$/;"	m	struct:bitmap_info_s
lfu_decay_time	src/server.h	/^    int lfu_decay_time;             \/* LFU counter decay factor. *\/$/;"	m	struct:redisServer
lfu_log_factor	src/server.h	/^    int lfu_log_factor;             \/* LFU logarithmic counter factor. *\/$/;"	m	struct:redisServer
lfunc_c	deps/lua/src/lfunc.c	10;"	d	file:
lfunc_h	deps/lua/src/lfunc.h	8;"	d
lg	deps/jemalloc/include/jemalloc/internal/size_classes.sh	/^lg() {$/;"	f
lg_ceil	deps/jemalloc/include/jemalloc/internal/size_classes.sh	/^lg_ceil() {$/;"	f
lg_curbuckets	deps/jemalloc/include/jemalloc/internal/ckh.h	/^	unsigned lg_curbuckets;$/;"	m	struct:__anon151
lg_fill_div	deps/jemalloc/include/jemalloc/internal/tcache_structs.h	/^	uint8_t		lg_fill_div[NBINS];$/;"	m	struct:tcache_s
lg_floor	deps/jemalloc/include/jemalloc/internal/bit_util.h	/^lg_floor(size_t x) {$/;"	f
lg_minbuckets	deps/jemalloc/include/jemalloc/internal/ckh.h	/^	unsigned lg_minbuckets;$/;"	m	struct:__anon151
lg_prof_sample	deps/jemalloc/src/prof.c	/^size_t		lg_prof_sample;$/;"	v
lgc_c	deps/lua/src/lgc.c	9;"	d	file:
lgc_h	deps/lua/src/lgc.h	8;"	d
li	src/server.h	/^    listTypeIterator *li;$/;"	m	struct:__anon24
libc_hook_ran	deps/jemalloc/test/src/test.c	/^static bool libc_hook_ran = false;$/;"	v	file:
libc_reentrancy_hook	deps/jemalloc/test/src/test.c	/^libc_reentrancy_hook() {$/;"	f	file:
libc_reentrant	deps/jemalloc/test/src/test.c	/^	libc_reentrant = 1,$/;"	e	enum:__anon123	file:
libsize	deps/lua/src/lauxlib.c	/^static int libsize (const luaL_Reg *l) {$/;"	f	file:
likely	deps/jemalloc/include/jemalloc/internal/util.h	32;"	d
likely	deps/jemalloc/include/jemalloc/internal/util.h	35;"	d
likely	src/config.h	107;"	d
likely	src/config.h	110;"	d
limit	src/t_stream.c	/^    long long limit; \/* Maximum amount of entries to trim. If 0, no limitation$/;"	m	struct:__anon11	file:
lindexCommand	src/t_list.c	/^void lindexCommand(client *c) {$/;"	f
line	deps/jemalloc/test/unit/stats_print.c	/^	size_t		line;$/;"	m	struct:__anon121	file:
line	deps/jemalloc/test/unit/stats_print.c	/^	size_t	line;$/;"	m	struct:parser_s	file:
line	src/server.h	/^    sds line;$/;"	m	struct:sentinelLoadQueueEntry
linear	deps/hdr_histogram/hdr_histogram.h	/^        struct hdr_iter_linear linear;$/;"	m	union:hdr_iter::__anon117	typeref:struct:hdr_iter::__anon117::hdr_iter_linear
linebreak_proto	src/modules/gendoc.rb	/^def linebreak_proto(proto, indent)$/;"	f
linedefined	deps/lua/src/lobject.h	/^  int linedefined;$/;"	m	struct:Proto
linedefined	deps/lua/src/lua.h	/^  int linedefined;	\/* (S) *\/$/;"	m	struct:lua_Debug
lineinfo	deps/lua/src/lobject.h	/^  int *lineinfo;  \/* map from opcodes to source lines *\/$/;"	m	struct:Proto
linenoise	deps/linenoise/linenoise.c	/^char *linenoise(const char *prompt) {$/;"	f
linenoiseAddCompletion	deps/linenoise/linenoise.c	/^void linenoiseAddCompletion(linenoiseCompletions *lc, const char *str) {$/;"	f
linenoiseAtExit	deps/linenoise/linenoise.c	/^static void linenoiseAtExit(void) {$/;"	f	file:
linenoiseBeep	deps/linenoise/linenoise.c	/^static void linenoiseBeep(void) {$/;"	f	file:
linenoiseClearScreen	deps/linenoise/linenoise.c	/^void linenoiseClearScreen(void) {$/;"	f
linenoiseCompletionCallback	deps/linenoise/linenoise.h	/^typedef void(linenoiseCompletionCallback)(const char *, linenoiseCompletions *);$/;"	t
linenoiseCompletions	deps/linenoise/linenoise.h	/^typedef struct linenoiseCompletions {$/;"	s
linenoiseCompletions	deps/linenoise/linenoise.h	/^} linenoiseCompletions;$/;"	t	typeref:struct:linenoiseCompletions
linenoiseEdit	deps/linenoise/linenoise.c	/^static int linenoiseEdit(int stdin_fd, int stdout_fd, char *buf, size_t buflen, const char *prompt)$/;"	f	file:
linenoiseEditBackspace	deps/linenoise/linenoise.c	/^void linenoiseEditBackspace(struct linenoiseState *l) {$/;"	f
linenoiseEditDelete	deps/linenoise/linenoise.c	/^void linenoiseEditDelete(struct linenoiseState *l) {$/;"	f
linenoiseEditDeletePrevWord	deps/linenoise/linenoise.c	/^void linenoiseEditDeletePrevWord(struct linenoiseState *l) {$/;"	f
linenoiseEditHistoryNext	deps/linenoise/linenoise.c	/^void linenoiseEditHistoryNext(struct linenoiseState *l, int dir) {$/;"	f
linenoiseEditInsert	deps/linenoise/linenoise.c	/^int linenoiseEditInsert(struct linenoiseState *l, char c) {$/;"	f
linenoiseEditMoveEnd	deps/linenoise/linenoise.c	/^void linenoiseEditMoveEnd(struct linenoiseState *l) {$/;"	f
linenoiseEditMoveHome	deps/linenoise/linenoise.c	/^void linenoiseEditMoveHome(struct linenoiseState *l) {$/;"	f
linenoiseEditMoveLeft	deps/linenoise/linenoise.c	/^void linenoiseEditMoveLeft(struct linenoiseState *l) {$/;"	f
linenoiseEditMoveRight	deps/linenoise/linenoise.c	/^void linenoiseEditMoveRight(struct linenoiseState *l) {$/;"	f
linenoiseFree	deps/linenoise/linenoise.c	/^void linenoiseFree(void *ptr) {$/;"	f
linenoiseFreeHintsCallback	deps/linenoise/linenoise.h	/^typedef void(linenoiseFreeHintsCallback)(void *);$/;"	t
linenoiseHintsCallback	deps/linenoise/linenoise.h	/^typedef char*(linenoiseHintsCallback)(const char *, int *color, int *bold);$/;"	t
linenoiseHistoryAdd	deps/linenoise/linenoise.c	/^int linenoiseHistoryAdd(const char *line) {$/;"	f
linenoiseHistoryLoad	deps/linenoise/linenoise.c	/^int linenoiseHistoryLoad(const char *filename) {$/;"	f
linenoiseHistorySave	deps/linenoise/linenoise.c	/^int linenoiseHistorySave(const char *filename) {$/;"	f
linenoiseHistorySetMaxLen	deps/linenoise/linenoise.c	/^int linenoiseHistorySetMaxLen(int len) {$/;"	f
linenoiseMaskModeDisable	deps/linenoise/linenoise.c	/^void linenoiseMaskModeDisable(void) {$/;"	f
linenoiseMaskModeEnable	deps/linenoise/linenoise.c	/^void linenoiseMaskModeEnable(void) {$/;"	f
linenoiseNoTTY	deps/linenoise/linenoise.c	/^static char *linenoiseNoTTY(void) {$/;"	f	file:
linenoisePrintKeyCodes	deps/linenoise/linenoise.c	/^void linenoisePrintKeyCodes(void) {$/;"	f
linenoiseRaw	deps/linenoise/linenoise.c	/^static int linenoiseRaw(char *buf, size_t buflen, const char *prompt) {$/;"	f	file:
linenoiseSetCompletionCallback	deps/linenoise/linenoise.c	/^void linenoiseSetCompletionCallback(linenoiseCompletionCallback *fn) {$/;"	f
linenoiseSetFreeHintsCallback	deps/linenoise/linenoise.c	/^void linenoiseSetFreeHintsCallback(linenoiseFreeHintsCallback *fn) {$/;"	f
linenoiseSetHintsCallback	deps/linenoise/linenoise.c	/^void linenoiseSetHintsCallback(linenoiseHintsCallback *fn) {$/;"	f
linenoiseSetMultiLine	deps/linenoise/linenoise.c	/^void linenoiseSetMultiLine(int ml) {$/;"	f
linenoiseState	deps/linenoise/linenoise.c	/^struct linenoiseState {$/;"	s	file:
linenum	src/server.h	/^    int linenum;$/;"	m	struct:sentinelLoadQueueEntry
linenumber	deps/lua/src/llex.h	/^  int linenumber;  \/* input line counter *\/$/;"	m	struct:LexState
lines	src/scripting.c	/^    int lines;  \/* Number of lines in 'src'. *\/$/;"	m	struct:ldbState	file:
linit_c	deps/lua/src/linit.c	8;"	d	file:
link	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^	ql_elm(cache_bin_array_descriptor_t) link;$/;"	m	struct:cache_bin_array_descriptor_s
link	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	ql_elm(emitter_col_t) link;$/;"	m	struct:emitter_col_s
link	deps/jemalloc/include/jemalloc/internal/tcache_structs.h	/^	ql_elm(tcache_t) link;$/;"	m	struct:tcache_s
link	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^	ql_elm(tsd_init_block_t) link;$/;"	m	struct:tsd_init_block_s
link	deps/jemalloc/include/jemalloc/internal/witness.h	/^	ql_elm(witness_t)	link;$/;"	m	struct:witness_s
link	src/cluster.h	/^    clusterLink *link;          \/* TCP\/IP link with this node *\/$/;"	m	struct:clusterNode
link	src/sentinel.c	/^    instanceLink *link; \/* Link to the instance, may be shared for Sentinels. *\/$/;"	m	struct:sentinelRedisInstance	file:
linkClient	src/networking.c	/^void linkClient(client *c) {$/;"	f
link_whole_archive	deps/jemalloc/Makefile	/^link_whole_archive := 0$/;"	m
linsertCommand	src/t_list.c	/^void linsertCommand(client *c) {$/;"	f
linuxMadvFreeForkBugCheck	src/server.c	/^int linuxMadvFreeForkBugCheck(void) {$/;"	f
linuxMemoryWarnings	src/server.c	/^void linuxMemoryWarnings(void) {$/;"	f
linuxOvercommitMemoryValue	src/server.c	/^int linuxOvercommitMemoryValue(void) {$/;"	f
linux_supported	deps/jemalloc/scripts/gen_run_tests.py	/^                  or 'background_thread:true' in malloc_conf_opts)$/;"	v
liolib_c	deps/lua/src/liolib.c	13;"	d	file:
list	src/adlist.h	/^typedef struct list {$/;"	s
list	src/adlist.h	/^} list;$/;"	t	typeref:struct:list
list	tests/modules/blockonkeys.c	/^    long long list[LIST_SIZE];$/;"	m	struct:__anon78	file:
listAddNodeHead	src/adlist.c	/^list *listAddNodeHead(list *list, void *value)$/;"	f
listAddNodeTail	src/adlist.c	/^list *listAddNodeTail(list *list, void *value)$/;"	f
listCreate	src/adlist.c	/^list *listCreate(void)$/;"	f
listDelNode	src/adlist.c	/^void listDelNode(list *list, listNode *node)$/;"	f
listDup	src/adlist.c	/^list *listDup(list *orig)$/;"	f
listElementsRemoved	src/t_list.c	/^void listElementsRemoved(client *c, robj *key, int where, robj *o, long count) {$/;"	f
listEmpty	src/adlist.c	/^void listEmpty(list *list)$/;"	f
listFirst	src/adlist.h	58;"	d
listGetDupMethod	src/adlist.h	68;"	d
listGetFreeMethod	src/adlist.h	69;"	d
listGetIterator	src/adlist.c	/^listIter *listGetIterator(list *list, int direction)$/;"	f
listGetMatchMethod	src/adlist.h	70;"	d
listIndex	src/adlist.c	/^listNode *listIndex(list *list, long index) {$/;"	f
listInsertNode	src/adlist.c	/^list *listInsertNode(list *list, listNode *old_node, void *value, int after) {$/;"	f
listIter	src/adlist.h	/^typedef struct listIter {$/;"	s
listIter	src/adlist.h	/^} listIter;$/;"	t	typeref:struct:listIter
listJoin	src/adlist.c	/^void listJoin(list *l, list *o) {$/;"	f
listLast	src/adlist.h	59;"	d
listLength	src/adlist.h	57;"	d
listMatchObjects	src/networking.c	/^int listMatchObjects(void *a, void *b) {$/;"	f
listNext	src/adlist.c	/^listNode *listNext(listIter *iter)$/;"	f
listNextNode	src/adlist.h	61;"	d
listNode	src/adlist.h	/^typedef struct listNode {$/;"	s
listNode	src/adlist.h	/^} listNode;$/;"	t	typeref:struct:listNode
listNodeValue	src/adlist.h	62;"	d
listPopSaver	src/t_list.c	/^void *listPopSaver(unsigned char *data, unsigned int sz) {$/;"	f
listPos	src/server.h	/^    struct listPos {$/;"	s	struct:blockingState
listPrevNode	src/adlist.h	60;"	d
listRelease	src/adlist.c	/^void listRelease(list *list)$/;"	f
listReleaseIterator	src/adlist.c	/^void listReleaseIterator(listIter *iter) {$/;"	f
listRewind	src/adlist.c	/^void listRewind(list *list, listIter *li) {$/;"	f
listRewindTail	src/adlist.c	/^void listRewindTail(list *list, listIter *li) {$/;"	f
listRotateHeadToTail	src/adlist.c	/^void listRotateHeadToTail(list *list) {$/;"	f
listRotateTailToHead	src/adlist.c	/^void listRotateTailToHead(list *list) {$/;"	f
listSearchKey	src/adlist.c	/^listNode *listSearchKey(list *list, void *key)$/;"	f
listSetDupMethod	src/adlist.h	64;"	d
listSetFreeMethod	src/adlist.h	65;"	d
listSetMatchMethod	src/adlist.h	66;"	d
listTypeConvert	src/t_list.c	/^void listTypeConvert(robj *subject, int enc) {$/;"	f
listTypeDelete	src/t_list.c	/^void listTypeDelete(listTypeIterator *iter, listTypeEntry *entry) {$/;"	f
listTypeDup	src/t_list.c	/^robj *listTypeDup(robj *o) {$/;"	f
listTypeEntry	src/server.h	/^} listTypeEntry;$/;"	t	typeref:struct:__anon24
listTypeEqual	src/t_list.c	/^int listTypeEqual(listTypeEntry *entry, robj *o) {$/;"	f
listTypeGet	src/t_list.c	/^robj *listTypeGet(listTypeEntry *entry) {$/;"	f
listTypeInitIterator	src/t_list.c	/^listTypeIterator *listTypeInitIterator(robj *subject, long index,$/;"	f
listTypeInsert	src/t_list.c	/^void listTypeInsert(listTypeEntry *entry, robj *value, int where) {$/;"	f
listTypeIterator	src/server.h	/^} listTypeIterator;$/;"	t	typeref:struct:__anon23
listTypeLength	src/t_list.c	/^unsigned long listTypeLength(const robj *subject) {$/;"	f
listTypeNext	src/t_list.c	/^int listTypeNext(listTypeIterator *li, listTypeEntry *entry) {$/;"	f
listTypePop	src/t_list.c	/^robj *listTypePop(robj *subject, int where) {$/;"	f
listTypePush	src/t_list.c	/^void listTypePush(robj *subject, robj *value, int where) {$/;"	f
listTypeReleaseIterator	src/t_list.c	/^void listTypeReleaseIterator(listTypeIterator *li) {$/;"	f
list_compress_depth	src/server.h	/^    int list_compress_depth;$/;"	m	struct:redisServer
list_head_t	deps/jemalloc/test/unit/ql.c	/^typedef ql_head(list_t) list_head_t;$/;"	t	file:
list_max_ziplist_size	src/server.h	/^    int list_max_ziplist_size;$/;"	m	struct:redisServer
list_s	deps/jemalloc/test/unit/ql.c	/^struct list_s {$/;"	s	file:
list_t	deps/jemalloc/test/unit/ql.c	/^typedef struct list_s list_t;$/;"	t	typeref:struct:list_s	file:
listenToPort	src/server.c	/^int listenToPort(int port, socketFds *sfd) {$/;"	f
listfield	deps/lua/src/lparser.c	/^static void listfield (LexState *ls, struct ConsControl *cc) {$/;"	f	file:
listing	deps/lua/src/luac.c	/^static int listing=0;			\/* list bytecodes? *\/$/;"	v	file:
listnode	src/blocked.c	/^    listNode *listnode;     \/* List node for db->blocking_keys[key] list. *\/$/;"	m	struct:bkinfo	file:
listpos	src/server.h	/^    } listpos;              \/* The positions in the src\/dst lists$/;"	m	struct:blockingState	typeref:struct:blockingState::listPos
liveclients	src/redis-benchmark.c	/^    redisAtomic int liveclients;$/;"	m	struct:config	file:
liveclients_mutex	src/redis-benchmark.c	/^    pthread_mutex_t liveclients_mutex;$/;"	m	struct:config	file:
ll	src/config.c	/^        long long *ll;$/;"	m	union:numericConfigData::__anon45	file:
ll	src/module.c	/^        long long ll;    \/* Reply value for integer reply. *\/$/;"	m	union:RedisModuleCallReply::__anon65	file:
ll2string	src/util.c	/^int ll2string(char *dst, size_t dstlen, long long svalue) {$/;"	f
ll_funcs	deps/lua/src/loadlib.c	/^static const luaL_Reg ll_funcs[] = {$/;"	v	file:
ll_load	deps/lua/src/loadlib.c	/^static void *ll_load (lua_State *L, const char *path) {$/;"	f	file:
ll_loadfunc	deps/lua/src/loadlib.c	/^static int ll_loadfunc (lua_State *L, const char *path, const char *sym) {$/;"	f	file:
ll_loadlib	deps/lua/src/loadlib.c	/^static int ll_loadlib (lua_State *L) {$/;"	f	file:
ll_module	deps/lua/src/loadlib.c	/^static int ll_module (lua_State *L) {$/;"	f	file:
ll_register	deps/lua/src/loadlib.c	/^static void **ll_register (lua_State *L, const char *path) {$/;"	f	file:
ll_require	deps/lua/src/loadlib.c	/^static int ll_require (lua_State *L) {$/;"	f	file:
ll_seeall	deps/lua/src/loadlib.c	/^static int ll_seeall (lua_State *L) {$/;"	f	file:
ll_sym	deps/lua/src/loadlib.c	/^static lua_CFunction ll_sym (lua_State *L, void *lib, const char *sym) {$/;"	f	file:
ll_unloadlib	deps/lua/src/loadlib.c	/^static void ll_unloadlib (void *lib) {$/;"	f	file:
llenCommand	src/t_list.c	/^void llenCommand(client *c) {$/;"	f
llex	deps/lua/src/llex.c	/^static int llex (LexState *ls, SemInfo *seminfo) {$/;"	f	file:
llex_c	deps/lua/src/llex.c	12;"	d	file:
llex_h	deps/lua/src/llex.h	8;"	d
llimits_h	deps/lua/src/llimits.h	8;"	d
lmathlib_c	deps/lua/src/lmathlib.c	11;"	d	file:
lmem_c	deps/lua/src/lmem.c	10;"	d	file:
lmem_h	deps/lua/src/lmem.h	8;"	d
lmemfind	deps/lua/src/lstrlib.c	/^static const char *lmemfind (const char *s1, size_t l1,$/;"	f	file:
lmod	deps/lua/src/lobject.h	355;"	d
lmove	src/server.h	/^    *rpop, *lpop, *lpush, *rpoplpush, *lmove, *blmove, *zpopmin, *zpopmax,$/;"	m	struct:sharedObjectsStruct
lmoveCommand	src/server.h	/^                        *xgroupCommand, *rpoplpushCommand, *lmoveCommand;$/;"	m	struct:redisServer	typeref:struct:redisServer::
lmoveCommand	src/t_list.c	/^void lmoveCommand(client *c) {$/;"	f
lmoveGenericCommand	src/t_list.c	/^void lmoveGenericCommand(client *c, int wherefrom, int whereto) {$/;"	f
lmoveHandlePush	src/t_list.c	/^void lmoveHandlePush(client *c, robj *dstkey, robj *dstobj, robj *value,$/;"	f
ln_gamma	deps/jemalloc/test/include/test/math.h	/^ln_gamma(double x) {$/;"	f
ln_gamma_misc_expected	deps/jemalloc/test/unit/math.c	/^static const double ln_gamma_misc_expected[] = {$/;"	v	file:
lndebug	deps/linenoise/linenoise.c	196;"	d	file:
load	src/server.h	/^    *lastid, *ping, *setid, *keepttl, *load, *createconsumer,$/;"	m	struct:sharedObjectsStruct
loadAppendOnlyFile	src/aof.c	/^int loadAppendOnlyFile(char *filename) {$/;"	f
loadData	exp/3_ycsb_client.sh	/^loadData() {$/;"	f
loadDataFromDisk	src/server.c	/^void loadDataFromDisk(void) {$/;"	f
loadSentinelConfigFromQueue	src/sentinel.c	/^void loadSentinelConfigFromQueue(void) {$/;"	f
loadServerConfig	src/config.c	/^void loadServerConfig(char *filename, char config_from_stdin, char *options) {$/;"	f
loadServerConfigFromString	src/config.c	/^void loadServerConfigFromString(char *config) {$/;"	f
load_aux	deps/lua/src/lbaselib.c	/^static int load_aux (lua_State *L, int status) {$/;"	f	file:
loaded_event_log	tests/modules/keyspace_events.c	/^RedisModuleDict *loaded_event_log = NULL;$/;"	v
loader_C	deps/lua/src/loadlib.c	/^static int loader_C (lua_State *L) {$/;"	f	file:
loader_Croot	deps/lua/src/loadlib.c	/^static int loader_Croot (lua_State *L) {$/;"	f	file:
loader_Lua	deps/lua/src/loadlib.c	/^static int loader_Lua (lua_State *L) {$/;"	f	file:
loader_preload	deps/lua/src/loadlib.c	/^static int loader_preload (lua_State *L) {$/;"	f	file:
loaderror	deps/lua/src/loadlib.c	/^static void loaderror (lua_State *L, const char *filename) {$/;"	f	file:
loaders	deps/lua/src/loadlib.c	/^static const lua_CFunction loaders[] =$/;"	v	file:
loading	src/server.h	/^    volatile sig_atomic_t loading; \/* We are loading data from disk if true *\/$/;"	m	struct:redisServer
loadingCallback	tests/modules/hooks.c	/^void loadingCallback(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)$/;"	f
loadingProgress	src/rdb.c	/^void loadingProgress(off_t pos) {$/;"	f
loadingProgressCallback	tests/modules/hooks.c	/^void loadingProgressCallback(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)$/;"	f
loading_loaded_bytes	src/server.h	/^    off_t loading_loaded_bytes;$/;"	m	struct:redisServer
loading_process_events_interval_bytes	src/server.h	/^    off_t loading_process_events_interval_bytes;$/;"	m	struct:redisServer
loading_rdb_used_mem	src/server.h	/^    off_t loading_rdb_used_mem;$/;"	m	struct:redisServer
loading_start_time	src/server.h	/^    time_t loading_start_time;$/;"	m	struct:redisServer
loading_total_bytes	src/server.h	/^    off_t loading_total_bytes;$/;"	m	struct:redisServer
loadingerr	src/server.h	/^    *outofrangeerr, *noscripterr, *loadingerr, *slowscripterr, *bgsaveerr,$/;"	m	struct:sharedObjectsStruct
loadlib_c	deps/lua/src/loadlib.c	16;"	d	file:
loadline	deps/lua/src/lua.c	/^static int loadline (lua_State *L) {$/;"	f	file:
loadmodule_queue	src/server.h	/^    list *loadmodule_queue;     \/* List of modules to load at startup. *\/$/;"	m	struct:redisServer
lobject_c	deps/lua/src/lobject.c	13;"	d	file:
lobject_h	deps/lua/src/lobject.h	9;"	d
local a 	deps/lua/test/factorial.lua	/^      local a = function (f) return f(f) end$/;"	f
local f	deps/lua/test/env.lua	/^local f=function (t,i) return os.getenv(i) end$/;"	f
local f	deps/lua/test/readonly.lua	/^local f=function (t,i) error("cannot redefine global variable `"..i.."'",2) end$/;"	f
local log	deps/lua/test/trace-globals.lua	/^ local log=function (name,old,new)$/;"	f
local set	deps/lua/test/trace-globals.lua	/^ local set=function (t,name,value)$/;"	f
local tostring	deps/lua/test/trace-globals.lua	/^ local tostring=function(a)$/;"	f
locale_decimal_point	deps/lua/src/fpconv.c	/^static char locale_decimal_point = '.';$/;"	v	file:
localfunc	deps/lua/src/lparser.c	/^static void localfunc (LexState *ls) {$/;"	f	file:
localstat	deps/lua/src/lparser.c	/^static void localstat (LexState *ls) {$/;"	f	file:
lock	deps/jemalloc/include/jemalloc/internal/bin.h	/^	malloc_mutex_t		lock;$/;"	m	struct:bin_s
lock	deps/jemalloc/include/jemalloc/internal/mutex.h	/^			CRITICAL_SECTION	lock;$/;"	m	struct:malloc_mutex_s::__anon157::__anon158
lock	deps/jemalloc/include/jemalloc/internal/mutex.h	/^			OSSpinLock		lock;$/;"	m	struct:malloc_mutex_s::__anon157::__anon158
lock	deps/jemalloc/include/jemalloc/internal/mutex.h	/^			SRWLOCK         	lock;$/;"	m	struct:malloc_mutex_s::__anon157::__anon158
lock	deps/jemalloc/include/jemalloc/internal/mutex.h	/^			os_unfair_lock		lock;$/;"	m	struct:malloc_mutex_s::__anon157::__anon158
lock	deps/jemalloc/include/jemalloc/internal/mutex.h	/^			pthread_mutex_t		lock;$/;"	m	struct:malloc_mutex_s::__anon157::__anon158
lock	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	malloc_mutex_t		*lock;$/;"	m	struct:prof_gctx_s
lock	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	malloc_mutex_t		*lock;$/;"	m	struct:prof_tdata_s
lock	deps/jemalloc/src/tsd.c	/^	malloc_mutex_t lock;$/;"	m	struct:tsd_init_head_s	file:
lock	deps/jemalloc/test/include/test/mtx.h	/^	CRITICAL_SECTION	lock;$/;"	m	struct:__anon124
lock_order	deps/jemalloc/include/jemalloc/internal/mutex.h	/^		malloc_mutex_lock_order_t	lock_order;$/;"	m	union:malloc_mutex_s::__anon157
lock_order	deps/jemalloc/include/jemalloc/internal/mutex.h	/^	malloc_mutex_lock_order_t	lock_order;$/;"	m	struct:malloc_mutex_s
lock_result_failure	deps/jemalloc/src/extent.c	/^	lock_result_failure,$/;"	e	enum:__anon128	file:
lock_result_no_extent	deps/jemalloc/src/extent.c	/^	lock_result_no_extent$/;"	e	enum:__anon128	file:
lock_result_success	deps/jemalloc/src/extent.c	/^	lock_result_success,$/;"	e	enum:__anon128	file:
lock_result_t	deps/jemalloc/src/extent.c	/^} lock_result_t;$/;"	t	typeref:enum:__anon128	file:
locvars	deps/lua/src/lobject.h	/^  struct LocVar *locvars;  \/* information about local variables *\/$/;"	m	struct:Proto	typeref:struct:Proto::LocVar
log	deps/hdr_histogram/hdr_histogram.h	/^        struct hdr_iter_log log;$/;"	m	union:hdr_iter::__anon117	typeref:struct:hdr_iter::__anon117::hdr_iter_log
log	deps/jemalloc/src/zone.c	/^	void (*log)(malloc_zone_t *, void *);$/;"	m	struct:malloc_introspection_t	file:
logCurrentClient	src/debug.c	/^void logCurrentClient(void) {$/;"	f
logModulesInfo	src/debug.c	/^void logModulesInfo(void) {$/;"	f
logRegisters	src/debug.c	/^void logRegisters(ucontext_t *uc) {$/;"	f
logServerInfo	src/debug.c	/^void logServerInfo(void) {$/;"	f
logStackContent	src/debug.c	/^void logStackContent(void **sp) {$/;"	f
logStackTrace	src/debug.c	/^void logStackTrace(void *eip, int uplevel) {$/;"	f
log_base	deps/hdr_histogram/hdr_histogram.h	/^    double log_base;$/;"	m	struct:hdr_iter_log
log_command_name	tests/modules/commandfilter.c	/^static const char log_command_name[] = "commandfilter.log";$/;"	v	file:
log_crashes	tests/instances.tcl	/^proc log_crashes {} {$/;"	p
log_do_begin	deps/jemalloc/include/jemalloc/internal/log.h	65;"	d
log_do_end	deps/jemalloc/include/jemalloc/internal/log.h	76;"	d
log_file_matches	tests/integration/replication.tcl	/^proc log_file_matches {log pattern} {$/;"	p
log_impl_varargs	deps/jemalloc/include/jemalloc/internal/log.h	/^log_impl_varargs(const char *name, ...) {$/;"	f
log_incr	utils/lru/lfu-simulation.c	/^uint8_t log_incr(uint8_t counter) {$/;"	f
log_init_done	deps/jemalloc/src/log.c	/^atomic_b_t log_init_done = ATOMIC_INIT(false);$/;"	v
log_iter_next	deps/hdr_histogram/hdr_histogram.c	/^static bool log_iter_next(struct hdr_iter *iter)$/;"	f	file:
log_key_name	tests/modules/commandfilter.c	/^static RedisModuleString *log_key_name;$/;"	v	file:
log_var_extract_segment	deps/jemalloc/src/log.c	/^log_var_extract_segment(const char* segment_begin) {$/;"	f	file:
log_var_matches_segment	deps/jemalloc/src/log.c	/^log_var_matches_segment(const char *segment_begin, const char *segment_end,$/;"	f	file:
log_var_names	deps/jemalloc/src/log.c	/^char log_var_names[JEMALLOC_LOG_VAR_BUFSIZE];$/;"	v
log_var_s	deps/jemalloc/include/jemalloc/internal/log.h	/^struct log_var_s {$/;"	s
log_var_t	deps/jemalloc/include/jemalloc/internal/log.h	/^typedef struct log_var_s log_var_t;$/;"	t	typeref:struct:log_var_s
log_var_update_state	deps/jemalloc/src/log.c	/^log_var_update_state(log_var_t *log_var) {$/;"	f
logfile	src/server.h	/^    char *logfile;                  \/* Path of log file *\/$/;"	m	struct:redisServer
loglevel_enum	src/config.c	/^configEnum loglevel_enum[] = {$/;"	v
logs	src/scripting.c	/^    list *logs; \/* List of messages to send to the client. *\/$/;"	m	struct:ldbState	file:
lolwut5Command	src/lolwut5.c	/^void lolwut5Command(client *c) {$/;"	f
lolwut6Command	src/lolwut6.c	/^void lolwut6Command(client *c) {$/;"	f
lolwutCommand	src/lolwut.c	/^void lolwutCommand(client *c) {$/;"	f
lolwutUnstableCommand	src/lolwut.c	/^void lolwutUnstableCommand(client *c) {$/;"	f
longLatFromMember	src/geo.c	/^int longLatFromMember(robj *zobj, robj *member, double *xy) {$/;"	f
longitude	src/geo.h	/^    double longitude;$/;"	m	struct:geoPoint
longitude	src/geohash.h	/^    GeoHashRange longitude;$/;"	m	struct:__anon49
longval	src/quicklist.h	/^    long long longval;$/;"	m	struct:quicklistEntry
lookahead	deps/lua/src/llex.h	/^  Token lookahead;  \/* look ahead token *\/$/;"	m	struct:LexState
lookupClientByID	src/networking.c	/^client *lookupClientByID(uint64_t id) {$/;"	f
lookupCommand	src/server.c	/^struct redisCommand *lookupCommand(sds name) {$/;"	f
lookupCommandByCString	src/server.c	/^struct redisCommand *lookupCommandByCString(const char *s) {$/;"	f
lookupCommandOrOriginal	src/server.c	/^struct redisCommand *lookupCommandOrOriginal(sds name) {$/;"	f
lookupKey	src/db.c	/^robj *lookupKey(redisDb *db, robj *key, int flags) {$/;"	f
lookupKeyByPattern	src/sort.c	/^robj *lookupKeyByPattern(redisDb *db, robj *pattern, robj *subst, int writeflag) {$/;"	f
lookupKeyRead	src/db.c	/^robj *lookupKeyRead(redisDb *db, robj *key) {$/;"	f
lookupKeyReadOrReply	src/db.c	/^robj *lookupKeyReadOrReply(client *c, robj *key, robj *reply) {$/;"	f
lookupKeyReadWithFlags	src/db.c	/^robj *lookupKeyReadWithFlags(redisDb *db, robj *key, int flags) {$/;"	f
lookupKeyWrite	src/db.c	/^robj *lookupKeyWrite(redisDb *db, robj *key) {$/;"	f
lookupKeyWriteOrReply	src/db.c	/^robj *lookupKeyWriteOrReply(client *c, robj *key, robj *reply) {$/;"	f
lookupKeyWriteWithFlags	src/db.c	/^robj *lookupKeyWriteWithFlags(redisDb *db, robj *key, int flags) {$/;"	f
lookupStringForBitCommand	src/bitops.c	/^robj *lookupStringForBitCommand(client *c, size_t maxbit) {$/;"	f
loop	deps/hiredis/adapters/ae.h	/^    aeEventLoop *loop;$/;"	m	struct:redisAeEvents
loop	deps/hiredis/adapters/libev.h	/^    struct ev_loop *loop;$/;"	m	struct:redisLibevEvents	typeref:struct:redisLibevEvents::ev_loop
loop	deps/hiredis/examples/example-ae.c	/^static aeEventLoop *loop;$/;"	v	file:
loop	src/redis-benchmark.c	/^    int loop;$/;"	m	struct:config	file:
loop	src/sentinel.c	/^    aeEventLoop *loop;$/;"	m	struct:redisAeEvents	file:
lopcodes_c	deps/lua/src/lopcodes.c	7;"	d	file:
lopcodes_h	deps/lua/src/lopcodes.h	8;"	d
loslib_c	deps/lua/src/loslib.c	14;"	d	file:
low_water	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^	cache_bin_sz_t low_water;$/;"	m	struct:cache_bin_s
lower_bound	src/config.c	/^    long long lower_bound; \/* The lower bound of this numeric value *\/$/;"	m	struct:numericConfigData	file:
lowest_equivalent_value	deps/hdr_histogram/hdr_histogram.c	/^static int64_t lowest_equivalent_value(const struct hdr_histogram* h, int64_t value)$/;"	f	file:
lowest_equivalent_value	deps/hdr_histogram/hdr_histogram.h	/^    int64_t lowest_equivalent_value;$/;"	m	struct:hdr_iter
lowest_trackable_value	deps/hdr_histogram/hdr_histogram.h	/^    int64_t lowest_trackable_value;$/;"	m	struct:hdr_histogram
lowest_trackable_value	deps/hdr_histogram/hdr_histogram.h	/^    int64_t lowest_trackable_value;$/;"	m	struct:hdr_histogram_bucket_config
lp	src/stream.h	/^    unsigned char *lp;      \/* Current listpack. *\/$/;"	m	struct:streamIterator
lpAppend	src/listpack.c	/^unsigned char *lpAppend(unsigned char *lp, unsigned char *ele, uint32_t size) {$/;"	f
lpAppendInteger	src/t_stream.c	/^unsigned char *lpAppendInteger(unsigned char *lp, int64_t value) {$/;"	f
lpBytes	src/listpack.c	/^uint32_t lpBytes(unsigned char *lp) {$/;"	f
lpCurrentEncodedSizeBytes	src/listpack.c	/^uint32_t lpCurrentEncodedSizeBytes(unsigned char *p) {$/;"	f
lpCurrentEncodedSizeUnsafe	src/listpack.c	/^uint32_t lpCurrentEncodedSizeUnsafe(unsigned char *p) {$/;"	f
lpDecodeBacklen	src/listpack.c	/^uint64_t lpDecodeBacklen(unsigned char *p) {$/;"	f
lpDelete	src/listpack.c	/^unsigned char *lpDelete(unsigned char *lp, unsigned char *p, unsigned char **newp) {$/;"	f
lpEncodeBacklen	src/listpack.c	/^unsigned long lpEncodeBacklen(unsigned char *buf, uint64_t l) {$/;"	f
lpEncodeGetType	src/listpack.c	/^int lpEncodeGetType(unsigned char *ele, uint32_t size, unsigned char *intenc, uint64_t *enclen) {$/;"	f
lpEncodeString	src/listpack.c	/^void lpEncodeString(unsigned char *buf, unsigned char *s, uint32_t len) {$/;"	f
lpFirst	src/listpack.c	/^unsigned char *lpFirst(unsigned char *lp) {$/;"	f
lpFree	src/listpack.c	/^void lpFree(unsigned char *lp) {$/;"	f
lpGet	src/listpack.c	/^unsigned char *lpGet(unsigned char *p, int64_t *count, unsigned char *intbuf) {$/;"	f
lpGetEdgeStreamID	src/t_stream.c	/^int lpGetEdgeStreamID(unsigned char *lp, int first, streamID *master_id, streamID *edge_id)$/;"	f
lpGetInteger	src/t_stream.c	289;"	d	file:
lpGetIntegerIfValid	src/t_stream.c	/^static inline int64_t lpGetIntegerIfValid(unsigned char *ele, int *valid) {$/;"	f	file:
lpGetNumElements	src/listpack.c	105;"	d	file:
lpGetTotalBytes	src/listpack.c	100;"	d	file:
lpInsert	src/listpack.c	/^unsigned char *lpInsert(unsigned char *lp, unsigned char *ele, uint32_t size, unsigned char *p, int where, unsigned char **newp) {$/;"	f
lpLast	src/listpack.c	/^unsigned char *lpLast(unsigned char *lp) {$/;"	f
lpLength	src/listpack.c	/^uint32_t lpLength(unsigned char *lp) {$/;"	f
lpNew	src/listpack.c	/^unsigned char *lpNew(size_t capacity) {$/;"	f
lpNext	src/listpack.c	/^unsigned char *lpNext(unsigned char *lp, unsigned char *p) {$/;"	f
lpPrev	src/listpack.c	/^unsigned char *lpPrev(unsigned char *lp, unsigned char *p) {$/;"	f
lpReplaceInteger	src/t_stream.c	/^unsigned char *lpReplaceInteger(unsigned char *lp, unsigned char **pos, int64_t value) {$/;"	f
lpSeek	src/listpack.c	/^unsigned char *lpSeek(unsigned char *lp, long index) {$/;"	f
lpSetNumElements	src/listpack.c	114;"	d	file:
lpSetTotalBytes	src/listpack.c	107;"	d	file:
lpShrinkToFit	src/listpack.c	/^unsigned char* lpShrinkToFit(unsigned char *lp) {$/;"	f
lpSkip	src/listpack.c	/^unsigned char *lpSkip(unsigned char *p) {$/;"	f
lpStringToInt64	src/listpack.c	/^int lpStringToInt64(const char *s, unsigned long slen, int64_t *value) {$/;"	f
lpValidateIntegrity	src/listpack.c	/^int lpValidateIntegrity(unsigned char *lp, size_t size, int deep){$/;"	f
lpValidateNext	src/listpack.c	/^int lpValidateNext(unsigned char *lp, unsigned char **pp, size_t lpbytes) {$/;"	f
lp_ele	src/stream.h	/^    unsigned char *lp_ele;  \/* Current listpack cursor. *\/$/;"	m	struct:streamIterator
lp_flags	src/stream.h	/^    unsigned char *lp_flags; \/* Current entry flags pointer. *\/$/;"	m	struct:streamIterator
lp_free	src/listpack_malloc.h	44;"	d
lp_malloc	src/listpack_malloc.h	42;"	d
lp_malloc_size	src/listpack_malloc.h	45;"	d
lp_realloc	src/listpack_malloc.h	43;"	d
lparser_c	deps/lua/src/lparser.c	10;"	d	file:
lparser_h	deps/lua/src/lparser.h	8;"	d
lpop	src/server.h	/^    *rpop, *lpop, *lpush, *rpoplpush, *lmove, *blmove, *zpopmin, *zpopmax,$/;"	m	struct:sharedObjectsStruct
lpop	tests/test_helper.tcl	/^proc lpop {listVar {count 1}} {$/;"	p
lpopCommand	src/server.h	/^                        *lpopCommand, *rpopCommand, *zpopminCommand,$/;"	m	struct:redisServer	typeref:struct:redisServer::
lpopCommand	src/t_list.c	/^void lpopCommand(client *c) {$/;"	f
lposCommand	src/t_list.c	/^void lposCommand(client *c) {$/;"	f
lpush	src/server.h	/^    *rpop, *lpop, *lpush, *rpoplpush, *lmove, *blmove, *zpopmin, *zpopmax,$/;"	m	struct:sharedObjectsStruct
lpushCommand	src/server.h	/^    struct redisCommand *delCommand, *multiCommand, *lpushCommand,$/;"	m	struct:redisServer	typeref:struct:redisServer::
lpushCommand	src/t_list.c	/^void lpushCommand(client *c) {$/;"	f
lpushxCommand	src/t_list.c	/^void lpushxCommand(client *c) {$/;"	f
lrangeCommand	src/t_list.c	/^void lrangeCommand(client *c) {$/;"	f
lremCommand	src/t_list.c	/^void lremCommand(client *c) {$/;"	f
lremove	tests/test_helper.tcl	/^proc lremove {listVar value} {$/;"	p
lrs	src/module.c	/^            zlexrangespec lrs;     \/* Lex range. *\/$/;"	m	struct:RedisModuleKey::__anon62::__anon63	file:
lru	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^	extent_list_t		lru;$/;"	m	struct:extents_s
lru	src/server.h	/^    unsigned lru:LRU_BITS; \/* LRU time (relative to global lru_clock) or$/;"	m	struct:redisObject
lru_test_mode	src/redis-cli.c	/^    int lru_test_mode;$/;"	m	struct:config	file:
lru_test_sample_size	src/redis-cli.c	/^    long long lru_test_sample_size;$/;"	m	struct:config	file:
lruclock	src/server.h	/^    redisAtomic unsigned int lruclock; \/* Clock for LRU eviction *\/$/;"	m	struct:redisServer
ls	deps/lua/src/lparser.h	/^  struct LexState *ls;  \/* lexical state *\/$/;"	m	struct:FuncState	typeref:struct:FuncState::LexState
lsetCommand	src/t_list.c	/^void lsetCommand(client *c) {$/;"	f
lshift128	deps/jemalloc/test/src/SFMT.c	/^static inline void lshift128(w128_t *out, w128_t const *in, int shift) {$/;"	f	file:
lshuffle	tests/support/util.tcl	/^proc lshuffle {list} {$/;"	p
lsizenode	deps/lua/src/lobject.h	/^  lu_byte lsizenode;  \/* log2 of size of `node' array *\/$/;"	m	struct:Table
lstate_c	deps/lua/src/lstate.c	10;"	d	file:
lstate_h	deps/lua/src/lstate.h	8;"	d
lstats	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	arena_stats_large_t	lstats[NSIZES - NBINS];$/;"	m	struct:arena_stats_s
lstats	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	arena_stats_large_t lstats[NSIZES - NBINS];$/;"	m	struct:ctl_arena_stats_s
lstop	deps/lua/src/lua.c	/^static void lstop (lua_State *L, lua_Debug *ar) {$/;"	f	file:
lstring_c	deps/lua/src/lstring.c	10;"	d	file:
lstring_h	deps/lua/src/lstring.h	8;"	d
lstrlib_c	deps/lua/src/lstrlib.c	14;"	d	file:
lt_event	deps/lua/doc/manual.html	/^     function lt_event (op1, op2)$/;"	f
ltable_c	deps/lua/src/ltable.c	24;"	d	file:
ltable_h	deps/lua/src/ltable.h	8;"	d
ltablib_c	deps/lua/src/ltablib.c	10;"	d	file:
ltm_c	deps/lua/src/ltm.c	10;"	d	file:
ltm_h	deps/lua/src/ltm.h	8;"	d
ltrimCommand	src/t_list.c	/^void ltrimCommand(client *c) {$/;"	f
lu_byte	deps/lua/src/llimits.h	/^typedef unsigned char lu_byte;$/;"	t
lu_int32	deps/lua/src/llimits.h	/^typedef LUAI_UINT32 lu_int32;$/;"	t
lu_mem	deps/lua/src/llimits.h	/^typedef LUAI_UMEM lu_mem;$/;"	t
lua	src/server.h	/^    lua_State *lua; \/* The Lua interpreter. We use just one for all clients *\/$/;"	m	struct:redisServer
luaA_pushobject	deps/lua/src/lapi.c	/^void luaA_pushobject (lua_State *L, const TValue *o) {$/;"	f
luaB_assert	deps/lua/src/lbaselib.c	/^static int luaB_assert (lua_State *L) {$/;"	f	file:
luaB_auxwrap	deps/lua/src/lbaselib.c	/^static int luaB_auxwrap (lua_State *L) {$/;"	f	file:
luaB_cocreate	deps/lua/src/lbaselib.c	/^static int luaB_cocreate (lua_State *L) {$/;"	f	file:
luaB_collectgarbage	deps/lua/src/lbaselib.c	/^static int luaB_collectgarbage (lua_State *L) {$/;"	f	file:
luaB_coresume	deps/lua/src/lbaselib.c	/^static int luaB_coresume (lua_State *L) {$/;"	f	file:
luaB_corunning	deps/lua/src/lbaselib.c	/^static int luaB_corunning (lua_State *L) {$/;"	f	file:
luaB_costatus	deps/lua/src/lbaselib.c	/^static int luaB_costatus (lua_State *L) {$/;"	f	file:
luaB_cowrap	deps/lua/src/lbaselib.c	/^static int luaB_cowrap (lua_State *L) {$/;"	f	file:
luaB_dofile	deps/lua/src/lbaselib.c	/^static int luaB_dofile (lua_State *L) {$/;"	f	file:
luaB_error	deps/lua/src/lbaselib.c	/^static int luaB_error (lua_State *L) {$/;"	f	file:
luaB_gcinfo	deps/lua/src/lbaselib.c	/^static int luaB_gcinfo (lua_State *L) {$/;"	f	file:
luaB_getfenv	deps/lua/src/lbaselib.c	/^static int luaB_getfenv (lua_State *L) {$/;"	f	file:
luaB_getmetatable	deps/lua/src/lbaselib.c	/^static int luaB_getmetatable (lua_State *L) {$/;"	f	file:
luaB_ipairs	deps/lua/src/lbaselib.c	/^static int luaB_ipairs (lua_State *L) {$/;"	f	file:
luaB_load	deps/lua/src/lbaselib.c	/^static int luaB_load (lua_State *L) {$/;"	f	file:
luaB_loadfile	deps/lua/src/lbaselib.c	/^static int luaB_loadfile (lua_State *L) {$/;"	f	file:
luaB_loadstring	deps/lua/src/lbaselib.c	/^static int luaB_loadstring (lua_State *L) {$/;"	f	file:
luaB_newproxy	deps/lua/src/lbaselib.c	/^static int luaB_newproxy (lua_State *L) {$/;"	f	file:
luaB_next	deps/lua/src/lbaselib.c	/^static int luaB_next (lua_State *L) {$/;"	f	file:
luaB_pairs	deps/lua/src/lbaselib.c	/^static int luaB_pairs (lua_State *L) {$/;"	f	file:
luaB_pcall	deps/lua/src/lbaselib.c	/^static int luaB_pcall (lua_State *L) {$/;"	f	file:
luaB_print	deps/lua/src/lbaselib.c	/^static int luaB_print (lua_State *L) {$/;"	f	file:
luaB_rawequal	deps/lua/src/lbaselib.c	/^static int luaB_rawequal (lua_State *L) {$/;"	f	file:
luaB_rawget	deps/lua/src/lbaselib.c	/^static int luaB_rawget (lua_State *L) {$/;"	f	file:
luaB_rawset	deps/lua/src/lbaselib.c	/^static int luaB_rawset (lua_State *L) {$/;"	f	file:
luaB_select	deps/lua/src/lbaselib.c	/^static int luaB_select (lua_State *L) {$/;"	f	file:
luaB_setfenv	deps/lua/src/lbaselib.c	/^static int luaB_setfenv (lua_State *L) {$/;"	f	file:
luaB_setmetatable	deps/lua/src/lbaselib.c	/^static int luaB_setmetatable (lua_State *L) {$/;"	f	file:
luaB_tonumber	deps/lua/src/lbaselib.c	/^static int luaB_tonumber (lua_State *L) {$/;"	f	file:
luaB_tostring	deps/lua/src/lbaselib.c	/^static int luaB_tostring (lua_State *L) {$/;"	f	file:
luaB_type	deps/lua/src/lbaselib.c	/^static int luaB_type (lua_State *L) {$/;"	f	file:
luaB_unpack	deps/lua/src/lbaselib.c	/^static int luaB_unpack (lua_State *L) {$/;"	f	file:
luaB_xpcall	deps/lua/src/lbaselib.c	/^static int luaB_xpcall (lua_State *L) {$/;"	f	file:
luaB_yield	deps/lua/src/lbaselib.c	/^static int luaB_yield (lua_State *L) {$/;"	f	file:
luaC_barrier	deps/lua/src/lgc.h	86;"	d
luaC_barrierback	deps/lua/src/lgc.c	/^void luaC_barrierback (lua_State *L, Table *t) {$/;"	f
luaC_barrierf	deps/lua/src/lgc.c	/^void luaC_barrierf (lua_State *L, GCObject *o, GCObject *v) {$/;"	f
luaC_barriert	deps/lua/src/lgc.h	89;"	d
luaC_callGCTM	deps/lua/src/lgc.c	/^void luaC_callGCTM (lua_State *L) {$/;"	f
luaC_checkGC	deps/lua/src/lgc.h	80;"	d
luaC_freeall	deps/lua/src/lgc.c	/^void luaC_freeall (lua_State *L) {$/;"	f
luaC_fullgc	deps/lua/src/lgc.c	/^void luaC_fullgc (lua_State *L) {$/;"	f
luaC_link	deps/lua/src/lgc.c	/^void luaC_link (lua_State *L, GCObject *o, lu_byte tt) {$/;"	f
luaC_linkupval	deps/lua/src/lgc.c	/^void luaC_linkupval (lua_State *L, UpVal *uv) {$/;"	f
luaC_objbarrier	deps/lua/src/lgc.h	92;"	d
luaC_objbarriert	deps/lua/src/lgc.h	96;"	d
luaC_separateudata	deps/lua/src/lgc.c	/^size_t luaC_separateudata (lua_State *L, int all) {$/;"	f
luaC_step	deps/lua/src/lgc.c	/^void luaC_step (lua_State *L) {$/;"	f
luaC_white	deps/lua/src/lgc.h	77;"	d
luaCreateFunction	src/scripting.c	/^sds luaCreateFunction(client *c, lua_State *lua, robj *body) {$/;"	f
luaD_call	deps/lua/src/ldo.c	/^void luaD_call (lua_State *L, StkId func, int nResults) {$/;"	f
luaD_callhook	deps/lua/src/ldo.c	/^void luaD_callhook (lua_State *L, int event, int line) {$/;"	f
luaD_checkstack	deps/lua/src/ldo.h	16;"	d
luaD_growstack	deps/lua/src/ldo.c	/^void luaD_growstack (lua_State *L, int n) {$/;"	f
luaD_pcall	deps/lua/src/ldo.c	/^int luaD_pcall (lua_State *L, Pfunc func, void *u,$/;"	f
luaD_poscall	deps/lua/src/ldo.c	/^int luaD_poscall (lua_State *L, StkId firstResult) {$/;"	f
luaD_precall	deps/lua/src/ldo.c	/^int luaD_precall (lua_State *L, StkId func, int nresults) {$/;"	f
luaD_protectedparser	deps/lua/src/ldo.c	/^int luaD_protectedparser (lua_State *L, ZIO *z, const char *name) {$/;"	f
luaD_rawrunprotected	deps/lua/src/ldo.c	/^int luaD_rawrunprotected (lua_State *L, Pfunc f, void *ud) {$/;"	f
luaD_reallocCI	deps/lua/src/ldo.c	/^void luaD_reallocCI (lua_State *L, int newsize) {$/;"	f
luaD_reallocstack	deps/lua/src/ldo.c	/^void luaD_reallocstack (lua_State *L, int newsize) {$/;"	f
luaD_seterrorobj	deps/lua/src/ldo.c	/^void luaD_seterrorobj (lua_State *L, int errcode, StkId oldtop) {$/;"	f
luaD_throw	deps/lua/src/ldo.c	/^void luaD_throw (lua_State *L, int errcode) {$/;"	f
luaE_freethread	deps/lua/src/lstate.c	/^void luaE_freethread (lua_State *L, lua_State *L1) {$/;"	f
luaE_newthread	deps/lua/src/lstate.c	/^lua_State *luaE_newthread (lua_State *L) {$/;"	f
luaF_close	deps/lua/src/lfunc.c	/^void luaF_close (lua_State *L, StkId level) {$/;"	f
luaF_findupval	deps/lua/src/lfunc.c	/^UpVal *luaF_findupval (lua_State *L, StkId level) {$/;"	f
luaF_freeclosure	deps/lua/src/lfunc.c	/^void luaF_freeclosure (lua_State *L, Closure *c) {$/;"	f
luaF_freeproto	deps/lua/src/lfunc.c	/^void luaF_freeproto (lua_State *L, Proto *f) {$/;"	f
luaF_freeupval	deps/lua/src/lfunc.c	/^void luaF_freeupval (lua_State *L, UpVal *uv) {$/;"	f
luaF_getlocalname	deps/lua/src/lfunc.c	/^const char *luaF_getlocalname (const Proto *f, int local_number, int pc) {$/;"	f
luaF_newCclosure	deps/lua/src/lfunc.c	/^Closure *luaF_newCclosure (lua_State *L, int nelems, Table *e) {$/;"	f
luaF_newLclosure	deps/lua/src/lfunc.c	/^Closure *luaF_newLclosure (lua_State *L, int nelems, Table *e) {$/;"	f
luaF_newproto	deps/lua/src/lfunc.c	/^Proto *luaF_newproto (lua_State *L) {$/;"	f
luaF_newupval	deps/lua/src/lfunc.c	/^UpVal *luaF_newupval (lua_State *L) {$/;"	f
luaG_aritherror	deps/lua/src/ldebug.c	/^void luaG_aritherror (lua_State *L, const TValue *p1, const TValue *p2) {$/;"	f
luaG_checkcode	deps/lua/src/ldebug.c	/^int luaG_checkcode (const Proto *pt) {$/;"	f
luaG_checkopenop	deps/lua/src/ldebug.c	/^int luaG_checkopenop (Instruction i) {$/;"	f
luaG_concaterror	deps/lua/src/ldebug.c	/^void luaG_concaterror (lua_State *L, StkId p1, StkId p2) {$/;"	f
luaG_errormsg	deps/lua/src/ldebug.c	/^void luaG_errormsg (lua_State *L) {$/;"	f
luaG_ordererror	deps/lua/src/ldebug.c	/^int luaG_ordererror (lua_State *L, const TValue *p1, const TValue *p2) {$/;"	f
luaG_runerror	deps/lua/src/ldebug.c	/^void luaG_runerror (lua_State *L, const char *fmt, ...) {$/;"	f
luaG_typeerror	deps/lua/src/ldebug.c	/^void luaG_typeerror (lua_State *L, const TValue *o, const char *op) {$/;"	f
luaH_free	deps/lua/src/ltable.c	/^void luaH_free (lua_State *L, Table *t) {$/;"	f
luaH_get	deps/lua/src/ltable.c	/^const TValue *luaH_get (Table *t, const TValue *key) {$/;"	f
luaH_getn	deps/lua/src/ltable.c	/^int luaH_getn (Table *t) {$/;"	f
luaH_getnum	deps/lua/src/ltable.c	/^const TValue *luaH_getnum (Table *t, int key) {$/;"	f
luaH_getstr	deps/lua/src/ltable.c	/^const TValue *luaH_getstr (Table *t, TString *key) {$/;"	f
luaH_isdummy	deps/lua/src/ltable.c	/^int luaH_isdummy (Node *n) { return n == dummynode; }$/;"	f
luaH_mainposition	deps/lua/src/ltable.c	/^Node *luaH_mainposition (const Table *t, const TValue *key) {$/;"	f
luaH_new	deps/lua/src/ltable.c	/^Table *luaH_new (lua_State *L, int narray, int nhash) {$/;"	f
luaH_next	deps/lua/src/ltable.c	/^int luaH_next (lua_State *L, Table *t, StkId key) {$/;"	f
luaH_resizearray	deps/lua/src/ltable.c	/^void luaH_resizearray (lua_State *L, Table *t, int nasize) {$/;"	f
luaH_set	deps/lua/src/ltable.c	/^TValue *luaH_set (lua_State *L, Table *t, const TValue *key) {$/;"	f
luaH_setnum	deps/lua/src/ltable.c	/^TValue *luaH_setnum (lua_State *L, Table *t, int key) {$/;"	f
luaH_setstr	deps/lua/src/ltable.c	/^TValue *luaH_setstr (lua_State *L, Table *t, TString *key) {$/;"	f
luaI_openlib	deps/lua/src/lauxlib.c	/^LUALIB_API void luaI_openlib (lua_State *L, const char *libname,$/;"	f
luaI_openlib	deps/lua/src/lauxlib.h	27;"	d
luaK_checkstack	deps/lua/src/lcode.c	/^void luaK_checkstack (FuncState *fs, int n) {$/;"	f
luaK_code	deps/lua/src/lcode.c	/^static int luaK_code (FuncState *fs, Instruction i, int line) {$/;"	f	file:
luaK_codeABC	deps/lua/src/lcode.c	/^int luaK_codeABC (FuncState *fs, OpCode o, int a, int b, int c) {$/;"	f
luaK_codeABx	deps/lua/src/lcode.c	/^int luaK_codeABx (FuncState *fs, OpCode o, int a, unsigned int bc) {$/;"	f
luaK_codeAsBx	deps/lua/src/lcode.h	41;"	d
luaK_concat	deps/lua/src/lcode.c	/^void luaK_concat (FuncState *fs, int *l1, int l2) {$/;"	f
luaK_dischargevars	deps/lua/src/lcode.c	/^void luaK_dischargevars (FuncState *fs, expdesc *e) {$/;"	f
luaK_exp2RK	deps/lua/src/lcode.c	/^int luaK_exp2RK (FuncState *fs, expdesc *e) {$/;"	f
luaK_exp2anyreg	deps/lua/src/lcode.c	/^int luaK_exp2anyreg (FuncState *fs, expdesc *e) {$/;"	f
luaK_exp2nextreg	deps/lua/src/lcode.c	/^void luaK_exp2nextreg (FuncState *fs, expdesc *e) {$/;"	f
luaK_exp2val	deps/lua/src/lcode.c	/^void luaK_exp2val (FuncState *fs, expdesc *e) {$/;"	f
luaK_fixline	deps/lua/src/lcode.c	/^void luaK_fixline (FuncState *fs, int line) {$/;"	f
luaK_getlabel	deps/lua/src/lcode.c	/^int luaK_getlabel (FuncState *fs) {$/;"	f
luaK_goiffalse	deps/lua/src/lcode.c	/^static void luaK_goiffalse (FuncState *fs, expdesc *e) {$/;"	f	file:
luaK_goiftrue	deps/lua/src/lcode.c	/^void luaK_goiftrue (FuncState *fs, expdesc *e) {$/;"	f
luaK_indexed	deps/lua/src/lcode.c	/^void luaK_indexed (FuncState *fs, expdesc *t, expdesc *k) {$/;"	f
luaK_infix	deps/lua/src/lcode.c	/^void luaK_infix (FuncState *fs, BinOpr op, expdesc *v) {$/;"	f
luaK_jump	deps/lua/src/lcode.c	/^int luaK_jump (FuncState *fs) {$/;"	f
luaK_nil	deps/lua/src/lcode.c	/^void luaK_nil (FuncState *fs, int from, int n) {$/;"	f
luaK_numberK	deps/lua/src/lcode.c	/^int luaK_numberK (FuncState *fs, lua_Number r) {$/;"	f
luaK_patchlist	deps/lua/src/lcode.c	/^void luaK_patchlist (FuncState *fs, int list, int target) {$/;"	f
luaK_patchtohere	deps/lua/src/lcode.c	/^void luaK_patchtohere (FuncState *fs, int list) {$/;"	f
luaK_posfix	deps/lua/src/lcode.c	/^void luaK_posfix (FuncState *fs, BinOpr op, expdesc *e1, expdesc *e2) {$/;"	f
luaK_prefix	deps/lua/src/lcode.c	/^void luaK_prefix (FuncState *fs, UnOpr op, expdesc *e) {$/;"	f
luaK_reserveregs	deps/lua/src/lcode.c	/^void luaK_reserveregs (FuncState *fs, int n) {$/;"	f
luaK_ret	deps/lua/src/lcode.c	/^void luaK_ret (FuncState *fs, int first, int nret) {$/;"	f
luaK_self	deps/lua/src/lcode.c	/^void luaK_self (FuncState *fs, expdesc *e, expdesc *key) {$/;"	f
luaK_setlist	deps/lua/src/lcode.c	/^void luaK_setlist (FuncState *fs, int base, int nelems, int tostore) {$/;"	f
luaK_setmultret	deps/lua/src/lcode.h	43;"	d
luaK_setoneret	deps/lua/src/lcode.c	/^void luaK_setoneret (FuncState *fs, expdesc *e) {$/;"	f
luaK_setreturns	deps/lua/src/lcode.c	/^void luaK_setreturns (FuncState *fs, expdesc *e, int nresults) {$/;"	f
luaK_storevar	deps/lua/src/lcode.c	/^void luaK_storevar (FuncState *fs, expdesc *var, expdesc *ex) {$/;"	f
luaK_stringK	deps/lua/src/lcode.c	/^int luaK_stringK (FuncState *fs, TString *s) {$/;"	f
luaL_Buffer	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_Buffer"><code>luaL_Buffer<\/code><\/a><\/h3>$/;"	a
luaL_Buffer	deps/lua/src/lauxlib.h	/^typedef struct luaL_Buffer {$/;"	s
luaL_Buffer	deps/lua/src/lauxlib.h	/^} luaL_Buffer;$/;"	t	typeref:struct:luaL_Buffer
luaL_Reg	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_Reg"><code>luaL_Reg<\/code><\/a><\/h3>$/;"	a
luaL_Reg	deps/lua/src/lauxlib.h	/^typedef struct luaL_Reg {$/;"	s
luaL_Reg	deps/lua/src/lauxlib.h	/^} luaL_Reg;$/;"	t	typeref:struct:luaL_Reg
luaL_addchar	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_addchar"><code>luaL_addchar<\/code><\/a><\/h3><p>$/;"	a
luaL_addchar	deps/lua/src/lauxlib.h	136;"	d
luaL_addlstring	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_addlstring"><code>luaL_addlstring<\/code><\/a><\/h3><p>$/;"	a
luaL_addlstring	deps/lua/src/lauxlib.c	/^LUALIB_API void luaL_addlstring (luaL_Buffer *B, const char *s, size_t l) {$/;"	f
luaL_addsize	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_addsize"><code>luaL_addsize<\/code><\/a><\/h3><p>$/;"	a
luaL_addsize	deps/lua/src/lauxlib.h	143;"	d
luaL_addstring	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_addstring"><code>luaL_addstring<\/code><\/a><\/h3><p>$/;"	a
luaL_addstring	deps/lua/src/lauxlib.c	/^LUALIB_API void luaL_addstring (luaL_Buffer *B, const char *s) {$/;"	f
luaL_addvalue	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_addvalue"><code>luaL_addvalue<\/code><\/a><\/h3><p>$/;"	a
luaL_addvalue	deps/lua/src/lauxlib.c	/^LUALIB_API void luaL_addvalue (luaL_Buffer *B) {$/;"	f
luaL_argcheck	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_argcheck"><code>luaL_argcheck<\/code><\/a><\/h3><p>$/;"	a
luaL_argcheck	deps/lua/src/lauxlib.h	100;"	d
luaL_argerror	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_argerror"><code>luaL_argerror<\/code><\/a><\/h3><p>$/;"	a
luaL_argerror	deps/lua/src/lauxlib.c	/^LUALIB_API int luaL_argerror (lua_State *L, int narg, const char *extramsg) {$/;"	f
luaL_buffinit	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_buffinit"><code>luaL_buffinit<\/code><\/a><\/h3><p>$/;"	a
luaL_buffinit	deps/lua/src/lauxlib.c	/^LUALIB_API void luaL_buffinit (lua_State *L, luaL_Buffer *B) {$/;"	f
luaL_callmeta	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_callmeta"><code>luaL_callmeta<\/code><\/a><\/h3><p>$/;"	a
luaL_callmeta	deps/lua/src/lauxlib.c	/^LUALIB_API int luaL_callmeta (lua_State *L, int obj, const char *event) {$/;"	f
luaL_checkany	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_checkany"><code>luaL_checkany<\/code><\/a><\/h3><p>$/;"	a
luaL_checkany	deps/lua/src/lauxlib.c	/^LUALIB_API void luaL_checkany (lua_State *L, int narg) {$/;"	f
luaL_checkint	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_checkint"><code>luaL_checkint<\/code><\/a><\/h3><p>$/;"	a
luaL_checkint	deps/lua/src/lauxlib.h	104;"	d
luaL_checkinteger	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_checkinteger"><code>luaL_checkinteger<\/code><\/a><\/h3><p>$/;"	a
luaL_checkinteger	deps/lua/src/lauxlib.c	/^LUALIB_API lua_Integer luaL_checkinteger (lua_State *L, int narg) {$/;"	f
luaL_checklong	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_checklong"><code>luaL_checklong<\/code><\/a><\/h3><p>$/;"	a
luaL_checklong	deps/lua/src/lauxlib.h	106;"	d
luaL_checklstring	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_checklstring"><code>luaL_checklstring<\/code><\/a><\/h3><p>$/;"	a
luaL_checklstring	deps/lua/src/lauxlib.c	/^LUALIB_API const char *luaL_checklstring (lua_State *L, int narg, size_t *len) {$/;"	f
luaL_checknumber	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_checknumber"><code>luaL_checknumber<\/code><\/a><\/h3><p>$/;"	a
luaL_checknumber	deps/lua/src/lauxlib.c	/^LUALIB_API lua_Number luaL_checknumber (lua_State *L, int narg) {$/;"	f
luaL_checkoption	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_checkoption"><code>luaL_checkoption<\/code><\/a><\/h3><p>$/;"	a
luaL_checkoption	deps/lua/src/lauxlib.c	/^LUALIB_API int luaL_checkoption (lua_State *L, int narg, const char *def,$/;"	f
luaL_checkstack	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_checkstack"><code>luaL_checkstack<\/code><\/a><\/h3><p>$/;"	a
luaL_checkstack	deps/lua/src/lauxlib.c	/^LUALIB_API void luaL_checkstack (lua_State *L, int space, const char *mes) {$/;"	f
luaL_checkstring	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_checkstring"><code>luaL_checkstring<\/code><\/a><\/h3><p>$/;"	a
luaL_checkstring	deps/lua/src/lauxlib.h	102;"	d
luaL_checktype	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_checktype"><code>luaL_checktype<\/code><\/a><\/h3><p>$/;"	a
luaL_checktype	deps/lua/src/lauxlib.c	/^LUALIB_API void luaL_checktype (lua_State *L, int narg, int t) {$/;"	f
luaL_checkudata	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_checkudata"><code>luaL_checkudata<\/code><\/a><\/h3><p>$/;"	a
luaL_checkudata	deps/lua/src/lauxlib.c	/^LUALIB_API void *luaL_checkudata (lua_State *L, int ud, const char *tname) {$/;"	f
luaL_dofile	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_dofile"><code>luaL_dofile<\/code><\/a><\/h3><p>$/;"	a
luaL_dofile	deps/lua/src/lauxlib.h	111;"	d
luaL_dostring	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_dostring"><code>luaL_dostring<\/code><\/a><\/h3><p>$/;"	a
luaL_dostring	deps/lua/src/lauxlib.h	114;"	d
luaL_error	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_error"><code>luaL_error<\/code><\/a><\/h3><p>$/;"	a
luaL_error	deps/lua/src/lauxlib.c	/^LUALIB_API int luaL_error (lua_State *L, const char *fmt, ...) {$/;"	f
luaL_findtable	deps/lua/src/lauxlib.c	/^LUALIB_API const char *luaL_findtable (lua_State *L, int idx,$/;"	f
luaL_getmetafield	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_getmetafield"><code>luaL_getmetafield<\/code><\/a><\/h3><p>$/;"	a
luaL_getmetafield	deps/lua/src/lauxlib.c	/^LUALIB_API int luaL_getmetafield (lua_State *L, int obj, const char *event) {$/;"	f
luaL_getmetatable	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_getmetatable"><code>luaL_getmetatable<\/code><\/a><\/h3><p>$/;"	a
luaL_getmetatable	deps/lua/src/lauxlib.h	117;"	d
luaL_getn	deps/lua/src/lauxlib.c	/^LUALIB_API int luaL_getn (lua_State *L, int t) {$/;"	f
luaL_getn	deps/lua/src/lauxlib.h	22;"	d
luaL_gsub	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_gsub"><code>luaL_gsub<\/code><\/a><\/h3><p>$/;"	a
luaL_gsub	deps/lua/src/lauxlib.c	/^LUALIB_API const char *luaL_gsub (lua_State *L, const char *s, const char *p,$/;"	f
luaL_loadbuffer	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_loadbuffer"><code>luaL_loadbuffer<\/code><\/a><\/h3><p>$/;"	a
luaL_loadbuffer	deps/lua/src/lauxlib.c	/^LUALIB_API int luaL_loadbuffer (lua_State *L, const char *buff, size_t size,$/;"	f
luaL_loadfile	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_loadfile"><code>luaL_loadfile<\/code><\/a><\/h3><p>$/;"	a
luaL_loadfile	deps/lua/src/lauxlib.c	/^LUALIB_API int luaL_loadfile (lua_State *L, const char *filename) {$/;"	f
luaL_loadstring	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_loadstring"><code>luaL_loadstring<\/code><\/a><\/h3><p>$/;"	a
luaL_loadstring	deps/lua/src/lauxlib.c	/^LUALIB_API int (luaL_loadstring) (lua_State *L, const char *s) {$/;"	f
luaL_newmetatable	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_newmetatable"><code>luaL_newmetatable<\/code><\/a><\/h3><p>$/;"	a
luaL_newmetatable	deps/lua/src/lauxlib.c	/^LUALIB_API int luaL_newmetatable (lua_State *L, const char *tname) {$/;"	f
luaL_newstate	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_newstate"><code>luaL_newstate<\/code><\/a><\/h3><p>$/;"	a
luaL_newstate	deps/lua/src/lauxlib.c	/^LUALIB_API lua_State *luaL_newstate (void) {$/;"	f
luaL_openlibs	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_openlibs"><code>luaL_openlibs<\/code><\/a><\/h3><p>$/;"	a
luaL_openlibs	deps/lua/src/linit.c	/^LUALIB_API void luaL_openlibs (lua_State *L) {$/;"	f
luaL_opt	deps/lua/src/lauxlib.h	119;"	d
luaL_optint	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_optint"><code>luaL_optint<\/code><\/a><\/h3><p>$/;"	a
luaL_optint	deps/lua/src/lauxlib.h	105;"	d
luaL_optinteger	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_optinteger"><code>luaL_optinteger<\/code><\/a><\/h3><p>$/;"	a
luaL_optinteger	deps/lua/src/lauxlib.c	/^LUALIB_API lua_Integer luaL_optinteger (lua_State *L, int narg,$/;"	f
luaL_optlong	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_optlong"><code>luaL_optlong<\/code><\/a><\/h3><p>$/;"	a
luaL_optlong	deps/lua/src/lauxlib.h	107;"	d
luaL_optlstring	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_optlstring"><code>luaL_optlstring<\/code><\/a><\/h3><p>$/;"	a
luaL_optlstring	deps/lua/src/lauxlib.c	/^LUALIB_API const char *luaL_optlstring (lua_State *L, int narg,$/;"	f
luaL_optnumber	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_optnumber"><code>luaL_optnumber<\/code><\/a><\/h3><p>$/;"	a
luaL_optnumber	deps/lua/src/lauxlib.c	/^LUALIB_API lua_Number luaL_optnumber (lua_State *L, int narg, lua_Number def) {$/;"	f
luaL_optstring	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_optstring"><code>luaL_optstring<\/code><\/a><\/h3><p>$/;"	a
luaL_optstring	deps/lua/src/lauxlib.h	103;"	d
luaL_prepbuffer	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_prepbuffer"><code>luaL_prepbuffer<\/code><\/a><\/h3><p>$/;"	a
luaL_prepbuffer	deps/lua/src/lauxlib.c	/^LUALIB_API char *luaL_prepbuffer (luaL_Buffer *B) {$/;"	f
luaL_pushresult	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_pushresult"><code>luaL_pushresult<\/code><\/a><\/h3><p>$/;"	a
luaL_pushresult	deps/lua/src/lauxlib.c	/^LUALIB_API void luaL_pushresult (luaL_Buffer *B) {$/;"	f
luaL_putchar	deps/lua/src/lauxlib.h	141;"	d
luaL_ref	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_ref"><code>luaL_ref<\/code><\/a><\/h3><p>$/;"	a
luaL_ref	deps/lua/src/lauxlib.c	/^LUALIB_API int luaL_ref (lua_State *L, int t) {$/;"	f
luaL_reg	deps/lua/src/lauxlib.h	170;"	d
luaL_register	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_register"><code>luaL_register<\/code><\/a><\/h3><p>$/;"	a
luaL_register	deps/lua/src/lauxlib.c	/^LUALIB_API void (luaL_register) (lua_State *L, const char *libname,$/;"	f
luaL_register	deps/lua/src/lua_struct.c	42;"	d	file:
luaL_setfuncs	deps/lua/src/lua_cjson.c	/^static void luaL_setfuncs (lua_State *l, const luaL_Reg *reg, int nup)$/;"	f	file:
luaL_setn	deps/lua/src/lauxlib.c	/^LUALIB_API void luaL_setn (lua_State *L, int t, int n) {$/;"	f
luaL_setn	deps/lua/src/lauxlib.h	23;"	d
luaL_typename	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_typename"><code>luaL_typename<\/code><\/a><\/h3><p>$/;"	a
luaL_typename	deps/lua/src/lauxlib.h	109;"	d
luaL_typerror	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_typerror"><code>luaL_typerror<\/code><\/a><\/h3><p>$/;"	a
luaL_typerror	deps/lua/src/lauxlib.c	/^LUALIB_API int luaL_typerror (lua_State *L, int narg, const char *tname) {$/;"	f
luaL_unref	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_unref"><code>luaL_unref<\/code><\/a><\/h3><p>$/;"	a
luaL_unref	deps/lua/src/lauxlib.c	/^LUALIB_API void luaL_unref (lua_State *L, int t, int ref) {$/;"	f
luaL_where	deps/lua/doc/manual.html	/^<hr><h3><a name="luaL_where"><code>luaL_where<\/code><\/a><\/h3><p>$/;"	a
luaL_where	deps/lua/src/lauxlib.c	/^LUALIB_API void luaL_where (lua_State *L, int level) {$/;"	f
luaLdbLineHook	src/scripting.c	/^void luaLdbLineHook(lua_State *lua, lua_Debug *ar) {$/;"	f
luaLoadLib	src/scripting.c	/^void luaLoadLib(lua_State *lua, const char *libname, lua_CFunction luafunc) {$/;"	f
luaLoadLibraries	src/scripting.c	/^void luaLoadLibraries(lua_State *lua) {$/;"	f
luaLogCommand	src/scripting.c	/^int luaLogCommand(lua_State *lua) {$/;"	f
luaM_free	deps/lua/src/lmem.h	25;"	d
luaM_freearray	deps/lua/src/lmem.h	26;"	d
luaM_freemem	deps/lua/src/lmem.h	24;"	d
luaM_growaux_	deps/lua/src/lmem.c	/^void *luaM_growaux_ (lua_State *L, void *block, int *size, size_t size_elems,$/;"	f
luaM_growvector	deps/lua/src/lmem.h	33;"	d
luaM_malloc	deps/lua/src/lmem.h	28;"	d
luaM_new	deps/lua/src/lmem.h	29;"	d
luaM_newvector	deps/lua/src/lmem.h	30;"	d
luaM_realloc_	deps/lua/src/lmem.c	/^void *luaM_realloc_ (lua_State *L, void *block, size_t osize, size_t nsize) {$/;"	f
luaM_reallocv	deps/lua/src/lmem.h	19;"	d
luaM_reallocvector	deps/lua/src/lmem.h	37;"	d
luaM_toobig	deps/lua/src/lmem.c	/^void *luaM_toobig (lua_State *L) {$/;"	f
luaMaskCountHook	src/scripting.c	/^void luaMaskCountHook(lua_State *lua, lua_Debug *ar) {$/;"	f
luaO_chunkid	deps/lua/src/lobject.c	/^void luaO_chunkid (char *out, const char *source, size_t bufflen) {$/;"	f
luaO_fb2int	deps/lua/src/lobject.c	/^int luaO_fb2int (int x) {$/;"	f
luaO_int2fb	deps/lua/src/lobject.c	/^int luaO_int2fb (unsigned int x) {$/;"	f
luaO_log2	deps/lua/src/lobject.c	/^int luaO_log2 (unsigned int x) {$/;"	f
luaO_nilobject	deps/lua/src/lobject.h	363;"	d
luaO_nilobject_	deps/lua/src/lobject.c	/^const TValue luaO_nilobject_ = {{NULL}, LUA_TNIL};$/;"	v
luaO_nilobject_	deps/lua/src/lobject.h	/^LUAI_DATA const TValue luaO_nilobject_;$/;"	v
luaO_pushfstring	deps/lua/src/lobject.c	/^const char *luaO_pushfstring (lua_State *L, const char *fmt, ...) {$/;"	f
luaO_pushvfstring	deps/lua/src/lobject.c	/^const char *luaO_pushvfstring (lua_State *L, const char *fmt, va_list argp) {$/;"	f
luaO_rawequalObj	deps/lua/src/lobject.c	/^int luaO_rawequalObj (const TValue *t1, const TValue *t2) {$/;"	f
luaO_str2d	deps/lua/src/lobject.c	/^int luaO_str2d (const char *s, lua_Number *result) {$/;"	f
luaP_opmodes	deps/lua/src/lopcodes.c	/^const lu_byte luaP_opmodes[NUM_OPCODES] = {$/;"	v
luaP_opmodes	deps/lua/src/lopcodes.h	/^LUAI_DATA const lu_byte luaP_opmodes[NUM_OPCODES];$/;"	v
luaP_opnames	deps/lua/src/lopcodes.c	/^const char *const luaP_opnames[NUM_OPCODES+1] = {$/;"	v
luaP_opnames	deps/lua/src/lopcodes.h	/^LUAI_DATA const char *const luaP_opnames[NUM_OPCODES+1];  \/* opcode names *\/$/;"	v
luaPushError	src/scripting.c	/^void luaPushError(lua_State *lua, char *error) {$/;"	f
luaRaiseError	src/scripting.c	/^int luaRaiseError(lua_State *lua) {$/;"	f
luaRedisBreakpointCommand	src/scripting.c	/^int luaRedisBreakpointCommand(lua_State *lua) {$/;"	f
luaRedisCallCommand	src/scripting.c	/^int luaRedisCallCommand(lua_State *lua) {$/;"	f
luaRedisDebugCommand	src/scripting.c	/^int luaRedisDebugCommand(lua_State *lua) {$/;"	f
luaRedisErrorReplyCommand	src/scripting.c	/^int luaRedisErrorReplyCommand(lua_State *lua) {$/;"	f
luaRedisGenericCommand	src/scripting.c	/^int luaRedisGenericCommand(lua_State *lua, int raise_error) {$/;"	f
luaRedisPCallCommand	src/scripting.c	/^int luaRedisPCallCommand(lua_State *lua) {$/;"	f
luaRedisReplicateCommandsCommand	src/scripting.c	/^int luaRedisReplicateCommandsCommand(lua_State *lua) {$/;"	f
luaRedisReturnSingleFieldTable	src/scripting.c	/^int luaRedisReturnSingleFieldTable(lua_State *lua, char *field) {$/;"	f
luaRedisSetReplCommand	src/scripting.c	/^int luaRedisSetReplCommand(lua_State *lua) {$/;"	f
luaRedisSha1hexCommand	src/scripting.c	/^int luaRedisSha1hexCommand(lua_State *lua) {$/;"	f
luaRedisStatusReplyCommand	src/scripting.c	/^int luaRedisStatusReplyCommand(lua_State *lua) {$/;"	f
luaRemoveUnsupportedFunctions	src/scripting.c	/^void luaRemoveUnsupportedFunctions(lua_State *lua) {$/;"	f
luaReplyToRedisReply	src/scripting.c	/^void luaReplyToRedisReply(client *c, lua_State *lua) {$/;"	f
luaS_fix	deps/lua/src/lstring.h	24;"	d
luaS_new	deps/lua/src/lstring.h	20;"	d
luaS_newliteral	deps/lua/src/lstring.h	21;"	d
luaS_newlstr	deps/lua/src/lstring.c	/^TString *luaS_newlstr (lua_State *L, const char *str, size_t l) {$/;"	f
luaS_newudata	deps/lua/src/lstring.c	/^Udata *luaS_newudata (lua_State *L, size_t s, Table *e) {$/;"	f
luaS_resize	deps/lua/src/lstring.c	/^void luaS_resize (lua_State *L, int newsize) {$/;"	f
luaSetGlobalArray	src/scripting.c	/^void luaSetGlobalArray(lua_State *lua, char *var, robj **elev, int elec) {$/;"	f
luaSetResp	src/scripting.c	/^int luaSetResp(lua_State *lua) {$/;"	f
luaSortArray	src/scripting.c	/^void luaSortArray(lua_State *lua) {$/;"	f
luaT_gettm	deps/lua/src/ltm.c	/^const TValue *luaT_gettm (Table *events, TMS event, TString *ename) {$/;"	f
luaT_gettmbyobj	deps/lua/src/ltm.c	/^const TValue *luaT_gettmbyobj (lua_State *L, const TValue *o, TMS event) {$/;"	f
luaT_init	deps/lua/src/ltm.c	/^void luaT_init (lua_State *L) {$/;"	f
luaT_typenames	deps/lua/src/ltm.c	/^const char *const luaT_typenames[] = {$/;"	v
luaT_typenames	deps/lua/src/ltm.h	/^LUAI_DATA const char *const luaT_typenames[];$/;"	v
luaU_dump	deps/lua/etc/noparser.c	/^LUAI_FUNC int luaU_dump (lua_State* L, const Proto* f, lua_Writer w, void* data, int strip) {$/;"	f
luaU_dump	deps/lua/src/ldump.c	/^int luaU_dump (lua_State* L, const Proto* f, lua_Writer w, void* data, int strip)$/;"	f
luaU_header	deps/lua/src/lundump.c	/^void luaU_header (char* h)$/;"	f
luaU_undump	deps/lua/src/lundump.c	/^Proto* luaU_undump (lua_State* L, ZIO* Z, Mbuffer* buff, const char* name)$/;"	f
luaV_concat	deps/lua/src/lvm.c	/^void luaV_concat (lua_State *L, int total, int last) {$/;"	f
luaV_equalval	deps/lua/src/lvm.c	/^int luaV_equalval (lua_State *L, const TValue *t1, const TValue *t2) {$/;"	f
luaV_execute	deps/lua/src/lvm.c	/^void luaV_execute (lua_State *L, int nexeccalls) {$/;"	f
luaV_gettable	deps/lua/src/lvm.c	/^void luaV_gettable (lua_State *L, const TValue *t, TValue *key, StkId val) {$/;"	f
luaV_lessthan	deps/lua/src/lvm.c	/^int luaV_lessthan (lua_State *L, const TValue *l, const TValue *r) {$/;"	f
luaV_settable	deps/lua/src/lvm.c	/^void luaV_settable (lua_State *L, const TValue *t, TValue *key, StkId val) {$/;"	f
luaV_tonumber	deps/lua/src/lvm.c	/^const TValue *luaV_tonumber (const TValue *obj, TValue *n) {$/;"	f
luaV_tostring	deps/lua/src/lvm.c	/^int luaV_tostring (lua_State *L, StkId obj) {$/;"	f
luaX_init	deps/lua/etc/noparser.c	/^LUAI_FUNC void luaX_init (lua_State *L) {$/;"	f
luaX_init	deps/lua/src/llex.c	/^void luaX_init (lua_State *L) {$/;"	f
luaX_lexerror	deps/lua/src/llex.c	/^void luaX_lexerror (LexState *ls, const char *msg, int token) {$/;"	f
luaX_lookahead	deps/lua/src/llex.c	/^void luaX_lookahead (LexState *ls) {$/;"	f
luaX_newstring	deps/lua/src/llex.c	/^TString *luaX_newstring (LexState *ls, const char *str, size_t l) {$/;"	f
luaX_next	deps/lua/src/llex.c	/^void luaX_next (LexState *ls) {$/;"	f
luaX_setinput	deps/lua/src/llex.c	/^void luaX_setinput (lua_State *L, LexState *ls, ZIO *z, TString *source) {$/;"	f
luaX_syntaxerror	deps/lua/src/llex.c	/^void luaX_syntaxerror (LexState *ls, const char *msg) {$/;"	f
luaX_token2str	deps/lua/src/llex.c	/^const char *luaX_token2str (LexState *ls, int token) {$/;"	f
luaX_tokens	deps/lua/src/llex.c	/^const char *const luaX_tokens [] = {$/;"	v
luaX_tokens	deps/lua/src/llex.h	/^LUAI_DATA const char *const luaX_tokens [];$/;"	v
luaY_checklimit	deps/lua/src/lparser.c	34;"	d	file:
luaY_parser	deps/lua/etc/noparser.c	/^LUAI_FUNC Proto *luaY_parser (lua_State *L, ZIO *z, Mbuffer *buff, const char *name) {$/;"	f
luaY_parser	deps/lua/src/lparser.c	/^Proto *luaY_parser (lua_State *L, ZIO *z, Mbuffer *buff, const char *name) {$/;"	f
luaZ_buffer	deps/lua/src/lzio.h	32;"	d
luaZ_bufflen	deps/lua/src/lzio.h	34;"	d
luaZ_fill	deps/lua/src/lzio.c	/^int luaZ_fill (ZIO *z) {$/;"	f
luaZ_freebuffer	deps/lua/src/lzio.h	43;"	d
luaZ_init	deps/lua/src/lzio.c	/^void luaZ_init (lua_State *L, ZIO *z, lua_Reader reader, void *data) {$/;"	f
luaZ_initbuffer	deps/lua/src/lzio.h	30;"	d
luaZ_lookahead	deps/lua/src/lzio.c	/^int luaZ_lookahead (ZIO *z) {$/;"	f
luaZ_openspace	deps/lua/src/lzio.c	/^char *luaZ_openspace (lua_State *L, Mbuffer *buff, size_t n) {$/;"	f
luaZ_read	deps/lua/src/lzio.c	/^size_t luaZ_read (ZIO *z, void *b, size_t n) {$/;"	f
luaZ_resetbuffer	deps/lua/src/lzio.h	36;"	d
luaZ_resizebuffer	deps/lua/src/lzio.h	39;"	d
luaZ_sizebuffer	deps/lua/src/lzio.h	33;"	d
lua_Alloc	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_Alloc"><code>lua_Alloc<\/code><\/a><\/h3>$/;"	a
lua_Alloc	deps/lua/src/lua.h	/^typedef void * (*lua_Alloc) (void *ud, void *ptr, size_t osize, size_t nsize);$/;"	t
lua_CFunction	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_CFunction"><code>lua_CFunction<\/code><\/a><\/h3>$/;"	a
lua_CFunction	deps/lua/src/lua.h	/^typedef int (*lua_CFunction) (lua_State *L);$/;"	t
lua_Chunkreader	deps/lua/src/lua.h	293;"	d
lua_Chunkwriter	deps/lua/src/lua.h	294;"	d
lua_Debug	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_Debug"><code>lua_Debug<\/code><\/a><\/h3>$/;"	a
lua_Debug	deps/lua/src/lua.h	/^struct lua_Debug {$/;"	s
lua_Debug	deps/lua/src/lua.h	/^typedef struct lua_Debug lua_Debug;  \/* activation record *\/$/;"	t	typeref:struct:lua_Debug
lua_Hook	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_Hook"><code>lua_Hook<\/code><\/a><\/h3>$/;"	a
lua_Hook	deps/lua/src/lua.h	/^typedef void (*lua_Hook) (lua_State *L, lua_Debug *ar);$/;"	t
lua_Integer	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_Integer"><code>lua_Integer<\/code><\/a><\/h3>$/;"	a
lua_Integer	deps/lua/src/lua.h	/^typedef LUA_INTEGER lua_Integer;$/;"	t
lua_Number	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_Number"><code>lua_Number<\/code><\/a><\/h3>$/;"	a
lua_Number	deps/lua/src/lua.h	/^typedef LUA_NUMBER lua_Number;$/;"	t
lua_Reader	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_Reader"><code>lua_Reader<\/code><\/a><\/h3>$/;"	a
lua_Reader	deps/lua/src/lua.h	/^typedef const char * (*lua_Reader) (lua_State *L, void *ud, size_t *sz);$/;"	t
lua_State	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_State"><code>lua_State<\/code><\/a><\/h3>$/;"	a
lua_State	deps/lua/src/lstate.h	/^struct lua_State {$/;"	s
lua_State	deps/lua/src/lua.h	/^typedef struct lua_State lua_State;$/;"	t	typeref:struct:lua_State
lua_TValue	deps/lua/src/lobject.h	/^typedef struct lua_TValue {$/;"	s
lua_Writer	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_Writer"><code>lua_Writer<\/code><\/a><\/h3>$/;"	a
lua_Writer	deps/lua/src/lua.h	/^typedef int (*lua_Writer) (lua_State *L, const void* p, size_t sz, void* ud);$/;"	t
lua_always_replicate_commands	src/server.h	/^    int lua_always_replicate_commands; \/* Default replication type. *\/$/;"	m	struct:redisServer
lua_array_length	deps/lua/src/lua_cjson.c	/^static int lua_array_length(lua_State *l, json_config_t *cfg, strbuf_t *json)$/;"	f	file:
lua_assert	deps/lua/src/llimits.h	62;"	d
lua_assert	deps/lua/src/lualib.h	49;"	d
lua_atpanic	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_atpanic"><code>lua_atpanic<\/code><\/a><\/h3><p>$/;"	a
lua_atpanic	deps/lua/src/lapi.c	/^LUA_API lua_CFunction lua_atpanic (lua_State *L, lua_CFunction panicf) {$/;"	f
lua_c	deps/lua/src/lua.c	13;"	d	file:
lua_caches	src/server.h	/^    size_t lua_caches;$/;"	m	struct:redisMemOverhead
lua_call	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_call"><code>lua_call<\/code><\/a><\/h3><p>$/;"	a
lua_call	deps/lua/src/lapi.c	/^LUA_API void lua_call (lua_State *L, int nargs, int nresults) {$/;"	f
lua_caller	src/server.h	/^    client *lua_caller;   \/* The client running EVAL right now, or NULL *\/$/;"	m	struct:redisServer
lua_checkstack	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_checkstack"><code>lua_checkstack<\/code><\/a><\/h3><p>$/;"	a
lua_checkstack	deps/lua/src/lapi.c	/^LUA_API int lua_checkstack (lua_State *L, int size) {$/;"	f
lua_cjson_new	deps/lua/src/lua_cjson.c	/^static int lua_cjson_new(lua_State *l)$/;"	f	file:
lua_cjson_safe_new	deps/lua/src/lua_cjson.c	/^static int lua_cjson_safe_new(lua_State *l)$/;"	f	file:
lua_client	src/server.h	/^    client *lua_client;   \/* The "fake client" to query Redis from Lua *\/$/;"	m	struct:redisServer
lua_close	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_close"><code>lua_close<\/code><\/a><\/h3><p>$/;"	a
lua_close	deps/lua/src/lstate.c	/^LUA_API void lua_close (lua_State *L) {$/;"	f
lua_concat	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_concat"><code>lua_concat<\/code><\/a><\/h3><p>$/;"	a
lua_concat	deps/lua/src/lapi.c	/^LUA_API void lua_concat (lua_State *L, int n) {$/;"	f
lua_cpcall	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_cpcall"><code>lua_cpcall<\/code><\/a><\/h3><p>$/;"	a
lua_cpcall	deps/lua/src/lapi.c	/^LUA_API int lua_cpcall (lua_State *L, lua_CFunction func, void *ud) {$/;"	f
lua_createtable	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_createtable"><code>lua_createtable<\/code><\/a><\/h3><p>$/;"	a
lua_createtable	deps/lua/src/lapi.c	/^LUA_API void lua_createtable (lua_State *L, int narray, int nrec) {$/;"	f
lua_cur_script	src/server.h	/^    char* lua_cur_script; \/* SHA1 of the script currently running, or NULL *\/$/;"	m	struct:redisServer
lua_dump	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_dump"><code>lua_dump<\/code><\/a><\/h3><p>$/;"	a
lua_dump	deps/lua/src/lapi.c	/^LUA_API int lua_dump (lua_State *L, lua_Writer writer, void *data) {$/;"	f
lua_equal	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_equal"><code>lua_equal<\/code><\/a><\/h3><p>$/;"	a
lua_equal	deps/lua/src/lapi.c	/^LUA_API int lua_equal (lua_State *L, int index1, int index2) {$/;"	f
lua_error	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_error"><code>lua_error<\/code><\/a><\/h3><p>$/;"	a
lua_error	deps/lua/src/lapi.c	/^LUA_API int lua_error (lua_State *L) {$/;"	f
lua_freeline	deps/lua/src/luaconf.h	281;"	d
lua_freeline	deps/lua/src/luaconf.h	287;"	d
lua_gc	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_gc"><code>lua_gc<\/code><\/a><\/h3><p>$/;"	a
lua_gc	deps/lua/src/lapi.c	/^LUA_API int lua_gc (lua_State *L, int what, int data) {$/;"	f
lua_getallocf	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_getallocf"><code>lua_getallocf<\/code><\/a><\/h3><p>$/;"	a
lua_getallocf	deps/lua/src/lapi.c	/^LUA_API lua_Alloc lua_getallocf (lua_State *L, void **ud) {$/;"	f
lua_getfenv	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_getfenv"><code>lua_getfenv<\/code><\/a><\/h3><p>$/;"	a
lua_getfenv	deps/lua/src/lapi.c	/^LUA_API void lua_getfenv (lua_State *L, int idx) {$/;"	f
lua_getfield	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_getfield"><code>lua_getfield<\/code><\/a><\/h3><p>$/;"	a
lua_getfield	deps/lua/src/lapi.c	/^LUA_API void lua_getfield (lua_State *L, int idx, const char *k) {$/;"	f
lua_getgccount	deps/lua/src/lua.h	291;"	d
lua_getglobal	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_getglobal"><code>lua_getglobal<\/code><\/a><\/h3><p>$/;"	a
lua_getglobal	deps/lua/src/lua.h	277;"	d
lua_gethook	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_gethook"><code>lua_gethook<\/code><\/a><\/h3><p>$/;"	a
lua_gethook	deps/lua/src/ldebug.c	/^LUA_API lua_Hook lua_gethook (lua_State *L) {$/;"	f
lua_gethookcount	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_gethookcount"><code>lua_gethookcount<\/code><\/a><\/h3><p>$/;"	a
lua_gethookcount	deps/lua/src/ldebug.c	/^LUA_API int lua_gethookcount (lua_State *L) {$/;"	f
lua_gethookmask	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_gethookmask"><code>lua_gethookmask<\/code><\/a><\/h3><p>$/;"	a
lua_gethookmask	deps/lua/src/ldebug.c	/^LUA_API int lua_gethookmask (lua_State *L) {$/;"	f
lua_getinfo	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_getinfo"><code>lua_getinfo<\/code><\/a><\/h3><p>$/;"	a
lua_getinfo	deps/lua/src/ldebug.c	/^LUA_API int lua_getinfo (lua_State *L, const char *what, lua_Debug *ar) {$/;"	f
lua_getlocal	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_getlocal"><code>lua_getlocal<\/code><\/a><\/h3><p>$/;"	a
lua_getlocal	deps/lua/src/ldebug.c	/^LUA_API const char *lua_getlocal (lua_State *L, const lua_Debug *ar, int n) {$/;"	f
lua_getmetatable	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_getmetatable"><code>lua_getmetatable<\/code><\/a><\/h3><p>$/;"	a
lua_getmetatable	deps/lua/src/lapi.c	/^LUA_API int lua_getmetatable (lua_State *L, int objindex) {$/;"	f
lua_getref	deps/lua/src/lauxlib.h	167;"	d
lua_getregistry	deps/lua/src/lua.h	289;"	d
lua_getstack	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_getstack"><code>lua_getstack<\/code><\/a><\/h3><p>$/;"	a
lua_getstack	deps/lua/src/ldebug.c	/^LUA_API int lua_getstack (lua_State *L, int level, lua_Debug *ar) {$/;"	f
lua_gettable	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_gettable"><code>lua_gettable<\/code><\/a><\/h3><p>$/;"	a
lua_gettable	deps/lua/src/lapi.c	/^LUA_API void lua_gettable (lua_State *L, int idx) {$/;"	f
lua_gettop	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_gettop"><code>lua_gettop<\/code><\/a><\/h3><p>$/;"	a
lua_gettop	deps/lua/src/lapi.c	/^LUA_API int lua_gettop (lua_State *L) {$/;"	f
lua_getupvalue	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_getupvalue"><code>lua_getupvalue<\/code><\/a><\/h3><p>$/;"	a
lua_getupvalue	deps/lua/src/lapi.c	/^LUA_API const char *lua_getupvalue (lua_State *L, int funcindex, int n) {$/;"	f
lua_h	deps/lua/src/lua.h	10;"	d
lua_ident	deps/lua/src/lapi.c	/^const char lua_ident[] =$/;"	v
lua_insert	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_insert"><code>lua_insert<\/code><\/a><\/h3><p>$/;"	a
lua_insert	deps/lua/src/lapi.c	/^LUA_API void lua_insert (lua_State *L, int idx) {$/;"	f
lua_isboolean	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_isboolean"><code>lua_isboolean<\/code><\/a><\/h3><p>$/;"	a
lua_isboolean	deps/lua/src/lua.h	268;"	d
lua_iscfunction	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_iscfunction"><code>lua_iscfunction<\/code><\/a><\/h3><p>$/;"	a
lua_iscfunction	deps/lua/src/lapi.c	/^LUA_API int lua_iscfunction (lua_State *L, int idx) {$/;"	f
lua_isfunction	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_isfunction"><code>lua_isfunction<\/code><\/a><\/h3><p>$/;"	a
lua_isfunction	deps/lua/src/lua.h	264;"	d
lua_islightuserdata	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_islightuserdata"><code>lua_islightuserdata<\/code><\/a><\/h3><p>$/;"	a
lua_islightuserdata	deps/lua/src/lua.h	266;"	d
lua_isnil	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_isnil"><code>lua_isnil<\/code><\/a><\/h3><p>$/;"	a
lua_isnil	deps/lua/src/lua.h	267;"	d
lua_isnone	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_isnone"><code>lua_isnone<\/code><\/a><\/h3><p>$/;"	a
lua_isnone	deps/lua/src/lua.h	270;"	d
lua_isnoneornil	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_isnoneornil"><code>lua_isnoneornil<\/code><\/a><\/h3><p>$/;"	a
lua_isnoneornil	deps/lua/src/lua.h	271;"	d
lua_isnumber	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_isnumber"><code>lua_isnumber<\/code><\/a><\/h3><p>$/;"	a
lua_isnumber	deps/lua/src/lapi.c	/^LUA_API int lua_isnumber (lua_State *L, int idx) {$/;"	f
lua_isstring	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_isstring"><code>lua_isstring<\/code><\/a><\/h3><p>$/;"	a
lua_isstring	deps/lua/src/lapi.c	/^LUA_API int lua_isstring (lua_State *L, int idx) {$/;"	f
lua_istable	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_istable"><code>lua_istable<\/code><\/a><\/h3><p>$/;"	a
lua_istable	deps/lua/src/lua.h	265;"	d
lua_isthread	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_isthread"><code>lua_isthread<\/code><\/a><\/h3><p>$/;"	a
lua_isthread	deps/lua/src/lua.h	269;"	d
lua_isuserdata	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_isuserdata"><code>lua_isuserdata<\/code><\/a><\/h3><p>$/;"	a
lua_isuserdata	deps/lua/src/lapi.c	/^LUA_API int lua_isuserdata (lua_State *L, int idx) {$/;"	f
lua_kill	src/server.h	/^    int lua_kill;         \/* Kill the script if true. *\/$/;"	m	struct:redisServer
lua_lessthan	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_lessthan"><code>lua_lessthan<\/code><\/a><\/h3><p>$/;"	a
lua_lessthan	deps/lua/src/lapi.c	/^LUA_API int lua_lessthan (lua_State *L, int index1, int index2) {$/;"	f
lua_load	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_load"><code>lua_load<\/code><\/a><\/h3><p>$/;"	a
lua_load	deps/lua/src/lapi.c	/^LUA_API int lua_load (lua_State *L, lua_Reader reader, void *data,$/;"	f
lua_lock	deps/lua/src/llimits.h	110;"	d
lua_longjmp	deps/lua/src/ldo.c	/^struct lua_longjmp {$/;"	s	file:
lua_multi_emitted	src/server.h	/^    int lua_multi_emitted;\/* True if we already propagated MULTI. *\/$/;"	m	struct:redisServer
lua_newstate	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_newstate"><code>lua_newstate<\/code><\/a><\/h3><p>$/;"	a
lua_newstate	deps/lua/src/lstate.c	/^LUA_API lua_State *lua_newstate (lua_Alloc f, void *ud) {$/;"	f
lua_newtable	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_newtable"><code>lua_newtable<\/code><\/a><\/h3><p>$/;"	a
lua_newtable	deps/lua/src/lua.h	256;"	d
lua_newthread	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_newthread"><code>lua_newthread<\/code><\/a><\/h3><p>$/;"	a
lua_newthread	deps/lua/src/lapi.c	/^LUA_API lua_State *lua_newthread (lua_State *L) {$/;"	f
lua_newuserdata	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_newuserdata"><code>lua_newuserdata<\/code><\/a><\/h3><p>$/;"	a
lua_newuserdata	deps/lua/src/lapi.c	/^LUA_API void *lua_newuserdata (lua_State *L, size_t size) {$/;"	f
lua_next	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_next"><code>lua_next<\/code><\/a><\/h3><p>$/;"	a
lua_next	deps/lua/src/lapi.c	/^LUA_API int lua_next (lua_State *L, int idx) {$/;"	f
lua_number2int	deps/lua/src/luaconf.h	563;"	d
lua_number2int	deps/lua/src/luaconf.h	571;"	d
lua_number2int	deps/lua/src/luaconf.h	580;"	d
lua_number2integer	deps/lua/src/luaconf.h	564;"	d
lua_number2integer	deps/lua/src/luaconf.h	573;"	d
lua_number2integer	deps/lua/src/luaconf.h	581;"	d
lua_number2str	deps/lua/src/luaconf.h	523;"	d
lua_objlen	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_objlen"><code>lua_objlen<\/code><\/a><\/h3><p>$/;"	a
lua_objlen	deps/lua/src/lapi.c	/^LUA_API size_t lua_objlen (lua_State *L, int idx) {$/;"	f
lua_oom	src/server.h	/^    int lua_oom;          \/* OOM detected when script start? *\/$/;"	m	struct:redisServer
lua_open	deps/lua/src/lua.h	287;"	d
lua_pcall	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_pcall"><code>lua_pcall<\/code><\/a><\/h3><p>$/;"	a
lua_pcall	deps/lua/src/lapi.c	/^LUA_API int lua_pcall (lua_State *L, int nargs, int nresults, int errfunc) {$/;"	f
lua_pclose	deps/lua/src/luaconf.h	671;"	d
lua_pclose	deps/lua/src/luaconf.h	676;"	d
lua_pclose	deps/lua/src/luaconf.h	682;"	d
lua_pop	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_pop"><code>lua_pop<\/code><\/a><\/h3><p>$/;"	a
lua_pop	deps/lua/src/lua.h	254;"	d
lua_popen	deps/lua/src/luaconf.h	670;"	d
lua_popen	deps/lua/src/luaconf.h	675;"	d
lua_popen	deps/lua/src/luaconf.h	680;"	d
lua_pushboolean	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_pushboolean"><code>lua_pushboolean<\/code><\/a><\/h3><p>$/;"	a
lua_pushboolean	deps/lua/src/lapi.c	/^LUA_API void lua_pushboolean (lua_State *L, int b) {$/;"	f
lua_pushcclosure	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_pushcclosure"><code>lua_pushcclosure<\/code><\/a><\/h3><p>$/;"	a
lua_pushcclosure	deps/lua/src/lapi.c	/^LUA_API void lua_pushcclosure (lua_State *L, lua_CFunction fn, int n) {$/;"	f
lua_pushcfunction	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_pushcfunction"><code>lua_pushcfunction<\/code><\/a><\/h3><p>$/;"	a
lua_pushcfunction	deps/lua/src/lua.h	260;"	d
lua_pushfstring	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_pushfstring"><code>lua_pushfstring<\/code><\/a><\/h3><p>$/;"	a
lua_pushfstring	deps/lua/src/lapi.c	/^LUA_API const char *lua_pushfstring (lua_State *L, const char *fmt, ...) {$/;"	f
lua_pushinteger	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_pushinteger"><code>lua_pushinteger<\/code><\/a><\/h3><p>$/;"	a
lua_pushinteger	deps/lua/src/lapi.c	/^LUA_API void lua_pushinteger (lua_State *L, lua_Integer n) {$/;"	f
lua_pushlightuserdata	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_pushlightuserdata"><code>lua_pushlightuserdata<\/code><\/a><\/h3><p>$/;"	a
lua_pushlightuserdata	deps/lua/src/lapi.c	/^LUA_API void lua_pushlightuserdata (lua_State *L, void *p) {$/;"	f
lua_pushliteral	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_pushliteral"><code>lua_pushliteral<\/code><\/a><\/h3><p>$/;"	a
lua_pushliteral	deps/lua/src/lua.h	273;"	d
lua_pushlstring	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_pushlstring"><code>lua_pushlstring<\/code><\/a><\/h3><p>$/;"	a
lua_pushlstring	deps/lua/src/lapi.c	/^LUA_API void lua_pushlstring (lua_State *L, const char *s, size_t len) {$/;"	f
lua_pushnil	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_pushnil"><code>lua_pushnil<\/code><\/a><\/h3><p>$/;"	a
lua_pushnil	deps/lua/src/lapi.c	/^LUA_API void lua_pushnil (lua_State *L) {$/;"	f
lua_pushnumber	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_pushnumber"><code>lua_pushnumber<\/code><\/a><\/h3><p>$/;"	a
lua_pushnumber	deps/lua/src/lapi.c	/^LUA_API void lua_pushnumber (lua_State *L, lua_Number n) {$/;"	f
lua_pushstring	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_pushstring"><code>lua_pushstring<\/code><\/a><\/h3><p>$/;"	a
lua_pushstring	deps/lua/src/lapi.c	/^LUA_API void lua_pushstring (lua_State *L, const char *s) {$/;"	f
lua_pushthread	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_pushthread"><code>lua_pushthread<\/code><\/a><\/h3><p>$/;"	a
lua_pushthread	deps/lua/src/lapi.c	/^LUA_API int lua_pushthread (lua_State *L) {$/;"	f
lua_pushunsigned	deps/lua/src/lua_cmsgpack.c	35;"	d	file:
lua_pushunsigned	deps/lua/src/lua_cmsgpack.c	37;"	d	file:
lua_pushvalue	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_pushvalue"><code>lua_pushvalue<\/code><\/a><\/h3><p>$/;"	a
lua_pushvalue	deps/lua/src/lapi.c	/^LUA_API void lua_pushvalue (lua_State *L, int idx) {$/;"	f
lua_pushvfstring	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_pushvfstring"><code>lua_pushvfstring<\/code><\/a><\/h3><p>$/;"	a
lua_pushvfstring	deps/lua/src/lapi.c	/^LUA_API const char *lua_pushvfstring (lua_State *L, const char *fmt,$/;"	f
lua_random_dirty	src/server.h	/^    int lua_random_dirty; \/* True if a random command was called during the$/;"	m	struct:redisServer
lua_rawequal	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_rawequal"><code>lua_rawequal<\/code><\/a><\/h3><p>$/;"	a
lua_rawequal	deps/lua/src/lapi.c	/^LUA_API int lua_rawequal (lua_State *L, int index1, int index2) {$/;"	f
lua_rawget	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_rawget"><code>lua_rawget<\/code><\/a><\/h3><p>$/;"	a
lua_rawget	deps/lua/src/lapi.c	/^LUA_API void lua_rawget (lua_State *L, int idx) {$/;"	f
lua_rawgeti	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_rawgeti"><code>lua_rawgeti<\/code><\/a><\/h3><p>$/;"	a
lua_rawgeti	deps/lua/src/lapi.c	/^LUA_API void lua_rawgeti (lua_State *L, int idx, int n) {$/;"	f
lua_rawset	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_rawset"><code>lua_rawset<\/code><\/a><\/h3><p>$/;"	a
lua_rawset	deps/lua/src/lapi.c	/^LUA_API void lua_rawset (lua_State *L, int idx) {$/;"	f
lua_rawseti	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_rawseti"><code>lua_rawseti<\/code><\/a><\/h3><p>$/;"	a
lua_rawseti	deps/lua/src/lapi.c	/^LUA_API void lua_rawseti (lua_State *L, int idx, int n) {$/;"	f
lua_readline	deps/lua/src/luaconf.h	277;"	d
lua_readline	deps/lua/src/luaconf.h	283;"	d
lua_ref	deps/lua/src/lauxlib.h	162;"	d
lua_register	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_register"><code>lua_register<\/code><\/a><\/h3><p>$/;"	a
lua_register	deps/lua/src/lua.h	258;"	d
lua_remove	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_remove"><code>lua_remove<\/code><\/a><\/h3><p>$/;"	a
lua_remove	deps/lua/src/lapi.c	/^LUA_API void lua_remove (lua_State *L, int idx) {$/;"	f
lua_repl	src/server.h	/^    int lua_repl;         \/* Script replication flags for redis.set_repl(). *\/$/;"	m	struct:redisServer
lua_replace	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_replace"><code>lua_replace<\/code><\/a><\/h3><p>$/;"	a
lua_replace	deps/lua/src/lapi.c	/^LUA_API void lua_replace (lua_State *L, int idx) {$/;"	f
lua_replicate_commands	src/server.h	/^    int lua_replicate_commands; \/* True if we are doing single commands repl. *\/$/;"	m	struct:redisServer
lua_resume	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_resume"><code>lua_resume<\/code><\/a><\/h3><p>$/;"	a
lua_resume	deps/lua/src/ldo.c	/^LUA_API int lua_resume (lua_State *L, int nargs) {$/;"	f
lua_saveline	deps/lua/src/luaconf.h	278;"	d
lua_saveline	deps/lua/src/luaconf.h	286;"	d
lua_scripts	src/server.h	/^    dict *lua_scripts;         \/* A dictionary of SHA1 -> Lua scripts *\/$/;"	m	struct:redisServer
lua_scripts_mem	src/server.h	/^    unsigned long long lua_scripts_mem;  \/* Cached scripts' memory + oh *\/$/;"	m	struct:redisServer
lua_setallocf	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_setallocf"><code>lua_setallocf<\/code><\/a><\/h3><p>$/;"	a
lua_setallocf	deps/lua/src/lapi.c	/^LUA_API void lua_setallocf (lua_State *L, lua_Alloc f, void *ud) {$/;"	f
lua_setfenv	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_setfenv"><code>lua_setfenv<\/code><\/a><\/h3><p>$/;"	a
lua_setfenv	deps/lua/src/lapi.c	/^LUA_API int lua_setfenv (lua_State *L, int idx) {$/;"	f
lua_setfield	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_setfield"><code>lua_setfield<\/code><\/a><\/h3><p>$/;"	a
lua_setfield	deps/lua/src/lapi.c	/^LUA_API void lua_setfield (lua_State *L, int idx, const char *k) {$/;"	f
lua_setglobal	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_setglobal"><code>lua_setglobal<\/code><\/a><\/h3><p>$/;"	a
lua_setglobal	deps/lua/src/lua.h	276;"	d
lua_sethook	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_sethook"><code>lua_sethook<\/code><\/a><\/h3><p>$/;"	a
lua_sethook	deps/lua/src/ldebug.c	/^LUA_API int lua_sethook (lua_State *L, lua_Hook func, int mask, int count) {$/;"	f
lua_setlevel	deps/lua/src/lapi.c	/^LUA_API void lua_setlevel (lua_State *from, lua_State *to) {$/;"	f
lua_setlocal	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_setlocal"><code>lua_setlocal<\/code><\/a><\/h3><p>$/;"	a
lua_setlocal	deps/lua/src/ldebug.c	/^LUA_API const char *lua_setlocal (lua_State *L, const lua_Debug *ar, int n) {$/;"	f
lua_setmetatable	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_setmetatable"><code>lua_setmetatable<\/code><\/a><\/h3><p>$/;"	a
lua_setmetatable	deps/lua/src/lapi.c	/^LUA_API int lua_setmetatable (lua_State *L, int objindex) {$/;"	f
lua_settable	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_settable"><code>lua_settable<\/code><\/a><\/h3><p>$/;"	a
lua_settable	deps/lua/src/lapi.c	/^LUA_API void lua_settable (lua_State *L, int idx) {$/;"	f
lua_settop	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_settop"><code>lua_settop<\/code><\/a><\/h3><p>$/;"	a
lua_settop	deps/lua/src/lapi.c	/^LUA_API void lua_settop (lua_State *L, int idx) {$/;"	f
lua_setupvalue	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_setupvalue"><code>lua_setupvalue<\/code><\/a><\/h3><p>$/;"	a
lua_setupvalue	deps/lua/src/lapi.c	/^LUA_API const char *lua_setupvalue (lua_State *L, int funcindex, int n) {$/;"	f
lua_status	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_status"><code>lua_status<\/code><\/a><\/h3><p>$/;"	a
lua_status	deps/lua/src/lapi.c	/^LUA_API int  lua_status (lua_State *L) {$/;"	f
lua_stdin_is_tty	deps/lua/src/luaconf.h	229;"	d
lua_stdin_is_tty	deps/lua/src/luaconf.h	233;"	d
lua_stdin_is_tty	deps/lua/src/luaconf.h	235;"	d
lua_str2number	deps/lua/src/luaconf.h	525;"	d
lua_strlen	deps/lua/src/lua.h	262;"	d
lua_time_limit	src/server.h	/^    mstime_t lua_time_limit;  \/* Script timeout in milliseconds *\/$/;"	m	struct:redisServer
lua_time_start	src/server.h	/^    mstime_t lua_time_start;  \/* Start time of script, milliseconds time *\/$/;"	m	struct:redisServer
lua_timedout	src/server.h	/^    int lua_timedout;     \/* True if we reached the time limit for script$/;"	m	struct:redisServer
lua_tmpnam	deps/lua/src/luaconf.h	649;"	d
lua_tmpnam	deps/lua/src/luaconf.h	657;"	d
lua_toboolean	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_toboolean"><code>lua_toboolean<\/code><\/a><\/h3><p>$/;"	a
lua_toboolean	deps/lua/src/lapi.c	/^LUA_API int lua_toboolean (lua_State *L, int idx) {$/;"	f
lua_tocfunction	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_tocfunction"><code>lua_tocfunction<\/code><\/a><\/h3><p>$/;"	a
lua_tocfunction	deps/lua/src/lapi.c	/^LUA_API lua_CFunction lua_tocfunction (lua_State *L, int idx) {$/;"	f
lua_tointeger	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_tointeger"><code>lua_tointeger<\/code><\/a><\/h3><p>$/;"	a
lua_tointeger	deps/lua/src/lapi.c	/^LUA_API lua_Integer lua_tointeger (lua_State *L, int idx) {$/;"	f
lua_tolstring	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_tolstring"><code>lua_tolstring<\/code><\/a><\/h3><p>$/;"	a
lua_tolstring	deps/lua/src/lapi.c	/^LUA_API const char *lua_tolstring (lua_State *L, int idx, size_t *len) {$/;"	f
lua_tonumber	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_tonumber"><code>lua_tonumber<\/code><\/a><\/h3><p>$/;"	a
lua_tonumber	deps/lua/src/lapi.c	/^LUA_API lua_Number lua_tonumber (lua_State *L, int idx) {$/;"	f
lua_topointer	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_topointer"><code>lua_topointer<\/code><\/a><\/h3><p>$/;"	a
lua_topointer	deps/lua/src/lapi.c	/^LUA_API const void *lua_topointer (lua_State *L, int idx) {$/;"	f
lua_tostring	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_tostring"><code>lua_tostring<\/code><\/a><\/h3><p>$/;"	a
lua_tostring	deps/lua/src/lua.h	279;"	d
lua_tothread	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_tothread"><code>lua_tothread<\/code><\/a><\/h3><p>$/;"	a
lua_tothread	deps/lua/src/lapi.c	/^LUA_API lua_State *lua_tothread (lua_State *L, int idx) {$/;"	f
lua_touserdata	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_touserdata"><code>lua_touserdata<\/code><\/a><\/h3><p>$/;"	a
lua_touserdata	deps/lua/src/lapi.c	/^LUA_API void *lua_touserdata (lua_State *L, int idx) {$/;"	f
lua_type	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_type"><code>lua_type<\/code><\/a><\/h3><p>$/;"	a
lua_type	deps/lua/src/lapi.c	/^LUA_API int lua_type (lua_State *L, int idx) {$/;"	f
lua_typename	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_typename"><code>lua_typename<\/code><\/a><\/h3><p>$/;"	a
lua_typename	deps/lua/src/lapi.c	/^LUA_API const char *lua_typename (lua_State *L, int t) {$/;"	f
lua_unlock	deps/lua/src/llimits.h	111;"	d
lua_unref	deps/lua/src/lauxlib.h	165;"	d
lua_upvalueindex	deps/lua/doc/manual.html	/^<a name="lua_upvalueindex"><code>lua_upvalueindex<\/code><\/a>.$/;"	a
lua_upvalueindex	deps/lua/src/lua.h	39;"	d
lua_write_dirty	src/server.h	/^    int lua_write_dirty;  \/* True if a write command was called during the$/;"	m	struct:redisServer
lua_xmove	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_xmove"><code>lua_xmove<\/code><\/a><\/h3><p>$/;"	a
lua_xmove	deps/lua/src/lapi.c	/^LUA_API void lua_xmove (lua_State *from, lua_State *to, int n) {$/;"	f
lua_yield	deps/lua/doc/manual.html	/^<hr><h3><a name="lua_yield"><code>lua_yield<\/code><\/a><\/h3><p>$/;"	a
lua_yield	deps/lua/src/ldo.c	/^LUA_API int lua_yield (lua_State *L, int nresults) {$/;"	f
luaall_c	deps/lua/etc/all.c	5;"	d	file:
luabp	src/scripting.c	/^    int luabp;  \/* Stop at next line because redis.breakpoint() was called. *\/$/;"	m	struct:ldbState	file:
luac_c	deps/lua/src/luac.c	12;"	d	file:
luac_c	deps/lua/src/print.c	10;"	d	file:
luai_Cast	deps/lua/src/luaconf.h	/^union luai_Cast { double l_d; long l_l; };$/;"	u
luai_apicheck	deps/lua/src/luaconf.h	379;"	d
luai_apicheck	deps/lua/src/luaconf.h	381;"	d
luai_jmpbuf	deps/lua/src/luaconf.h	611;"	d
luai_jmpbuf	deps/lua/src/luaconf.h	617;"	d
luai_jmpbuf	deps/lua/src/luaconf.h	623;"	d
luai_numadd	deps/lua/src/luaconf.h	533;"	d
luai_numdiv	deps/lua/src/luaconf.h	536;"	d
luai_numeq	deps/lua/src/luaconf.h	540;"	d
luai_numisnan	deps/lua/src/luaconf.h	543;"	d
luai_numle	deps/lua/src/luaconf.h	542;"	d
luai_numlt	deps/lua/src/luaconf.h	541;"	d
luai_nummod	deps/lua/src/luaconf.h	537;"	d
luai_nummul	deps/lua/src/luaconf.h	535;"	d
luai_numpow	deps/lua/src/luaconf.h	538;"	d
luai_numsub	deps/lua/src/luaconf.h	534;"	d
luai_numunm	deps/lua/src/luaconf.h	539;"	d
luai_threadyield	deps/lua/src/llimits.h	115;"	d
luai_userstateclose	deps/lua/src/luaconf.h	724;"	d
luai_userstatefree	deps/lua/src/luaconf.h	726;"	d
luai_userstateopen	deps/lua/src/luaconf.h	723;"	d
luai_userstateresume	deps/lua/src/luaconf.h	727;"	d
luai_userstatethread	deps/lua/src/luaconf.h	725;"	d
luai_userstateyield	deps/lua/src/luaconf.h	728;"	d
lualib_h	deps/lua/src/lualib.h	9;"	d
lualibs	deps/lua/src/linit.c	/^static const luaL_Reg lualibs[] = {$/;"	v	file:
luaopen_base	deps/lua/src/lbaselib.c	/^LUALIB_API int luaopen_base (lua_State *L) {$/;"	f
luaopen_bit	deps/lua/src/lua_bit.c	/^LUALIB_API int luaopen_bit(lua_State *L)$/;"	f
luaopen_cjson	deps/lua/src/lua_cjson.c	/^int luaopen_cjson(lua_State *l)$/;"	f
luaopen_cjson_safe	deps/lua/src/lua_cjson.c	/^int luaopen_cjson_safe(lua_State *l)$/;"	f
luaopen_cmsgpack	deps/lua/src/lua_cmsgpack.c	/^LUALIB_API int luaopen_cmsgpack(lua_State *L) {$/;"	f
luaopen_cmsgpack_safe	deps/lua/src/lua_cmsgpack.c	/^LUALIB_API int luaopen_cmsgpack_safe(lua_State *L) {$/;"	f
luaopen_create	deps/lua/src/lua_cmsgpack.c	/^int luaopen_create(lua_State *L) {$/;"	f
luaopen_debug	deps/lua/src/ldblib.c	/^LUALIB_API int luaopen_debug (lua_State *L) {$/;"	f
luaopen_io	deps/lua/src/liolib.c	/^LUALIB_API int luaopen_io (lua_State *L) {$/;"	f
luaopen_math	deps/lua/src/lmathlib.c	/^LUALIB_API int luaopen_math (lua_State *L) {$/;"	f
luaopen_os	deps/lua/src/loslib.c	/^LUALIB_API int luaopen_os (lua_State *L) {$/;"	f
luaopen_package	deps/lua/src/loadlib.c	/^LUALIB_API int luaopen_package (lua_State *L) {$/;"	f
luaopen_string	deps/lua/src/lstrlib.c	/^LUALIB_API int luaopen_string (lua_State *L) {$/;"	f
luaopen_struct	deps/lua/src/lua_struct.c	/^LUALIB_API int luaopen_struct (lua_State *L) {$/;"	f
luaopen_table	deps/lua/src/ltablib.c	/^LUALIB_API int luaopen_table (lua_State *L) {$/;"	f
lundump_c	deps/lua/src/lundump.c	9;"	d	file:
lundump_h	deps/lua/src/lundump.h	8;"	d
lval	src/ziplist.h	/^    long long lval;$/;"	m	struct:__anon70
lvl	deps/lua/src/lauxlib.h	/^  int lvl;  \/* number of strings in the stack (level) *\/$/;"	m	struct:luaL_Buffer
lvm_c	deps/lua/src/lvm.c	12;"	d	file:
lvm_h	deps/lua/src/lvm.h	8;"	d
lwCanvas	src/lolwut.h	/^typedef struct lwCanvas {$/;"	s
lwCanvas	src/lolwut.h	/^} lwCanvas;$/;"	t	typeref:struct:lwCanvas
lwCreateCanvas	src/lolwut.c	/^lwCanvas *lwCreateCanvas(int width, int height, int bgcolor) {$/;"	f
lwDrawLine	src/lolwut.c	/^void lwDrawLine(lwCanvas *canvas, int x1, int y1, int x2, int y2, int color) {$/;"	f
lwDrawPixel	src/lolwut.c	/^void lwDrawPixel(lwCanvas *canvas, int x, int y, int color) {$/;"	f
lwDrawSchotter	src/lolwut5.c	/^lwCanvas *lwDrawSchotter(int console_cols, int squares_per_row, int squares_per_col) {$/;"	f
lwDrawSquare	src/lolwut.c	/^void lwDrawSquare(lwCanvas *canvas, int x, int y, float size, float angle, int color) {$/;"	f
lwFreeCanvas	src/lolwut.c	/^void lwFreeCanvas(lwCanvas *canvas) {$/;"	f
lwGetPixel	src/lolwut.c	/^int lwGetPixel(lwCanvas *canvas, int x, int y) {$/;"	f
lwTranslatePixelsGroup	src/lolwut5.c	/^void lwTranslatePixelsGroup(int byte, char *output) {$/;"	f
lzf_compress	src/lzf_c.c	/^lzf_compress (const void *const in_data, unsigned int in_len,$/;"	f
lzf_decompress	src/lzf_d.c	/^lzf_decompress (const void *const in_data,  unsigned int in_len,$/;"	f
lzf_movsb	src/lzf_d.c	48;"	d	file:
lzio_c	deps/lua/src/lzio.c	10;"	d	file:
lzio_h	deps/lua/src/lzio.h	9;"	d
m_adapter	deps/hiredis/examples/example-qt.h	/^        RedisQtAdapter m_adapter;$/;"	m	class:ExampleQt
m_ctx	deps/hiredis/adapters/qt.h	/^        redisAsyncContext * m_ctx;$/;"	m	class:RedisQtAdapter
m_ctx	deps/hiredis/examples/example-qt.h	/^        redisAsyncContext * m_ctx;$/;"	m	class:ExampleQt
m_read	deps/hiredis/adapters/qt.h	/^        QSocketNotifier * m_read;$/;"	m	class:RedisQtAdapter
m_value	deps/hiredis/examples/example-qt.h	/^        const char * m_value;$/;"	m	class:ExampleQt
m_write	deps/hiredis/adapters/qt.h	/^        QSocketNotifier * m_write;$/;"	m	class:RedisQtAdapter
mach_absolute_time	deps/jemalloc/configure	/^	mach_absolute_time();$/;"	f
mad	src/latency.h	/^    uint32_t mad;           \/* Mean absolute deviation. *\/$/;"	m	struct:latencyStats
magic	deps/jemalloc/include/jemalloc/internal/div.h	/^	uint32_t magic;$/;"	m	struct:div_info_s
magic	deps/jemalloc/test/unit/ph.c	/^	uint32_t magic;$/;"	m	struct:node_s	file:
magic	deps/jemalloc/test/unit/rb.c	/^	uint32_t magic;$/;"	m	struct:node_s	file:
magic	src/hyperloglog.c	/^    char magic[4];      \/* "HYLL" *\/$/;"	m	struct:hllhdr	file:
main	deps/hiredis/examples/example-ae.c	/^int main (int argc, char **argv) {$/;"	f
main	deps/hiredis/examples/example-glib.c	/^main (gint argc     G_GNUC_UNUSED,$/;"	f
main	deps/hiredis/examples/example-ivykis.c	/^int main (int argc, char **argv) {$/;"	f
main	deps/hiredis/examples/example-libev.c	/^int main (int argc, char **argv) {$/;"	f
main	deps/hiredis/examples/example-libevent-ssl.c	/^int main (int argc, char **argv) {$/;"	f
main	deps/hiredis/examples/example-libevent.c	/^int main (int argc, char **argv) {$/;"	f
main	deps/hiredis/examples/example-libuv.c	/^int main (int argc, char **argv) {$/;"	f
main	deps/hiredis/examples/example-macosx.c	/^int main (int argc, char **argv) {$/;"	f
main	deps/hiredis/examples/example-push.c	/^int main(int argc, char **argv) {$/;"	f
main	deps/hiredis/examples/example-qt.cpp	/^int main (int argc, char **argv) {$/;"	f
main	deps/hiredis/examples/example-ssl.c	/^int main(int argc, char **argv) {$/;"	f
main	deps/hiredis/examples/example.c	/^int main(int argc, char **argv) {$/;"	f
main	deps/hiredis/sds.c	/^int main(void) {$/;"	f
main	deps/hiredis/test.c	/^int main(int argc, char **argv) {$/;"	f
main	deps/jemalloc/build-aux/config.guess	/^		main()$/;"	f
main	deps/jemalloc/build-aux/config.guess	/^	main ()$/;"	f
main	deps/jemalloc/msvc/test_threads/test_threads_main.cpp	/^int main(int argc, char** argv) {$/;"	f
main	deps/jemalloc/test/integration/MALLOCX_ARENA.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/integration/aligned_alloc.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/integration/allocated.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/integration/extent.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/integration/mallocx.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/integration/overflow.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/integration/posix_memalign.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/integration/rallocx.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/integration/sdallocx.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/integration/thread_arena.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/integration/thread_tcache_enabled.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/integration/xallocx.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/stress/microbench.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/SFMT.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/a0.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/arena_reset.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/atomic.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/background_thread.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/background_thread_enable.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/base.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/bit_util.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/bitmap.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/ckh.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/decay.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/div.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/emitter.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/extent_quantize.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/fork.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/hash.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/hooks.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/junk.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/log.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/mallctl.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/malloc_io.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/math.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/mq.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/mtx.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/nstime.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/pack.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/pages.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/ph.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/prng.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/prof_accum.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/prof_active.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/prof_gdump.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/prof_idump.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/prof_reset.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/prof_tctx.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/prof_thread_name.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/ql.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/qr.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/rb.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/retained.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/rtree.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/size_classes.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/slab.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/smoothstep.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/spin.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/stats.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/stats_print.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/ticker.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/tsd.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/witness.c	/^main(void) {$/;"	f
main	deps/jemalloc/test/unit/zero.c	/^main(void) {$/;"	f
main	deps/linenoise/example.c	/^int main(int argc, char **argv) {$/;"	f
main	deps/lua/etc/min.c	/^int main(void)$/;"	f
main	deps/lua/src/lua.c	/^int main (int argc, char **argv) {$/;"	f
main	deps/lua/src/luac.c	/^int main(int argc, char* argv[])$/;"	f
main	exp/exp2_micro.c	/^int main (int argc, char **argv) {$/;"	f
main	src/controller.c	/^int main() {$/;"	f
main	src/crc64.c	/^int main(int argc, char *argv[]) {$/;"	f
main	src/localtime.c	/^int main(void) {$/;"	f
main	src/mt19937-64.c	/^int main(void)$/;"	f
main	src/redis-benchmark.c	/^int main(int argc, const char **argv) {$/;"	f
main	src/redis-cli.c	/^int main(int argc, char **argv) {$/;"	f
main	src/server.c	/^int main(int argc, char **argv) {$/;"	f
main	src/setproctitle.c	/^int main(int argc, char *argv[]) {$/;"	f
main	src/siphash.c	/^int main(void) {$/;"	f
main	tests/cluster/run.tcl	/^proc main {} {$/;"	p
main	tests/sentinel/run.tcl	/^proc main {} {$/;"	p
main	tmp/getcpu.cpp	/^int main()$/;"	f
main	utils/corrupt_rdb.c	/^int main(int argc, char **argv) {$/;"	f
main	utils/hashtable/rehashing.c	/^int main(void) {$/;"	f
main	utils/lru/lfu-simulation.c	/^int main(void) {$/;"	f
main	utils/speed-regression.tcl	/^proc main {} {$/;"	p
main	utils/tracking_collisions.c	/^int main(void) {$/;"	f
main_thread_id	src/server.h	/^    pthread_t main_thread_id;         \/* Main thread id *\/$/;"	m	struct:redisServer
mainloop	deps/hiredis/examples/example-glib.c	/^static GMainLoop *mainloop;$/;"	v	file:
mainposition	deps/lua/src/ltable.c	/^static Node *mainposition (const Table *t, const TValue *key) {$/;"	f	file:
mainthread	deps/lua/src/lstate.h	/^  struct lua_State *mainthread;$/;"	m	struct:global_State	typeref:struct:global_State::lua_State
makeObjectShared	src/object.c	/^robj *makeObjectShared(robj *o) {$/;"	f
makeThreadKillable	src/server.c	/^void makeThreadKillable(void) {$/;"	f
makemask	deps/lua/src/ldblib.c	/^static int makemask (const char *smask, int count) {$/;"	f	file:
makewhite	deps/lua/src/lgc.c	34;"	d	file:
mallctl_bool_get	deps/jemalloc/test/unit/prof_active.c	/^mallctl_bool_get(const char *name, bool expected, const char *func, int line) {$/;"	f	file:
mallctl_bool_set	deps/jemalloc/test/unit/prof_active.c	/^mallctl_bool_set(const char *name, bool old_expected, bool val_new,$/;"	f	file:
mallctl_failure	deps/jemalloc/test/integration/thread_arena.c	/^mallctl_failure(int err) {$/;"	f	file:
mallctl_int	src/debug.c	/^void mallctl_int(client *c, robj **argv, int argc) {$/;"	f
mallctl_prof_active_get	deps/jemalloc/test/unit/prof_active.c	35;"	d	file:
mallctl_prof_active_get_impl	deps/jemalloc/test/unit/prof_active.c	/^mallctl_prof_active_get_impl(bool prof_active_old_expected, const char *func,$/;"	f	file:
mallctl_prof_active_set	deps/jemalloc/test/unit/prof_active.c	44;"	d	file:
mallctl_prof_active_set_impl	deps/jemalloc/test/unit/prof_active.c	/^mallctl_prof_active_set_impl(bool prof_active_old_expected,$/;"	f	file:
mallctl_string	src/debug.c	/^void mallctl_string(client *c, robj **argv, int argc) {$/;"	f
mallctl_thread_name_get	deps/jemalloc/test/unit/prof_thread_name.c	17;"	d	file:
mallctl_thread_name_get_impl	deps/jemalloc/test/unit/prof_thread_name.c	/^mallctl_thread_name_get_impl(const char *thread_name_expected, const char *func,$/;"	f	file:
mallctl_thread_name_set	deps/jemalloc/test/unit/prof_thread_name.c	29;"	d	file:
mallctl_thread_name_set_impl	deps/jemalloc/test/unit/prof_thread_name.c	/^mallctl_thread_name_set_impl(const char *thread_name, const char *func,$/;"	f	file:
mallctl_thread_prof_active_get	deps/jemalloc/test/unit/prof_active.c	53;"	d	file:
mallctl_thread_prof_active_get_impl	deps/jemalloc/test/unit/prof_active.c	/^mallctl_thread_prof_active_get_impl(bool thread_prof_active_old_expected,$/;"	f	file:
mallctl_thread_prof_active_set	deps/jemalloc/test/unit/prof_active.c	62;"	d	file:
mallctl_thread_prof_active_set_impl	deps/jemalloc/test/unit/prof_active.c	/^mallctl_thread_prof_active_set_impl(bool thread_prof_active_old_expected,$/;"	f	file:
malloc	deps/jemalloc/src/zone.c	/^	void *(*malloc)(struct _malloc_zone_t *, size_t);$/;"	m	struct:_malloc_zone_t	file:
malloc	src/zmalloc.c	70;"	d	file:
malloc	src/zmalloc.c	75;"	d	file:
mallocFn	deps/hiredis/alloc.h	/^    void *(*mallocFn)(size_t);$/;"	m	struct:hiredisAllocFuncs
malloc_abort_invalid_conf	deps/jemalloc/src/jemalloc.c	/^malloc_abort_invalid_conf(void) {$/;"	f	file:
malloc_conf	deps/jemalloc/scripts/gen_travis.py	/^    malloc_conf = [$/;"	v
malloc_conf	deps/jemalloc/test/unit/background_thread_enable.c	/^const char *malloc_conf = "background_thread:false,narenas:1,max_background_threads:20";$/;"	v
malloc_conf_error	deps/jemalloc/src/jemalloc.c	/^malloc_conf_error(const char *msg, const char *k, size_t klen, const char *v,$/;"	f	file:
malloc_conf_init	deps/jemalloc/src/jemalloc.c	/^malloc_conf_init(void) {$/;"	f	file:
malloc_conf_next	deps/jemalloc/src/jemalloc.c	/^malloc_conf_next(char const **opts_p, char const **k_p, size_t *klen_p,$/;"	f	file:
malloc_conf_unusuals	deps/jemalloc/scripts/gen_travis.py	/^malloc_conf_unusuals = [$/;"	v
malloc_cprintf	deps/jemalloc/src/malloc_io.c	/^malloc_cprintf(void (*write_cb)(void *, const char *), void *cbopaque,$/;"	f
malloc_cpuid_t	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^typedef int malloc_cpuid_t;$/;"	t
malloc_dallocx	deps/jemalloc/test/stress/microbench.c	/^malloc_dallocx(void) {$/;"	f	file:
malloc_free	deps/jemalloc/test/stress/microbench.c	/^malloc_free(void) {$/;"	f	file:
malloc_getcpu	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_a.h	/^malloc_getcpu(void) {$/;"	f
malloc_init	deps/jemalloc/src/jemalloc.c	/^malloc_init(void) {$/;"	f
malloc_init_a0	deps/jemalloc/src/jemalloc.c	/^malloc_init_a0(void) {$/;"	f
malloc_init_a0_initialized	deps/jemalloc/src/jemalloc.c	/^	malloc_init_a0_initialized	= 2,$/;"	e	enum:__anon130	file:
malloc_init_hard	deps/jemalloc/src/jemalloc.c	/^malloc_init_hard(void) {$/;"	f	file:
malloc_init_hard_a0	deps/jemalloc/src/jemalloc.c	/^malloc_init_hard_a0(void) {$/;"	f	file:
malloc_init_hard_a0_locked	deps/jemalloc/src/jemalloc.c	/^malloc_init_hard_a0_locked() {$/;"	f	file:
malloc_init_hard_cleanup	deps/jemalloc/src/jemalloc.c	/^malloc_init_hard_cleanup(tsdn_t *tsdn, bool reentrancy_set) {$/;"	f	file:
malloc_init_hard_finish	deps/jemalloc/src/jemalloc.c	/^malloc_init_hard_finish(void) {$/;"	f	file:
malloc_init_hard_needed	deps/jemalloc/src/jemalloc.c	/^malloc_init_hard_needed(void) {$/;"	f	file:
malloc_init_hard_recursible	deps/jemalloc/src/jemalloc.c	/^malloc_init_hard_recursible(void) {$/;"	f	file:
malloc_init_initialized	deps/jemalloc/src/jemalloc.c	/^	malloc_init_initialized		= 0 \/* Common case --> jnz. *\/$/;"	e	enum:__anon130	file:
malloc_init_narenas	deps/jemalloc/src/jemalloc.c	/^malloc_init_narenas(void) {$/;"	f	file:
malloc_init_percpu	deps/jemalloc/src/jemalloc.c	/^malloc_init_percpu(void) {$/;"	f	file:
malloc_init_recursible	deps/jemalloc/src/jemalloc.c	/^	malloc_init_recursible		= 1,$/;"	e	enum:__anon130	file:
malloc_init_state	deps/jemalloc/src/jemalloc.c	/^static malloc_init_t	malloc_init_state = malloc_init_uninitialized;$/;"	v	file:
malloc_init_t	deps/jemalloc/src/jemalloc.c	/^} malloc_init_t;$/;"	t	typeref:enum:__anon130	file:
malloc_init_uninitialized	deps/jemalloc/src/jemalloc.c	/^	malloc_init_uninitialized	= 3,$/;"	e	enum:__anon130	file:
malloc_initialized	deps/jemalloc/src/jemalloc.c	/^malloc_initialized(void) {$/;"	f
malloc_initializer	deps/jemalloc/src/jemalloc.c	/^static bool			malloc_initializer = NO_INITIALIZER;$/;"	v	file:
malloc_initializer	deps/jemalloc/src/jemalloc.c	/^static pthread_t		malloc_initializer = NO_INITIALIZER;$/;"	v	file:
malloc_introspection_t	deps/jemalloc/src/zone.c	/^typedef struct malloc_introspection_t {$/;"	s	file:
malloc_introspection_t	deps/jemalloc/src/zone.c	/^} malloc_introspection_t;$/;"	t	typeref:struct:malloc_introspection_t	file:
malloc_mus_free	deps/jemalloc/test/stress/microbench.c	/^malloc_mus_free(void) {$/;"	f	file:
malloc_mutex_address_ordered	deps/jemalloc/include/jemalloc/internal/mutex.h	/^	malloc_mutex_address_ordered$/;"	e	enum:__anon156
malloc_mutex_assert_not_owner	deps/jemalloc/include/jemalloc/internal/mutex.h	/^malloc_mutex_assert_not_owner(tsdn_t *tsdn, malloc_mutex_t *mutex) {$/;"	f
malloc_mutex_assert_owner	deps/jemalloc/include/jemalloc/internal/mutex.h	/^malloc_mutex_assert_owner(tsdn_t *tsdn, malloc_mutex_t *mutex) {$/;"	f
malloc_mutex_boot	deps/jemalloc/src/mutex.c	/^malloc_mutex_boot(void) {$/;"	f
malloc_mutex_init	deps/jemalloc/src/mutex.c	/^malloc_mutex_init(malloc_mutex_t *mutex, const char *name,$/;"	f
malloc_mutex_lock	deps/jemalloc/include/jemalloc/internal/mutex.h	/^malloc_mutex_lock(tsdn_t *tsdn, malloc_mutex_t *mutex) {$/;"	f
malloc_mutex_lock_final	deps/jemalloc/include/jemalloc/internal/mutex.h	/^malloc_mutex_lock_final(malloc_mutex_t *mutex) {$/;"	f
malloc_mutex_lock_order_t	deps/jemalloc/include/jemalloc/internal/mutex.h	/^} malloc_mutex_lock_order_t;$/;"	t	typeref:enum:__anon156
malloc_mutex_lock_slow	deps/jemalloc/src/mutex.c	/^malloc_mutex_lock_slow(malloc_mutex_t *mutex) {$/;"	f
malloc_mutex_postfork_child	deps/jemalloc/src/mutex.c	/^malloc_mutex_postfork_child(tsdn_t *tsdn, malloc_mutex_t *mutex) {$/;"	f
malloc_mutex_postfork_parent	deps/jemalloc/src/mutex.c	/^malloc_mutex_postfork_parent(tsdn_t *tsdn, malloc_mutex_t *mutex) {$/;"	f
malloc_mutex_prefork	deps/jemalloc/src/mutex.c	/^malloc_mutex_prefork(tsdn_t *tsdn, malloc_mutex_t *mutex) {$/;"	f
malloc_mutex_prof_data_reset	deps/jemalloc/src/mutex.c	/^malloc_mutex_prof_data_reset(tsdn_t *tsdn, malloc_mutex_t *mutex) {$/;"	f
malloc_mutex_prof_merge	deps/jemalloc/include/jemalloc/internal/mutex.h	/^malloc_mutex_prof_merge(mutex_prof_data_t *sum, mutex_prof_data_t *data) {$/;"	f
malloc_mutex_prof_read	deps/jemalloc/include/jemalloc/internal/mutex.h	/^malloc_mutex_prof_read(tsdn_t *tsdn, mutex_prof_data_t *data,$/;"	f
malloc_mutex_rank_exclusive	deps/jemalloc/include/jemalloc/internal/mutex.h	/^	malloc_mutex_rank_exclusive,$/;"	e	enum:__anon156
malloc_mutex_s	deps/jemalloc/include/jemalloc/internal/mutex.h	/^struct malloc_mutex_s {$/;"	s
malloc_mutex_t	deps/jemalloc/include/jemalloc/internal/mutex.h	/^typedef struct malloc_mutex_s malloc_mutex_t;$/;"	t	typeref:struct:malloc_mutex_s
malloc_mutex_trylock	deps/jemalloc/include/jemalloc/internal/mutex.h	/^malloc_mutex_trylock(tsdn_t *tsdn, malloc_mutex_t *mutex) {$/;"	f
malloc_mutex_trylock_final	deps/jemalloc/include/jemalloc/internal/mutex.h	/^malloc_mutex_trylock_final(malloc_mutex_t *mutex) {$/;"	f
malloc_mutex_unlock	deps/jemalloc/include/jemalloc/internal/mutex.h	/^malloc_mutex_unlock(tsdn_t *tsdn, malloc_mutex_t *mutex) {$/;"	f
malloc_nallocx_free	deps/jemalloc/test/stress/microbench.c	/^malloc_nallocx_free(void) {$/;"	f	file:
malloc_narenas_default	deps/jemalloc/src/jemalloc.c	/^malloc_narenas_default(void) {$/;"	f	file:
malloc_ncpus	deps/jemalloc/src/jemalloc.c	/^malloc_ncpus(void) {$/;"	f	file:
malloc_printf	deps/jemalloc/src/malloc_io.c	/^malloc_printf(const char *format, ...) {$/;"	f
malloc_read_fd	deps/jemalloc/include/jemalloc/internal/malloc_io.h	/^malloc_read_fd(int fd, void *buf, size_t count) {$/;"	f
malloc_sallocx_free	deps/jemalloc/test/stress/microbench.c	/^malloc_sallocx_free(void) {$/;"	f	file:
malloc_sdallocx	deps/jemalloc/test/stress/microbench.c	/^malloc_sdallocx(void) {$/;"	f	file:
malloc_slow	deps/jemalloc/src/jemalloc.c	/^bool			malloc_slow = true;$/;"	v
malloc_slow_flag_init	deps/jemalloc/src/jemalloc.c	/^malloc_slow_flag_init(void) {$/;"	f	file:
malloc_slow_flags	deps/jemalloc/src/jemalloc.c	/^static uint8_t	malloc_slow_flags;$/;"	v	file:
malloc_snprintf	deps/jemalloc/src/malloc_io.c	/^malloc_snprintf(char *str, size_t size, const char *format, ...) {$/;"	f
malloc_statistics_t	deps/jemalloc/src/zone.c	/^typedef struct malloc_statistics_t {$/;"	s	file:
malloc_statistics_t	deps/jemalloc/src/zone.c	/^} malloc_statistics_t;$/;"	t	typeref:struct:malloc_statistics_t	file:
malloc_stats	src/server.h	/^struct malloc_stats {$/;"	s
malloc_strtoumax	deps/jemalloc/src/malloc_io.c	/^malloc_strtoumax(const char *restrict nptr, char **restrict endptr, int base) {$/;"	f
malloc_tsd_boot0	deps/jemalloc/src/tsd.c	/^malloc_tsd_boot0(void) {$/;"	f
malloc_tsd_boot1	deps/jemalloc/src/tsd.c	/^malloc_tsd_boot1(void) {$/;"	f
malloc_tsd_cleanup_register	deps/jemalloc/src/tsd.c	/^malloc_tsd_cleanup_register(bool (*f)(void)) {$/;"	f
malloc_tsd_cleanup_t	deps/jemalloc/include/jemalloc/internal/tsd_types.h	/^typedef bool (*malloc_tsd_cleanup_t)(void);$/;"	t
malloc_tsd_dalloc	deps/jemalloc/src/tsd.c	/^malloc_tsd_dalloc(void *wrapper) {$/;"	f
malloc_tsd_malloc	deps/jemalloc/src/tsd.c	/^malloc_tsd_malloc(size_t size) {$/;"	f
malloc_utrace_t	deps/jemalloc/src/jemalloc.c	/^} malloc_utrace_t;$/;"	t	typeref:struct:__anon132	file:
malloc_vcprintf	deps/jemalloc/src/malloc_io.c	/^malloc_vcprintf(void (*write_cb)(void *, const char *), void *cbopaque,$/;"	f
malloc_vsnprintf	deps/jemalloc/src/malloc_io.c	/^malloc_vsnprintf(char *str, size_t size, const char *format, va_list ap) {$/;"	f
malloc_write	deps/jemalloc/src/malloc_io.c	/^malloc_write(const char *s) {$/;"	f
malloc_write_fd	deps/jemalloc/include/jemalloc/internal/malloc_io.h	/^malloc_write_fd(int fd, const void *buf, size_t count) {$/;"	f
malloc_zone_t	deps/jemalloc/src/zone.c	/^} malloc_zone_t;$/;"	t	typeref:struct:_malloc_zone_t	file:
mallocx	src/zmalloc.c	79;"	d	file:
mallocx_free	deps/jemalloc/test/stress/microbench.c	/^mallocx_free(void) {$/;"	f	file:
manualFailoverCheckTimeout	src/cluster.c	/^void manualFailoverCheckTimeout(void) {$/;"	f
mapped	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	atomic_zu_t		mapped; \/* Partially derived. *\/$/;"	m	struct:arena_stats_s
mapped	deps/jemalloc/include/jemalloc/internal/base_structs.h	/^	size_t		mapped;$/;"	m	struct:base_s
mapped	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	size_t mapped;$/;"	m	struct:ctl_stats_s
maps_coalesce	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool maps_coalesce =$/;"	v
markNodeAsFailingIfNeeded	src/cluster.c	/^void markNodeAsFailingIfNeeded(clusterNode *node) {$/;"	f
markdown	src/modules/gendoc.rb	/^def markdown(s)$/;"	f
markfinalized	deps/lua/src/lgc.c	44;"	d	file:
markmt	deps/lua/src/lgc.c	/^static void markmt (global_State *g) {$/;"	f	file:
markobject	deps/lua/src/lgc.c	55;"	d	file:
markroot	deps/lua/src/lgc.c	/^static void markroot (lua_State *L) {$/;"	f	file:
marktmu	deps/lua/src/lgc.c	/^static void marktmu (global_State *g) {$/;"	f	file:
markupval	deps/lua/src/lparser.c	/^static void markupval (FuncState *fs, int level) {$/;"	f	file:
markvalue	deps/lua/src/lgc.c	52;"	d	file:
mask	src/ae.h	/^    int mask; \/* one of AE_(READABLE|WRITABLE|BARRIER) *\/$/;"	m	struct:aeFileEvent
mask	src/ae.h	/^    int mask;$/;"	m	struct:aeFiredEvent
maskmarks	deps/lua/src/lgc.c	32;"	d	file:
maskmode	deps/linenoise/linenoise.c	/^static int maskmode = 0; \/* Show "***" instead of input. For passwords. *\/$/;"	v	file:
master	src/redismodule.h	/^    int master;             \/* true if master, false if replica *\/$/;"	m	struct:RedisModuleReplicationInfo
master	src/sentinel.c	/^    struct sentinelRedisInstance *master; \/* Master instance if it's slave. *\/$/;"	m	struct:sentinelRedisInstance	typeref:struct:sentinelRedisInstance::sentinelRedisInstance	file:
master	src/server.h	/^    client *master;     \/* Client that is master for this slave *\/$/;"	m	struct:redisServer
masterTryPartialResynchronization	src/replication.c	/^int masterTryPartialResynchronization(client *c) {$/;"	f
master_detected	tests/cluster/tests/05-slave-selection.tcl	/^proc master_detected {instances} {$/;"	p
master_fields_count	src/stream.h	/^    uint64_t master_fields_count;       \/* Master entries # of fields. *\/$/;"	m	struct:streamIterator
master_fields_ptr	src/stream.h	/^    unsigned char *master_fields_ptr;   \/* Master field to emit next. *\/$/;"	m	struct:streamIterator
master_fields_start	src/stream.h	/^    unsigned char *master_fields_start; \/* Master entries start in listpack. *\/$/;"	m	struct:streamIterator
master_id	src/module.c	/^    char master_id[40]; \/* Only if flags & REDISMODULE_NODE_MASTER is true. *\/$/;"	m	struct:moduleClusterNodeInfo	file:
master_id	src/redis-cli.c	/^    char *master_id;$/;"	m	struct:clusterManagerCommand	file:
master_id	src/stream.h	/^    streamID master_id;     \/* ID of the master entry at listpack head. *\/$/;"	m	struct:streamIterator
master_initial_offset	src/server.h	/^    long long master_initial_offset;           \/* Master PSYNC offset. *\/$/;"	m	struct:redisServer
master_link_down_time	src/sentinel.c	/^    mstime_t master_link_down_time; \/* Slave replication link down time. *\/$/;"	m	struct:sentinelRedisInstance	file:
master_repl_offset	src/server.h	/^    long long master_repl_offset;   \/* My current replication offset *\/$/;"	m	struct:redisServer
master_replid	src/server.h	/^    char master_replid[CONFIG_RUN_ID_SIZE+1];  \/* Master PSYNC runid. *\/$/;"	m	struct:redisServer
masterauth	src/server.h	/^    sds masterauth;                 \/* AUTH with this password with master *\/$/;"	m	struct:redisServer
masterdownerr	src/server.h	/^    *masterdownerr, *roslaveerr, *execaborterr, *noautherr, *noreplicaserr,$/;"	m	struct:sharedObjectsStruct
masterhost	src/redismodule.h	/^    char *masterhost;       \/* master instance hostname for NOW_REPLICA *\/$/;"	m	struct:RedisModuleReplicationInfo
masterhost	src/server.h	/^    char *masterhost;               \/* Hostname of master *\/$/;"	m	struct:redisServer
masterport	src/redismodule.h	/^    int masterport;         \/* master instance port for NOW_REPLICA *\/$/;"	m	struct:RedisModuleReplicationInfo
masterport	src/server.h	/^    int masterport;                 \/* Port of master *\/$/;"	m	struct:redisServer
masters	src/sentinel.c	/^    dict *masters;      \/* Dictionary of master sentinelRedisInstances.$/;"	m	struct:sentinelState	file:
masteruser	src/server.h	/^    char *masteruser;               \/* AUTH with this user and masterauth with master *\/$/;"	m	struct:redisServer
match	deps/lua/src/lstrlib.c	/^static const char *match (MatchState *ms, const char *s, const char *p) {$/;"	f	file:
match	src/adlist.h	/^    int (*match)(void *ptr, void *key);$/;"	m	struct:list
match_capture	deps/lua/src/lstrlib.c	/^static const char *match_capture (MatchState *ms, const char *s, int l) {$/;"	f	file:
match_class	deps/lua/src/lstrlib.c	/^static int match_class (int c, int cl) {$/;"	f	file:
matchbalance	deps/lua/src/lstrlib.c	/^static const char *matchbalance (MatchState *ms, const char *s,$/;"	f	file:
matchbracketclass	deps/lua/src/lstrlib.c	/^static int matchbracketclass (int c, const char *p, const char *ec) {$/;"	f	file:
math_abs	deps/lua/src/lmathlib.c	/^static int math_abs (lua_State *L) {$/;"	f	file:
math_acos	deps/lua/src/lmathlib.c	/^static int math_acos (lua_State *L) {$/;"	f	file:
math_asin	deps/lua/src/lmathlib.c	/^static int math_asin (lua_State *L) {$/;"	f	file:
math_atan	deps/lua/src/lmathlib.c	/^static int math_atan (lua_State *L) {$/;"	f	file:
math_atan2	deps/lua/src/lmathlib.c	/^static int math_atan2 (lua_State *L) {$/;"	f	file:
math_ceil	deps/lua/src/lmathlib.c	/^static int math_ceil (lua_State *L) {$/;"	f	file:
math_cos	deps/lua/src/lmathlib.c	/^static int math_cos (lua_State *L) {$/;"	f	file:
math_cosh	deps/lua/src/lmathlib.c	/^static int math_cosh (lua_State *L) {$/;"	f	file:
math_deg	deps/lua/src/lmathlib.c	/^static int math_deg (lua_State *L) {$/;"	f	file:
math_exp	deps/lua/src/lmathlib.c	/^static int math_exp (lua_State *L) {$/;"	f	file:
math_floor	deps/lua/src/lmathlib.c	/^static int math_floor (lua_State *L) {$/;"	f	file:
math_fmod	deps/lua/src/lmathlib.c	/^static int math_fmod (lua_State *L) {$/;"	f	file:
math_frexp	deps/lua/src/lmathlib.c	/^static int math_frexp (lua_State *L) {$/;"	f	file:
math_ldexp	deps/lua/src/lmathlib.c	/^static int math_ldexp (lua_State *L) {$/;"	f	file:
math_log	deps/lua/src/lmathlib.c	/^static int math_log (lua_State *L) {$/;"	f	file:
math_log10	deps/lua/src/lmathlib.c	/^static int math_log10 (lua_State *L) {$/;"	f	file:
math_max	deps/lua/src/lmathlib.c	/^static int math_max (lua_State *L) {$/;"	f	file:
math_min	deps/lua/src/lmathlib.c	/^static int math_min (lua_State *L) {$/;"	f	file:
math_modf	deps/lua/src/lmathlib.c	/^static int math_modf (lua_State *L) {$/;"	f	file:
math_pow	deps/lua/src/lmathlib.c	/^static int math_pow (lua_State *L) {$/;"	f	file:
math_rad	deps/lua/src/lmathlib.c	/^static int math_rad (lua_State *L) {$/;"	f	file:
math_random	deps/lua/src/lmathlib.c	/^static int math_random (lua_State *L) {$/;"	f	file:
math_randomseed	deps/lua/src/lmathlib.c	/^static int math_randomseed (lua_State *L) {$/;"	f	file:
math_sin	deps/lua/src/lmathlib.c	/^static int math_sin (lua_State *L) {$/;"	f	file:
math_sinh	deps/lua/src/lmathlib.c	/^static int math_sinh (lua_State *L) {$/;"	f	file:
math_sqrt	deps/lua/src/lmathlib.c	/^static int math_sqrt (lua_State *L) {$/;"	f	file:
math_tan	deps/lua/src/lmathlib.c	/^static int math_tan (lua_State *L) {$/;"	f	file:
math_tanh	deps/lua/src/lmathlib.c	/^static int math_tanh (lua_State *L) {$/;"	f	file:
mathlib	deps/lua/src/lmathlib.c	/^static const luaL_Reg mathlib[] = {$/;"	v	file:
max	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	unsigned	max;$/;"	m	struct:__anon154
max	src/geohash.h	/^    double max;$/;"	m	struct:__anon48
max	src/latency.h	/^    uint32_t max;           \/* Max of current samples. *\/$/;"	m	struct:latencyStats
max	src/latency.h	/^    uint32_t max; \/* Max latency observed for this event. *\/$/;"	m	struct:latencyTimeSeries
max	src/redis-cli.c	/^    long long max;   \/* Max latency to fit into this interval (usec). *\/$/;"	m	struct:distsamples	file:
max	src/server.h	/^    double min, max;$/;"	m	struct:__anon27
max	src/server.h	/^    sds min, max;     \/* May be set to shared.(minstring|maxstring) *\/$/;"	m	struct:__anon28
max	src/sparkline.h	/^    double min, max;$/;"	m	struct:sequence
max_background_threads	deps/jemalloc/src/background_thread.c	/^size_t max_background_threads;$/;"	v
max_background_threads_ctl	deps/jemalloc/src/ctl.c	/^max_background_threads_ctl(tsd_t *tsd, const size_t *mib, size_t miblen,$/;"	f	file:
max_expand	deps/lua/src/lstrlib.c	/^static const char *max_expand (MatchState *ms, const char *s,$/;"	f	file:
max_n_thds	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^	uint32_t		max_n_thds;$/;"	m	struct:__anon146
max_processing_chunk	src/rio.h	/^    size_t max_processing_chunk;$/;"	m	struct:_rio
max_size_in_use	deps/jemalloc/src/zone.c	/^	size_t max_size_in_use;$/;"	m	struct:malloc_statistics_t	file:
max_value	deps/hdr_histogram/hdr_histogram.h	/^    int64_t max_value;$/;"	m	struct:hdr_histogram
max_wait_time	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^	nstime_t		max_wait_time;$/;"	m	struct:__anon146
maxbuf	deps/hiredis/read.h	/^    size_t maxbuf; \/* Max length of unused buffer *\/$/;"	m	struct:redisReader
maxclients	src/server.h	/^    unsigned int maxclients;            \/* Max number of simultaneous clients *\/$/;"	m	struct:redisServer
maxelements	deps/hiredis/read.h	/^    long long maxelements; \/* Max multi-bulk elements *\/$/;"	m	struct:redisReader
maxex	src/server.h	/^    int minex, maxex; \/* are min or max exclusive? *\/$/;"	m	struct:__anon27
maxex	src/server.h	/^    int minex, maxex; \/* are min or max exclusive? *\/$/;"	m	struct:__anon28
maxfd	src/ae.h	/^    int maxfd;   \/* highest file descriptor currently registered *\/$/;"	m	struct:aeEventLoop
maxidletime	src/server.h	/^    int maxidletime;                \/* Client timeout in seconds *\/$/;"	m	struct:redisServer
maxitems	src/rax.h	/^    size_t items, maxitems; \/* Number of items contained and total space. *\/$/;"	m	struct:raxStack
maxlen	src/scripting.c	/^    size_t maxlen;  \/* Max var dump \/ reply length. *\/$/;"	m	struct:ldbState	file:
maxlen	src/t_stream.c	/^    long long maxlen; \/* After trimming, leave stream at this length . *\/$/;"	m	struct:__anon11	file:
maxlen_hint_sent	src/scripting.c	/^    int maxlen_hint_sent; \/* Did we already hint about "set maxlen"? *\/$/;"	m	struct:ldbState	file:
maxmemory	src/server.h	/^    unsigned long long maxmemory;   \/* Max number of memory bytes to use *\/$/;"	m	struct:redisServer
maxmemory_eviction_tenacity	src/server.h	/^    int maxmemory_eviction_tenacity;\/* Aggressiveness of eviction processing *\/$/;"	m	struct:redisServer
maxmemory_policy	src/server.h	/^    int maxmemory_policy;           \/* Policy for key eviction *\/$/;"	m	struct:redisServer
maxmemory_policy_enum	src/config.c	/^configEnum maxmemory_policy_enum[] = {$/;"	v
maxmemory_samples	src/server.h	/^    int maxmemory_samples;          \/* Precision of random sampling *\/$/;"	m	struct:redisServer
maxn	deps/lua/src/ltablib.c	/^static int maxn (lua_State *L) {$/;"	f	file:
maxrows	deps/linenoise/linenoise.c	/^    size_t maxrows;     \/* Maximum num of rows used so far (multiline mode) *\/$/;"	m	struct:linenoiseState	file:
maxstacksize	deps/lua/src/lobject.h	/^  lu_byte maxstacksize;$/;"	m	struct:Proto
maxstep	tests/modules/defragtest.c	/^    int maxstep;$/;"	m	struct:FragObject	file:
maxstring	src/server.h	/^    sds minstring, maxstring;$/;"	m	struct:sharedObjectsStruct
may_overflow	deps/jemalloc/src/jemalloc.c	/^	bool may_overflow;$/;"	m	struct:static_opts_s	file:
maybeCheckWant	deps/hiredis/ssl.c	/^static int maybeCheckWant(redisSSL *rssl, int rv) {$/;"	f	file:
mb_delim	src/redis-cli.c	/^    sds mb_delim;$/;"	m	struct:config	file:
mbulkhdr	src/server.h	/^    *mbulkhdr[OBJ_SHARED_BULKHDR_LEN], \/* "*<value>\\r\\n" *\/$/;"	m	struct:sharedObjectsStruct
mdouleClusterNodeInfo	src/module.c	/^} mdouleClusterNodeInfo;$/;"	t	typeref:struct:moduleClusterNodeInfo	file:
med3	src/pqsort.c	/^med3(char *a, char *b, char *c,$/;"	f	file:
median_equivalent_value	deps/hdr_histogram/hdr_histogram.h	/^    int64_t median_equivalent_value;$/;"	m	struct:hdr_iter
mem_usage	src/redismodule.h	/^    RedisModuleTypeMemUsageFunc mem_usage;$/;"	m	struct:RedisModuleTypeMethods
mem_usage	src/server.h	/^    moduleTypeMemUsageFunc mem_usage;$/;"	m	struct:RedisModuleType
memalign	deps/jemalloc/src/zone.c	/^	void *(*memalign)(struct _malloc_zone_t *, size_t, size_t);$/;"	m	struct:_malloc_zone_t	file:
member	src/geo.h	/^    char *member;$/;"	m	struct:geoPoint
membersOfAllNeighbors	src/geo.c	/^int membersOfAllNeighbors(robj *zobj, GeoHashRadius n, GeoShape *shape, geoArray *ga, unsigned long limit) {$/;"	f
membersOfGeoHashBox	src/geo.c	/^int membersOfGeoHashBox(robj *zobj, GeoHashBits hash, geoArray *ga, GeoShape *shape, unsigned long limit) {$/;"	f
memcheck_enabled	src/server.h	/^    int memcheck_enabled;           \/* Enable memory check on crash. *\/$/;"	m	struct:redisServer
memkeys	src/redis-cli.c	/^    int memkeys;$/;"	m	struct:config	file:
memkeys_samples	src/redis-cli.c	/^    unsigned memkeys_samples;$/;"	m	struct:config	file:
memmapchars	src/util.c	/^char *memmapchars(char *s, size_t len, const char *from, const char *to, size_t setlen) {$/;"	f
memory	src/module.c	/^    char memory[];$/;"	m	struct:RedisModulePoolAllocBlock	file:
memoryCommand	src/object.c	/^void memoryCommand(client *c) {$/;"	f
memoryGetKeys	src/db.c	/^int memoryGetKeys(struct redisCommand *cmd, robj **argv, int argc, getKeysResult *result) {$/;"	f
memory_reader_t	deps/jemalloc/src/zone.c	/^typedef kern_return_t memory_reader_t(task_t, vm_address_t, vm_size_t, void **);$/;"	t	file:
mempbrk	src/util.c	/^const char *mempbrk(const char *s, size_t len, const char *chars, size_t charslen) {$/;"	f
memrev16	src/endianconv.c	/^void memrev16(void *p) {$/;"	f
memrev16ifbe	src/endianconv.h	49;"	d
memrev16ifbe	src/endianconv.h	56;"	d
memrev32	src/endianconv.c	/^void memrev32(void *p) {$/;"	f
memrev32ifbe	src/endianconv.h	50;"	d
memrev32ifbe	src/endianconv.h	57;"	d
memrev64	src/endianconv.c	/^void memrev64(void *p) {$/;"	f
memrev64ifbe	src/endianconv.h	51;"	d
memrev64ifbe	src/endianconv.h	58;"	d
memrevifle	deps/lua/src/lua_cmsgpack.c	/^void memrevifle(void *ptr, size_t len) {$/;"	f
memtest	src/memtest.c	/^void memtest(size_t megabytes, int passes) {$/;"	f
memtest_addressing	src/memtest.c	/^int memtest_addressing(unsigned long *l, size_t bytes, int interactive) {$/;"	f
memtest_alloc_and_test	src/memtest.c	/^void memtest_alloc_and_test(size_t megabytes, int passes) {$/;"	f
memtest_compare	src/memtest.c	/^int memtest_compare(unsigned long *l, size_t bytes, int interactive) {$/;"	f
memtest_compare_times	src/memtest.c	/^int memtest_compare_times(unsigned long *m, size_t bytes, int pass, int times,$/;"	f
memtest_fill_random	src/memtest.c	/^void memtest_fill_random(unsigned long *l, size_t bytes, int interactive) {$/;"	f
memtest_fill_value	src/memtest.c	/^void memtest_fill_value(unsigned long *l, size_t bytes, unsigned long v1,$/;"	f
memtest_preserving_test	src/memtest.c	/^int memtest_preserving_test(unsigned long *m, size_t bytes, int passes) {$/;"	f
memtest_progress_end	src/memtest.c	/^void memtest_progress_end(void) {$/;"	f
memtest_progress_start	src/memtest.c	/^void memtest_progress_start(char *title, int pass) {$/;"	f
memtest_progress_step	src/memtest.c	/^void memtest_progress_step(size_t curr, size_t size, char c) {$/;"	f
memtest_test	src/memtest.c	/^int memtest_test(unsigned long *m, size_t bytes, int passes, int interactive) {$/;"	f
memtest_test_linux_anonymous_maps	src/debug.c	/^int memtest_test_linux_anonymous_maps(void) {$/;"	f
memtoll	src/util.c	/^long long memtoll(const char *p, int *err) {$/;"	f
merge	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^	extent_merge_t		*merge;$/;"	m	struct:extent_hooks_s
merge_group	exp/merge.py	/^merge_group=[]$/;"	v
message_len	src/cluster.h	/^    uint32_t message_len;$/;"	m	struct:__anon33
messagebulk	src/server.h	/^    *busykeyerr, *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,$/;"	m	struct:sharedObjectsStruct
metadata	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	size_t metadata;$/;"	m	struct:ctl_stats_s
metadata_thp	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	atomic_zu_t		metadata_thp;$/;"	m	struct:arena_stats_s
metadata_thp	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	size_t metadata_thp;$/;"	m	struct:ctl_stats_s
metadata_thp_always	deps/jemalloc/include/jemalloc/internal/base_types.h	/^	metadata_thp_always     = 2,$/;"	e	enum:__anon153
metadata_thp_auto	deps/jemalloc/include/jemalloc/internal/base_types.h	/^	metadata_thp_auto       = 1,$/;"	e	enum:__anon153
metadata_thp_disabled	deps/jemalloc/include/jemalloc/internal/base_types.h	/^	metadata_thp_disabled   = 0,$/;"	e	enum:__anon153
metadata_thp_enabled	deps/jemalloc/include/jemalloc/internal/base_inlines.h	/^metadata_thp_enabled(void) {$/;"	f
metadata_thp_madvise	deps/jemalloc/src/base.c	/^metadata_thp_madvise(void) {$/;"	f	file:
metadata_thp_mode_limit	deps/jemalloc/include/jemalloc/internal/base_types.h	/^	metadata_thp_mode_limit = 3$/;"	e	enum:__anon153
metadata_thp_mode_names	deps/jemalloc/src/base.c	/^const char *metadata_thp_mode_names[] = {$/;"	v
metadata_thp_mode_t	deps/jemalloc/include/jemalloc/internal/base_types.h	/^} metadata_thp_mode_t;$/;"	t	typeref:enum:__anon153
metatable	deps/lua/src/lobject.h	/^    struct Table *metatable;$/;"	m	struct:Udata::__anon108	typeref:struct:Udata::__anon108::Table
metatable	deps/lua/src/lobject.h	/^  struct Table *metatable;$/;"	m	struct:Table	typeref:struct:Table::Table
mf_can_start	src/cluster.h	/^    int mf_can_start;           \/* If non-zero signal that the manual failover$/;"	m	struct:clusterState
mf_end	src/cluster.h	/^    mstime_t mf_end;            \/* Manual failover time limit (ms unixtime).$/;"	m	struct:clusterState
mf_master_offset	src/cluster.h	/^    long long mf_master_offset; \/* Master offset the slave needs to start MF$/;"	m	struct:clusterState
mf_slave	src/cluster.h	/^    clusterNode *mf_slave;      \/* Slave performing the manual failover. *\/$/;"	m	struct:clusterState
mflags	src/cluster.h	/^    unsigned char mflags[3]; \/* Message flags: CLUSTERMSG_FLAG[012]_... *\/$/;"	m	struct:__anon43
mgetCommand	src/t_string.c	/^void mgetCommand(client *c) {$/;"	f
microseconds	src/server.h	/^    long long microseconds, calls, rejected_calls, failed_calls;$/;"	m	struct:redisCommand
mid_quote	deps/jemalloc/test/unit/emitter.c	/^	bool mid_quote;$/;"	m	struct:buf_descriptor_s	file:
migrateCacheDictType	src/server.c	/^dictType migrateCacheDictType = {$/;"	v
migrateCachedSocket	src/cluster.c	/^typedef struct migrateCachedSocket {$/;"	s	file:
migrateCachedSocket	src/cluster.c	/^} migrateCachedSocket;$/;"	t	typeref:struct:migrateCachedSocket	file:
migrateCloseSocket	src/cluster.c	/^void migrateCloseSocket(robj *host, robj *port) {$/;"	f
migrateCloseTimedoutSockets	src/cluster.c	/^void migrateCloseTimedoutSockets(void) {$/;"	f
migrateCommand	src/cluster.c	/^void migrateCommand(client *c) {$/;"	f
migrateGetKeys	src/db.c	/^int migrateGetKeys(struct redisCommand *cmd, robj **argv, int argc, getKeysResult *result) {$/;"	f
migrateGetSocket	src/cluster.c	/^migrateCachedSocket* migrateGetSocket(client *c, robj *host, robj *port, long timeout) {$/;"	f
migrate_cached_sockets	src/server.h	/^    dict *migrate_cached_sockets;\/* MIGRATE cached sockets *\/$/;"	m	struct:redisServer
migrating	src/redis-benchmark.c	/^    sds *migrating; \/* An array of sds where even strings are slots and odd$/;"	m	struct:clusterNode	file:
migrating	src/redis-cli.c	/^    sds *migrating; \/* An array of sds where even strings are slots and odd$/;"	m	struct:clusterManagerNode	file:
migrating_count	src/redis-benchmark.c	/^    int migrating_count; \/* Length of the migrating array (migrating slots*2) *\/$/;"	m	struct:clusterNode	file:
migrating_count	src/redis-cli.c	/^    int migrating_count; \/* Length of the migrating array (migrating slots*2) *\/$/;"	m	struct:clusterManagerNode	file:
migrating_slots_to	src/cluster.h	/^    clusterNode *migrating_slots_to[CLUSTER_SLOTS];$/;"	m	struct:clusterState
min	src/geohash.h	/^    double min;$/;"	m	struct:__anon48
min	src/latency.h	/^    uint32_t min;           \/* Min of current samples. *\/$/;"	m	struct:latencyStats
min	src/pqsort.c	49;"	d	file:
min	src/server.h	/^    double min, max;$/;"	m	struct:__anon27
min	src/server.h	/^    sds min, max;     \/* May be set to shared.(minstring|maxstring) *\/$/;"	m	struct:__anon28
min	src/sparkline.h	/^    double min, max;$/;"	m	struct:sequence
min_alignment	deps/jemalloc/src/jemalloc.c	/^	size_t min_alignment;$/;"	m	struct:static_opts_s	file:
min_expand	deps/lua/src/lstrlib.c	/^static const char *min_expand (MatchState *ms, const char *s,$/;"	f	file:
min_value	deps/hdr_histogram/hdr_histogram.h	/^    int64_t min_value;$/;"	m	struct:hdr_histogram
minex	src/server.h	/^    int minex, maxex; \/* are min or max exclusive? *\/$/;"	m	struct:__anon27
minex	src/server.h	/^    int minex, maxex; \/* are min or max exclusive? *\/$/;"	m	struct:__anon28
minid	src/t_stream.c	/^    streamID minid; \/* Trim by ID (No stream entries with ID < 'minid' will remain) *\/$/;"	m	struct:__anon11	file:
minstring	src/server.h	/^    sds minstring, maxstring;$/;"	m	struct:sharedObjectsStruct
minutes_diff	utils/lru/lfu-simulation.c	/^uint16_t minutes_diff(uint16_t now, uint16_t prev) {$/;"	f
mixDigest	src/debug.c	/^void mixDigest(unsigned char *digest, void *ptr, size_t len) {$/;"	f
mixStringObjectDigest	src/debug.c	/^void mixStringObjectDigest(unsigned char *digest, robj *o) {$/;"	f
mkfuncname	deps/lua/src/loadlib.c	/^static const char *mkfuncname (lua_State *L, const char *modname) {$/;"	f	file:
mlmode	deps/linenoise/linenoise.c	/^static int mlmode = 0;  \/* Multi line mode. Default is single line. *\/$/;"	v	file:
mm_recursion	deps/jemalloc/test/include/test/SFMT-sse2.h	/^JEMALLOC_ALWAYS_INLINE __m128i mm_recursion(__m128i *a, __m128i *b,$/;"	f
mmap_flags	deps/jemalloc/src/pages.c	/^static int	mmap_flags;$/;"	v	file:
modal_json	deps/jemalloc/test/unit/emitter.c	/^const char *modal_json =$/;"	v
modal_table	deps/jemalloc/test/unit/emitter.c	/^const char *modal_table =$/;"	v
mode	src/module.c	/^    int mode;       \/* Opening mode. *\/$/;"	m	struct:RedisModuleKey	file:
modinit	deps/lua/src/loadlib.c	/^static void modinit (lua_State *L, const char *modname) {$/;"	f	file:
module	src/cluster.h	/^    } module;$/;"	m	union:clusterMsgData	typeref:struct:clusterMsgData::__anon41
module	src/module.c	/^    RedisModule *module;                \/* Module reference. *\/$/;"	m	struct:RedisModuleTimer	file:
module	src/module.c	/^    RedisModule *module;    \/* Module blocking the client. *\/$/;"	m	struct:RedisModuleBlockedClient	file:
module	src/module.c	/^    RedisModule *module;$/;"	m	struct:RedisModuleCommandFilter	file:
module	src/module.c	/^    RedisModule *module;$/;"	m	struct:RedisModuleEventListener	file:
module	src/module.c	/^    RedisModule *module;$/;"	m	struct:RedisModuleKeyspaceSubscriber	file:
module	src/module.c	/^    RedisModule *module;$/;"	m	struct:RedisModuleSharedAPI	file:
module	src/module.c	/^    struct RedisModule *module;     \/* Module reference. *\/$/;"	m	struct:RedisModuleCtx	typeref:struct:RedisModuleCtx::RedisModule	file:
module	src/module.c	/^    struct RedisModule *module;$/;"	m	struct:RedisModuleCommandProxy	typeref:struct:RedisModuleCommandProxy::RedisModule	file:
module	src/module.c	/^    struct RedisModule *module;$/;"	m	struct:RedisModuleInfoCtx	typeref:struct:RedisModuleInfoCtx::RedisModule	file:
module	src/module.c	/^    struct RedisModule *module;$/;"	m	struct:moduleClusterReceiver	typeref:struct:moduleClusterReceiver::RedisModule	file:
module	src/server.h	/^    struct RedisModule *module;$/;"	m	struct:RedisModuleType	typeref:struct:RedisModuleType::RedisModule
moduleAPIDictType	src/module.c	/^dictType moduleAPIDictType = {$/;"	v
moduleAcquireGIL	src/module.c	/^void moduleAcquireGIL(void) {$/;"	f
moduleAllDatatypesHandleErrors	src/module.c	/^int moduleAllDatatypesHandleErrors() {$/;"	f
moduleAssertUnsharedString	src/module.c	/^RedisModuleString *moduleAssertUnsharedString(RedisModuleString *str) {$/;"	f
moduleBlockClient	src/module.c	/^RedisModuleBlockedClient *moduleBlockClient(RedisModuleCtx *ctx, RedisModuleCmdFunc reply_callback, RedisModuleCmdFunc timeout_callback, void (*free_privdata)(RedisModuleCtx*,void*), long long timeout_ms, RedisModuleString **keys, int numkeys, void *privdata) {$/;"	f
moduleBlockedClientPipeReadable	src/module.c	/^void moduleBlockedClientPipeReadable(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
moduleBlockedClientTimedOut	src/module.c	/^void moduleBlockedClientTimedOut(client *c) {$/;"	f
moduleCallClusterReceivers	src/module.c	/^void moduleCallClusterReceivers(const char *sender_id, uint64_t module_id, uint8_t type, const unsigned char *payload, uint32_t len) {$/;"	f
moduleCallCommandFilters	src/module.c	/^void moduleCallCommandFilters(client *c) {$/;"	f
moduleChangeCallback	tests/modules/hooks.c	/^void moduleChangeCallback(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)$/;"	f
moduleClientIsBlockedOnKeys	src/module.c	/^int moduleClientIsBlockedOnKeys(client *c) {$/;"	f
moduleCloseKey	src/module.c	/^static void moduleCloseKey(RedisModuleKey *key) {$/;"	f	file:
moduleClusterNodeInfo	src/module.c	/^typedef struct moduleClusterNodeInfo {$/;"	s	file:
moduleClusterReceiver	src/module.c	/^typedef struct moduleClusterReceiver {$/;"	s	file:
moduleClusterReceiver	src/module.c	/^} moduleClusterReceiver;$/;"	t	typeref:struct:moduleClusterReceiver	file:
moduleCommand	src/module.c	/^void moduleCommand(client *c) {$/;"	f
moduleCommandFilters	src/module.c	/^static list *moduleCommandFilters;$/;"	v	file:
moduleCount	src/module.c	/^size_t moduleCount(void) {$/;"	f
moduleCreateArgvFromUserFormat	src/module.c	/^robj **moduleCreateArgvFromUserFormat(const char *cmdname, const char *fmt, int *argcp, int *flags, va_list ap) {$/;"	f
moduleCreateCallReplyFromProto	src/module.c	/^RedisModuleCallReply *moduleCreateCallReplyFromProto(RedisModuleCtx *ctx, sds proto) {$/;"	f
moduleCreateEmptyKey	src/module.c	/^int moduleCreateEmptyKey(RedisModuleKey *key, int type) {$/;"	f
moduleDefragGlobals	src/module.c	/^long moduleDefragGlobals(void) {$/;"	f
moduleDefragValue	src/module.c	/^int moduleDefragValue(robj *key, robj *value, long *defragged) {$/;"	f
moduleDelKeyIfEmpty	src/module.c	/^int moduleDelKeyIfEmpty(RedisModuleKey *key) {$/;"	f
moduleFireServerEvent	src/module.c	/^void moduleFireServerEvent(uint64_t eid, int subid, void *data) {$/;"	f
moduleForkInfo	src/module.c	/^} moduleForkInfo = {0};$/;"	v	typeref:struct:RedisModuleForkInfo	file:
moduleFreeAuthenticatedClients	src/module.c	/^static void moduleFreeAuthenticatedClients(RedisModule *module) {$/;"	f	file:
moduleFreeCallReplyRec	src/module.c	/^void moduleFreeCallReplyRec(RedisModuleCallReply *reply, int freenested){$/;"	f
moduleFreeContext	src/module.c	/^void moduleFreeContext(RedisModuleCtx *ctx) {$/;"	f
moduleFreeContextReusedClient	src/module.c	/^static client *moduleFreeContextReusedClient;$/;"	v	file:
moduleFreeModuleStructure	src/module.c	/^void moduleFreeModuleStructure(struct RedisModule *module) {$/;"	f
moduleGIL	src/module.c	/^static pthread_mutex_t moduleGIL = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
moduleGetCommandKeysViaAPI	src/module.c	/^int moduleGetCommandKeysViaAPI(struct redisCommand *cmd, robj **argv, int argc, getKeysResult *result) {$/;"	f
moduleGetReplyClient	src/module.c	/^client *moduleGetReplyClient(RedisModuleCtx *ctx) {$/;"	f
moduleHandleBlockedClients	src/module.c	/^void moduleHandleBlockedClients(void) {$/;"	f
moduleHandlePropagationAfterCommandCallback	src/module.c	/^void moduleHandlePropagationAfterCommandCallback(RedisModuleCtx *ctx) {$/;"	f
moduleInitDigestContext	src/server.h	657;"	d
moduleInitIOContext	src/server.h	636;"	d
moduleInitKey	src/module.c	/^static void moduleInitKey(RedisModuleKey *kp, RedisModuleCtx *ctx, robj *keyname, robj *value, int mode){$/;"	f	file:
moduleInitKeyTypeSpecific	src/module.c	/^static void moduleInitKeyTypeSpecific(RedisModuleKey *key) {$/;"	f	file:
moduleInitModulesSystem	src/module.c	/^void moduleInitModulesSystem(void) {$/;"	f
moduleInitModulesSystemLast	src/module.c	/^void moduleInitModulesSystemLast(void) {$/;"	f
moduleKeyspaceSubscribers	src/module.c	/^static list *moduleKeyspaceSubscribers;$/;"	v	file:
moduleLateDefrag	src/module.c	/^int moduleLateDefrag(robj *key, robj *value, unsigned long *cursor, long long endtime, long long *defragged) {$/;"	f
moduleLoad	src/module.c	/^int moduleLoad(const char *path, void **module_argv, int module_argc) {$/;"	f
moduleLoadFromQueue	src/module.c	/^void moduleLoadFromQueue(void) {$/;"	f
moduleLoadQueueEntry	src/server.h	/^struct moduleLoadQueueEntry {$/;"	s
moduleLoadString	src/module.c	/^void *moduleLoadString(RedisModuleIO *io, int plain, size_t *lenptr) {$/;"	f
moduleLogRaw	src/module.c	/^void moduleLogRaw(RedisModule *module, const char *levelstr, const char *fmt, va_list ap) {$/;"	f
moduleNotifyKeyUnlink	src/module.c	/^void moduleNotifyKeyUnlink(robj *key, robj *val) {$/;"	f
moduleNotifyKeyspaceEvent	src/module.c	/^void moduleNotifyKeyspaceEvent(int type, const char *event, robj *key, int dbid) {$/;"	f
moduleNotifyUserChanged	src/module.c	/^void moduleNotifyUserChanged(client *c) {$/;"	f
moduleParseCallReply	src/module.c	/^void moduleParseCallReply(RedisModuleCallReply *reply) {$/;"	f
moduleParseCallReply_Array	src/module.c	/^void moduleParseCallReply_Array(RedisModuleCallReply *reply) {$/;"	f
moduleParseCallReply_BulkString	src/module.c	/^void moduleParseCallReply_BulkString(RedisModuleCallReply *reply) {$/;"	f
moduleParseCallReply_Int	src/module.c	/^void moduleParseCallReply_Int(RedisModuleCallReply *reply) {$/;"	f
moduleParseCallReply_SimpleString	src/module.c	/^void moduleParseCallReply_SimpleString(RedisModuleCallReply *reply) {$/;"	f
modulePopulateClientInfoStructure	src/module.c	/^int modulePopulateClientInfoStructure(void *ci, client *client, int structver) {$/;"	f
modulePopulateReplicationInfoStructure	src/module.c	/^int modulePopulateReplicationInfoStructure(void *ri, int structver) {$/;"	f
moduleRDBLoadError	src/module.c	/^void moduleRDBLoadError(RedisModuleIO *io) {$/;"	f
moduleRegisterApi	src/module.c	/^int moduleRegisterApi(const char *funcname, void *funcptr) {$/;"	f
moduleRegisterCoreAPI	src/module.c	/^void moduleRegisterCoreAPI(void) {$/;"	f
moduleReleaseGIL	src/module.c	/^void moduleReleaseGIL(void) {$/;"	f
moduleReplicateMultiIfNeeded	src/module.c	/^void moduleReplicateMultiIfNeeded(RedisModuleCtx *ctx) {$/;"	f
moduleScanCallback	src/module.c	/^static void moduleScanCallback(void *privdata, const dictEntry *de) {$/;"	f	file:
moduleScanKeyCallback	src/module.c	/^static void moduleScanKeyCallback(void *privdata, const dictEntry *de) {$/;"	f	file:
moduleTimerHandler	src/module.c	/^int moduleTimerHandler(struct aeEventLoop *eventLoop, long long id, void *clientData) {$/;"	f
moduleTryAcquireGIL	src/module.c	/^int moduleTryAcquireGIL(void) {$/;"	f
moduleTryServeClientBlockedOnKey	src/module.c	/^int moduleTryServeClientBlockedOnKey(client *c, robj *key) {$/;"	f
moduleType	src/server.h	/^} moduleType;$/;"	t	typeref:struct:RedisModuleType
moduleTypeAuxLoadFunc	src/server.h	/^typedef int (*moduleTypeAuxLoadFunc)(struct RedisModuleIO *rdb, int encver, int when);$/;"	t
moduleTypeAuxSaveFunc	src/server.h	/^typedef void (*moduleTypeAuxSaveFunc)(struct RedisModuleIO *rdb, int when);$/;"	t
moduleTypeCopyFunc	src/server.h	/^typedef void *(*moduleTypeCopyFunc)(struct redisObject *fromkey, struct redisObject *tokey, const void *value);$/;"	t
moduleTypeDefragFunc	src/server.h	/^typedef int (*moduleTypeDefragFunc)(struct RedisModuleDefragCtx *ctx, struct redisObject *key, void **value);$/;"	t
moduleTypeDigestFunc	src/server.h	/^typedef void (*moduleTypeDigestFunc)(struct RedisModuleDigest *digest, void *value);$/;"	t
moduleTypeDupOrReply	src/module.c	/^robj *moduleTypeDupOrReply(client *c, robj *fromkey, robj *tokey, robj *value) {$/;"	f
moduleTypeEncodeId	src/module.c	/^uint64_t moduleTypeEncodeId(const char *name, int encver) {$/;"	f
moduleTypeFreeEffortFunc	src/server.h	/^typedef size_t (*moduleTypeFreeEffortFunc)(struct redisObject *key, const void *value);$/;"	t
moduleTypeFreeFunc	src/server.h	/^typedef void (*moduleTypeFreeFunc)(void *value);$/;"	t
moduleTypeLoadFunc	src/server.h	/^typedef void *(*moduleTypeLoadFunc)(struct RedisModuleIO *io, int encver);$/;"	t
moduleTypeLookupModuleByID	src/module.c	/^moduleType *moduleTypeLookupModuleByID(uint64_t id) {$/;"	f
moduleTypeLookupModuleByName	src/module.c	/^moduleType *moduleTypeLookupModuleByName(const char *name) {$/;"	f
moduleTypeMemUsageFunc	src/server.h	/^typedef size_t (*moduleTypeMemUsageFunc)(const void *value);$/;"	t
moduleTypeModuleName	src/module.c	/^const char *moduleTypeModuleName(moduleType *mt) {$/;"	f
moduleTypeNameByID	src/module.c	/^void moduleTypeNameByID(char *name, uint64_t moduleid) {$/;"	f
moduleTypeRewriteFunc	src/server.h	/^typedef void (*moduleTypeRewriteFunc)(struct RedisModuleIO *io, struct redisObject *key, void *value);$/;"	t
moduleTypeSaveFunc	src/server.h	/^typedef void (*moduleTypeSaveFunc)(struct RedisModuleIO *io, void *value);$/;"	t
moduleTypeUnlinkFunc	src/server.h	/^typedef void (*moduleTypeUnlinkFunc)(struct redisObject *key, void *value);$/;"	t
moduleUnblockClient	src/module.c	/^void moduleUnblockClient(client *c) {$/;"	f
moduleUnblockClientByHandle	src/module.c	/^int moduleUnblockClientByHandle(RedisModuleBlockedClient *bc, void *privdata) {$/;"	f
moduleUnblockedClients	src/module.c	/^static list *moduleUnblockedClients;$/;"	v	file:
moduleUnblockedClientsMutex	src/module.c	/^static pthread_mutex_t moduleUnblockedClientsMutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
moduleUnload	src/module.c	/^int moduleUnload(sds name) {$/;"	f
moduleUnregisterCommands	src/module.c	/^void moduleUnregisterCommands(struct RedisModule *module) {$/;"	f
moduleUnregisterFilters	src/module.c	/^int moduleUnregisterFilters(RedisModule *module) {$/;"	f
moduleUnregisterSharedAPI	src/module.c	/^int moduleUnregisterSharedAPI(RedisModule *module) {$/;"	f
moduleUnregisterUsedAPI	src/module.c	/^int moduleUnregisterUsedAPI(RedisModule *module) {$/;"	f
moduleUnsubscribeAllServerEvents	src/module.c	/^void moduleUnsubscribeAllServerEvents(RedisModule *module) {$/;"	f
moduleUnsubscribeNotifications	src/module.c	/^void moduleUnsubscribeNotifications(RedisModule *module) {$/;"	f
moduleValue	src/server.h	/^typedef struct moduleValue {$/;"	s
moduleValue	src/server.h	/^} moduleValue;$/;"	t	typeref:struct:moduleValue
moduleZsetAddFlagsFromCoreFlags	src/module.c	/^int moduleZsetAddFlagsFromCoreFlags(int flags) {$/;"	f
moduleZsetAddFlagsToCoreFlags	src/module.c	/^int moduleZsetAddFlagsToCoreFlags(int flags) {$/;"	f
module_blocked_handle	src/server.h	/^    void *module_blocked_handle; \/* RedisModuleBlockedClient structure.$/;"	m	struct:blockingState
module_blocked_pipe	src/server.h	/^    int module_blocked_pipe[2]; \/* Pipe used to awake the event loop if a$/;"	m	struct:redisServer
module_client	src/server.h	/^    client *module_client;      \/* "Fake" client to call Redis from modules *\/$/;"	m	struct:redisServer
module_event_log	tests/modules/keyspace_events.c	/^RedisModuleDict *module_event_log = NULL;$/;"	v
module_id	src/cluster.h	/^    uint64_t module_id;     \/* ID of the sender module. *\/$/;"	m	struct:__anon36
module_id	src/module.c	/^    uint64_t module_id;$/;"	m	struct:moduleClusterReceiver	file:
module_name	src/redismodule.h	/^    const char* module_name;\/* Name of module loaded or unloaded. *\/$/;"	m	struct:RedisModuleModuleChange
module_version	src/redismodule.h	/^    int32_t module_version; \/* Module version. *\/$/;"	m	struct:RedisModuleModuleChange
moduleapi	src/server.h	/^    dict *moduleapi;            \/* Exported core APIs dictionary for modules. *\/$/;"	m	struct:redisServer
modules	src/module.c	/^static dict *modules; \/* Hash table of modules. SDS -> RedisModule ptr.*\/$/;"	v	file:
modulesCollectInfo	src/module.c	/^sds modulesCollectInfo(sds info, const char *section, int for_crash_report, int sections) {$/;"	f
modulesDictType	src/server.c	/^dictType modulesDictType = {$/;"	v
monitorCommand	src/server.c	/^void monitorCommand(client *c) {$/;"	f
monitorOneInstance	exp/4_monitor.sh	/^monitorOneInstance() {$/;"	f
monitor_cfg	src/server.h	/^    list *monitor_cfg;$/;"	m	struct:sentinelConfig
monitor_mode	src/redis-cli.c	/^    int monitor_mode;$/;"	m	struct:config	file:
monitors	src/server.h	/^    list *slaves, *monitors;    \/* List of slaves and MONITORs *\/$/;"	m	struct:redisServer
mono_ticksPerMicrosecond	src/monotonic.c	/^static long mono_ticksPerMicrosecond = 0;$/;"	v	file:
monotime	src/monotonic.h	/^typedef uint64_t monotime;$/;"	t
monotonicInit	src/monotonic.c	/^const char * monotonicInit() {$/;"	f
monotonicInit_aarch64	src/monotonic.c	/^static void monotonicInit_aarch64() {$/;"	f	file:
monotonicInit_posix	src/monotonic.c	/^static void monotonicInit_posix() {$/;"	f	file:
monotonicInit_x86linux	src/monotonic.c	/^static void monotonicInit_x86linux() {$/;"	f	file:
monotonic_info_string	src/monotonic.c	/^static char monotonic_info_string[32];$/;"	v	file:
monotonic_mock	deps/jemalloc/test/unit/decay.c	/^static bool monotonic_mock;$/;"	v	file:
moveAllSlot	exp/inithg.sh	/^moveAllSlot() {$/;"	f
moveAllSlotToOne	exp/6_request_forward.sh	/^moveAllSlotToOne() {$/;"	f
moveAllSlotToOne	exp/exp1.sh	/^moveAllSlotToOne() {$/;"	f
moveCommand	src/db.c	/^void moveCommand(client *c) {$/;"	f
moveData	exp/3_ycsb_client.sh	/^moveData() {$/;"	f
moveHotSlot	exp/7_public_func.sh	/^moveHotSlot() {$/;"	f
moveOneSlot	exp/exp1.sh	/^moveOneSlot() {$/;"	f
moveOneSlot	exp/exp4.sh	/^moveOneSlot() {$/;"	f
moveOneSlot	exp/inithg.sh	/^moveOneSlot() {$/;"	f
moveOneSlotToDest	src/controller.c	/^void moveOneSlotToDest(int slot, char* source, char* target, char* worker_ip, int worker_port) {$/;"	f
moveSlot	exp/inithg.sh	/^moveSlot() {$/;"	f
moveSlotAdvance	exp/7_public_func.sh	/^moveSlotAdvance() {$/;"	f
moveSlotBasedOnHotness	exp/exp1.sh	/^moveSlotBasedOnHotness() {$/;"	f
moveSlotBasedOnHotness	exp/inithg.sh	/^moveSlotBasedOnHotness() {$/;"	f
moveSlotHandler	src/controller.c	/^void moveSlotHandler(char* buf) {$/;"	f
moveSlotInfo	exp/exp4.sh	/^moveSlotInfo() {$/;"	f
moveToNextTask	deps/hiredis/read.c	/^static void moveToNextTask(redisReader *r) {$/;"	f	file:
move_next	deps/hdr_histogram/hdr_histogram.c	/^static bool move_next(struct hdr_iter* iter)$/;"	f	file:
mp_buf	deps/lua/src/lua_cmsgpack.c	/^typedef struct mp_buf {$/;"	s	file:
mp_buf	deps/lua/src/lua_cmsgpack.c	/^} mp_buf;$/;"	t	typeref:struct:mp_buf	file:
mp_buf_append	deps/lua/src/lua_cmsgpack.c	/^void mp_buf_append(lua_State *L, mp_buf *buf, const unsigned char *s, size_t len) {$/;"	f
mp_buf_free	deps/lua/src/lua_cmsgpack.c	/^void mp_buf_free(lua_State *L, mp_buf *buf) {$/;"	f
mp_buf_new	deps/lua/src/lua_cmsgpack.c	/^mp_buf *mp_buf_new(lua_State *L) {$/;"	f
mp_cur	deps/lua/src/lua_cmsgpack.c	/^typedef struct mp_cur {$/;"	s	file:
mp_cur	deps/lua/src/lua_cmsgpack.c	/^} mp_cur;$/;"	t	typeref:struct:mp_cur	file:
mp_cur_consume	deps/lua/src/lua_cmsgpack.c	160;"	d	file:
mp_cur_init	deps/lua/src/lua_cmsgpack.c	/^void mp_cur_init(mp_cur *cursor, const unsigned char *s, size_t len) {$/;"	f
mp_cur_need	deps/lua/src/lua_cmsgpack.c	165;"	d	file:
mp_decode_to_lua_array	deps/lua/src/lua_cmsgpack.c	/^void mp_decode_to_lua_array(lua_State *L, mp_cur *c, size_t len) {$/;"	f
mp_decode_to_lua_hash	deps/lua/src/lua_cmsgpack.c	/^void mp_decode_to_lua_hash(lua_State *L, mp_cur *c, size_t len) {$/;"	f
mp_decode_to_lua_type	deps/lua/src/lua_cmsgpack.c	/^void mp_decode_to_lua_type(lua_State *L, mp_cur *c) {$/;"	f
mp_encode_array	deps/lua/src/lua_cmsgpack.c	/^void mp_encode_array(lua_State *L, mp_buf *buf, int64_t n) {$/;"	f
mp_encode_bytes	deps/lua/src/lua_cmsgpack.c	/^void mp_encode_bytes(lua_State *L, mp_buf *buf, const unsigned char *s, size_t len) {$/;"	f
mp_encode_double	deps/lua/src/lua_cmsgpack.c	/^void mp_encode_double(lua_State *L, mp_buf *buf, double d) {$/;"	f
mp_encode_int	deps/lua/src/lua_cmsgpack.c	/^void mp_encode_int(lua_State *L, mp_buf *buf, int64_t n) {$/;"	f
mp_encode_lua_bool	deps/lua/src/lua_cmsgpack.c	/^void mp_encode_lua_bool(lua_State *L, mp_buf *buf) {$/;"	f
mp_encode_lua_integer	deps/lua/src/lua_cmsgpack.c	/^void mp_encode_lua_integer(lua_State *L, mp_buf *buf) {$/;"	f
mp_encode_lua_null	deps/lua/src/lua_cmsgpack.c	/^void mp_encode_lua_null(lua_State *L, mp_buf *buf) {$/;"	f
mp_encode_lua_number	deps/lua/src/lua_cmsgpack.c	/^void mp_encode_lua_number(lua_State *L, mp_buf *buf) {$/;"	f
mp_encode_lua_string	deps/lua/src/lua_cmsgpack.c	/^void mp_encode_lua_string(lua_State *L, mp_buf *buf) {$/;"	f
mp_encode_lua_table	deps/lua/src/lua_cmsgpack.c	/^void mp_encode_lua_table(lua_State *L, mp_buf *buf, int level) {$/;"	f
mp_encode_lua_table_as_array	deps/lua/src/lua_cmsgpack.c	/^void mp_encode_lua_table_as_array(lua_State *L, mp_buf *buf, int level) {$/;"	f
mp_encode_lua_table_as_map	deps/lua/src/lua_cmsgpack.c	/^void mp_encode_lua_table_as_map(lua_State *L, mp_buf *buf, int level) {$/;"	f
mp_encode_lua_type	deps/lua/src/lua_cmsgpack.c	/^void mp_encode_lua_type(lua_State *L, mp_buf *buf, int level) {$/;"	f
mp_encode_map	deps/lua/src/lua_cmsgpack.c	/^void mp_encode_map(lua_State *L, mp_buf *buf, int64_t n) {$/;"	f
mp_pack	deps/lua/src/lua_cmsgpack.c	/^int mp_pack(lua_State *L) {$/;"	f
mp_realloc	deps/lua/src/lua_cmsgpack.c	/^void *mp_realloc(lua_State *L, void *target, size_t osize,size_t nsize) {$/;"	f
mp_safe	deps/lua/src/lua_cmsgpack.c	/^int mp_safe(lua_State *L) {$/;"	f
mp_unpack	deps/lua/src/lua_cmsgpack.c	/^int mp_unpack(lua_State *L) {$/;"	f
mp_unpack_full	deps/lua/src/lua_cmsgpack.c	/^int mp_unpack_full(lua_State *L, int limit, int offset) {$/;"	f
mp_unpack_limit	deps/lua/src/lua_cmsgpack.c	/^int mp_unpack_limit(lua_State *L) {$/;"	f
mp_unpack_one	deps/lua/src/lua_cmsgpack.c	/^int mp_unpack_one(lua_State *L) {$/;"	f
mq_gen	deps/jemalloc/test/include/test/mq.h	31;"	d
mq_msg	deps/jemalloc/test/include/test/mq.h	29;"	d
mq_msg_s	deps/jemalloc/test/unit/mq.c	/^struct mq_msg_s {$/;"	s	file:
mq_msg_t	deps/jemalloc/test/unit/mq.c	/^typedef struct mq_msg_s mq_msg_t;$/;"	t	typeref:struct:mq_msg_s	file:
mq_nanosleep	deps/jemalloc/test/src/mq.c	/^mq_nanosleep(unsigned ns) {$/;"	f
ms	src/redismodule.h	/^    uint64_t ms;$/;"	m	struct:RedisModuleStreamID
ms	src/stream.h	/^    uint64_t ms;        \/* Unix time in milliseconds. *\/$/;"	m	struct:streamID
msetCommand	src/t_string.c	/^void msetCommand(client *c) {$/;"	f
msetGenericCommand	src/t_string.c	/^void msetGenericCommand(client *c, int nx) {$/;"	f
msetnxCommand	src/t_string.c	/^void msetnxCommand(client *c) {$/;"	f
msg	src/cluster.h	/^        clusterMsgDataHotGroup msg;$/;"	m	struct:clusterMsgData::__anon42
msg	src/cluster.h	/^        clusterMsgDataPublish msg;$/;"	m	struct:clusterMsgData::__anon39
msg	src/cluster.h	/^        clusterMsgModule msg;$/;"	m	struct:clusterMsgData::__anon41
mstate	src/server.h	/^    multiState mstate;      \/* MULTI\/EXEC state *\/$/;"	m	struct:client
mstime	src/quicklist.c	/^static long long mstime(void) { return ustime() \/ 1000; }$/;"	f	file:
mstime	src/redis-benchmark.c	/^static long long mstime(void) {$/;"	f	file:
mstime	src/redis-cli.c	/^static long long mstime(void) {$/;"	f	file:
mstime	src/server.c	/^mstime_t mstime(void) {$/;"	f
mstime	src/server.h	/^    mstime_t mstime;            \/* 'unixtime' in milliseconds. *\/$/;"	m	struct:redisServer
mstime_t	src/redismodule.h	/^typedef long long mstime_t;$/;"	t
mstime_t	src/server.h	/^typedef long long mstime_t; \/* millisecond time type. *\/$/;"	t
mt	deps/lua/src/lstate.h	/^  struct Table *mt[NUM_TAGS];  \/* metatables for basic types *\/$/;"	m	struct:global_State	typeref:struct:global_State::Table
mt	src/mt19937-64.c	/^static unsigned long long mt[NN];$/;"	v	file:
mt.__index 	deps/lua/etc/strict.lua	/^mt.__index = function (t, n)$/;"	f
mt.__newindex 	deps/lua/etc/strict.lua	/^mt.__newindex = function (t, n, v)$/;"	f
mti	src/mt19937-64.c	/^static int mti=NN+1;$/;"	v	file:
mtx	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	malloc_mutex_t		mtx;$/;"	m	struct:arena_stats_s
mtx	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	malloc_mutex_t		mtx;$/;"	m	struct:arena_decay_s
mtx	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^	malloc_mutex_t		mtx;$/;"	m	struct:background_thread_info_s
mtx	deps/jemalloc/include/jemalloc/internal/base_structs.h	/^	malloc_mutex_t	mtx;$/;"	m	struct:base_s
mtx	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^	malloc_mutex_t		mtx;$/;"	m	struct:extents_s
mtx	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	malloc_mutex_t	mtx;$/;"	m	struct:prof_accum_s
mtx	deps/jemalloc/test/unit/mtx.c	/^	mtx_t		mtx;$/;"	m	struct:__anon119	file:
mtx_fini	deps/jemalloc/test/src/mtx.c	/^mtx_fini(mtx_t *mtx) {$/;"	f
mtx_init	deps/jemalloc/test/src/mtx.c	/^mtx_init(mtx_t *mtx) {$/;"	f
mtx_lock	deps/jemalloc/test/src/mtx.c	/^mtx_lock(mtx_t *mtx) {$/;"	f
mtx_t	deps/jemalloc/test/include/test/mtx.h	/^} mtx_t;$/;"	t	typeref:struct:__anon124
mtx_unlock	deps/jemalloc/test/src/mtx.c	/^mtx_unlock(mtx_t *mtx) {$/;"	f
multi	src/server.h	/^    *emptyscan, *multi, *exec, *left, *right, *hset, *srem, *xgroup, *xclaim,  $/;"	m	struct:sharedObjectsStruct
multiClientRun	exp/3_ycsb_client.sh	/^multiClientRun() {$/;"	f
multiCmd	src/server.h	/^typedef struct multiCmd {$/;"	s
multiCmd	src/server.h	/^} multiCmd;$/;"	t	typeref:struct:multiCmd
multiCommand	src/multi.c	/^void multiCommand(client *c) {$/;"	f
multiCommand	src/server.h	/^    struct redisCommand *delCommand, *multiCommand, *lpushCommand,$/;"	m	struct:redisServer	typeref:struct:redisServer::
multiState	src/server.h	/^typedef struct multiState {$/;"	s
multiState	src/server.h	/^} multiState;$/;"	t	typeref:struct:multiState
multibulklen	src/server.h	/^    int multibulklen;       \/* Number of multi bulk arguments left to read. *\/$/;"	m	struct:client
mutex_addr_comp	deps/jemalloc/src/mutex.c	/^mutex_addr_comp(const witness_t *witness1, void *mutex1,$/;"	f	file:
mutex_data	deps/jemalloc/include/jemalloc/internal/bin_stats.h	/^	mutex_prof_data_t mutex_data;$/;"	m	struct:bin_stats_s
mutex_owner_stats_update	deps/jemalloc/include/jemalloc/internal/mutex.h	/^mutex_owner_stats_update(tsdn_t *tsdn, malloc_mutex_t *mutex) {$/;"	f
mutex_pool_assert_not_held	deps/jemalloc/include/jemalloc/internal/mutex_pool.h	/^mutex_pool_assert_not_held(tsdn_t *tsdn, mutex_pool_t *pool) {$/;"	f
mutex_pool_assert_owner	deps/jemalloc/include/jemalloc/internal/mutex_pool.h	/^mutex_pool_assert_owner(tsdn_t *tsdn, mutex_pool_t *pool, uintptr_t key) {$/;"	f
mutex_pool_init	deps/jemalloc/src/mutex_pool.c	/^mutex_pool_init(mutex_pool_t *pool, const char *name, witness_rank_t rank) {$/;"	f
mutex_pool_lock	deps/jemalloc/include/jemalloc/internal/mutex_pool.h	/^mutex_pool_lock(tsdn_t *tsdn, mutex_pool_t *pool, uintptr_t key) {$/;"	f
mutex_pool_lock2	deps/jemalloc/include/jemalloc/internal/mutex_pool.h	/^mutex_pool_lock2(tsdn_t *tsdn, mutex_pool_t *pool, uintptr_t key1,$/;"	f
mutex_pool_mutex	deps/jemalloc/include/jemalloc/internal/mutex_pool.h	/^mutex_pool_mutex(mutex_pool_t *pool, uintptr_t key) {$/;"	f
mutex_pool_s	deps/jemalloc/include/jemalloc/internal/mutex_pool.h	/^struct mutex_pool_s {$/;"	s
mutex_pool_t	deps/jemalloc/include/jemalloc/internal/mutex_pool.h	/^typedef struct mutex_pool_s mutex_pool_t;$/;"	t	typeref:struct:mutex_pool_s
mutex_pool_unlock	deps/jemalloc/include/jemalloc/internal/mutex_pool.h	/^mutex_pool_unlock(tsdn_t *tsdn, mutex_pool_t *pool, uintptr_t key) {$/;"	f
mutex_pool_unlock2	deps/jemalloc/include/jemalloc/internal/mutex_pool.h	/^mutex_pool_unlock2(tsdn_t *tsdn, mutex_pool_t *pool, uintptr_t key1,$/;"	f
mutex_prof_arena_ind_t	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^} mutex_prof_arena_ind_t;$/;"	t	typeref:enum:__anon145
mutex_prof_data	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	mutex_prof_data_t mutex_prof_data[mutex_prof_num_arena_mutexes];$/;"	m	struct:arena_stats_s
mutex_prof_data	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	mutex_prof_data_t mutex_prof_data[mutex_prof_num_global_mutexes];$/;"	m	struct:ctl_stats_s
mutex_prof_data_init	deps/jemalloc/src/mutex.c	/^mutex_prof_data_init(mutex_prof_data_t *data) {$/;"	f	file:
mutex_prof_data_t	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^} mutex_prof_data_t;$/;"	t	typeref:struct:__anon146
mutex_prof_global_ind_t	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^} mutex_prof_global_ind_t;$/;"	t	typeref:enum:__anon144
mutex_prof_num_arena_mutexes	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^	mutex_prof_num_arena_mutexes$/;"	e	enum:__anon145
mutex_prof_num_global_mutexes	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^	mutex_prof_num_global_mutexes$/;"	e	enum:__anon144
mutex_stats_emit	deps/jemalloc/src/stats.c	/^mutex_stats_emit(emitter_t *emitter, emitter_row_t *row,$/;"	f	file:
mutex_stats_init_cols	deps/jemalloc/src/stats.c	/^mutex_stats_init_cols(emitter_row_t *row, const char *table_name,$/;"	f	file:
mutex_stats_read_arena	deps/jemalloc/src/stats.c	/^mutex_stats_read_arena(unsigned arena_ind, mutex_prof_arena_ind_t mutex_ind,$/;"	f	file:
mutex_stats_read_arena_bin	deps/jemalloc/src/stats.c	/^mutex_stats_read_arena_bin(unsigned arena_ind, unsigned bin_ind,$/;"	f	file:
mutex_stats_read_global	deps/jemalloc/src/stats.c	/^mutex_stats_read_global(const char *name, emitter_col_t *col_name,$/;"	f	file:
mutexes	deps/jemalloc/include/jemalloc/internal/mutex_pool.h	/^	malloc_mutex_t mutexes[MUTEX_POOL_SIZE];$/;"	m	struct:mutex_pool_s
muzzy_decay_ms	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	ssize_t muzzy_decay_ms;$/;"	m	struct:ctl_arena_s
muzzy_decay_ms_default	deps/jemalloc/src/arena.c	/^static atomic_zd_t muzzy_decay_ms_default;$/;"	v	file:
myid	src/sentinel.c	/^    char myid[CONFIG_RUN_ID_SIZE+1]; \/* This sentinel ID. *\/$/;"	m	struct:sentinelState	file:
myip	src/cluster.h	/^    char myip[NET_IP_STR_LEN];    \/* Sender IP, if not all zeroed. *\/$/;"	m	struct:__anon43
myself	src/cluster.c	/^clusterNode *myself = NULL;$/;"	v
myself	src/cluster.h	/^    clusterNode *myself;  \/* This node *\/$/;"	m	struct:clusterState
myslots	src/cluster.h	/^    unsigned char myslots[CLUSTER_SLOTS\/8];$/;"	m	struct:__anon43
n	deps/lua/src/lobject.h	/^  lua_Number n;$/;"	m	union:__anon106
n	deps/lua/src/lua_bit.c	/^  lua_Number n;$/;"	m	union:__anon99	file:
n	deps/lua/src/lzio.h	/^  size_t n;			\/* bytes still unread *\/$/;"	m	struct:Zio
n	deps/lua/src/lzio.h	/^  size_t n;$/;"	m	struct:Mbuffer
nCcalls	deps/lua/src/lstate.h	/^  unsigned short nCcalls;  \/* number of nested C calls *\/$/;"	m	struct:lua_State
n_background_threads	deps/jemalloc/src/background_thread.c	/^size_t n_background_threads;$/;"	v
n_lock_ops	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^	uint64_t		n_lock_ops;$/;"	m	struct:__anon146
n_owner_switches	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^	uint64_t		n_owner_switches;$/;"	m	struct:__anon146
n_spin_acquired	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^	uint64_t		n_spin_acquired;$/;"	m	struct:__anon146
n_thp	deps/jemalloc/include/jemalloc/internal/base_structs.h	/^	size_t		n_thp;$/;"	m	struct:base_s
n_wait_times	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^	uint64_t		n_wait_times;$/;"	m	struct:__anon146
n_waiting_thds	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^	atomic_u32_t		n_waiting_thds;$/;"	m	struct:__anon146
na	deps/lua/src/lparser.c	/^  int na;  \/* total number of array elements *\/$/;"	m	struct:ConsControl	file:
nactive	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	atomic_zu_t		nactive;$/;"	m	struct:arena_s
nactvar	deps/lua/src/lparser.c	/^  lu_byte nactvar;  \/* # active locals outside the breakable structure *\/$/;"	m	struct:BlockCnt	file:
nactvar	deps/lua/src/lparser.h	/^  lu_byte nactvar;  \/* number of active local variables *\/$/;"	m	struct:FuncState
name	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	const char *name;$/;"	m	struct:ctl_named_node_s
name	deps/jemalloc/include/jemalloc/internal/log.h	/^	const char *name;$/;"	m	struct:log_var_s
name	deps/jemalloc/include/jemalloc/internal/witness.h	/^	const char		*name;$/;"	m	struct:witness_s
name	deps/lua/src/lauxlib.h	/^  const char *name;$/;"	m	struct:luaL_Reg
name	deps/lua/src/ldo.c	/^  const char *name;$/;"	m	struct:SParser	file:
name	deps/lua/src/lua.h	/^  const char *name;	\/* (n) *\/$/;"	m	struct:lua_Debug
name	deps/lua/src/lundump.c	/^ const char* name;$/;"	m	struct:__anon97	file:
name	src/acl.c	/^    const char *name;$/;"	m	struct:ACLCategoryItem	file:
name	src/acl.c	/^    const char *name;$/;"	m	struct:ACLUserFlag	file:
name	src/cluster.c	/^    char *name;$/;"	m	struct:redisNodeFlags	file:
name	src/cluster.h	/^    char name[CLUSTER_NAMELEN]; \/* Node name, hex string, sha1-size *\/$/;"	m	struct:clusterNode
name	src/config.c	/^    const char *name; \/* The user visible name of this config *\/$/;"	m	struct:standardConfig	file:
name	src/config.c	/^    const char *name;$/;"	m	struct:configEnum	file:
name	src/help.h	/^  char *name;$/;"	m	struct:commandHelp
name	src/module.c	/^    char *name;     \/* Module name. *\/$/;"	m	struct:RedisModule	file:
name	src/quicklist.h	/^    char *name;$/;"	m	struct:quicklistBookmark
name	src/redis-benchmark.c	/^    sds name;$/;"	m	struct:clusterNode	file:
name	src/redis-cli.c	/^    char *name;$/;"	m	struct:__anon14	file:
name	src/redis-cli.c	/^    char *name;$/;"	m	struct:clusterManagerCommand	file:
name	src/redis-cli.c	/^    char *name;$/;"	m	struct:clusterManagerCommandDef	file:
name	src/redis-cli.c	/^    char *name;$/;"	m	struct:clusterManagerOptionDef	file:
name	src/redis-cli.c	/^    sds name;$/;"	m	struct:clusterManagerNode	file:
name	src/sentinel.c	/^    char *name;     \/* Master name from the point of view of this sentinel. *\/$/;"	m	struct:sentinelRedisInstance	file:
name	src/server.c	/^    char *name;$/;"	m	struct:redisTest	file:
name	src/server.h	/^    char *name;$/;"	m	struct:redisCommand
name	src/server.h	/^    char *name;$/;"	m	struct:redisFunctionSym
name	src/server.h	/^    char name[10]; \/* 9 bytes name + null term. Charset: A-Z a-z 0-9 _- *\/$/;"	m	struct:RedisModuleType
name	src/server.h	/^    robj *name;             \/* As set by CLIENT SETNAME. *\/$/;"	m	struct:client
name	src/server.h	/^    sds name;       \/* The username as an SDS string. *\/$/;"	m	struct:__anon18
name	src/stream.h	/^    sds name;                   \/* Consumer name. This is how the consumer$/;"	m	struct:streamConsumer
named	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	bool named;$/;"	m	struct:ctl_node_s
namewhat	deps/lua/src/lua.h	/^  const char *namewhat;	\/* (n) `global', `local', `field', `method' *\/$/;"	m	struct:lua_Debug
narenas	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	unsigned narenas;$/;"	m	struct:ctl_arenas_s
narenas_auto	deps/jemalloc/src/jemalloc.c	/^unsigned		narenas_auto; \/* Read-only after initialization. *\/$/;"	v
narenas_total	deps/jemalloc/src/jemalloc.c	/^static atomic_u_t	narenas_total; \/* Use narenas_total_*(). *\/$/;"	v	file:
narenas_total_get	deps/jemalloc/src/jemalloc.c	/^narenas_total_get(void) {$/;"	f
narenas_total_inc	deps/jemalloc/src/jemalloc.c	/^narenas_total_inc(void) {$/;"	f	file:
narenas_total_set	deps/jemalloc/src/jemalloc.c	/^narenas_total_set(unsigned narenas) {$/;"	f	file:
native	deps/lua/src/lua_struct.c	/^} const native = {1};$/;"	v	file:
nbits	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^	size_t nbits;$/;"	m	struct:bitmap_info_s
ncached	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^	cache_bin_sz_t ncached;$/;"	m	struct:cache_bin_s
ncached_max	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^	cache_bin_sz_t ncached_max;$/;"	m	struct:cache_bin_info_s
nchildren	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	size_t nchildren;$/;"	m	struct:ctl_named_node_s
ncleanups	deps/jemalloc/src/tsd.c	/^static unsigned ncleanups;$/;"	v	file:
ncpus	deps/jemalloc/src/jemalloc.c	/^unsigned	ncpus;$/;"	v
ndalloc	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	arena_stats_u64_t	ndalloc;$/;"	m	struct:arena_stats_large_s
ndalloc	deps/jemalloc/include/jemalloc/internal/bin_stats.h	/^	uint64_t	ndalloc;$/;"	m	struct:bin_stats_s
ndalloc_large	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	arena_stats_u64_t	ndalloc_large; \/* Derived. *\/$/;"	m	struct:arena_stats_s
ndalloc_small	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	uint64_t ndalloc_small;$/;"	m	struct:ctl_arena_stats_s
need_value	deps/lua/src/lcode.c	/^static int need_value (FuncState *fs, int list) {$/;"	f	file:
neighbors	src/geohash_helper.h	/^    GeoHashNeighbors neighbors;$/;"	m	struct:__anon59
nested_dict_json	deps/jemalloc/test/unit/emitter.c	/^static const char *nested_dict_json =$/;"	v	file:
nested_dict_table	deps/jemalloc/test/unit/emitter.c	/^static const char *nested_dict_table =$/;"	v	file:
nesting_depth	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	int nesting_depth;$/;"	m	struct:emitter_s
neterr	src/server.h	/^    char neterr[ANET_ERR_LEN];   \/* Error buffer for anet.c *\/$/;"	m	struct:redisServer
new_localvar	deps/lua/src/lparser.c	/^static void new_localvar (LexState *ls, TString *name, int n) {$/;"	f	file:
new_localvarliteral	deps/lua/src/lparser.c	156;"	d	file:
newfenv	deps/lua/src/liolib.c	/^static void newfenv (lua_State *L, lua_CFunction cls) {$/;"	f	file:
newfile	deps/lua/src/liolib.c	/^static FILE **newfile (lua_State *L) {$/;"	f	file:
newkey	deps/lua/src/ltable.c	/^static TValue *newkey (lua_State *L, Table *t, const TValue *key) {$/;"	f	file:
newlstr	deps/lua/src/lstring.c	/^static TString *newlstr (lua_State *L, const char *str, size_t l,$/;"	f	file:
next	deps/hiredis/async.h	/^    struct redisCallback *next; \/* simple singly linked list *\/$/;"	m	struct:redisCallback	typeref:struct:redisCallback::redisCallback
next	deps/hiredis/dict.h	/^    struct dictEntry *next;$/;"	m	struct:dictEntry	typeref:struct:dictEntry::dictEntry
next	deps/jemalloc/include/jemalloc/internal/base_structs.h	/^	base_block_t	*next;$/;"	m	struct:base_block_s
next	deps/jemalloc/include/jemalloc/internal/tcache_structs.h	/^		tcaches_t	*next;$/;"	m	union:tcaches_s::__anon149
next	deps/lua/src/llex.c	28;"	d	file:
next	deps/lua/src/lobject.h	/^      struct UpVal *next;$/;"	m	struct:UpVal::__anon109::__anon110	typeref:struct:UpVal::__anon109::__anon110::UpVal
next	deps/lua/src/lobject.h	/^    struct Node *next;  \/* for chaining *\/$/;"	m	struct:TKey::__anon111	typeref:struct:TKey::__anon111::Node
next	src/adlist.h	/^    listNode *next;$/;"	m	struct:listIter
next	src/adlist.h	/^    struct listNode *next;$/;"	m	struct:listNode	typeref:struct:listNode::listNode
next	src/ae.h	/^    struct aeTimeEvent *next;$/;"	m	struct:aeTimeEvent	typeref:struct:aeTimeEvent::aeTimeEvent
next	src/dict.h	/^    struct dictEntry *next;$/;"	m	struct:dictEntry	typeref:struct:dictEntry::dictEntry
next	src/module.c	/^    struct RedisModulePoolAllocBlock *next;$/;"	m	struct:RedisModulePoolAllocBlock	typeref:struct:RedisModulePoolAllocBlock::RedisModulePoolAllocBlock	file:
next	src/module.c	/^    struct moduleClusterReceiver *next;$/;"	m	struct:moduleClusterReceiver	typeref:struct:moduleClusterReceiver::moduleClusterReceiver	file:
next	src/modules/hellotype.c	/^    struct HelloTypeNode *next;$/;"	m	struct:HelloTypeNode	typeref:struct:HelloTypeNode::HelloTypeNode	file:
next	src/quicklist.h	/^    struct quicklistNode *next;$/;"	m	struct:quicklistNode	typeref:struct:quicklistNode::quicklistNode
next	src/rand.c	/^static void next(void) {$/;"	f	file:
next	tests/modules/test_lazyfree.c	/^    struct LazyFreeLinkNode *next;$/;"	m	struct:LazyFreeLinkNode	typeref:struct:LazyFreeLinkNode::LazyFreeLinkNode	file:
nextArgument	deps/hiredis/async.c	/^static const char *nextArgument(const char *start, const char **str, size_t *len) {$/;"	f	file:
nextEntry	deps/hiredis/dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator
nextEntry	src/dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator
next_client_id	src/server.h	/^    redisAtomic uint64_t next_client_id; \/* Next client unique ID. Incremental. *\/$/;"	m	struct:redisServer
next_gc_bin	deps/jemalloc/include/jemalloc/internal/tcache_structs.h	/^	szind_t		next_gc_bin;$/;"	m	struct:tcache_s
next_num	src/setcpuaffinity.c	/^static int next_num(const char *str, char **end, int *result) {$/;"	f	file:
next_thr_uid	deps/jemalloc/src/prof.c	/^static uint64_t		next_thr_uid;$/;"	v	file:
next_thr_uid_mtx	deps/jemalloc/src/prof.c	/^static malloc_mutex_t	next_thr_uid_mtx;$/;"	v	file:
next_token	src/setcpuaffinity.c	/^static const char *next_token(const char *q,  int sep) {$/;"	f	file:
next_value_greater_than_reporting_level_upper_bound	deps/hdr_histogram/hdr_histogram.c	/^static bool next_value_greater_than_reporting_level_upper_bound($/;"	f	file:
next_value_reporting_level	deps/hdr_histogram/hdr_histogram.h	/^    int64_t next_value_reporting_level;$/;"	m	struct:hdr_iter_linear
next_value_reporting_level	deps/hdr_histogram/hdr_histogram.h	/^    int64_t next_value_reporting_level;$/;"	m	struct:hdr_iter_log
next_value_reporting_level_lowest_equivalent	deps/hdr_histogram/hdr_histogram.h	/^    int64_t next_value_reporting_level_lowest_equivalent;$/;"	m	struct:hdr_iter_linear
next_value_reporting_level_lowest_equivalent	deps/hdr_histogram/hdr_histogram.h	/^    int64_t next_value_reporting_level_lowest_equivalent;$/;"	m	struct:hdr_iter_log
next_wakeup	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^	nstime_t		next_wakeup;$/;"	m	struct:background_thread_info_s
nextid	src/acl.c	/^static unsigned long nextid = 0; \/* Next command id that has not been assigned *\/$/;"	v	file:
nfds_t	deps/hiredis/sockcompat.h	/^typedef ULONG nfds_t;$/;"	t
nfills	deps/jemalloc/include/jemalloc/internal/bin_stats.h	/^	uint64_t	nfills;$/;"	m	struct:bin_stats_s
nfinished	deps/jemalloc/test/unit/retained.c	/^static atomic_u_t	nfinished;$/;"	v	file:
nflushes	deps/jemalloc/include/jemalloc/internal/bin_stats.h	/^	uint64_t	nflushes;$/;"	m	struct:bin_stats_s
ngcotouv	deps/lua/src/lstate.h	157;"	d
ngroups	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^	size_t ngroups;$/;"	m	struct:bitmap_info_s
ngrows	deps/jemalloc/include/jemalloc/internal/ckh.h	/^	uint64_t ngrows;$/;"	m	struct:__anon151
nh	deps/lua/src/lparser.c	/^  int nh;  \/* total number of `record' elements *\/$/;"	m	struct:ConsControl	file:
nhbins	deps/jemalloc/src/tcache.c	/^unsigned		nhbins;$/;"	v
nil	deps/hiredis/test.c	/^    int nil;$/;"	m	struct:pushCounters	file:
nilK	deps/lua/src/lcode.c	/^static int nilK (FuncState *fs) {$/;"	f	file:
ninserts	deps/jemalloc/include/jemalloc/internal/ckh.h	/^	uint64_t ninserts;$/;"	m	struct:__anon151
nk	deps/lua/src/lobject.h	/^  } nk;$/;"	m	union:TKey	typeref:struct:TKey::__anon111
nk	deps/lua/src/lparser.h	/^  int nk;  \/* number of elements in `k' *\/$/;"	m	struct:FuncState
nkeys	tests/modules/scan.c	/^    size_t nkeys;$/;"	m	struct:__anon76	file:
nlevels	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^	unsigned nlevels;$/;"	m	struct:bitmap_info_s
nlimbo	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	unsigned		nlimbo;$/;"	m	struct:prof_gctx_s
nlocvars	deps/lua/src/lparser.h	/^  short nlocvars;  \/* number of elements in `locvars' *\/$/;"	m	struct:FuncState
nmadvise	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	arena_stats_u64_t	nmadvise;$/;"	m	struct:arena_stats_decay_s
nmalloc	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	arena_stats_u64_t	nmalloc;$/;"	m	struct:arena_stats_large_s
nmalloc	deps/jemalloc/include/jemalloc/internal/bin_stats.h	/^	uint64_t	nmalloc;$/;"	m	struct:bin_stats_s
nmalloc_large	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	arena_stats_u64_t	nmalloc_large; \/* Derived. *\/$/;"	m	struct:arena_stats_s
nmalloc_small	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	uint64_t nmalloc_small;$/;"	m	struct:ctl_arena_stats_s
no_auth_warning	src/redis-cli.c	/^    int no_auth_warning;$/;"	m	struct:config	file:
no_forward_hot_slot	src/server.h	/^    list* no_forward_hot_slot; \/* save the slot which should not be forwarded. *\/$/;"	m	struct:client
no_lazy_lock	deps/jemalloc/test/unit/stats.c	/^no_lazy_lock(void) {$/;"	f	file:
no_mkstream	src/t_stream.c	/^    int no_mkstream; \/* if set to 1 do not create new stream *\/$/;"	m	struct:__anon11	file:
noautherr	src/server.h	/^    *masterdownerr, *roslaveerr, *execaborterr, *noautherr, *noreplicaserr,$/;"	m	struct:sharedObjectsStruct
node	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	ctl_node_t node;$/;"	m	struct:ctl_named_node_s
node	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	struct ctl_node_s node;$/;"	m	struct:ctl_indexed_node_s	typeref:struct:ctl_indexed_node_s::ctl_node_s
node	deps/lua/src/lobject.h	/^  Node *node;$/;"	m	struct:Table
node	src/cluster.h	/^    struct clusterNode *node;   \/* Node related to this link if any, or NULL *\/$/;"	m	struct:clusterLink	typeref:struct:clusterLink::clusterNode
node	src/cluster.h	/^    struct clusterNode *node;  \/* Node reporting the failure condition. *\/$/;"	m	struct:clusterNodeFailReport	typeref:struct:clusterNodeFailReport::clusterNode
node	src/quicklist.h	/^    quicklistNode *node;$/;"	m	struct:quicklistBookmark
node	src/quicklist.h	/^    quicklistNode *node;$/;"	m	struct:quicklistEntry
node	src/rax.h	/^    raxNode *node;          \/* Current node. Only for unsafe iteration. *\/$/;"	m	struct:raxIterator
node	src/t_zset.c	/^                zskiplistNode *node;$/;"	m	struct:__anon2::__anon3::_iterzset::__anon7	file:
nodeCantFailover	src/cluster.h	85;"	d
nodeFailed	src/cluster.h	84;"	d
nodeHasAddr	src/cluster.h	81;"	d
nodeInHandshake	src/cluster.h	80;"	d
nodeIp2String	src/cluster.c	/^void nodeIp2String(char *buf, clusterLink *link, char *announced_ip) {$/;"	f
nodeIsMaster	src/cluster.h	78;"	d
nodeIsSlave	src/cluster.h	79;"	d
nodeTimedOut	src/cluster.h	83;"	d
nodeToIP	exp/1_build_redis_cluster.sh	/^nodeToIP() {$/;"	f
nodeUpdateAddressIfNeeded	src/cluster.c	/^int nodeUpdateAddressIfNeeded(clusterNode *node, clusterLink *link,$/;"	f
nodeWithoutAddr	src/cluster.h	82;"	d
node_addr	src/redis-cli.c	/^    sds node_addr;$/;"	m	struct:clusterManagerLink	file:
node_cb	src/rax.h	/^    raxNodeCallback node_cb; \/* Optional node callback. Normally set to NULL. *\/$/;"	m	struct:raxIterator
node_cmp	deps/jemalloc/test/unit/ph.c	/^node_cmp(const node_t *a, const node_t *b) {$/;"	f	file:
node_cmp	deps/jemalloc/test/unit/rb.c	/^node_cmp(const node_t *a, const node_t *b) {$/;"	f	file:
node_cmp_magic	deps/jemalloc/test/unit/ph.c	/^node_cmp_magic(const node_t *a, const node_t *b) {$/;"	f	file:
node_name	src/redis-cli.c	/^    sds node_name;$/;"	m	struct:clusterManagerLink	file:
node_print	deps/jemalloc/test/unit/ph.c	/^node_print(const node_t *node, unsigned depth) {$/;"	f	file:
node_remove	deps/jemalloc/test/unit/ph.c	/^node_remove(heap_t *heap, node_t *node) {$/;"	f	file:
node_remove	deps/jemalloc/test/unit/rb.c	/^node_remove(tree_t *tree, node_t *node, unsigned nnodes) {$/;"	f	file:
node_remove_any	deps/jemalloc/test/unit/ph.c	/^node_remove_any(heap_t *heap) {$/;"	f	file:
node_remove_first	deps/jemalloc/test/unit/ph.c	/^node_remove_first(heap_t *heap) {$/;"	f	file:
node_s	deps/jemalloc/test/unit/ph.c	/^struct node_s {$/;"	s	file:
node_s	deps/jemalloc/test/unit/rb.c	/^struct node_s {$/;"	s	file:
node_t	deps/jemalloc/test/unit/ph.c	/^typedef struct node_s node_t;$/;"	t	typeref:struct:node_s	file:
node_t	deps/jemalloc/test/unit/rb.c	/^typedef struct node_s node_t;$/;"	t	typeref:struct:node_s	file:
node_validate	deps/jemalloc/test/unit/ph.c	/^node_validate(const node_t *node, const node_t *parent) {$/;"	f	file:
nodecfg	src/cluster.h	/^        clusterMsgDataUpdate nodecfg;$/;"	m	struct:clusterMsgData::__anon40
nodename	src/cluster.h	/^    char nodename[CLUSTER_NAMELEN]; \/* Name of the slots owner. *\/$/;"	m	struct:__anon34
nodename	src/cluster.h	/^    char nodename[CLUSTER_NAMELEN]; \/* my node name*\/$/;"	m	struct:__anon35
nodename	src/cluster.h	/^    char nodename[CLUSTER_NAMELEN];$/;"	m	struct:__anon31
nodename	src/cluster.h	/^    char nodename[CLUSTER_NAMELEN];$/;"	m	struct:__anon32
nodes	src/cluster.h	/^    dict *nodes;          \/* Hash table of name -> clusterNode structures *\/$/;"	m	struct:clusterState
nodes	src/redis-cli.c	/^    clusterManagerNode **nodes; \/* Actual nodes array *\/$/;"	m	struct:clusterManagerNodeArray	file:
nodes	src/redis-cli.c	/^    list *nodes;    \/* List of nodes in the configuration. *\/$/;"	m	struct:clusterManager	file:
nodes_black_list	src/cluster.h	/^    dict *nodes_black_list; \/* Nodes we don't re-add for a few seconds. *\/$/;"	m	struct:clusterState
noexcept	deps/jemalloc/src/jemalloc_cpp.cpp	/^newImpl(std::size_t size) noexcept(IsNoExcept) {$/;"	f
nokeyerr	src/server.h	/^    *emptyarray, *wrongtypeerr, *nokeyerr, *syntaxerr, *sameobjecterr,$/;"	m	struct:sharedObjectsStruct
nolocks_localtime	src/localtime.c	/^void nolocks_localtime(struct tm *tmp, time_t t, time_t tz, int dst) {$/;"	f
non_reentrant	deps/jemalloc/test/src/test.c	/^	non_reentrant = 0,$/;"	e	enum:__anon123	file:
non_zero_min	deps/hdr_histogram/hdr_histogram.c	/^static int64_t non_zero_min(const struct hdr_histogram* h)$/;"	f	file:
noninteractive	src/redis-cli.c	/^static int noninteractive(int argc, char **argv) {$/;"	f	file:
noreplicaserr	src/server.h	/^    *masterdownerr, *roslaveerr, *execaborterr, *noautherr, *noreplicaserr,$/;"	m	struct:sharedObjectsStruct
normalMove	exp/exp4.sh	/^normalMove() {$/;"	f
normalize_index	deps/hdr_histogram/hdr_histogram.c	/^static int32_t normalize_index(const struct hdr_histogram* h, int32_t index)$/;"	f	file:
normalizing_index_offset	deps/hdr_histogram/hdr_histogram.h	/^    int32_t normalizing_index_offset;$/;"	m	struct:hdr_histogram
north	src/geohash.h	/^    GeoHashBits north;$/;"	m	struct:__anon50
north_east	src/geohash.h	/^    GeoHashBits north_east;$/;"	m	struct:__anon50
north_west	src/geohash.h	/^    GeoHashBits north_west;$/;"	m	struct:__anon50
noscripterr	src/server.h	/^    *outofrangeerr, *noscripterr, *loadingerr, *slowscripterr, *bgsaveerr,$/;"	m	struct:sharedObjectsStruct
not_implemented	deps/jemalloc/include/jemalloc/internal/assert.h	32;"	d
not_implemented	deps/jemalloc/src/malloc_io.c	15;"	d	file:
not_implemented	deps/jemalloc/src/malloc_io.c	40;"	d	file:
not_implemented	deps/jemalloc/src/malloc_io.c	674;"	d	file:
not_implemented	deps/jemalloc/test/include/test/jemalloc_test.h	140;"	d
not_implemented	deps/jemalloc/test/include/test/jemalloc_test.h	159;"	d
not_reached	deps/jemalloc/include/jemalloc/internal/assert.h	20;"	d
not_reached	deps/jemalloc/src/malloc_io.c	12;"	d	file:
not_reached	deps/jemalloc/src/malloc_io.c	32;"	d	file:
not_reached	deps/jemalloc/src/malloc_io.c	673;"	d	file:
not_reached	deps/jemalloc/test/include/test/jemalloc_test.h	139;"	d
not_reached	deps/jemalloc/test/include/test/jemalloc_test.h	152;"	d
notail	deps/lua/src/lua.c	258;"	d	file:
notification_script	src/sentinel.c	/^    char *notification_script;$/;"	m	struct:sentinelRedisInstance	file:
notifyKeyspaceEvent	src/notify.c	/^void notifyKeyspaceEvent(int type, char *event, robj *key, int dbid) {$/;"	f
notify_callback	src/module.c	/^    RedisModuleNotificationFunc notify_callback;$/;"	m	struct:RedisModuleKeyspaceSubscriber	file:
notify_keyspace_events	src/server.h	/^    int notify_keyspace_events; \/* Events to propagate via Pub\/Sub. This is an$/;"	m	struct:redisServer
notused	src/hyperloglog.c	/^    uint8_t notused[3]; \/* Reserved for future use, must be zero. *\/$/;"	m	struct:hllhdr	file:
notused1	src/cluster.h	/^    char notused1[32];  \/* 32 bytes reserved for future usage. *\/$/;"	m	struct:__anon43
notused1	src/cluster.h	/^    uint16_t notused1;$/;"	m	struct:__anon31
np	deps/lua/src/lparser.h	/^  int np;  \/* number of elements in `p' *\/$/;"	m	struct:FuncState
npages	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^	atomic_zu_t		npages;$/;"	m	struct:extents_s
npages_to_purge_new	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^	size_t			npages_to_purge_new;$/;"	m	struct:background_thread_info_s
nparallel	deps/jemalloc/scripts/gen_run_tests.py	/^nparallel = cpu_count() * 2$/;"	v
npending	src/ae_evport.c	/^    uint_t  npending;                           \/* # of pending fds *\/$/;"	m	struct:aeApiState	file:
npurge	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	arena_stats_u64_t	npurge;$/;"	m	struct:arena_stats_decay_s
nregs	deps/jemalloc/include/jemalloc/internal/bin.h	/^	uint32_t		nregs;$/;"	m	struct:bin_info_s
nregs_per_run_compute	deps/jemalloc/test/unit/pack.c	/^nregs_per_run_compute(void) {$/;"	f	file:
nrelocs	deps/jemalloc/include/jemalloc/internal/ckh.h	/^	uint64_t nrelocs;$/;"	m	struct:__anon151
nreplies	tests/modules/scan.c	/^    size_t nreplies;$/;"	m	struct:__anon77	file:
nrequests	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	arena_stats_u64_t	nrequests; \/* Partially derived. *\/$/;"	m	struct:arena_stats_large_s
nrequests	deps/jemalloc/include/jemalloc/internal/bin_stats.h	/^	uint64_t	nrequests;$/;"	m	struct:bin_stats_s
nrequests	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^	uint64_t nrequests;$/;"	m	struct:cache_bin_stats_s
nrequests_large	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	arena_stats_u64_t	nrequests_large; \/* Derived. *\/$/;"	m	struct:arena_stats_s
nrequests_small	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	uint64_t nrequests_small;$/;"	m	struct:ctl_arena_stats_s
nresults	deps/lua/src/lapi.c	/^  int nresults;$/;"	m	struct:CallS	file:
nresults	deps/lua/src/lstate.h	/^  int nresults;  \/* expected number of results from this function *\/$/;"	m	struct:CallInfo
ns	deps/jemalloc/include/jemalloc/internal/nstime.h	/^	uint64_t ns;$/;"	m	struct:__anon137
nshrinkfails	deps/jemalloc/include/jemalloc/internal/ckh.h	/^	uint64_t nshrinkfails;$/;"	m	struct:__anon151
nshrinks	deps/jemalloc/include/jemalloc/internal/ckh.h	/^	uint64_t nshrinks;$/;"	m	struct:__anon151
nslabs	deps/jemalloc/include/jemalloc/internal/bin_stats.h	/^	uint64_t	nslabs;$/;"	m	struct:bin_stats_s
nstime_add	deps/jemalloc/src/nstime.c	/^nstime_add(nstime_t *time, const nstime_t *addend) {$/;"	f
nstime_compare	deps/jemalloc/src/nstime.c	/^nstime_compare(const nstime_t *a, const nstime_t *b) {$/;"	f
nstime_copy	deps/jemalloc/src/nstime.c	/^nstime_copy(nstime_t *time, const nstime_t *source) {$/;"	f
nstime_divide	deps/jemalloc/src/nstime.c	/^nstime_divide(const nstime_t *time, const nstime_t *divisor) {$/;"	f
nstime_get	deps/jemalloc/src/nstime.c	/^nstime_get(nstime_t *time) {$/;"	f	file:
nstime_iadd	deps/jemalloc/src/nstime.c	/^nstime_iadd(nstime_t *time, uint64_t addend) {$/;"	f
nstime_idivide	deps/jemalloc/src/nstime.c	/^nstime_idivide(nstime_t *time, uint64_t divisor) {$/;"	f
nstime_imultiply	deps/jemalloc/src/nstime.c	/^nstime_imultiply(nstime_t *time, uint64_t multiplier) {$/;"	f
nstime_init	deps/jemalloc/src/nstime.c	/^nstime_init(nstime_t *time, uint64_t ns) {$/;"	f
nstime_init2	deps/jemalloc/src/nstime.c	/^nstime_init2(nstime_t *time, uint64_t sec, uint64_t nsec) {$/;"	f
nstime_isubtract	deps/jemalloc/src/nstime.c	/^nstime_isubtract(nstime_t *time, uint64_t subtrahend) {$/;"	f
nstime_monotonic	deps/jemalloc/src/nstime.c	/^nstime_monotonic_t *JET_MUTABLE nstime_monotonic = nstime_monotonic_impl;$/;"	v
nstime_monotonic_impl	deps/jemalloc/src/nstime.c	/^nstime_monotonic_impl(void) {$/;"	f	file:
nstime_monotonic_mock	deps/jemalloc/test/unit/decay.c	/^nstime_monotonic_mock(void) {$/;"	f	file:
nstime_monotonic_orig	deps/jemalloc/test/unit/decay.c	/^static nstime_monotonic_t *nstime_monotonic_orig;$/;"	v	file:
nstime_monotonic_t	deps/jemalloc/include/jemalloc/internal/nstime.h	/^typedef bool (nstime_monotonic_t)(void);$/;"	t
nstime_msec	deps/jemalloc/src/nstime.c	/^nstime_msec(const nstime_t *time) {$/;"	f
nstime_ns	deps/jemalloc/src/nstime.c	/^nstime_ns(const nstime_t *time) {$/;"	f
nstime_nsec	deps/jemalloc/src/nstime.c	/^nstime_nsec(const nstime_t *time) {$/;"	f
nstime_sec	deps/jemalloc/src/nstime.c	/^nstime_sec(const nstime_t *time) {$/;"	f
nstime_subtract	deps/jemalloc/src/nstime.c	/^nstime_subtract(nstime_t *time, const nstime_t *subtrahend) {$/;"	f
nstime_t	deps/jemalloc/include/jemalloc/internal/nstime.h	/^} nstime_t;$/;"	t	typeref:struct:__anon137
nstime_update	deps/jemalloc/src/nstime.c	/^nstime_update_t *JET_MUTABLE nstime_update = nstime_update_impl;$/;"	v
nstime_update_impl	deps/jemalloc/src/nstime.c	/^nstime_update_impl(nstime_t *time) {$/;"	f	file:
nstime_update_mock	deps/jemalloc/test/unit/decay.c	/^nstime_update_mock(nstime_t *time) {$/;"	f	file:
nstime_update_orig	deps/jemalloc/test/unit/decay.c	/^static nstime_update_t *nstime_update_orig;$/;"	v	file:
nstime_update_t	deps/jemalloc/include/jemalloc/internal/nstime.h	/^typedef bool (nstime_update_t)(nstime_t *);$/;"	t
nthreads	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	atomic_u_t		nthreads[2];$/;"	m	struct:arena_s
nthreads	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	unsigned nthreads;$/;"	m	struct:ctl_arena_s
nticks	deps/jemalloc/include/jemalloc/internal/ticker.h	/^	int32_t nticks;$/;"	m	struct:__anon160
ntohu64	src/endianconv.h	68;"	d
ntohu64	src/endianconv.h	71;"	d
nul	src/setproctitle.c	/^	char *nul;$/;"	m	struct:__anon60	file:
null	src/server.h	/^    *colon, *queued, *null[4], *nullarray[4], *emptymap[4], *emptyset[4],$/;"	m	struct:sharedObjectsStruct
null_out_result_on_error	deps/jemalloc/src/jemalloc.c	/^	bool null_out_result_on_error;$/;"	m	struct:static_opts_s	file:
nullarray	src/server.h	/^    *colon, *queued, *null[4], *nullarray[4], *emptymap[4], *emptyset[4],$/;"	m	struct:sharedObjectsStruct
num_dbs	src/server.h	/^    size_t num_dbs;$/;"	m	struct:redisMemOverhead
num_items	deps/jemalloc/src/jemalloc.c	/^	size_t num_items;$/;"	m	struct:dynamic_opts_s	file:
num_runs	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^	uint64_t num_runs;$/;"	m	struct:background_thread_stats_s
num_threads	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^	size_t num_threads;$/;"	m	struct:background_thread_stats_s
num_threads	src/redis-benchmark.c	/^    int num_threads;$/;"	m	struct:config	file:
number	deps/lua/src/lua_cjson.c	/^        double number;$/;"	m	union:__anon103::__anon104	file:
numclients	src/redis-benchmark.c	/^    int numclients;$/;"	m	struct:config	file:
numele	src/rax.h	/^    uint64_t numele;$/;"	m	struct:rax
numeric	src/config.c	/^    numericConfigData numeric;$/;"	m	union:typeData	file:
numericConfigData	src/config.c	/^typedef struct numericConfigData {$/;"	s	file:
numericConfigData	src/config.c	/^} numericConfigData;$/;"	t	typeref:struct:numericConfigData	file:
numericType	src/config.c	/^typedef enum numericType {$/;"	g	file:
numericType	src/config.c	/^} numericType;$/;"	t	typeref:enum:numericType	file:
numeric_type	src/config.c	/^    numericType numeric_type; \/* An enum indicating the type of this value *\/$/;"	m	struct:numericConfigData	file:
numfieldsleft	src/module.c	/^            int64_t numfieldsleft; \/* Fields left to fetch for current entry. *\/$/;"	m	struct:RedisModuleKey::__anon62::__anon64	file:
numints	deps/lua/src/ltable.c	69;"	d	file:
numkeys	src/server.h	/^    int numkeys;                        \/* Number of key indices return *\/$/;"	m	struct:__anon21
numnodes	src/rax.h	/^    uint64_t numnodes;$/;"	m	struct:rax
numops	src/server.h	/^    int numops;$/;"	m	struct:redisOpArray
numparams	deps/lua/src/lobject.h	/^  lu_byte numparams;$/;"	m	struct:Proto
numreplicas	src/server.h	/^    int numreplicas;        \/* Number of replicas we are waiting for ACK. *\/$/;"	m	struct:blockingState
numslaves	src/cluster.h	/^    int numslaves;  \/* Number of slave nodes, if this is a master *\/$/;"	m	struct:clusterNode
numslots	src/cluster.h	/^    int numslots;   \/* Number of slots handled by this node *\/$/;"	m	struct:clusterNode
numusearray	deps/lua/src/ltable.c	/^static int numusearray (const Table *t, int *nums) {$/;"	f	file:
numusehash	deps/lua/src/ltable.c	/^static int numusehash (const Table *t, int *nums, int *pnasize) {$/;"	f	file:
nunpurged	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	size_t			nunpurged;$/;"	m	struct:arena_decay_s
nupdates_mock	deps/jemalloc/test/unit/decay.c	/^static unsigned nupdates_mock;$/;"	v	file:
nups	deps/lua/src/lobject.h	/^  lu_byte nups;  \/* number of upvalues *\/$/;"	m	struct:Proto
nups	deps/lua/src/lua.h	/^  int nups;		\/* (u) number of upvalues *\/$/;"	m	struct:lua_Debug
nuse	deps/lua/src/lstate.h	/^  lu_int32 nuse;  \/* number of elements *\/$/;"	m	struct:stringtable
nval	deps/lua/src/lparser.h	/^    lua_Number nval;$/;"	m	union:expdesc::__anon94
nvalue	deps/lua/src/lobject.h	93;"	d
o	src/server.h	/^    unsigned char o[20];    \/* Ordered elements. *\/$/;"	m	struct:RedisModuleDigest
o2s	deps/jemalloc/src/malloc_io.c	/^o2s(uintmax_t x, bool alt_form, char *s, size_t *slen_p) {$/;"	f	file:
o_down_since_time	src/sentinel.c	/^    mstime_t o_down_since_time; \/* Objectively down since time. *\/$/;"	m	struct:sentinelRedisInstance	file:
obj	deps/hiredis/read.h	/^    void *obj; \/* holds user-generated value for a read task *\/$/;"	m	struct:redisReadTask
obj	src/server.h	/^    robj *obj;$/;"	m	struct:_redisSortObject
obj2gco	deps/lua/src/lstate.h	162;"	d
object	src/acl.c	/^    sds object;         \/* The key name or command name. *\/$/;"	m	struct:ACLLogEntry	file:
objectCommand	src/object.c	/^void objectCommand(client *c) {$/;"	f
objectCommandLookup	src/object.c	/^robj *objectCommandLookup(client *c, robj *key) {$/;"	f
objectCommandLookupOrReply	src/object.c	/^robj *objectCommandLookupOrReply(client *c, robj *key, robj *reply) {$/;"	f
objectComputeSize	src/object.c	/^size_t objectComputeSize(robj *o, size_t sample_size) {$/;"	f
objectKeyHeapPointerValueDictType	src/server.c	/^dictType objectKeyHeapPointerValueDictType = {$/;"	v
objectKeyPointerValueDictType	src/server.c	/^dictType objectKeyPointerValueDictType = {$/;"	v
objectSetLRUOrLFU	src/object.c	/^int objectSetLRUOrLFU(robj *val, long long lfu_freq, long long lru_idle,$/;"	f
objroot	deps/jemalloc/Makefile	/^objroot := $/;"	m
obuf	deps/hiredis/hiredis.h	/^    char *obuf; \/* Write buffer *\/$/;"	m	struct:redisContext
obuf	src/redis-benchmark.c	/^    sds obuf;$/;"	m	struct:_client	file:
obuf_soft_limit_reached_time	src/server.h	/^    time_t obuf_soft_limit_reached_time;$/;"	m	struct:client
ofd	deps/linenoise/linenoise.c	/^    int ofd;            \/* Terminal stdout file descriptor. *\/$/;"	m	struct:linenoiseState	file:
offset	src/bitops.c	/^    uint64_t offset;    \/* Bitfield offset. *\/$/;"	m	struct:bitfieldOp	file:
offset	src/cluster.h	/^    uint64_t offset;    \/* Master replication offset if node is a master or$/;"	m	struct:__anon43
offset	src/quicklist.h	/^    int offset;$/;"	m	struct:quicklistEntry
offset	src/quicklist.h	/^    long offset; \/* offset in current ziplist *\/$/;"	m	struct:quicklistIter
offset_state	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	atomic_zu_t		offset_state;$/;"	m	struct:arena_s
offsetof	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_decls.h	64;"	d
ok	src/intset.c	/^static void ok(void) {$/;"	f	file:
ok	src/server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *pong, *space,$/;"	m	struct:sharedObjectsStruct
oldpos	deps/linenoise/linenoise.c	/^    size_t oldpos;      \/* Previous refresh cursor position. *\/$/;"	m	struct:linenoiseState	file:
onConnect	deps/hiredis/async.h	/^    redisConnectCallback *onConnect;$/;"	m	struct:redisAsyncContext
onDisconnect	deps/hiredis/async.h	/^    redisDisconnectCallback *onDisconnect;$/;"	m	struct:redisAsyncContext
on_close	deps/hiredis/adapters/libuv.h	/^static void on_close(uv_handle_t* handle) {$/;"	f
oom	src/rax.h	/^    int oom; \/* True if pushing into this stack failed for OOM at some point. *\/$/;"	m	struct:raxStack
oom_score_adj	src/server.h	/^    int oom_score_adj;                            \/* If true, oom_score_adj is managed *\/$/;"	m	struct:redisServer
oom_score_adj_base	src/server.h	/^    int oom_score_adj_base;         \/* Base oom_score_adj value, as observed on startup *\/$/;"	m	struct:redisServer
oom_score_adj_enum	src/config.c	/^configEnum oom_score_adj_enum[] = {$/;"	v
oom_score_adj_values	src/server.h	/^    int oom_score_adj_values[CONFIG_OOM_COUNT];   \/* Linux oom_score_adj configuration *\/$/;"	m	struct:redisServer
oom_string	deps/jemalloc/src/jemalloc.c	/^	const char *oom_string;$/;"	m	struct:static_opts_s	file:
oomerr	src/server.h	/^    *busykeyerr, *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,$/;"	m	struct:sharedObjectsStruct
opaque	deps/jemalloc/include/jemalloc/internal/witness.h	/^	void			*opaque;$/;"	m	struct:witness_s
opcode	src/bitops.c	/^    int opcode;         \/* Operation id. *\/$/;"	m	struct:bitfieldOp	file:
open	deps/jemalloc/include/jemalloc/internal/hooks.h	9;"	d
openChildInfoPipe	src/childinfo.c	/^void openChildInfoPipe(void) {$/;"	f
openDirectLogFiledes	src/debug.c	/^int openDirectLogFiledes(void) {$/;"	f
open_cli	tests/integration/redis-cli.tcl	/^    proc open_cli {{opts "-n 9"} {infile ""}} {$/;"	p
open_func	deps/lua/src/lparser.c	/^static void open_func (LexState *ls, FuncState *fs) {$/;"	f	file:
open_key_or_reply	tests/modules/misc.c	/^RedisModuleKey *open_key_or_reply(RedisModuleCtx *ctx, RedisModuleString *keyname, int mode) {$/;"	f
opensslDoLock	deps/hiredis/ssl.c	/^static void opensslDoLock(int mode, int lkid, const char *f, int line) {$/;"	f	file:
openssl_locks	src/tls.c	/^static pthread_mutex_t *openssl_locks;$/;"	v	file:
openupval	deps/lua/src/lstate.h	/^  GCObject *openupval;  \/* list of open upvalues in this stack *\/$/;"	m	struct:lua_State
operator new	deps/jemalloc/src/jemalloc_cpp.cpp	/^operator new(std::size_t size) {$/;"	f
operator new[]	deps/jemalloc/src/jemalloc_cpp.cpp	/^operator new[](std::size_t size) {$/;"	f
opmode	deps/lua/src/lopcodes.c	59;"	d	file:
ops	src/server.h	/^    redisOp *ops;$/;"	m	struct:redisOpArray
opt_abort	deps/jemalloc/src/jemalloc.c	/^bool	opt_abort =$/;"	v
opt_abort_conf	deps/jemalloc/src/jemalloc.c	/^bool	opt_abort_conf =$/;"	v
opt_background_thread	deps/jemalloc/src/background_thread.c	/^bool opt_background_thread = BACKGROUND_THREAD_DEFAULT;$/;"	v
opt_dirty_decay_ms	deps/jemalloc/src/arena.c	/^ssize_t opt_dirty_decay_ms = DIRTY_DECAY_MS_DEFAULT;$/;"	v
opt_dss	deps/jemalloc/src/extent_dss.c	/^const char	*opt_dss = DSS_DEFAULT;$/;"	v
opt_junk	deps/jemalloc/src/jemalloc.c	/^const char	*opt_junk =$/;"	v
opt_junk_alloc	deps/jemalloc/src/jemalloc.c	/^bool	opt_junk_alloc =$/;"	v
opt_junk_free	deps/jemalloc/src/jemalloc.c	/^bool	opt_junk_free =$/;"	v
opt_lg_extent_max_active_fit	deps/jemalloc/src/extent.c	/^size_t opt_lg_extent_max_active_fit = LG_EXTENT_MAX_ACTIVE_FIT_DEFAULT;$/;"	v
opt_lg_prof_interval	deps/jemalloc/src/prof.c	/^ssize_t		opt_lg_prof_interval = LG_PROF_INTERVAL_DEFAULT;$/;"	v
opt_lg_prof_sample	deps/jemalloc/src/prof.c	/^size_t		opt_lg_prof_sample = LG_PROF_SAMPLE_DEFAULT;$/;"	v
opt_lg_tcache_max	deps/jemalloc/src/tcache.c	/^ssize_t	opt_lg_tcache_max = LG_TCACHE_MAXCLASS_DEFAULT;$/;"	v
opt_max_background_threads	deps/jemalloc/src/background_thread.c	/^size_t opt_max_background_threads = MAX_BACKGROUND_THREAD_LIMIT;$/;"	v
opt_metadata_thp	deps/jemalloc/src/base.c	/^metadata_thp_mode_t opt_metadata_thp = METADATA_THP_DEFAULT;$/;"	v
opt_muzzy_decay_ms	deps/jemalloc/src/arena.c	/^ssize_t opt_muzzy_decay_ms = MUZZY_DECAY_MS_DEFAULT;$/;"	v
opt_narenas	deps/jemalloc/src/jemalloc.c	/^unsigned	opt_narenas = 0;$/;"	v
opt_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t opt_node[] = {$/;"	v	file:
opt_percpu_arena	deps/jemalloc/src/arena.c	/^percpu_arena_mode_t opt_percpu_arena = PERCPU_ARENA_DEFAULT;$/;"	v
opt_prof	deps/jemalloc/src/prof.c	/^bool		opt_prof = false;$/;"	v
opt_prof_accum	deps/jemalloc/src/prof.c	/^bool		opt_prof_accum = false;$/;"	v
opt_prof_active	deps/jemalloc/src/prof.c	/^bool		opt_prof_active = true;$/;"	v
opt_prof_final	deps/jemalloc/src/prof.c	/^bool		opt_prof_final = false;$/;"	v
opt_prof_gdump	deps/jemalloc/src/prof.c	/^bool		opt_prof_gdump = false;$/;"	v
opt_prof_leak	deps/jemalloc/src/prof.c	/^bool		opt_prof_leak = false;$/;"	v
opt_prof_prefix	deps/jemalloc/src/prof.c	/^char		opt_prof_prefix[$/;"	v
opt_prof_thread_active_init	deps/jemalloc/src/prof.c	/^bool		opt_prof_thread_active_init = true;$/;"	v
opt_retain	deps/jemalloc/src/extent_mmap.c	/^bool	opt_retain =$/;"	v
opt_stats_print	deps/jemalloc/src/stats.c	/^bool opt_stats_print = false;$/;"	v
opt_stats_print_opts	deps/jemalloc/src/stats.c	/^char opt_stats_print_opts[stats_print_tot_num_options+1] = "";$/;"	v
opt_tcache	deps/jemalloc/src/tcache.c	/^bool	opt_tcache = true;$/;"	v
opt_thp	deps/jemalloc/src/pages.c	/^thp_mode_t opt_thp = THP_MODE_DEFAULT;$/;"	v
opt_utrace	deps/jemalloc/src/jemalloc.c	/^bool	opt_utrace = false;$/;"	v
opt_xmalloc	deps/jemalloc/src/jemalloc.c	/^bool	opt_xmalloc = false;$/;"	v
opt_zero	deps/jemalloc/src/jemalloc.c	/^bool	opt_zero = false;$/;"	v
optimization_level	src/quicklist.c	/^static const size_t optimization_level[] = {4096, 8192, 16384, 32768, 65536};$/;"	v	file:
options	deps/hiredis/hiredis.h	/^    int options;$/;"	m	struct:__anon80
options	src/module.c	/^    int options;    \/* Module options and capabilities. *\/$/;"	m	struct:RedisModule	file:
options	src/redis-cli.c	/^    char *options;$/;"	m	struct:clusterManagerCommandDef	file:
optsize	deps/lua/src/lua_struct.c	/^static size_t optsize (lua_State *L, char opt, const char **fmt) {$/;"	f	file:
org	src/redis-cli.c	/^    struct commandHelp *org;$/;"	m	struct:__anon13	typeref:struct:__anon13::commandHelp	file:
orig_commands	src/server.h	/^    dict *orig_commands;        \/* Command table before command renaming. *\/$/;"	m	struct:redisServer
orig_termios	deps/linenoise/linenoise.c	/^static struct termios orig_termios; \/* In order to restore at exit.*\/$/;"	v	typeref:struct:termios	file:
original_argc	src/server.h	/^    int original_argc;      \/* Num of arguments of original command if arguments were rewritten. *\/$/;"	m	struct:client
original_argv	src/server.h	/^    robj **original_argv;   \/* Arguments of original command if arguments were rewritten. *\/$/;"	m	struct:client
orphaned_time	src/cluster.h	/^    mstime_t orphaned_time;     \/* Starting time of orphaned master condition *\/$/;"	m	struct:clusterNode
os	deps/jemalloc/scripts/gen_travis.py	/^        os = os_unusual$/;"	v
os	deps/jemalloc/scripts/gen_travis.py	/^    os = os_default$/;"	v
os_clock	deps/lua/src/loslib.c	/^static int os_clock (lua_State *L) {$/;"	f	file:
os_date	deps/lua/src/loslib.c	/^static int os_date (lua_State *L) {$/;"	f	file:
os_default	deps/jemalloc/scripts/gen_travis.py	/^os_default = 'linux'$/;"	v
os_difftime	deps/lua/src/loslib.c	/^static int os_difftime (lua_State *L) {$/;"	f	file:
os_execute	deps/lua/src/loslib.c	/^static int os_execute (lua_State *L) {$/;"	f	file:
os_exit	deps/lua/src/loslib.c	/^static int os_exit (lua_State *L) {$/;"	f	file:
os_getenv	deps/lua/src/loslib.c	/^static int os_getenv (lua_State *L) {$/;"	f	file:
os_overcommits	deps/jemalloc/src/pages.c	/^static bool	os_overcommits;$/;"	v	file:
os_overcommits_proc	deps/jemalloc/src/pages.c	/^os_overcommits_proc(void) {$/;"	f	file:
os_overcommits_sysctl	deps/jemalloc/src/pages.c	/^os_overcommits_sysctl(void) {$/;"	f	file:
os_page	deps/jemalloc/src/pages.c	/^static size_t	os_page;$/;"	v	file:
os_page_detect	deps/jemalloc/src/pages.c	/^os_page_detect(void) {$/;"	f	file:
os_pages_map	deps/jemalloc/src/pages.c	/^os_pages_map(void *addr, size_t size, size_t alignment, bool *commit) {$/;"	f	file:
os_pages_trim	deps/jemalloc/src/pages.c	/^os_pages_trim(void *addr, size_t alloc_size, size_t leadsize, size_t size,$/;"	f	file:
os_pages_unmap	deps/jemalloc/src/pages.c	/^os_pages_unmap(void *addr, size_t size) {$/;"	f	file:
os_pushresult	deps/lua/src/loslib.c	/^static int os_pushresult (lua_State *L, int i, const char *filename) {$/;"	f	file:
os_remove	deps/lua/src/loslib.c	/^static int os_remove (lua_State *L) {$/;"	f	file:
os_rename	deps/lua/src/loslib.c	/^static int os_rename (lua_State *L) {$/;"	f	file:
os_setlocale	deps/lua/src/loslib.c	/^static int os_setlocale (lua_State *L) {$/;"	f	file:
os_time	deps/lua/src/loslib.c	/^static int os_time (lua_State *L) {$/;"	f	file:
os_tmpname	deps/lua/src/loslib.c	/^static int os_tmpname (lua_State *L) {$/;"	f	file:
os_unusual	deps/jemalloc/scripts/gen_travis.py	/^os_unusual = 'osx'$/;"	v
ossl_locks	deps/hiredis/ssl.c	/^static sslLockType* ossl_locks;$/;"	v	file:
ot	src/config.c	/^        off_t *ot;$/;"	m	union:numericConfigData::__anon45	file:
otherwhite	deps/lua/src/lgc.h	69;"	d
outofrangeerr	src/server.h	/^    *outofrangeerr, *noscripterr, *loadingerr, *slowscripterr, *bgsaveerr,$/;"	m	struct:sharedObjectsStruct
output	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	emitter_output_t output;$/;"	m	struct:emitter_s
output	deps/lua/src/luac.c	/^static const char* output=Output;	\/* actual output file name *\/$/;"	v	file:
output	src/redis-cli.c	/^    int output; \/* output mode, see OUTPUT_* defines *\/$/;"	m	struct:config	file:
overMaxmemoryAfterAlloc	src/evict.c	/^int overMaxmemoryAfterAlloc(size_t moremem) {$/;"	f
overhead_ht_expires	src/server.h	/^        size_t overhead_ht_expires;$/;"	m	struct:redisMemOverhead::__anon19
overhead_ht_main	src/server.h	/^        size_t overhead_ht_main;$/;"	m	struct:redisMemOverhead::__anon19
overhead_total	src/server.h	/^    size_t overhead_total;$/;"	m	struct:redisMemOverhead
owtype	src/bitops.c	/^    int owtype;         \/* Overflow type to use. *\/$/;"	m	struct:bitfieldOp	file:
p	deps/jemalloc/src/jemalloc.c	/^	void	*p;	\/* Input pointer (as in realloc(p, s)). *\/$/;"	m	struct:__anon132	file:
p	deps/lua/src/lauxlib.h	/^  char *p;			\/* current position in buffer *\/$/;"	m	struct:luaL_Buffer
p	deps/lua/src/lobject.h	/^  struct Proto **p;  \/* functions defined inside the function *\/$/;"	m	struct:Proto	typeref:struct:Proto::Proto
p	deps/lua/src/lobject.h	/^  struct Proto *p;$/;"	m	struct:LClosure	typeref:struct:LClosure::Proto
p	deps/lua/src/lobject.h	/^  void *p;$/;"	m	union:__anon106
p	deps/lua/src/lstate.h	/^  struct Proto p;$/;"	m	union:GCObject	typeref:struct:GCObject::Proto
p	deps/lua/src/lua_cmsgpack.c	/^    const unsigned char *p;$/;"	m	struct:mp_cur	file:
p	deps/lua/src/lzio.h	/^  const char *p;		\/* current position in buffer *\/$/;"	m	struct:Zio
p	src/ziplist.c	/^    unsigned char *p;            \/* Pointer to the very start of the entry, that$/;"	m	struct:zlentry	file:
p_test	deps/jemalloc/test/src/test.c	/^p_test(test_t *t, ...) {$/;"	f
p_test_fail	deps/jemalloc/test/src/test.c	/^p_test_fail(const char *prefix, const char *message) {$/;"	f
p_test_fini	deps/jemalloc/test/src/test.c	/^p_test_fini(void) {$/;"	f
p_test_impl	deps/jemalloc/test/src/test.c	/^p_test_impl(bool do_malloc_init, bool do_reentrant, test_t *t, va_list ap) {$/;"	f	file:
p_test_init	deps/jemalloc/test/src/test.c	/^p_test_init(const char *name) {$/;"	f
p_test_no_malloc_init	deps/jemalloc/test/src/test.c	/^p_test_no_malloc_init(test_t *t, ...) {$/;"	f
p_test_no_reentrancy	deps/jemalloc/test/src/test.c	/^p_test_no_reentrancy(test_t *t, ...) {$/;"	f
pa_head	src/module.c	/^    struct RedisModulePoolAllocBlock *pa_head;$/;"	m	struct:RedisModuleCtx	typeref:struct:RedisModuleCtx::RedisModulePoolAllocBlock	file:
pactive	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	size_t pactive;$/;"	m	struct:ctl_arena_s
pages_boot	deps/jemalloc/src/pages.c	/^pages_boot(void) {$/;"	f
pages_can_purge_forced	deps/jemalloc/include/jemalloc/internal/pages.h	/^static const bool pages_can_purge_forced =$/;"	v
pages_can_purge_lazy	deps/jemalloc/include/jemalloc/internal/pages.h	/^static const bool pages_can_purge_lazy =$/;"	v
pages_can_purge_lazy_runtime	deps/jemalloc/src/pages.c	/^static bool pages_can_purge_lazy_runtime = true;$/;"	v	file:
pages_commit	deps/jemalloc/src/pages.c	/^pages_commit(void *addr, size_t size) {$/;"	f
pages_commit_impl	deps/jemalloc/src/pages.c	/^pages_commit_impl(void *addr, size_t size, bool commit) {$/;"	f	file:
pages_decommit	deps/jemalloc/src/pages.c	/^pages_decommit(void *addr, size_t size) {$/;"	f
pages_dodump	deps/jemalloc/src/pages.c	/^pages_dodump(void *addr, size_t size) {$/;"	f
pages_dontdump	deps/jemalloc/src/pages.c	/^pages_dontdump(void *addr, size_t size) {$/;"	f
pages_huge	deps/jemalloc/src/pages.c	/^pages_huge(void *addr, size_t size) {$/;"	f
pages_huge_impl	deps/jemalloc/src/pages.c	/^pages_huge_impl(void *addr, size_t size, bool aligned) {$/;"	f	file:
pages_huge_unaligned	deps/jemalloc/src/pages.c	/^pages_huge_unaligned(void *addr, size_t size) {$/;"	f	file:
pages_map	deps/jemalloc/src/pages.c	/^pages_map(void *addr, size_t size, size_t alignment, bool *commit) {$/;"	f
pages_map_slow	deps/jemalloc/src/pages.c	/^pages_map_slow(size_t size, size_t alignment, bool *commit) {$/;"	f	file:
pages_nohuge	deps/jemalloc/src/pages.c	/^pages_nohuge(void *addr, size_t size) {$/;"	f
pages_nohuge_impl	deps/jemalloc/src/pages.c	/^pages_nohuge_impl(void *addr, size_t size, bool aligned) {$/;"	f	file:
pages_nohuge_unaligned	deps/jemalloc/src/pages.c	/^pages_nohuge_unaligned(void *addr, size_t size) {$/;"	f	file:
pages_purge_forced	deps/jemalloc/src/pages.c	/^pages_purge_forced(void *addr, size_t size) {$/;"	f
pages_purge_lazy	deps/jemalloc/src/pages.c	/^pages_purge_lazy(void *addr, size_t size) {$/;"	f
pages_set_thp_state	deps/jemalloc/src/pages.c	/^pages_set_thp_state (void *ptr, size_t size) {$/;"	f
pages_unmap	deps/jemalloc/src/pages.c	/^pages_unmap(void *addr, size_t size) {$/;"	f
panic	deps/lua/src/lauxlib.c	/^static int panic (lua_State *L) {$/;"	f	file:
panic	deps/lua/src/lstate.h	/^  lua_CFunction panic;  \/* to be called in unprotected errors *\/$/;"	m	struct:global_State
panic	src/redisassert.h	44;"	d
panicAbort	deps/hiredis/examples/example-push.c	38;"	d	file:
parallel_syncs	src/sentinel.c	/^    int parallel_syncs; \/* How many slaves to reconfigure at same time. *\/$/;"	m	struct:sentinelRedisInstance	file:
params	src/help.h	/^  char *params;$/;"	m	struct:commandHelp
parent	deps/hiredis/read.h	/^    struct redisReadTask *parent; \/* parent task *\/$/;"	m	struct:redisReadTask	typeref:struct:redisReadTask::redisReadTask
parity	deps/jemalloc/test/src/SFMT.c	/^static uint32_t parity[4] = {PARITY1, PARITY2, PARITY3, PARITY4};$/;"	v	file:
parlist	deps/lua/src/lparser.c	/^static void parlist (LexState *ls) {$/;"	f	file:
parseClusterNodeAddress	src/redis-cli.c	/^static int parseClusterNodeAddress(char *addr, char **ip_ptr, int *port_ptr,$/;"	f	file:
parseEnv	src/redis-cli.c	/^static void parseEnv() {$/;"	f	file:
parseExtendedStringArgumentsOrReply	src/t_string.c	/^int parseExtendedStringArgumentsOrReply(client *c, int *flags, int *unit, robj **expire, int command_type) {$/;"	f
parseOptions	src/redis-benchmark.c	/^int parseOptions(int argc, const char **argv) {$/;"	f
parseOptions	src/redis-cli.c	/^static int parseOptions(int argc, char **argv) {$/;"	f	file:
parseProtocolsConfig	src/tls.c	/^static int parseProtocolsConfig(const char *str) {$/;"	f	file:
parseRedisUri	src/redis-cli.c	/^static void parseRedisUri(const char *uri) {$/;"	f	file:
parseScanCursorOrReply	src/db.c	/^int parseScanCursorOrReply(client *c, robj *o, unsigned long *cursor) {$/;"	f
parse_options	src/redis-trib.rb	/^def parse_options(cmd)$/;"	f
parse_options	tests/instances.tcl	/^proc parse_options {} {$/;"	p
parser	deps/jemalloc/test/unit/stats_print.c	/^	parser_t	*parser;$/;"	m	struct:__anon121	file:
parser_append	deps/jemalloc/test/unit/stats_print.c	/^parser_append(parser_t *parser, const char *str) {$/;"	f	file:
parser_fini	deps/jemalloc/test/unit/stats_print.c	/^parser_fini(parser_t *parser) {$/;"	f	file:
parser_init	deps/jemalloc/test/unit/stats_print.c	/^parser_init(parser_t *parser, bool verbose) {$/;"	f	file:
parser_parse	deps/jemalloc/test/unit/stats_print.c	/^parser_parse(parser_t *parser) {$/;"	f	file:
parser_parse_array	deps/jemalloc/test/unit/stats_print.c	/^parser_parse_array(parser_t *parser) {$/;"	f	file:
parser_parse_object	deps/jemalloc/test/unit/stats_print.c	/^parser_parse_object(parser_t *parser) {$/;"	f	file:
parser_parse_pair	deps/jemalloc/test/unit/stats_print.c	/^parser_parse_pair(parser_t *parser) {$/;"	f	file:
parser_parse_pairs	deps/jemalloc/test/unit/stats_print.c	/^parser_parse_pairs(parser_t *parser) {$/;"	f	file:
parser_parse_value	deps/jemalloc/test/unit/stats_print.c	/^parser_parse_value(parser_t *parser) {$/;"	f	file:
parser_parse_values	deps/jemalloc/test/unit/stats_print.c	/^parser_parse_values(parser_t *parser) {$/;"	f	file:
parser_s	deps/jemalloc/test/unit/stats_print.c	/^struct parser_s {$/;"	s	file:
parser_t	deps/jemalloc/test/unit/stats_print.c	/^typedef struct parser_s parser_t;$/;"	t	typeref:struct:parser_s	file:
parser_tokenize	deps/jemalloc/test/unit/stats_print.c	/^parser_tokenize(parser_t *parser) {$/;"	f	file:
passwords	src/server.h	/^    list *passwords; \/* A list of SDS valid passwords for this user. *\/$/;"	m	struct:__anon18
patchlistaux	deps/lua/src/lcode.c	/^static void patchlistaux (FuncState *fs, int list, int vtarget, int reg,$/;"	f	file:
patchtestreg	deps/lua/src/lcode.c	/^static int patchtestreg (FuncState *fs, int node, int reg) {$/;"	f	file:
path	deps/hiredis/hiredis.h	/^        char *path;$/;"	m	struct:redisContext::__anon84
path	deps/hiredis/test.c	/^        const char *path;$/;"	m	struct:config::__anon91	file:
path	src/server.h	/^    sds path;$/;"	m	struct:moduleLoadQueueEntry
pathIsBaseName	src/util.c	/^int pathIsBaseName(char *path) {$/;"	f
pattern	src/redis-cli.c	/^    sds pattern;$/;"	m	struct:config	file:
pattern	src/server.h	/^    robj *pattern;$/;"	m	struct:_redisSortOperation
patterns	deps/hiredis/async.h	/^        struct dict *patterns;$/;"	m	struct:redisAsyncContext::__anon88	typeref:struct:redisAsyncContext::__anon88::dict
patterns	src/server.h	/^    list *patterns;  \/* A list of allowed key patterns. If this field is NULL$/;"	m	struct:__anon18
pauseClients	src/networking.c	/^void pauseClients(mstime_t end, pause_type type) {$/;"	f
pause_on_error	tests/instances.tcl	/^proc pause_on_error {} {$/;"	p
pause_type	src/server.h	/^} pause_type;$/;"	t	typeref:enum:__anon17
paused_clients	src/server.h	/^    list *paused_clients;       \/* List of pause clients *\/$/;"	m	struct:redisServer
paused_list_node	src/server.h	/^    listNode *paused_list_node; \/* list node within the pause list *\/$/;"	m	struct:client
pauserehash	src/dict.h	/^    int16_t pauserehash; \/* If >0 rehashing is paused (<0 indicates coding error) *\/$/;"	m	struct:dict
pc	deps/lua/src/lparser.h	/^  int pc;  \/* next position to code (equivalent to `ncode') *\/$/;"	m	struct:FuncState
pc	src/sentinel.c	/^    redisAsyncContext *pc; \/* Hiredis context for Pub \/ Sub. *\/$/;"	m	struct:instanceLink	file:
pcRel	deps/lua/src/ldebug.h	14;"	d
pc_conn_time	src/sentinel.c	/^    mstime_t pc_conn_time; \/* pc connection time. *\/$/;"	m	struct:instanceLink	file:
pc_last_activity	src/sentinel.c	/^    mstime_t pc_last_activity; \/* Last time we received any message. *\/$/;"	m	struct:instanceLink	file:
pdf-LUAL_BUFFERSIZE	deps/lua/doc/manual.html	/^Returns an address to a space of size <a name="pdf-LUAL_BUFFERSIZE"><code>LUAL_BUFFERSIZE<\/code><\/a>$/;"	a
pdf-LUA_CPATH	deps/lua/doc/manual.html	/^using the environment variable <a name="pdf-LUA_CPATH"><code>LUA_CPATH<\/code><\/a>$/;"	a
pdf-LUA_ENVIRONINDEX	deps/lua/doc/manual.html	/^at pseudo-index <a name="pdf-LUA_ENVIRONINDEX"><code>LUA_ENVIRONINDEX<\/code><\/a>.$/;"	a
pdf-LUA_ERRERR	deps/lua/doc/manual.html	/^<li><b><a name="pdf-LUA_ERRERR"><code>LUA_ERRERR<\/code><\/a>:<\/b>$/;"	a
pdf-LUA_ERRFILE	deps/lua/doc/manual.html	/^but it has an extra error code <a name="pdf-LUA_ERRFILE"><code>LUA_ERRFILE<\/code><\/a>$/;"	a
pdf-LUA_ERRMEM	deps/lua/doc/manual.html	/^<li><b><a name="pdf-LUA_ERRMEM"><code>LUA_ERRMEM<\/code><\/a>:<\/b>$/;"	a
pdf-LUA_ERRRUN	deps/lua/doc/manual.html	/^<li><b><a name="pdf-LUA_ERRRUN"><code>LUA_ERRRUN<\/code><\/a>:<\/b>$/;"	a
pdf-LUA_ERRSYNTAX	deps/lua/doc/manual.html	/^<li><b><a name="pdf-LUA_ERRSYNTAX"><code>LUA_ERRSYNTAX<\/code><\/a>:<\/b>$/;"	a
pdf-LUA_GLOBALSINDEX	deps/lua/doc/manual.html	/^always at pseudo-index <a name="pdf-LUA_GLOBALSINDEX"><code>LUA_GLOBALSINDEX<\/code><\/a>.$/;"	a
pdf-LUA_HOOKCALL	deps/lua/doc/manual.html	/^<a name="pdf-LUA_HOOKCALL"><code>LUA_HOOKCALL<\/code><\/a>, <a name="pdf-LUA_HOOKRET"><code>LUA_HOOKRET<\/code><\/a>,$/;"	a
pdf-LUA_HOOKCOUNT	deps/lua/doc/manual.html	/^and <a name="pdf-LUA_HOOKCOUNT"><code>LUA_HOOKCOUNT<\/code><\/a>.$/;"	a
pdf-LUA_HOOKTAILRET	deps/lua/doc/manual.html	/^<a name="pdf-LUA_HOOKTAILRET"><code>LUA_HOOKTAILRET<\/code><\/a>, <a name="pdf-LUA_HOOKLINE"><code>LUA_HOOKLINE<\/code><\/a>,$/;"	a
pdf-LUA_INIT	deps/lua/doc/manual.html	/^the interpreter checks for an environment variable <a name="pdf-LUA_INIT"><code>LUA_INIT<\/code><\/a>.$/;"	a
pdf-LUA_MASKCALL	deps/lua/doc/manual.html	/^<a name="pdf-LUA_MASKCALL"><code>LUA_MASKCALL<\/code><\/a>,$/;"	a
pdf-LUA_MASKCOUNT	deps/lua/doc/manual.html	/^and <a name="pdf-LUA_MASKCOUNT"><code>LUA_MASKCOUNT<\/code><\/a>.$/;"	a
pdf-LUA_MASKLINE	deps/lua/doc/manual.html	/^<a name="pdf-LUA_MASKLINE"><code>LUA_MASKLINE<\/code><\/a>,$/;"	a
pdf-LUA_MASKRET	deps/lua/doc/manual.html	/^<a name="pdf-LUA_MASKRET"><code>LUA_MASKRET<\/code><\/a>,$/;"	a
pdf-LUA_MINSTACK	deps/lua/doc/manual.html	/^it ensures that at least <a name="pdf-LUA_MINSTACK"><code>LUA_MINSTACK<\/code><\/a> stack positions are available.$/;"	a
pdf-LUA_MULTRET	deps/lua/doc/manual.html	/^unless <code>nresults<\/code> is <a name="pdf-LUA_MULTRET"><code>LUA_MULTRET<\/code><\/a>.$/;"	a
pdf-LUA_NOREF	deps/lua/doc/manual.html	/^The constant <a name="pdf-LUA_NOREF"><code>LUA_NOREF<\/code><\/a> is guaranteed to be different$/;"	a
pdf-LUA_PATH	deps/lua/doc/manual.html	/^the value of the environment variable <a name="pdf-LUA_PATH"><code>LUA_PATH<\/code><\/a> or$/;"	a
pdf-LUA_REFNIL	deps/lua/doc/manual.html	/^<a href="#luaL_ref"><code>luaL_ref<\/code><\/a> returns the constant <a name="pdf-LUA_REFNIL"><code>LUA_REFNIL<\/code><\/a>.$/;"	a
pdf-LUA_REGISTRYINDEX	deps/lua/doc/manual.html	/^<a name="pdf-LUA_REGISTRYINDEX"><code>LUA_REGISTRYINDEX<\/code><\/a>.$/;"	a
pdf-LUA_YIELD	deps/lua/doc/manual.html	/^or <a name="pdf-LUA_YIELD"><code>LUA_YIELD<\/code><\/a> if the thread is suspended.$/;"	a
pdf-_G	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-_G"><code>_G<\/code><\/a><\/h3>$/;"	a
pdf-_PROMPT	deps/lua/doc/manual.html	/^If the global variable <a name="pdf-_PROMPT"><code>_PROMPT<\/code><\/a> contains a string,$/;"	a
pdf-_PROMPT2	deps/lua/doc/manual.html	/^Similarly, if the global variable <a name="pdf-_PROMPT2"><code>_PROMPT2<\/code><\/a> contains a string,$/;"	a
pdf-_VERSION	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-_VERSION"><code>_VERSION<\/code><\/a><\/h3>$/;"	a
pdf-assert	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-assert"><code>assert (v [, message])<\/code><\/a><\/h3>$/;"	a
pdf-collectgarbage	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-collectgarbage"><code>collectgarbage ([opt [, arg]])<\/code><\/a><\/h3>$/;"	a
pdf-coroutine	deps/lua/doc/manual.html	/^the basic library and come inside the table <a name="pdf-coroutine"><code>coroutine<\/code><\/a>.$/;"	a
pdf-coroutine.create	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-coroutine.create"><code>coroutine.create (f)<\/code><\/a><\/h3>$/;"	a
pdf-coroutine.resume	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-coroutine.resume"><code>coroutine.resume (co [, val1, &middot;&middot;&middot;])<\/code><\/a><\/h3>$/;"	a
pdf-coroutine.running	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-coroutine.running"><code>coroutine.running ()<\/code><\/a><\/h3>$/;"	a
pdf-coroutine.status	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-coroutine.status"><code>coroutine.status (co)<\/code><\/a><\/h3>$/;"	a
pdf-coroutine.wrap	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-coroutine.wrap"><code>coroutine.wrap (f)<\/code><\/a><\/h3>$/;"	a
pdf-coroutine.yield	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-coroutine.yield"><code>coroutine.yield (&middot;&middot;&middot;)<\/code><\/a><\/h3>$/;"	a
pdf-debug	deps/lua/doc/manual.html	/^inside the <a name="pdf-debug"><code>debug<\/code><\/a> table.$/;"	a
pdf-debug.debug	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-debug.debug"><code>debug.debug ()<\/code><\/a><\/h3>$/;"	a
pdf-debug.getfenv	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-debug.getfenv"><code>debug.getfenv (o)<\/code><\/a><\/h3>$/;"	a
pdf-debug.gethook	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-debug.gethook"><code>debug.gethook ([thread])<\/code><\/a><\/h3>$/;"	a
pdf-debug.getinfo	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-debug.getinfo"><code>debug.getinfo ([thread,] function [, what])<\/code><\/a><\/h3>$/;"	a
pdf-debug.getlocal	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-debug.getlocal"><code>debug.getlocal ([thread,] level, local)<\/code><\/a><\/h3>$/;"	a
pdf-debug.getmetatable	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-debug.getmetatable"><code>debug.getmetatable (object)<\/code><\/a><\/h3>$/;"	a
pdf-debug.getregistry	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-debug.getregistry"><code>debug.getregistry ()<\/code><\/a><\/h3>$/;"	a
pdf-debug.getupvalue	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-debug.getupvalue"><code>debug.getupvalue (func, up)<\/code><\/a><\/h3>$/;"	a
pdf-debug.setfenv	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-debug.setfenv"><code>debug.setfenv (object, table)<\/code><\/a><\/h3>$/;"	a
pdf-debug.sethook	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-debug.sethook"><code>debug.sethook ([thread,] hook, mask [, count])<\/code><\/a><\/h3>$/;"	a
pdf-debug.setlocal	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-debug.setlocal"><code>debug.setlocal ([thread,] level, local, value)<\/code><\/a><\/h3>$/;"	a
pdf-debug.setmetatable	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-debug.setmetatable"><code>debug.setmetatable (object, table)<\/code><\/a><\/h3>$/;"	a
pdf-debug.setupvalue	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-debug.setupvalue"><code>debug.setupvalue (func, up, value)<\/code><\/a><\/h3>$/;"	a
pdf-debug.traceback	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-debug.traceback"><code>debug.traceback ([thread,] [message [, level]])<\/code><\/a><\/h3>$/;"	a
pdf-dofile	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-dofile"><code>dofile ([filename])<\/code><\/a><\/h3>$/;"	a
pdf-error	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-error"><code>error (message [, level])<\/code><\/a><\/h3>$/;"	a
pdf-file:close	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-file:close"><code>file:close ()<\/code><\/a><\/h3>$/;"	a
pdf-file:flush	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-file:flush"><code>file:flush ()<\/code><\/a><\/h3>$/;"	a
pdf-file:lines	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-file:lines"><code>file:lines ()<\/code><\/a><\/h3>$/;"	a
pdf-file:read	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-file:read"><code>file:read (&middot;&middot;&middot;)<\/code><\/a><\/h3>$/;"	a
pdf-file:seek	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-file:seek"><code>file:seek ([whence] [, offset])<\/code><\/a><\/h3>$/;"	a
pdf-file:setvbuf	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-file:setvbuf"><code>file:setvbuf (mode [, size])<\/code><\/a><\/h3>$/;"	a
pdf-file:write	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-file:write"><code>file:write (&middot;&middot;&middot;)<\/code><\/a><\/h3>$/;"	a
pdf-getfenv	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-getfenv"><code>getfenv ([f])<\/code><\/a><\/h3>$/;"	a
pdf-getmetatable	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-getmetatable"><code>getmetatable (object)<\/code><\/a><\/h3>$/;"	a
pdf-io	deps/lua/doc/manual.html	/^all operations are supplied by table <a name="pdf-io"><code>io<\/code><\/a>.$/;"	a
pdf-io.close	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-io.close"><code>io.close ([file])<\/code><\/a><\/h3>$/;"	a
pdf-io.flush	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-io.flush"><code>io.flush ()<\/code><\/a><\/h3>$/;"	a
pdf-io.input	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-io.input"><code>io.input ([file])<\/code><\/a><\/h3>$/;"	a
pdf-io.lines	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-io.lines"><code>io.lines ([filename])<\/code><\/a><\/h3>$/;"	a
pdf-io.open	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-io.open"><code>io.open (filename [, mode])<\/code><\/a><\/h3>$/;"	a
pdf-io.output	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-io.output"><code>io.output ([file])<\/code><\/a><\/h3>$/;"	a
pdf-io.popen	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-io.popen"><code>io.popen (prog [, mode])<\/code><\/a><\/h3>$/;"	a
pdf-io.read	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-io.read"><code>io.read (&middot;&middot;&middot;)<\/code><\/a><\/h3>$/;"	a
pdf-io.stdin	deps/lua/doc/manual.html	/^<a name="pdf-io.stdin"><code>io.stdin<\/code><\/a>, <a name="pdf-io.stdout"><code>io.stdout<\/code><\/a>, and <a name="pdf-io.stderr"><code>io.stderr<\/code><\/a>.$/;"	a
pdf-io.tmpfile	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-io.tmpfile"><code>io.tmpfile ()<\/code><\/a><\/h3>$/;"	a
pdf-io.type	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-io.type"><code>io.type (obj)<\/code><\/a><\/h3>$/;"	a
pdf-io.write	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-io.write"><code>io.write (&middot;&middot;&middot;)<\/code><\/a><\/h3>$/;"	a
pdf-ipairs	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-ipairs"><code>ipairs (t)<\/code><\/a><\/h3>$/;"	a
pdf-load	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-load"><code>load (func [, chunkname])<\/code><\/a><\/h3>$/;"	a
pdf-loadfile	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-loadfile"><code>loadfile ([filename])<\/code><\/a><\/h3>$/;"	a
pdf-loadstring	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-loadstring"><code>loadstring (string [, chunkname])<\/code><\/a><\/h3>$/;"	a
pdf-lua.h	deps/lua/doc/manual.html	/^are declared in the header file <a name="pdf-lua.h"><code>lua.h<\/code><\/a>.$/;"	a
pdf-luai_apicheck	deps/lua/doc/manual.html	/^with a proper definition for the macro <a name="pdf-luai_apicheck"><code>luai_apicheck<\/code><\/a>,$/;"	a
pdf-lualib.h	deps/lua/doc/manual.html	/^These functions are declared in <a name="pdf-lualib.h"><code>lualib.h<\/code><\/a>$/;"	a
pdf-luaopen_base	deps/lua/doc/manual.html	/^<a name="pdf-luaopen_base"><code>luaopen_base<\/code><\/a> (for the basic library),$/;"	a
pdf-luaopen_debug	deps/lua/doc/manual.html	/^and <a name="pdf-luaopen_debug"><code>luaopen_debug<\/code><\/a> (for the debug library).$/;"	a
pdf-luaopen_io	deps/lua/doc/manual.html	/^<a name="pdf-luaopen_io"><code>luaopen_io<\/code><\/a> (for the I\/O library),$/;"	a
pdf-luaopen_math	deps/lua/doc/manual.html	/^<a name="pdf-luaopen_math"><code>luaopen_math<\/code><\/a> (for the mathematical library),$/;"	a
pdf-luaopen_os	deps/lua/doc/manual.html	/^<a name="pdf-luaopen_os"><code>luaopen_os<\/code><\/a> (for the Operating System library),$/;"	a
pdf-luaopen_package	deps/lua/doc/manual.html	/^<a name="pdf-luaopen_package"><code>luaopen_package<\/code><\/a> (for the package library),$/;"	a
pdf-luaopen_string	deps/lua/doc/manual.html	/^<a name="pdf-luaopen_string"><code>luaopen_string<\/code><\/a> (for the string library),$/;"	a
pdf-luaopen_table	deps/lua/doc/manual.html	/^<a name="pdf-luaopen_table"><code>luaopen_table<\/code><\/a> (for the table library),$/;"	a
pdf-math	deps/lua/doc/manual.html	/^It provides all its functions inside the table <a name="pdf-math"><code>math<\/code><\/a>.$/;"	a
pdf-math.abs	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-math.abs"><code>math.abs (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.acos	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-math.acos"><code>math.acos (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.asin	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-math.asin"><code>math.asin (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.atan	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-math.atan"><code>math.atan (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.atan2	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-math.atan2"><code>math.atan2 (y, x)<\/code><\/a><\/h3>$/;"	a
pdf-math.ceil	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-math.ceil"><code>math.ceil (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.cos	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-math.cos"><code>math.cos (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.cosh	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-math.cosh"><code>math.cosh (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.deg	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-math.deg"><code>math.deg (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.exp	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-math.exp"><code>math.exp (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.floor	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-math.floor"><code>math.floor (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.fmod	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-math.fmod"><code>math.fmod (x, y)<\/code><\/a><\/h3>$/;"	a
pdf-math.frexp	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-math.frexp"><code>math.frexp (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.huge	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-math.huge"><code>math.huge<\/code><\/a><\/h3>$/;"	a
pdf-math.ldexp	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-math.ldexp"><code>math.ldexp (m, e)<\/code><\/a><\/h3>$/;"	a
pdf-math.log	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-math.log"><code>math.log (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.log10	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-math.log10"><code>math.log10 (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.max	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-math.max"><code>math.max (x, &middot;&middot;&middot;)<\/code><\/a><\/h3>$/;"	a
pdf-math.min	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-math.min"><code>math.min (x, &middot;&middot;&middot;)<\/code><\/a><\/h3>$/;"	a
pdf-math.modf	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-math.modf"><code>math.modf (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.pi	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-math.pi"><code>math.pi<\/code><\/a><\/h3>$/;"	a
pdf-math.pow	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-math.pow"><code>math.pow (x, y)<\/code><\/a><\/h3>$/;"	a
pdf-math.rad	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-math.rad"><code>math.rad (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.random	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-math.random"><code>math.random ([m [, n]])<\/code><\/a><\/h3>$/;"	a
pdf-math.randomseed	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-math.randomseed"><code>math.randomseed (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.sin	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-math.sin"><code>math.sin (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.sinh	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-math.sinh"><code>math.sinh (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.sqrt	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-math.sqrt"><code>math.sqrt (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.tan	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-math.tan"><code>math.tan (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.tanh	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-math.tanh"><code>math.tanh (x)<\/code><\/a><\/h3>$/;"	a
pdf-module	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-module"><code>module (name [, &middot;&middot;&middot;])<\/code><\/a><\/h3>$/;"	a
pdf-next	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-next"><code>next (table [, index])<\/code><\/a><\/h3>$/;"	a
pdf-os	deps/lua/doc/manual.html	/^This library is implemented through table <a name="pdf-os"><code>os<\/code><\/a>.$/;"	a
pdf-os.clock	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-os.clock"><code>os.clock ()<\/code><\/a><\/h3>$/;"	a
pdf-os.date	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-os.date"><code>os.date ([format [, time]])<\/code><\/a><\/h3>$/;"	a
pdf-os.difftime	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-os.difftime"><code>os.difftime (t2, t1)<\/code><\/a><\/h3>$/;"	a
pdf-os.execute	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-os.execute"><code>os.execute ([command])<\/code><\/a><\/h3>$/;"	a
pdf-os.exit	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-os.exit"><code>os.exit ([code])<\/code><\/a><\/h3>$/;"	a
pdf-os.getenv	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-os.getenv"><code>os.getenv (varname)<\/code><\/a><\/h3>$/;"	a
pdf-os.remove	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-os.remove"><code>os.remove (filename)<\/code><\/a><\/h3>$/;"	a
pdf-os.rename	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-os.rename"><code>os.rename (oldname, newname)<\/code><\/a><\/h3>$/;"	a
pdf-os.setlocale	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-os.setlocale"><code>os.setlocale (locale [, category])<\/code><\/a><\/h3>$/;"	a
pdf-os.time	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-os.time"><code>os.time ([table])<\/code><\/a><\/h3>$/;"	a
pdf-os.tmpname	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-os.tmpname"><code>os.tmpname ()<\/code><\/a><\/h3>$/;"	a
pdf-package	deps/lua/doc/manual.html	/^Everything else is exported in a table <a name="pdf-package"><code>package<\/code><\/a>.$/;"	a
pdf-package.cpath	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-package.cpath"><code>package.cpath<\/code><\/a><\/h3>$/;"	a
pdf-package.loaded	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-package.loaded"><code>package.loaded<\/code><\/a><\/h3>$/;"	a
pdf-package.loaders	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-package.loaders"><code>package.loaders<\/code><\/a><\/h3>$/;"	a
pdf-package.loadlib	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-package.loadlib"><code>package.loadlib (libname, funcname)<\/code><\/a><\/h3>$/;"	a
pdf-package.path	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-package.path"><code>package.path<\/code><\/a><\/h3>$/;"	a
pdf-package.preload	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-package.preload"><code>package.preload<\/code><\/a><\/h3>$/;"	a
pdf-package.seeall	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-package.seeall"><code>package.seeall (module)<\/code><\/a><\/h3>$/;"	a
pdf-pairs	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-pairs"><code>pairs (t)<\/code><\/a><\/h3>$/;"	a
pdf-pcall	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-pcall"><code>pcall (f, arg1, &middot;&middot;&middot;)<\/code><\/a><\/h3>$/;"	a
pdf-print	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-print"><code>print (&middot;&middot;&middot;)<\/code><\/a><\/h3>$/;"	a
pdf-rawequal	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-rawequal"><code>rawequal (v1, v2)<\/code><\/a><\/h3>$/;"	a
pdf-rawget	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-rawget"><code>rawget (table, index)<\/code><\/a><\/h3>$/;"	a
pdf-rawset	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-rawset"><code>rawset (table, index, value)<\/code><\/a><\/h3>$/;"	a
pdf-require	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-require"><code>require (modname)<\/code><\/a><\/h3>$/;"	a
pdf-select	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-select"><code>select (index, &middot;&middot;&middot;)<\/code><\/a><\/h3>$/;"	a
pdf-setfenv	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-setfenv"><code>setfenv (f, table)<\/code><\/a><\/h3>$/;"	a
pdf-setmetatable	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-setmetatable"><code>setmetatable (table, metatable)<\/code><\/a><\/h3>$/;"	a
pdf-string	deps/lua/doc/manual.html	/^<a name="pdf-string"><code>string<\/code><\/a>.$/;"	a
pdf-string.byte	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-string.byte"><code>string.byte (s [, i [, j]])<\/code><\/a><\/h3>$/;"	a
pdf-string.char	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-string.char"><code>string.char (&middot;&middot;&middot;)<\/code><\/a><\/h3>$/;"	a
pdf-string.dump	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-string.dump"><code>string.dump (function)<\/code><\/a><\/h3>$/;"	a
pdf-string.find	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-string.find"><code>string.find (s, pattern [, init [, plain]])<\/code><\/a><\/h3>$/;"	a
pdf-string.format	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-string.format"><code>string.format (formatstring, &middot;&middot;&middot;)<\/code><\/a><\/h3>$/;"	a
pdf-string.gmatch	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-string.gmatch"><code>string.gmatch (s, pattern)<\/code><\/a><\/h3>$/;"	a
pdf-string.gsub	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-string.gsub"><code>string.gsub (s, pattern, repl [, n])<\/code><\/a><\/h3>$/;"	a
pdf-string.len	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-string.len"><code>string.len (s)<\/code><\/a><\/h3>$/;"	a
pdf-string.lower	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-string.lower"><code>string.lower (s)<\/code><\/a><\/h3>$/;"	a
pdf-string.match	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-string.match"><code>string.match (s, pattern [, init])<\/code><\/a><\/h3>$/;"	a
pdf-string.rep	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-string.rep"><code>string.rep (s, n)<\/code><\/a><\/h3>$/;"	a
pdf-string.reverse	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-string.reverse"><code>string.reverse (s)<\/code><\/a><\/h3>$/;"	a
pdf-string.sub	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-string.sub"><code>string.sub (s, i [, j])<\/code><\/a><\/h3>$/;"	a
pdf-string.upper	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-string.upper"><code>string.upper (s)<\/code><\/a><\/h3>$/;"	a
pdf-table	deps/lua/doc/manual.html	/^It provides all its functions inside the table <a name="pdf-table"><code>table<\/code><\/a>.$/;"	a
pdf-table.concat	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-table.concat"><code>table.concat (table [, sep [, i [, j]]])<\/code><\/a><\/h3>$/;"	a
pdf-table.insert	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-table.insert"><code>table.insert (table, [pos,] value)<\/code><\/a><\/h3>$/;"	a
pdf-table.maxn	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-table.maxn"><code>table.maxn (table)<\/code><\/a><\/h3>$/;"	a
pdf-table.remove	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-table.remove"><code>table.remove (table [, pos])<\/code><\/a><\/h3>$/;"	a
pdf-table.sort	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-table.sort"><code>table.sort (table [, comp])<\/code><\/a><\/h3>$/;"	a
pdf-tonumber	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-tonumber"><code>tonumber (e [, base])<\/code><\/a><\/h3>$/;"	a
pdf-tostring	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-tostring"><code>tostring (e)<\/code><\/a><\/h3>$/;"	a
pdf-type	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-type"><code>type (v)<\/code><\/a><\/h3>$/;"	a
pdf-unpack	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-unpack"><code>unpack (list [, i [, j]])<\/code><\/a><\/h3>$/;"	a
pdf-xpcall	deps/lua/doc/manual.html	/^<hr><h3><a name="pdf-xpcall"><code>xpcall (f, err)<\/code><\/a><\/h3>$/;"	a
pdirty	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	size_t pdirty;$/;"	m	struct:ctl_arena_s
peak_allocated	src/server.h	/^    size_t peak_allocated;$/;"	m	struct:redisMemOverhead
peak_perc	src/server.h	/^    float peak_perc;$/;"	m	struct:redisMemOverhead
peek_next_value_from_index	deps/hdr_histogram/hdr_histogram.c	/^static int64_t peek_next_value_from_index(struct hdr_iter* iter)$/;"	f	file:
peerid	src/server.h	/^    sds peerid;             \/* Cached peer ID. *\/$/;"	m	struct:client
peerid	src/slowlog.h	/^    sds peerid;         \/* Client network address. *\/$/;"	m	struct:slowlogEntry
pel	src/stream.h	/^    rax *pel;                   \/* Consumer specific pending entries list: all$/;"	m	struct:streamConsumer
pel	src/stream.h	/^    rax *pel;               \/* Pending entries list. This is a radix tree that$/;"	m	struct:streamCG
pending	src/redis-benchmark.c	/^    int pending;            \/* Number of pending requests (replies to consume) *\/$/;"	m	struct:_client	file:
pendingWrite	deps/hiredis/ssl.c	/^    int pendingWrite;$/;"	m	struct:redisSSL	file:
pending_commands	src/sentinel.c	/^    int pending_commands;  \/* Number of commands sent waiting for a reply. *\/$/;"	m	struct:instanceLink	file:
pending_fds	src/ae_evport.c	/^    int     pending_fds[MAX_EVENT_BATCHSZ];     \/* pending fds *\/$/;"	m	struct:aeApiState	file:
pending_list	src/tls.c	/^static list *pending_list = NULL;$/;"	v	file:
pending_list_node	src/tls.c	/^    listNode *pending_list_node;$/;"	m	struct:tls_connection	file:
pending_masks	src/ae_evport.c	/^    int     pending_masks[MAX_EVENT_BATCHSZ];   \/* pending fds' masks *\/$/;"	m	struct:aeApiState	file:
pending_querybuf	src/server.h	/^    sds pending_querybuf;   \/* If this client is flagged as master, this buffer$/;"	m	struct:client
pending_subs	deps/hiredis/async.h	/^    int pending_subs;$/;"	m	struct:redisCallback
per_phycpu_arena	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^	per_phycpu_arena               = 4  \/* Hyper threads share arena. *\/$/;"	e	enum:__anon161
per_phycpu_arena_uninit	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^	per_phycpu_arena_uninit        = 1,$/;"	e	enum:__anon161
percentDecode	src/redis-cli.c	/^static sds percentDecode(const char *pe, size_t len) {$/;"	f	file:
percentile	deps/hdr_histogram/hdr_histogram.h	/^    double percentile;$/;"	m	struct:hdr_iter_percentiles
percentile_iter_next	deps/hdr_histogram/hdr_histogram.c	/^static bool percentile_iter_next(struct hdr_iter* iter)$/;"	f	file:
percentile_to_iterate_to	deps/hdr_histogram/hdr_histogram.h	/^    double percentile_to_iterate_to;$/;"	m	struct:hdr_iter_percentiles
percentiles	deps/hdr_histogram/hdr_histogram.h	/^        struct hdr_iter_percentiles percentiles;$/;"	m	union:hdr_iter::__anon117	typeref:struct:hdr_iter::__anon117::hdr_iter_percentiles
percpu_arena	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^	percpu_arena                   = 3,$/;"	e	enum:__anon161
percpu_arena_as_initialized	deps/jemalloc/src/jemalloc.c	/^percpu_arena_as_initialized(percpu_arena_mode_t mode) {$/;"	f	file:
percpu_arena_choose	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_a.h	/^percpu_arena_choose(void) {$/;"	f
percpu_arena_disabled	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^	percpu_arena_disabled          = 2,$/;"	e	enum:__anon161
percpu_arena_ind_limit	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_a.h	/^percpu_arena_ind_limit(percpu_arena_mode_t mode) {$/;"	f
percpu_arena_mode_enabled_base	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^	percpu_arena_mode_enabled_base = 3,$/;"	e	enum:__anon161
percpu_arena_mode_names	deps/jemalloc/src/arena.c	/^const char *percpu_arena_mode_names[] = {$/;"	v
percpu_arena_mode_names_base	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^	percpu_arena_mode_names_base   = 0, \/* Used for options processing. *\/$/;"	e	enum:__anon161
percpu_arena_mode_names_limit	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^	percpu_arena_mode_names_limit  = 3, \/* Used for options processing. *\/$/;"	e	enum:__anon161
percpu_arena_mode_t	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^} percpu_arena_mode_t;$/;"	t	typeref:enum:__anon161
percpu_arena_uninit	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^	percpu_arena_uninit            = 0,$/;"	e	enum:__anon161
percpu_arena_update	deps/jemalloc/include/jemalloc/internal/arena_inlines_a.h	/^percpu_arena_update(tsd_t *tsd, unsigned cpu) {$/;"	f
performEvictions	src/evict.c	/^int performEvictions(void) {$/;"	f
period	src/latency.h	/^    time_t period;          \/* Number of seconds since first event and now. *\/$/;"	m	struct:latencyStats
period_certification	deps/jemalloc/test/src/SFMT.c	/^static void period_certification(sfmt_t *ctx) {$/;"	f	file:
persist	src/server.h	/^    *script, *replconf, *eval, *persist, *set, *pexpireat, *pexpire, $/;"	m	struct:sharedObjectsStruct
persistCommand	src/expire.c	/^void persistCommand(client *c) {$/;"	f
persistenceCallback	tests/modules/hooks.c	/^void persistenceCallback(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)$/;"	f
pexpire	src/server.h	/^    *script, *replconf, *eval, *persist, *set, *pexpireat, *pexpire, $/;"	m	struct:sharedObjectsStruct
pexpireCommand	src/expire.c	/^void pexpireCommand(client *c) {$/;"	f
pexpireCommand	src/server.h	/^                        *expireCommand, *pexpireCommand, *xclaimCommand,$/;"	m	struct:redisServer	typeref:struct:redisServer::
pexpireat	src/server.h	/^    *script, *replconf, *eval, *persist, *set, *pexpireat, *pexpire, $/;"	m	struct:sharedObjectsStruct
pexpireatCommand	src/expire.c	/^void pexpireatCommand(client *c) {$/;"	f
pfaddCommand	src/hyperloglog.c	/^void pfaddCommand(client *c) {$/;"	f
pfcountCommand	src/hyperloglog.c	/^void pfcountCommand(client *c) {$/;"	f
pfdebugCommand	src/hyperloglog.c	/^void pfdebugCommand(client *c) {$/;"	f
pfmergeCommand	src/hyperloglog.c	/^void pfmergeCommand(client *c) {$/;"	f
pfselftestCommand	src/hyperloglog.c	/^void pfselftestCommand(client *c) {$/;"	f
ph	deps/jemalloc/include/jemalloc/internal/ph.h	27;"	d
ph_gen	deps/jemalloc/include/jemalloc/internal/ph.h	211;"	d
ph_gen	deps/jemalloc/src/extent.c	/^ph_gen(, extent_heap_, extent_heap_t, extent_t, ph_link, extent_snad_comp)$/;"	f
ph_link	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^	phn(extent_t)		ph_link;$/;"	m	struct:extent_s
ph_merge_aux	deps/jemalloc/include/jemalloc/internal/ph.h	170;"	d
ph_merge_children	deps/jemalloc/include/jemalloc/internal/ph.h	183;"	d
ph_merge_siblings	deps/jemalloc/include/jemalloc/internal/ph.h	83;"	d
ph_proto	deps/jemalloc/include/jemalloc/internal/ph.h	197;"	d
phn	deps/jemalloc/include/jemalloc/internal/ph.h	19;"	d
phn_lchild_get	deps/jemalloc/include/jemalloc/internal/ph.h	33;"	d
phn_lchild_set	deps/jemalloc/include/jemalloc/internal/ph.h	35;"	d
phn_merge	deps/jemalloc/include/jemalloc/internal/ph.h	67;"	d
phn_merge_ordered	deps/jemalloc/include/jemalloc/internal/ph.h	51;"	d
phn_next_get	deps/jemalloc/include/jemalloc/internal/ph.h	39;"	d
phn_next_set	deps/jemalloc/include/jemalloc/internal/ph.h	47;"	d
phn_prev_get	deps/jemalloc/include/jemalloc/internal/ph.h	45;"	d
phn_prev_set	deps/jemalloc/include/jemalloc/internal/ph.h	41;"	d
pid	src/sentinel.c	/^    pid_t pid;              \/* Script execution pid. *\/$/;"	m	struct:sentinelScriptJob	file:
pid	src/server.h	/^    pid_t pid;                  \/* Main process pid. *\/$/;"	m	struct:redisServer
pidfile	src/server.h	/^    char *pidfile;              \/* PID file path *\/$/;"	m	struct:redisServer
pind_last	deps/jemalloc/include/jemalloc/internal/base_structs.h	/^	pszind_t	pind_last;$/;"	m	struct:base_s
ping	src/cluster.h	/^    } ping;$/;"	m	union:clusterMsgData	typeref:struct:clusterMsgData::__anon37
ping	src/server.h	/^    *lastid, *ping, *setid, *keepttl, *load, *createconsumer,$/;"	m	struct:sharedObjectsStruct
pingCommand	src/server.c	/^void pingCommand(client *c) {$/;"	f
ping_command_name	tests/modules/commandfilter.c	/^static const char ping_command_name[] = "commandfilter.ping";$/;"	v	file:
ping_recv	src/redis-cli.c	/^    time_t ping_recv;$/;"	m	struct:clusterManagerNode	file:
ping_sent	src/cluster.h	/^    mstime_t ping_sent;      \/* Unix time we sent latest ping *\/$/;"	m	struct:clusterNode
ping_sent	src/cluster.h	/^    uint32_t ping_sent;$/;"	m	struct:__anon31
ping_sent	src/redis-cli.c	/^    time_t ping_sent;$/;"	m	struct:clusterManagerNode	file:
ping_server	tests/support/server.tcl	/^proc ping_server {host port} {$/;"	p
pipeMode	src/redis-cli.c	/^static void pipeMode(void) {$/;"	f	file:
pipe_mode	src/redis-cli.c	/^    int pipe_mode;$/;"	m	struct:config	file:
pipe_timeout	src/redis-cli.c	/^    int pipe_timeout;$/;"	m	struct:config	file:
pipeline	src/redis-benchmark.c	/^    int pipeline;$/;"	m	struct:config	file:
pipeline	src/redis-cli.c	/^    int pipeline;$/;"	m	struct:clusterManagerCommand	file:
pixels	src/lolwut.h	/^    char *pixels;$/;"	m	struct:lwCanvas
pk_funcs	deps/lua/src/loadlib.c	/^static const luaL_Reg pk_funcs[] = {$/;"	v	file:
plen	deps/linenoise/linenoise.c	/^    size_t plen;        \/* Prompt length. *\/$/;"	m	struct:linenoiseState	file:
plus	src/server.h	/^    *busykeyerr, *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,$/;"	m	struct:sharedObjectsStruct
pmain	deps/lua/src/lua.c	/^static int pmain (lua_State *L) {$/;"	f	file:
pmain	deps/lua/src/luac.c	/^static int pmain(lua_State* L)$/;"	f	file:
pmessagebulk	src/server.h	/^    *busykeyerr, *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,$/;"	m	struct:sharedObjectsStruct
pmuzzy	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	size_t pmuzzy;$/;"	m	struct:ctl_arena_s
pointInCircle	tests/unit/geo.tcl	/^proc pointInCircle {radius_km lon lat search_lon search_lat} {$/;"	p
pointInRectangle	tests/unit/geo.tcl	/^proc pointInRectangle {width_km height_km lon lat search_lon search_lat error} {$/;"	p
pointer	src/server.h	/^    unsigned long pointer;$/;"	m	struct:redisFunctionSym
poll	deps/hiredis/sockcompat.h	88;"	d
poll_fd	deps/hiredis/adapters/glib.h	/^    GPollFD poll_fd;$/;"	m	struct:__anon85
pong	src/server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *pong, *space,$/;"	m	struct:sharedObjectsStruct
pong_received	src/cluster.h	/^    mstime_t pong_received;  \/* Unix time we received the pong *\/$/;"	m	struct:clusterNode
pong_received	src/cluster.h	/^    uint32_t pong_received;$/;"	m	struct:__anon31
poolAllocRelease	src/module.c	/^void poolAllocRelease(RedisModuleCtx *ctx) {$/;"	f
pop	src/ziplist.c	/^static unsigned char *pop(unsigned char *zl, int where) {$/;"	f	file:
popGenericCommand	src/t_list.c	/^void popGenericCommand(client *c, int where) {$/;"	f
populate	tests/support/util.tcl	/^proc populate {num prefix size} {$/;"	p
populateCommandTable	src/server.c	/^void populateCommandTable(void) {$/;"	f
populateCommandTableParseFlags	src/server.c	/^int populateCommandTableParseFlags(struct redisCommand *c, char *strflags) {$/;"	f
port	deps/hiredis/hiredis.h	/^            int port;$/;"	m	struct:__anon80::__anon81::__anon82
port	deps/hiredis/hiredis.h	/^        int port;$/;"	m	struct:redisContext::__anon83
port	deps/hiredis/test.c	/^        int port;$/;"	m	struct:config::__anon90	file:
port	deps/hiredis/test.c	/^        int port;$/;"	m	struct:config::__anon92	file:
port	exp/exp2_micro.c	/^    int port;$/;"	m	struct:HotGroupNode	file:
port	src/cluster.h	/^    int port;                   \/* Latest known clients port (TLS or plain). *\/$/;"	m	struct:clusterNode
port	src/cluster.h	/^    uint16_t port;              \/* base port last time it was seen *\/$/;"	m	struct:__anon31
port	src/cluster.h	/^    uint16_t port;      \/* TCP base port number. *\/$/;"	m	struct:__anon43
port	src/module.c	/^    int port;$/;"	m	struct:moduleClusterNodeInfo	file:
port	src/redis-benchmark.c	/^    int port;$/;"	m	struct:clusterNode	file:
port	src/redis-cli.c	/^    int port;$/;"	m	struct:clusterManagerNode	file:
port	src/redismodule.h	/^    uint16_t port;          \/* TCP port. *\/$/;"	m	struct:RedisModuleClientInfo
port	src/sentinel.c	/^    int port;$/;"	m	struct:sentinelAddr	file:
port	src/server.h	/^    int port;                   \/* TCP listening port *\/$/;"	m	struct:redisServer
portfd	src/ae_evport.c	/^    int     portfd;                             \/* event port *\/$/;"	m	struct:aeApiState	file:
pos	deps/hiredis/read.h	/^    size_t pos; \/* Buffer cursor *\/$/;"	m	struct:redisReader
pos	deps/jemalloc/test/unit/stats_print.c	/^	size_t		pos;$/;"	m	struct:__anon121	file:
pos	deps/jemalloc/test/unit/stats_print.c	/^	size_t	pos;$/;"	m	struct:parser_s	file:
pos	deps/linenoise/linenoise.c	/^    size_t pos;         \/* Current cursor position. *\/$/;"	m	struct:linenoiseState	file:
pos	src/rio.h	/^            off_t pos;    \/* pos in buf that was returned *\/$/;"	m	struct:_rio::__anon54::__anon57
pos	src/rio.h	/^            off_t pos;$/;"	m	struct:_rio::__anon54::__anon55
pos	src/rio.h	/^            off_t pos;$/;"	m	struct:_rio::__anon54::__anon58
posrelat	deps/lua/src/lstrlib.c	/^static ptrdiff_t posrelat (ptrdiff_t pos, size_t len) {$/;"	f	file:
possible_compiler_opts	deps/jemalloc/scripts/gen_run_tests.py	/^possible_compiler_opts = [$/;"	v
possible_compilers	deps/jemalloc/scripts/gen_run_tests.py	/^possible_compilers = [('gcc', 'g++'), ('clang', 'clang++')]$/;"	v
possible_config_opts	deps/jemalloc/scripts/gen_run_tests.py	/^possible_config_opts = [$/;"	v
possible_malloc_conf_opts	deps/jemalloc/scripts/gen_run_tests.py	/^possible_malloc_conf_opts = [$/;"	v
post_monitor_cfg	src/server.h	/^    list *post_monitor_cfg;$/;"	m	struct:sentinelConfig
post_reentrancy	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_a.h	/^post_reentrancy(tsd_t *tsd) {$/;"	f
postponeClientRead	src/networking.c	/^int postponeClientRead(client *c) {$/;"	f
postpone_init	deps/jemalloc/src/mutex.c	/^static bool		postpone_init = true;$/;"	v	file:
postponed_arrays	src/module.c	/^    void **postponed_arrays;        \/* To set with RM_ReplySetArrayLength(). *\/$/;"	m	struct:RedisModuleCtx	file:
postponed_arrays_count	src/module.c	/^    int postponed_arrays_count;     \/* Number of entries in postponed_arrays. *\/$/;"	m	struct:RedisModuleCtx	file:
postponed_mutexes	deps/jemalloc/src/mutex.c	/^static malloc_mutex_t	*postponed_mutexes = NULL;$/;"	v	file:
postponed_next	deps/jemalloc/include/jemalloc/internal/mutex.h	/^			malloc_mutex_t		*postponed_next;$/;"	m	struct:malloc_mutex_s::__anon157::__anon158
pow2	deps/jemalloc/include/jemalloc/internal/size_classes.sh	/^pow2() {$/;"	f
pow2_ceil_u32	deps/jemalloc/include/jemalloc/internal/bit_util.h	/^pow2_ceil_u32(uint32_t x) {$/;"	f
pow2_ceil_u64	deps/jemalloc/include/jemalloc/internal/bit_util.h	/^pow2_ceil_u64(uint64_t x) {$/;"	f
pow2_ceil_zu	deps/jemalloc/include/jemalloc/internal/bit_util.h	/^pow2_ceil_zu(size_t x) {$/;"	f
power	deps/hdr_histogram/hdr_histogram.c	/^static int64_t power(int64_t base, int64_t exp)$/;"	f	file:
powerLawRand	src/redis-cli.c	/^long long powerLawRand(long long min, long long max, double alpha) {$/;"	f
powerset	deps/jemalloc/scripts/gen_run_tests.py	/^def powerset(items):$/;"	f
pport	src/cluster.h	/^    int pport;                  \/* Latest known clients plaintext port. Only used$/;"	m	struct:clusterNode
pport	src/cluster.h	/^    uint16_t pport;             \/* plaintext-port, when base port is TLS *\/$/;"	m	struct:__anon31
pport	src/cluster.h	/^    uint16_t pport;      \/* Sender TCP plaintext port, if base port is TLS *\/$/;"	m	struct:__anon43
pqsort	src/pqsort.c	/^pqsort(void *a, size_t n, size_t es,$/;"	f
preMonitorCfgName	src/sentinel.c	/^const char *preMonitorCfgName[] = { $/;"	v
pre_monitor_cfg	src/server.h	/^    list *pre_monitor_cfg;$/;"	m	struct:sentinelConfig
pre_multi_dbnum	src/redis-cli.c	/^    int pre_multi_dbnum;$/;"	m	struct:config	file:
pre_reentrancy	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_a.h	/^pre_reentrancy(tsd_t *tsd, arena_t *arena) {$/;"	f
precheck	deps/lua/src/ldebug.c	/^static int precheck (const Proto *pt) {$/;"	f	file:
precision	src/redis-benchmark.c	/^    int precision;$/;"	m	struct:config	file:
pref	src/redis-cli.c	/^static struct pref {$/;"	s	file:
pref	src/redis-cli.c	/^} pref;$/;"	v	typeref:struct:pref	file:
prefer_server_ciphers	src/server.h	/^    int prefer_server_ciphers;$/;"	m	struct:redisTLSContextConfig
prefix_pending	src/redis-benchmark.c	/^    int prefix_pending;     \/* If non-zero, number of pending prefix commands. Commands$/;"	m	struct:_client	file:
prefixexp	deps/lua/src/lparser.c	/^static void prefixexp (LexState *ls, expdesc *v) {$/;"	f	file:
prefixlen	src/redis-benchmark.c	/^    int prefixlen;          \/* Size in bytes of the pending prefix commands *\/$/;"	m	struct:_client	file:
preinit_state	deps/lua/src/lstate.c	/^static void preinit_state (lua_State *L, global_State *g) {$/;"	f	file:
prepareClientToWrite	src/networking.c	/^int prepareClientToWrite(client *c) {$/;"	f
prepareForShutdown	src/server.c	/^int prepareForShutdown(int flags) {$/;"	f
prepareLuaClient	src/scripting.c	/^void prepareLuaClient(void) {$/;"	f
prepare_value	tests/unit/pendingquerybuf.tcl	/^proc prepare_value {size} {$/;"	p
prepared	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	bool			prepared;$/;"	m	struct:prof_tctx_s
pressure_relief	deps/jemalloc/src/zone.c	/^	size_t (*pressure_relief)(struct _malloc_zone_t *, size_t);$/;"	m	struct:_malloc_zone_t	file:
prev	deps/lua/src/lobject.h	/^      struct UpVal *prev;$/;"	m	struct:UpVal::__anon109::__anon110	typeref:struct:UpVal::__anon109::__anon110::UpVal
prev	deps/lua/src/lparser.c	/^  struct LHS_assign *prev;$/;"	m	struct:LHS_assign	typeref:struct:LHS_assign::LHS_assign	file:
prev	deps/lua/src/lparser.h	/^  struct FuncState *prev;  \/* enclosing function *\/$/;"	m	struct:FuncState	typeref:struct:FuncState::FuncState
prev	src/adlist.h	/^    struct listNode *prev;$/;"	m	struct:listNode	typeref:struct:listNode::listNode
prev	src/ae.h	/^    struct aeTimeEvent *prev;$/;"	m	struct:aeTimeEvent	typeref:struct:aeTimeEvent::aeTimeEvent
prev	src/quicklist.h	/^    struct quicklistNode *prev;$/;"	m	struct:quicklistNode	typeref:struct:quicklistNode::quicklistNode
prev_owner	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^	tsdn_t			*prev_owner;$/;"	m	struct:__anon146
preventCommandAOF	src/server.c	/^void preventCommandAOF(client *c) {$/;"	f
preventCommandLogging	src/server.c	/^void preventCommandLogging(client *c) {$/;"	f
preventCommandPropagation	src/server.c	/^void preventCommandPropagation(client *c) {$/;"	f
preventCommandReplication	src/server.c	/^void preventCommandReplication(client *c) {$/;"	f
previous	deps/lua/src/ldo.c	/^  struct lua_longjmp *previous;$/;"	m	struct:lua_longjmp	typeref:struct:lua_longjmp::lua_longjmp	file:
previous	deps/lua/src/lparser.c	/^  struct BlockCnt *previous;  \/* chain *\/$/;"	m	struct:BlockCnt	typeref:struct:BlockCnt::BlockCnt	file:
previous_requests_finished	src/redis-benchmark.c	/^    redisAtomic int previous_requests_finished;$/;"	m	struct:config	file:
previous_tick	src/redis-benchmark.c	/^    long long previous_tick;$/;"	m	struct:config	file:
previous_time	src/sentinel.c	/^    mstime_t previous_time;         \/* Last time we ran the time handler. *\/$/;"	m	struct:sentinelState	file:
prevrawlen	src/ziplist.c	/^    unsigned int prevrawlen;     \/* Previous entry len. *\/$/;"	m	struct:zlentry	file:
prevrawlensize	src/ziplist.c	/^    unsigned int prevrawlensize; \/* Bytes used to encode the previous entry len*\/$/;"	m	struct:zlentry	file:
primaryexp	deps/lua/src/lparser.c	/^static void primaryexp (LexState *ls, expdesc *v) {$/;"	f	file:
print	deps/jemalloc/src/zone.c	/^	void (*print)(malloc_zone_t *, boolean_t);$/;"	m	struct:malloc_introspection_t	file:
print	deps/lua/etc/min.c	/^static int print(lua_State *L)$/;"	f	file:
printBits	src/bitops.c	/^void printBits(unsigned char *p, unsigned long count) {$/;"	f
printCrashReport	src/debug.c	/^void printCrashReport(void) {$/;"	f
printHotSlot	src/cluster.c	/^void printHotSlot() {$/;"	f
printInstanceHotness	src/server.c	/^void printInstanceHotness() {$/;"	f
printTimer	src/controller.c	/^int printTimer(aeEventLoop *el, int fd, void* privdata, int mask) {$/;"	f
print_avg	utils/lru/test-lru.rb	/^def print_avg$/;"	f
print_escaped	deps/jemalloc/test/unit/emitter.c	/^static bool print_escaped = false;$/;"	v	file:
print_filled_extents	deps/jemalloc/test/integration/xallocx.c	/^print_filled_extents(const void *p, uint8_t c, size_t len) {$/;"	f	file:
print_help_screen	tests/test_helper.tcl	/^proc print_help_screen {} {$/;"	p
print_raw	deps/jemalloc/test/unit/emitter.c	/^static bool print_raw = false;$/;"	v	file:
print_usage	deps/lua/src/lua.c	/^static void print_usage (void) {$/;"	f	file:
print_version	deps/lua/src/lua.c	/^static void print_version (void) {$/;"	f	file:
printf	deps/lua/test/printf.lua	/^function printf(...)$/;"	f
priority	deps/lua/src/lparser.c	/^} priority[] = {  \/* ORDER OPR *\/$/;"	v	typeref:struct:__anon113	file:
private_data	src/connection.h	/^    void *private_data;$/;"	m	struct:connection
privctx	deps/hiredis/hiredis.h	/^    void *privctx;$/;"	m	struct:redisContext
privdata	deps/hiredis/async.h	/^    void *privdata;$/;"	m	struct:redisCallback
privdata	deps/hiredis/dict.h	/^    void *privdata;$/;"	m	struct:dict
privdata	deps/hiredis/hiredis.h	/^    void *privdata;$/;"	m	struct:__anon80
privdata	deps/hiredis/hiredis.h	/^    void *privdata;$/;"	m	struct:redisContext
privdata	deps/hiredis/read.h	/^    void *privdata; \/* user-settable arbitrary field *\/$/;"	m	struct:redisReadTask
privdata	deps/hiredis/read.h	/^    void *privdata;$/;"	m	struct:redisReader
privdata	deps/hiredis/test.c	/^struct privdata {$/;"	s	file:
privdata	src/dict.h	/^    void *privdata;$/;"	m	struct:dict
privdata	src/module.c	/^    void *privdata;     \/* Module private data that may be used by the reply$/;"	m	struct:RedisModuleBlockedClient	file:
privdata_dtor	deps/hiredis/examples/example-push.c	/^void privdata_dtor(void *privdata) {$/;"	f
prng_lg_range_u32	deps/jemalloc/include/jemalloc/internal/prng.h	/^prng_lg_range_u32(atomic_u32_t *state, unsigned lg_range, bool atomic) {$/;"	f
prng_lg_range_u64	deps/jemalloc/include/jemalloc/internal/prng.h	/^prng_lg_range_u64(uint64_t *state, unsigned lg_range) {$/;"	f
prng_lg_range_zu	deps/jemalloc/include/jemalloc/internal/prng.h	/^prng_lg_range_zu(atomic_zu_t *state, unsigned lg_range, bool atomic) {$/;"	f
prng_range_u32	deps/jemalloc/include/jemalloc/internal/prng.h	/^prng_range_u32(atomic_u32_t *state, uint32_t range, bool atomic) {$/;"	f
prng_range_u64	deps/jemalloc/include/jemalloc/internal/prng.h	/^prng_range_u64(uint64_t *state, uint64_t range) {$/;"	f
prng_range_zu	deps/jemalloc/include/jemalloc/internal/prng.h	/^prng_range_zu(atomic_zu_t *state, size_t range, bool atomic) {$/;"	f
prng_state	deps/jemalloc/include/jemalloc/internal/ckh.h	/^	uint64_t prng_state;$/;"	m	struct:__anon151
prng_state	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	uint64_t		prng_state;$/;"	m	struct:prof_tdata_s
prng_state_next_u32	deps/jemalloc/include/jemalloc/internal/prng.h	/^prng_state_next_u32(uint32_t state) {$/;"	f
prng_state_next_u64	deps/jemalloc/include/jemalloc/internal/prng.h	/^prng_state_next_u64(uint64_t state) {$/;"	f
prng_state_next_zu	deps/jemalloc/include/jemalloc/internal/prng.h	/^prng_state_next_zu(size_t state) {$/;"	f
proc	src/redis-cli.c	/^    clusterManagerCommandProc *proc;$/;"	m	struct:clusterManagerCommandDef	file:
proc	src/server.c	/^    redisTestProc *proc;$/;"	m	struct:redisTest	file:
proc	src/server.h	/^    redisCommandProc *proc;$/;"	m	struct:redisCommand
proc_title_template	src/server.h	/^    char *proc_title_template;      \/* Process title template format *\/$/;"	m	struct:redisServer
process	src/redis-check-aof.c	/^off_t process(FILE *fp) {$/;"	f
processAggregateItem	deps/hiredis/read.c	/^static int processAggregateItem(redisReader *r) {$/;"	f	file:
processBulkItem	deps/hiredis/read.c	/^static int processBulkItem(redisReader *r) {$/;"	f	file:
processClientsWaitingReplicas	src/replication.c	/^void processClientsWaitingReplicas(void) {$/;"	f
processCommand	src/server.c	/^int processCommand(client *c) {$/;"	f
processCommandAndResetClient	src/networking.c	/^int processCommandAndResetClient(client *c) {$/;"	f
processEventsWhileBlocked	src/networking.c	/^void processEventsWhileBlocked(void) {$/;"	f
processGopherRequest	src/gopher.c	/^void processGopherRequest(client *c) {$/;"	f
processInlineBuffer	src/networking.c	/^int processInlineBuffer(client *c) {$/;"	f
processInputBuffer	src/networking.c	/^void processInputBuffer(client *c) {$/;"	f
processItem	deps/hiredis/read.c	/^static int processItem(redisReader *r) {$/;"	f	file:
processLineItem	deps/hiredis/read.c	/^static int processLineItem(redisReader *r) {$/;"	f	file:
processModuleLoadingProgressEvent	src/module.c	/^void processModuleLoadingProgressEvent(int is_aof) {$/;"	f
processMultibulkBuffer	src/networking.c	/^int processMultibulkBuffer(client *c) {$/;"	f
processPendingCommandsAndResetClient	src/networking.c	/^int processPendingCommandsAndResetClient(client *c) {$/;"	f
processTimeEvents	src/ae.c	/^static int processTimeEvents(aeEventLoop *eventLoop) {$/;"	f	file:
processUnblockedClients	src/blocked.c	/^void processUnblockedClients(void) {$/;"	f
process_is_running	tests/cluster/tests/04-resharding.tcl	/^proc process_is_running {pid} {$/;"	p
process_rss	src/server.h	/^    size_t process_rss;$/;"	m	struct:malloc_stats
processed_bytes	src/rio.h	/^    size_t processed_bytes;$/;"	m	struct:_rio
prof_accum	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	prof_accum_t		prof_accum;$/;"	m	struct:arena_s
prof_accum_add	deps/jemalloc/include/jemalloc/internal/prof_inlines_a.h	/^prof_accum_add(tsdn_t *tsdn, prof_accum_t *prof_accum, uint64_t accumbytes) {$/;"	f
prof_accum_cancel	deps/jemalloc/include/jemalloc/internal/prof_inlines_a.h	/^prof_accum_cancel(tsdn_t *tsdn, prof_accum_t *prof_accum, size_t usize) {$/;"	f
prof_accum_init	deps/jemalloc/src/prof.c	/^prof_accum_init(tsdn_t *tsdn, prof_accum_t *prof_accum) {$/;"	f
prof_accum_s	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^struct prof_accum_s {$/;"	s
prof_accum_t	deps/jemalloc/include/jemalloc/internal/prof_types.h	/^typedef struct prof_accum_s prof_accum_t;$/;"	t	typeref:struct:prof_accum_s
prof_accumbytes	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	uint64_t		prof_accumbytes;$/;"	m	struct:arena_s
prof_accumbytes	deps/jemalloc/include/jemalloc/internal/tcache_structs.h	/^	uint64_t	prof_accumbytes;$/;"	m	struct:tcache_s
prof_active	deps/jemalloc/src/prof.c	/^bool			prof_active;$/;"	v
prof_active_ctl	deps/jemalloc/src/ctl.c	/^prof_active_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	file:
prof_active_get	deps/jemalloc/src/prof.c	/^prof_active_get(tsdn_t *tsdn) {$/;"	f
prof_active_get_unlocked	deps/jemalloc/include/jemalloc/internal/prof_inlines_a.h	/^prof_active_get_unlocked(void) {$/;"	f
prof_active_mtx	deps/jemalloc/src/prof.c	/^static malloc_mutex_t	prof_active_mtx;$/;"	v	file:
prof_active_set	deps/jemalloc/src/prof.c	/^prof_active_set(tsdn_t *tsdn, bool active) {$/;"	f
prof_alloc_prep	deps/jemalloc/include/jemalloc/internal/prof_inlines_b.h	/^prof_alloc_prep(tsd_t *tsd, size_t usize, bool prof_active, bool update) {$/;"	f
prof_alloc_rollback	deps/jemalloc/src/prof.c	/^prof_alloc_rollback(tsd_t *tsd, prof_tctx_t *tctx, bool updated) {$/;"	f
prof_backtrace	deps/jemalloc/src/prof.c	/^prof_backtrace(prof_bt_t *bt) {$/;"	f
prof_boot0	deps/jemalloc/src/prof.c	/^prof_boot0(void) {$/;"	f
prof_boot1	deps/jemalloc/src/prof.c	/^prof_boot1(void) {$/;"	f
prof_boot2	deps/jemalloc/src/prof.c	/^prof_boot2(tsd_t *tsd) {$/;"	f
prof_booted	deps/jemalloc/src/prof.c	/^static bool		prof_booted = false;$/;"	v	file:
prof_bt_count	deps/jemalloc/src/prof.c	/^prof_bt_count(void) {$/;"	f
prof_bt_hash	deps/jemalloc/src/prof.c	/^prof_bt_hash(const void *key, size_t r_hash[2]) {$/;"	f	file:
prof_bt_keycomp	deps/jemalloc/src/prof.c	/^prof_bt_keycomp(const void *k1, const void *k2) {$/;"	f	file:
prof_bt_s	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^struct prof_bt_s {$/;"	s
prof_bt_t	deps/jemalloc/include/jemalloc/internal/prof_types.h	/^typedef struct prof_bt_s prof_bt_t;$/;"	t	typeref:struct:prof_bt_s
prof_cnt_all	deps/jemalloc/src/prof.c	/^prof_cnt_all(uint64_t *curobjs, uint64_t *curbytes, uint64_t *accumobjs,$/;"	f
prof_cnt_s	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^struct prof_cnt_s {$/;"	s
prof_cnt_t	deps/jemalloc/include/jemalloc/internal/prof_types.h	/^typedef struct prof_cnt_s prof_cnt_t;$/;"	t	typeref:struct:prof_cnt_s
prof_data	deps/jemalloc/include/jemalloc/internal/mutex.h	/^			mutex_prof_data_t	prof_data;$/;"	m	struct:malloc_mutex_s::__anon157::__anon158
prof_dump	deps/jemalloc/src/prof.c	/^prof_dump(tsd_t *tsd, bool propagate_err, const char *filename,$/;"	f	file:
prof_dump_buf	deps/jemalloc/src/prof.c	/^static char		prof_dump_buf[$/;"	v	file:
prof_dump_buf_end	deps/jemalloc/src/prof.c	/^static size_t		prof_dump_buf_end;$/;"	v	file:
prof_dump_close	deps/jemalloc/src/prof.c	/^prof_dump_close(bool propagate_err) {$/;"	f	file:
prof_dump_ctl	deps/jemalloc/src/ctl.c	/^prof_dump_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	file:
prof_dump_fd	deps/jemalloc/src/prof.c	/^static int		prof_dump_fd;$/;"	v	file:
prof_dump_file	deps/jemalloc/src/prof.c	/^prof_dump_file(tsd_t *tsd, bool propagate_err, const char *filename,$/;"	f	file:
prof_dump_filename	deps/jemalloc/src/prof.c	/^prof_dump_filename(char *filename, char v, uint64_t vseq) {$/;"	f	file:
prof_dump_flush	deps/jemalloc/src/prof.c	/^prof_dump_flush(bool propagate_err) {$/;"	f	file:
prof_dump_gctx	deps/jemalloc/src/prof.c	/^prof_dump_gctx(tsdn_t *tsdn, bool propagate_err, prof_gctx_t *gctx,$/;"	f	file:
prof_dump_gctx_prep	deps/jemalloc/src/prof.c	/^prof_dump_gctx_prep(tsdn_t *tsdn, prof_gctx_t *gctx, prof_gctx_tree_t *gctxs) {$/;"	f	file:
prof_dump_header	deps/jemalloc/src/prof.c	/^prof_dump_header_t *JET_MUTABLE prof_dump_header = prof_dump_header_impl;$/;"	v
prof_dump_header_impl	deps/jemalloc/src/prof.c	/^prof_dump_header_impl(tsdn_t *tsdn, bool propagate_err,$/;"	f	file:
prof_dump_header_intercept	deps/jemalloc/test/unit/prof_reset.c	/^prof_dump_header_intercept(tsdn_t *tsdn, bool propagate_err,$/;"	f	file:
prof_dump_header_intercepted	deps/jemalloc/test/unit/prof_reset.c	/^bool prof_dump_header_intercepted = false;$/;"	v
prof_dump_header_t	deps/jemalloc/include/jemalloc/internal/prof_externs.h	/^typedef bool (prof_dump_header_t)(tsdn_t *, bool, const prof_cnt_t *);$/;"	t
prof_dump_iseq	deps/jemalloc/src/prof.c	/^static uint64_t		prof_dump_iseq;$/;"	v	file:
prof_dump_maps	deps/jemalloc/src/prof.c	/^prof_dump_maps(bool propagate_err) {$/;"	f	file:
prof_dump_mseq	deps/jemalloc/src/prof.c	/^static uint64_t		prof_dump_mseq;$/;"	v	file:
prof_dump_mtx	deps/jemalloc/src/prof.c	/^static malloc_mutex_t	prof_dump_mtx;$/;"	v	file:
prof_dump_open	deps/jemalloc/src/prof.c	/^prof_dump_open_t *JET_MUTABLE prof_dump_open = prof_dump_open_impl;$/;"	v
prof_dump_open_impl	deps/jemalloc/src/prof.c	/^prof_dump_open_impl(bool propagate_err, const char *filename) {$/;"	f	file:
prof_dump_open_intercept	deps/jemalloc/test/unit/prof_accum.c	/^prof_dump_open_intercept(bool propagate_err, const char *filename) {$/;"	f	file:
prof_dump_open_intercept	deps/jemalloc/test/unit/prof_gdump.c	/^prof_dump_open_intercept(bool propagate_err, const char *filename) {$/;"	f	file:
prof_dump_open_intercept	deps/jemalloc/test/unit/prof_idump.c	/^prof_dump_open_intercept(bool propagate_err, const char *filename) {$/;"	f	file:
prof_dump_open_intercept	deps/jemalloc/test/unit/prof_reset.c	/^prof_dump_open_intercept(bool propagate_err, const char *filename) {$/;"	f	file:
prof_dump_open_t	deps/jemalloc/include/jemalloc/internal/prof_externs.h	/^typedef int (prof_dump_open_t)(bool, const char *);$/;"	t
prof_dump_prep	deps/jemalloc/src/prof.c	/^prof_dump_prep(tsd_t *tsd, prof_tdata_t *tdata,$/;"	f	file:
prof_dump_printf	deps/jemalloc/src/prof.c	/^prof_dump_printf(bool propagate_err, const char *format, ...) {$/;"	f	file:
prof_dump_seq	deps/jemalloc/src/prof.c	/^static uint64_t		prof_dump_seq;$/;"	v	file:
prof_dump_seq_mtx	deps/jemalloc/src/prof.c	/^static malloc_mutex_t	prof_dump_seq_mtx;$/;"	v	file:
prof_dump_useq	deps/jemalloc/src/prof.c	/^static uint64_t		prof_dump_useq;$/;"	v	file:
prof_dump_write	deps/jemalloc/src/prof.c	/^prof_dump_write(bool propagate_err, const char *s) {$/;"	f	file:
prof_enter	deps/jemalloc/src/prof.c	/^prof_enter(tsd_t *tsd, prof_tdata_t *tdata) {$/;"	f	file:
prof_fdump	deps/jemalloc/src/prof.c	/^prof_fdump(void) {$/;"	f	file:
prof_free	deps/jemalloc/include/jemalloc/internal/prof_inlines_b.h	/^prof_free(tsd_t *tsd, const void *ptr, size_t usize, alloc_ctx_t *alloc_ctx) {$/;"	f
prof_free_sampled_object	deps/jemalloc/src/prof.c	/^prof_free_sampled_object(tsd_t *tsd, size_t usize, prof_tctx_t *tctx) {$/;"	f
prof_gctx_comp	deps/jemalloc/src/prof.c	/^prof_gctx_comp(const prof_gctx_t *a, const prof_gctx_t *b) {$/;"	f	file:
prof_gctx_create	deps/jemalloc/src/prof.c	/^prof_gctx_create(tsdn_t *tsdn, prof_bt_t *bt) {$/;"	f	file:
prof_gctx_dump_iter	deps/jemalloc/src/prof.c	/^prof_gctx_dump_iter(prof_gctx_tree_t *gctxs, prof_gctx_t *gctx, void *opaque) {$/;"	f	file:
prof_gctx_dump_iter_arg_s	deps/jemalloc/src/prof.c	/^struct prof_gctx_dump_iter_arg_s {$/;"	s	file:
prof_gctx_finish	deps/jemalloc/src/prof.c	/^prof_gctx_finish(tsd_t *tsd, prof_gctx_tree_t *gctxs) {$/;"	f	file:
prof_gctx_merge_iter	deps/jemalloc/src/prof.c	/^prof_gctx_merge_iter(prof_gctx_tree_t *gctxs, prof_gctx_t *gctx, void *opaque) {$/;"	f	file:
prof_gctx_merge_iter_arg_s	deps/jemalloc/src/prof.c	/^struct prof_gctx_merge_iter_arg_s {$/;"	s	file:
prof_gctx_mutex_choose	deps/jemalloc/src/prof.c	/^prof_gctx_mutex_choose(void) {$/;"	f	file:
prof_gctx_s	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^struct prof_gctx_s {$/;"	s
prof_gctx_should_destroy	deps/jemalloc/src/prof.c	/^prof_gctx_should_destroy(prof_gctx_t *gctx) {$/;"	f	file:
prof_gctx_t	deps/jemalloc/include/jemalloc/internal/prof_types.h	/^typedef struct prof_gctx_s prof_gctx_t;$/;"	t	typeref:struct:prof_gctx_s
prof_gctx_tree_t	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^typedef rb_tree(prof_gctx_t) prof_gctx_tree_t;$/;"	t
prof_gctx_try_destroy	deps/jemalloc/src/prof.c	/^prof_gctx_try_destroy(tsd_t *tsd, prof_tdata_t *tdata_self, prof_gctx_t *gctx,$/;"	f	file:
prof_gdump	deps/jemalloc/src/prof.c	/^prof_gdump(tsdn_t *tsdn) {$/;"	f
prof_gdump_ctl	deps/jemalloc/src/ctl.c	/^prof_gdump_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	file:
prof_gdump_get	deps/jemalloc/src/prof.c	/^prof_gdump_get(tsdn_t *tsdn) {$/;"	f
prof_gdump_get_unlocked	deps/jemalloc/include/jemalloc/internal/prof_inlines_b.h	/^prof_gdump_get_unlocked(void) {$/;"	f
prof_gdump_mtx	deps/jemalloc/src/prof.c	/^static malloc_mutex_t	prof_gdump_mtx;$/;"	v	file:
prof_gdump_set	deps/jemalloc/src/prof.c	/^prof_gdump_set(tsdn_t *tsdn, bool gdump) {$/;"	f
prof_gdump_val	deps/jemalloc/src/prof.c	/^bool			prof_gdump_val;$/;"	v
prof_getpid	deps/jemalloc/src/prof.c	/^prof_getpid(void) {$/;"	f	file:
prof_idump	deps/jemalloc/src/prof.c	/^prof_idump(tsdn_t *tsdn) {$/;"	f
prof_interval	deps/jemalloc/src/prof.c	/^uint64_t	prof_interval = 0;$/;"	v
prof_leakcheck	deps/jemalloc/src/prof.c	/^prof_leakcheck(const prof_cnt_t *cnt_all, size_t leak_ngctx,$/;"	f	file:
prof_leave	deps/jemalloc/src/prof.c	/^prof_leave(tsd_t *tsd, prof_tdata_t *tdata) {$/;"	f	file:
prof_lookup	deps/jemalloc/src/prof.c	/^prof_lookup(tsd_t *tsd, prof_bt_t *bt) {$/;"	f
prof_lookup_global	deps/jemalloc/src/prof.c	/^prof_lookup_global(tsd_t *tsd, prof_bt_t *bt, prof_tdata_t *tdata,$/;"	f	file:
prof_malloc	deps/jemalloc/include/jemalloc/internal/prof_inlines_b.h	/^prof_malloc(tsdn_t *tsdn, const void *ptr, size_t usize, alloc_ctx_t *alloc_ctx,$/;"	f
prof_malloc_sample_object	deps/jemalloc/src/prof.c	/^prof_malloc_sample_object(tsdn_t *tsdn, const void *ptr, size_t usize,$/;"	f
prof_mdump	deps/jemalloc/src/prof.c	/^prof_mdump(tsd_t *tsd, const char *filename) {$/;"	f
prof_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t	prof_node[] = {$/;"	v	file:
prof_open_maps	deps/jemalloc/src/prof.c	/^prof_open_maps(const char *format, ...) {$/;"	f	file:
prof_postfork_child	deps/jemalloc/src/prof.c	/^prof_postfork_child(tsdn_t *tsdn) {$/;"	f
prof_postfork_parent	deps/jemalloc/src/prof.c	/^prof_postfork_parent(tsdn_t *tsdn) {$/;"	f
prof_prefork0	deps/jemalloc/src/prof.c	/^prof_prefork0(tsdn_t *tsdn) {$/;"	f
prof_prefork1	deps/jemalloc/src/prof.c	/^prof_prefork1(tsdn_t *tsdn) {$/;"	f
prof_realloc	deps/jemalloc/include/jemalloc/internal/prof_inlines_b.h	/^prof_realloc(tsd_t *tsd, const void *ptr, size_t usize, prof_tctx_t *tctx,$/;"	f
prof_reset	deps/jemalloc/src/prof.c	/^prof_reset(tsd_t *tsd, size_t lg_sample) {$/;"	f
prof_reset_ctl	deps/jemalloc/src/ctl.c	/^prof_reset_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	file:
prof_sample_accum_update	deps/jemalloc/include/jemalloc/internal/prof_inlines_b.h	/^prof_sample_accum_update(tsd_t *tsd, size_t usize, bool update,$/;"	f
prof_sample_threshold_update	deps/jemalloc/src/prof.c	/^prof_sample_threshold_update(prof_tdata_t *tdata) {$/;"	f
prof_sampling_probe	deps/jemalloc/test/unit/prof_active.c	78;"	d	file:
prof_sampling_probe_impl	deps/jemalloc/test/unit/prof_active.c	/^prof_sampling_probe_impl(bool expect_sample, const char *func, int line) {$/;"	f	file:
prof_tctx_comp	deps/jemalloc/src/prof.c	/^prof_tctx_comp(const prof_tctx_t *a, const prof_tctx_t *b) {$/;"	f	file:
prof_tctx_destroy	deps/jemalloc/src/prof.c	/^prof_tctx_destroy(tsd_t *tsd, prof_tctx_t *tctx) {$/;"	f	file:
prof_tctx_dump_iter	deps/jemalloc/src/prof.c	/^prof_tctx_dump_iter(prof_tctx_tree_t *tctxs, prof_tctx_t *tctx, void *opaque) {$/;"	f	file:
prof_tctx_dump_iter_arg_s	deps/jemalloc/src/prof.c	/^struct prof_tctx_dump_iter_arg_s {$/;"	s	file:
prof_tctx_finish_iter	deps/jemalloc/src/prof.c	/^prof_tctx_finish_iter(prof_tctx_tree_t *tctxs, prof_tctx_t *tctx, void *arg) {$/;"	f	file:
prof_tctx_get	deps/jemalloc/include/jemalloc/internal/prof_inlines_b.h	/^prof_tctx_get(tsdn_t *tsdn, const void *ptr, alloc_ctx_t *alloc_ctx) {$/;"	f
prof_tctx_merge_gctx	deps/jemalloc/src/prof.c	/^prof_tctx_merge_gctx(tsdn_t *tsdn, prof_tctx_t *tctx, prof_gctx_t *gctx) {$/;"	f	file:
prof_tctx_merge_iter	deps/jemalloc/src/prof.c	/^prof_tctx_merge_iter(prof_tctx_tree_t *tctxs, prof_tctx_t *tctx, void *arg) {$/;"	f	file:
prof_tctx_merge_tdata	deps/jemalloc/src/prof.c	/^prof_tctx_merge_tdata(tsdn_t *tsdn, prof_tctx_t *tctx, prof_tdata_t *tdata) {$/;"	f	file:
prof_tctx_reset	deps/jemalloc/include/jemalloc/internal/prof_inlines_b.h	/^prof_tctx_reset(tsdn_t *tsdn, const void *ptr, prof_tctx_t *tctx) {$/;"	f
prof_tctx_s	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^struct prof_tctx_s {$/;"	s
prof_tctx_set	deps/jemalloc/include/jemalloc/internal/prof_inlines_b.h	/^prof_tctx_set(tsdn_t *tsdn, const void *ptr, size_t usize,$/;"	f
prof_tctx_should_destroy	deps/jemalloc/src/prof.c	/^prof_tctx_should_destroy(tsdn_t *tsdn, prof_tctx_t *tctx) {$/;"	f	file:
prof_tctx_state_dumping	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	prof_tctx_state_dumping,$/;"	e	enum:__anon155
prof_tctx_state_initializing	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	prof_tctx_state_initializing,$/;"	e	enum:__anon155
prof_tctx_state_nominal	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	prof_tctx_state_nominal,$/;"	e	enum:__anon155
prof_tctx_state_purgatory	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	prof_tctx_state_purgatory \/* Dumper must finish destroying. *\/$/;"	e	enum:__anon155
prof_tctx_state_t	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^} prof_tctx_state_t;$/;"	t	typeref:enum:__anon155
prof_tctx_t	deps/jemalloc/include/jemalloc/internal/prof_types.h	/^typedef struct prof_tctx_s prof_tctx_t;$/;"	t	typeref:struct:prof_tctx_s
prof_tctx_tree_t	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^typedef rb_tree(prof_tctx_t) prof_tctx_tree_t;$/;"	t
prof_tdata_cleanup	deps/jemalloc/src/prof.c	/^prof_tdata_cleanup(tsd_t *tsd) {$/;"	f
prof_tdata_comp	deps/jemalloc/src/prof.c	/^prof_tdata_comp(const prof_tdata_t *a, const prof_tdata_t *b) {$/;"	f	file:
prof_tdata_count	deps/jemalloc/src/prof.c	/^prof_tdata_count(void) {$/;"	f
prof_tdata_count_iter	deps/jemalloc/src/prof.c	/^prof_tdata_count_iter(prof_tdata_tree_t *tdatas, prof_tdata_t *tdata,$/;"	f	file:
prof_tdata_destroy	deps/jemalloc/src/prof.c	/^prof_tdata_destroy(tsd_t *tsd, prof_tdata_t *tdata, bool even_if_attached) {$/;"	f	file:
prof_tdata_destroy_locked	deps/jemalloc/src/prof.c	/^prof_tdata_destroy_locked(tsd_t *tsd, prof_tdata_t *tdata,$/;"	f	file:
prof_tdata_detach	deps/jemalloc/src/prof.c	/^prof_tdata_detach(tsd_t *tsd, prof_tdata_t *tdata) {$/;"	f	file:
prof_tdata_dump_iter	deps/jemalloc/src/prof.c	/^prof_tdata_dump_iter(prof_tdata_tree_t *tdatas, prof_tdata_t *tdata,$/;"	f	file:
prof_tdata_expire	deps/jemalloc/src/prof.c	/^prof_tdata_expire(tsdn_t *tsdn, prof_tdata_t *tdata) {$/;"	f	file:
prof_tdata_get	deps/jemalloc/include/jemalloc/internal/prof_inlines_b.h	/^prof_tdata_get(tsd_t *tsd, bool create) {$/;"	f
prof_tdata_init	deps/jemalloc/src/prof.c	/^prof_tdata_init(tsd_t *tsd) {$/;"	f
prof_tdata_init_impl	deps/jemalloc/src/prof.c	/^prof_tdata_init_impl(tsd_t *tsd, uint64_t thr_uid, uint64_t thr_discrim,$/;"	f	file:
prof_tdata_merge_iter	deps/jemalloc/src/prof.c	/^prof_tdata_merge_iter(prof_tdata_tree_t *tdatas, prof_tdata_t *tdata,$/;"	f	file:
prof_tdata_merge_iter_arg_s	deps/jemalloc/src/prof.c	/^struct prof_tdata_merge_iter_arg_s {$/;"	s	file:
prof_tdata_mutex_choose	deps/jemalloc/src/prof.c	/^prof_tdata_mutex_choose(uint64_t thr_uid) {$/;"	f	file:
prof_tdata_reinit	deps/jemalloc/src/prof.c	/^prof_tdata_reinit(tsd_t *tsd, prof_tdata_t *tdata) {$/;"	f
prof_tdata_reset_iter	deps/jemalloc/src/prof.c	/^prof_tdata_reset_iter(prof_tdata_tree_t *tdatas, prof_tdata_t *tdata,$/;"	f	file:
prof_tdata_s	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^struct prof_tdata_s {$/;"	s
prof_tdata_should_destroy	deps/jemalloc/src/prof.c	/^prof_tdata_should_destroy(tsdn_t *tsdn, prof_tdata_t *tdata,$/;"	f	file:
prof_tdata_should_destroy_unlocked	deps/jemalloc/src/prof.c	/^prof_tdata_should_destroy_unlocked(prof_tdata_t *tdata, bool even_if_attached) {$/;"	f	file:
prof_tdata_t	deps/jemalloc/include/jemalloc/internal/prof_types.h	/^typedef struct prof_tdata_s prof_tdata_t;$/;"	t	typeref:struct:prof_tdata_s
prof_tdata_tree_t	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^typedef rb_tree(prof_tdata_t) prof_tdata_tree_t;$/;"	t
prof_thr_uid_alloc	deps/jemalloc/src/prof.c	/^prof_thr_uid_alloc(tsdn_t *tsdn) {$/;"	f	file:
prof_thread_active_get	deps/jemalloc/src/prof.c	/^prof_thread_active_get(tsd_t *tsd) {$/;"	f
prof_thread_active_init	deps/jemalloc/src/prof.c	/^static bool		prof_thread_active_init;$/;"	v	file:
prof_thread_active_init_ctl	deps/jemalloc/src/ctl.c	/^prof_thread_active_init_ctl(tsd_t *tsd, const size_t *mib, size_t miblen,$/;"	f	file:
prof_thread_active_init_get	deps/jemalloc/src/prof.c	/^prof_thread_active_init_get(tsdn_t *tsdn) {$/;"	f
prof_thread_active_init_mtx	deps/jemalloc/src/prof.c	/^static malloc_mutex_t	prof_thread_active_init_mtx;$/;"	v	file:
prof_thread_active_init_set	deps/jemalloc/src/prof.c	/^prof_thread_active_init_set(tsdn_t *tsdn, bool active_init) {$/;"	f
prof_thread_active_set	deps/jemalloc/src/prof.c	/^prof_thread_active_set(tsd_t *tsd, bool active) {$/;"	f
prof_thread_name_alloc	deps/jemalloc/src/prof.c	/^prof_thread_name_alloc(tsdn_t *tsdn, const char *thread_name) {$/;"	f	file:
prof_thread_name_get	deps/jemalloc/src/prof.c	/^prof_thread_name_get(tsd_t *tsd) {$/;"	f
prof_thread_name_set	deps/jemalloc/src/prof.c	/^prof_thread_name_set(tsd_t *tsd, const char *thread_name) {$/;"	f
prof_unwind_callback	deps/jemalloc/src/prof.c	/^prof_unwind_callback(struct _Unwind_Context *context, void *arg) {$/;"	f	file:
prof_unwind_data_t	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^} prof_unwind_data_t;$/;"	t	typeref:struct:__anon154
prof_unwind_init_callback	deps/jemalloc/src/prof.c	/^prof_unwind_init_callback(struct _Unwind_Context *context, void *arg) {$/;"	f	file:
progname	deps/lua/src/lua.c	/^static const char *progname = LUA_PROGNAME;$/;"	v	file:
progname	deps/lua/src/luac.c	/^static const char* progname=PROGNAME;	\/* actual program name *\/$/;"	v	file:
progress	src/childinfo.c	/^    double progress;$/;"	m	struct:__anon30	file:
progress	src/redismodule.h	/^    int32_t progress;       \/* Approximate progress between 0 and 1024, or -1$/;"	m	struct:RedisModuleLoadingProgressInfo
progress_full	src/memtest.c	/^size_t progress_full; \/* How many chars to write to fill the progress bar. *\/$/;"	v
progress_printed	src/memtest.c	/^size_t progress_printed; \/* Printed chars in screen-wide progress bar. *\/$/;"	v
promoted_slave	src/sentinel.c	/^    struct sentinelRedisInstance *promoted_slave; \/* Promoted slave instance. *\/$/;"	m	struct:sentinelRedisInstance	typeref:struct:sentinelRedisInstance::sentinelRedisInstance	file:
prompt	deps/linenoise/linenoise.c	/^    const char *prompt; \/* Prompt to display. *\/$/;"	m	struct:linenoiseState	file:
prompt	src/redis-cli.c	/^    char prompt[128];$/;"	m	struct:config	file:
propagate	src/server.c	/^void propagate(struct redisCommand *cmd, int dbid, robj **argv, int argc,$/;"	f
propagateExpire	src/db.c	/^void propagateExpire(redisDb *db, robj *key, int lazy) {$/;"	f
propagateTestIncr	tests/modules/propagate.c	/^int propagateTestIncr(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
propagateTestMixedCommand	tests/modules/propagate.c	/^int propagateTestMixedCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
propagateTestNestedCommand	tests/modules/propagate.c	/^int propagateTestNestedCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
propagateTestSimpleCommand	tests/modules/propagate.c	/^int propagateTestSimpleCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
propagateTestThreadCommand	tests/modules/propagate.c	/^int propagateTestThreadCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
propagateTestTimerCommand	tests/modules/propagate.c	/^int propagateTestTimerCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
propagateTestTimerNestedCommand	tests/modules/propagate.c	/^int propagateTestTimerNestedCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
propagateTestTimerNestedReplCommand	tests/modules/propagate.c	/^int propagateTestTimerNestedReplCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
propagate_err	deps/jemalloc/src/prof.c	/^	bool	propagate_err;$/;"	m	struct:prof_gctx_dump_iter_arg_s	file:
propagate_err	deps/jemalloc/src/prof.c	/^	bool	propagate_err;$/;"	m	struct:prof_tctx_dump_iter_arg_s	file:
propagate_in_transaction	src/server.h	/^    int propagate_in_transaction;  \/* Make sure we don't propagate nested MULTI\/EXEC *\/$/;"	m	struct:redisServer
propagateall	deps/lua/src/lgc.c	/^static size_t propagateall (global_State *g) {$/;"	f	file:
propagatemark	deps/lua/src/lgc.c	/^static l_mem propagatemark (global_State *g) {$/;"	f	file:
protectClient	src/networking.c	/^void protectClient(client *c) {$/;"	f
protected_mode	src/server.h	/^    int protected_mode;         \/* Don't accept external connections. *\/$/;"	m	struct:redisServer
proto	src/module.c	/^    char *proto;    \/* Raw reply protocol. An SDS string at top-level object. *\/$/;"	m	struct:RedisModuleCallReply	file:
proto_max_bulk_len	src/server.h	/^    long long proto_max_bulk_len;   \/* Protocol bulk length maximum size. *\/$/;"	m	struct:redisServer
protocols	src/server.h	/^    char *protocols;$/;"	m	struct:redisTLSContextConfig
protolen	src/module.c	/^    size_t protolen;\/* Length of protocol. *\/$/;"	m	struct:RedisModuleCallReply	file:
prototypes	deps/jemalloc/configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
psetexCommand	src/t_string.c	/^void psetexCommand(client *c) {$/;"	f
psubscribe	tests/support/util.tcl	/^proc psubscribe {client channels} {$/;"	p
psubscribeCommand	src/pubsub.c	/^void psubscribeCommand(client *c) {$/;"	f
psubscribebulk	src/server.h	/^    *unsubscribebulk, *psubscribebulk, *punsubscribebulk, *del, *unlink,$/;"	m	struct:sharedObjectsStruct
psync_initial_offset	src/server.h	/^    long long psync_initial_offset; \/* FULLRESYNC reply offset other slaves$/;"	m	struct:client
pszind_t	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^typedef unsigned pszind_t;$/;"	t
pt_chi2	deps/jemalloc/test/include/test/math.h	/^pt_chi2(double p, double df, double ln_gamma_df_2) {$/;"	f
pt_chi2_df	deps/jemalloc/test/unit/math.c	/^static const double pt_chi2_df[] = {0.1, 1.1, 10.1, 100.1, 1000.1};$/;"	v	file:
pt_chi2_expected	deps/jemalloc/test/unit/math.c	/^static const double pt_chi2_expected[] = {$/;"	v	file:
pt_gamma	deps/jemalloc/test/include/test/math.h	/^pt_gamma(double p, double shape, double scale, double ln_gamma_shape) {$/;"	f
pt_gamma_expected	deps/jemalloc/test/unit/math.c	/^static const double pt_gamma_expected[] = {$/;"	v	file:
pt_gamma_shape	deps/jemalloc/test/unit/math.c	/^static const double pt_gamma_shape[] = {0.5, 1.0, 1.5, 2.0, 2.5, 3.0};$/;"	v	file:
pt_norm	deps/jemalloc/test/include/test/math.h	/^pt_norm(double p) {$/;"	f
pt_norm_expected	deps/jemalloc/test/unit/math.c	/^static const double pt_norm_expected[] = {$/;"	v	file:
pthread_create	deps/jemalloc/src/mutex.c	/^pthread_create(pthread_t *__restrict thread,$/;"	f
pthread_create_fptr	deps/jemalloc/src/background_thread.c	/^static int (*pthread_create_fptr)(pthread_t *__restrict, const pthread_attr_t *,$/;"	v	file:
pthread_create_wrapper	deps/jemalloc/src/background_thread.c	/^pthread_create_wrapper(pthread_t *__restrict thread, const pthread_attr_t *attr,$/;"	f
pthread_create_wrapper_init	deps/jemalloc/src/background_thread.c	/^pthread_create_wrapper_init(void) {$/;"	f	file:
ptr	deps/lua/src/lua_cjson.c	/^    const char *ptr;$/;"	m	struct:__anon102	file:
ptr	src/module.c	/^    void *ptr;$/;"	m	struct:AutoMemEntry	file:
ptr	src/rio.h	/^            sds ptr;$/;"	m	struct:_rio::__anon54::__anon55
ptr	src/server.h	/^    void *ptr;$/;"	m	struct:redisObject
pttlCommand	src/expire.c	/^void pttlCommand(client *c) {$/;"	f
publish	src/cluster.h	/^    } publish;$/;"	m	union:clusterMsgData	typeref:struct:clusterMsgData::__anon39
publishCommand	src/pubsub.c	/^void publishCommand(client *c) {$/;"	f
pubsubCommand	src/pubsub.c	/^void pubsubCommand(client *c) {$/;"	f
pubsubPublishMessage	src/pubsub.c	/^int pubsubPublishMessage(robj *channel, robj *message) {$/;"	f
pubsubSubscribeChannel	src/pubsub.c	/^int pubsubSubscribeChannel(client *c, robj *channel) {$/;"	f
pubsubSubscribePattern	src/pubsub.c	/^int pubsubSubscribePattern(client *c, robj *pattern) {$/;"	f
pubsubUnsubscribeAllChannels	src/pubsub.c	/^int pubsubUnsubscribeAllChannels(client *c, int notify) {$/;"	f
pubsubUnsubscribeAllPatterns	src/pubsub.c	/^int pubsubUnsubscribeAllPatterns(client *c, int notify) {$/;"	f
pubsubUnsubscribeChannel	src/pubsub.c	/^int pubsubUnsubscribeChannel(client *c, robj *channel, int notify) {$/;"	f
pubsubUnsubscribePattern	src/pubsub.c	/^int pubsubUnsubscribePattern(client *c, robj *pattern, int notify) {$/;"	f
pubsub_channels	src/server.h	/^    dict *pubsub_channels;  \/* Map channels to list of subscribed clients *\/$/;"	m	struct:redisServer
pubsub_channels	src/server.h	/^    dict *pubsub_channels;  \/* channels a client is interested in (SUBSCRIBE) *\/$/;"	m	struct:client
pubsub_mode	src/redis-cli.c	/^    int pubsub_mode;$/;"	m	struct:config	file:
pubsub_patterns	src/server.h	/^    dict *pubsub_patterns;  \/* A dict of pubsub_patterns *\/$/;"	m	struct:redisServer
pubsub_patterns	src/server.h	/^    list *pubsub_patterns;  \/* patterns a client is interested in (SUBSCRIBE) *\/$/;"	m	struct:client
punsubscribe	tests/support/util.tcl	/^proc punsubscribe {client {channels {}}} {$/;"	p
punsubscribeCommand	src/pubsub.c	/^void punsubscribeCommand(client *c) {$/;"	f
punsubscribebulk	src/server.h	/^    *unsubscribebulk, *psubscribebulk, *punsubscribebulk, *del, *unlink,$/;"	m	struct:sharedObjectsStruct
pure	deps/jemalloc/include/jemalloc/jemalloc_protos.h	/^    JEMALLOC_ATTR(pure);$/;"	v
pure	deps/jemalloc/include/jemalloc/jemalloc_protos.h	/^    int flags) JEMALLOC_ATTR(pure);$/;"	v
purge	deps/jemalloc/test/integration/aligned_alloc.c	/^purge(void) {$/;"	f	file:
purge	deps/jemalloc/test/integration/mallocx.c	/^purge(void) {$/;"	f	file:
purge	deps/jemalloc/test/integration/posix_memalign.c	/^purge(void) {$/;"	f	file:
purge_forced	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^	extent_purge_t		*purge_forced;$/;"	m	struct:extent_hooks_s
purge_lazy	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^	extent_purge_t		*purge_lazy;$/;"	m	struct:extent_hooks_s
purgeable_zone	deps/jemalloc/src/zone.c	/^static malloc_zone_t *default_zone, *purgeable_zone;$/;"	v	file:
purged	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	arena_stats_u64_t	purged;$/;"	m	struct:arena_stats_decay_s
purging	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	bool			purging;$/;"	m	struct:arena_decay_s
pushCounters	deps/hiredis/test.c	/^struct pushCounters {$/;"	s	file:
pushGenericCommand	src/t_list.c	/^void pushGenericCommand(client *c, int where, int xx) {$/;"	f
pushReplyHandler	deps/hiredis/examples/example-push.c	/^void pushReplyHandler(void *privdata, void *r) {$/;"	f
push_captures	deps/lua/src/lstrlib.c	/^static int push_captures (MatchState *ms, const char *s, const char *e) {$/;"	f	file:
push_cb	deps/hiredis/async.h	/^    redisAsyncPushFn *push_cb;$/;"	m	struct:redisAsyncContext
push_cb	deps/hiredis/hiredis.h	/^    redisPushFn *push_cb;$/;"	m	struct:__anon80
push_cb	deps/hiredis/hiredis.h	/^    redisPushFn *push_cb;$/;"	m	struct:redisContext
push_handler	deps/hiredis/test.c	/^void push_handler(void *privdata, void *r) {$/;"	f
push_handler_async	deps/hiredis/test.c	/^void push_handler_async(redisAsyncContext *ac, void *reply) {$/;"	f
push_onecapture	deps/lua/src/lstrlib.c	/^static void push_onecapture (MatchState *ms, int i, const char *s,$/;"	f	file:
push_output	src/redis-cli.c	/^    int push_output; \/* Should we display spontaneous PUSH replies *\/$/;"	m	struct:config	file:
pushclosure	deps/lua/src/lparser.c	/^static void pushclosure (LexState *ls, FuncState *func, expdesc *v) {$/;"	f	file:
pusherror	deps/lua/src/loadlib.c	/^static void pusherror (lua_State *L) {$/;"	f	file:
pushline	deps/lua/src/lua.c	/^static int pushline (lua_State *L, int firstline) {$/;"	f	file:
pushnexttemplate	deps/lua/src/loadlib.c	/^static const char *pushnexttemplate (lua_State *L, const char *path) {$/;"	f	file:
pushresult	deps/lua/src/liolib.c	/^static int pushresult (lua_State *L, int i, const char *filename) {$/;"	f	file:
pushstr	deps/lua/src/lobject.c	/^static void pushstr (lua_State *L, const char *str) {$/;"	f	file:
putSlaveOnline	src/replication.c	/^void putSlaveOnline(client *slave) {$/;"	f
putinteger	deps/lua/src/lua_struct.c	/^static void putinteger (lua_State *L, luaL_Buffer *b, int arg, int endian,$/;"	f	file:
pvalue	deps/lua/src/lobject.h	92;"	d
px	src/server.h	/^    *time, *pxat, *px, *retrycount, *force, *justid, $/;"	m	struct:sharedObjectsStruct
pxat	src/server.h	/^    *time, *pxat, *px, *retrycount, *force, *justid, $/;"	m	struct:sharedObjectsStruct
qb_pos	src/server.h	/^    size_t qb_pos;          \/* The position we have read in querybuf. *\/$/;"	m	struct:client
ql_after_insert	deps/jemalloc/include/jemalloc/internal/ql.h	44;"	d
ql_before_insert	deps/jemalloc/include/jemalloc/internal/ql.h	37;"	d
ql_elm	deps/jemalloc/include/jemalloc/internal/ql.h	14;"	d
ql_elm_new	deps/jemalloc/include/jemalloc/internal/ql.h	21;"	d
ql_first	deps/jemalloc/include/jemalloc/internal/ql.h	23;"	d
ql_foreach	deps/jemalloc/include/jemalloc/internal/ql.h	82;"	d
ql_head	deps/jemalloc/include/jemalloc/internal/ql.h	7;"	d
ql_head_initializer	deps/jemalloc/include/jemalloc/internal/ql.h	12;"	d
ql_head_insert	deps/jemalloc/include/jemalloc/internal/ql.h	47;"	d
ql_head_remove	deps/jemalloc/include/jemalloc/internal/ql.h	72;"	d
ql_info	src/quicklist.c	/^static void ql_info(quicklist *ql) {$/;"	f	file:
ql_last	deps/jemalloc/include/jemalloc/internal/ql.h	25;"	d
ql_link	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^	ql_elm(extent_t)	ql_link;$/;"	m	struct:extent_s
ql_new	deps/jemalloc/include/jemalloc/internal/ql.h	17;"	d
ql_next	deps/jemalloc/include/jemalloc/internal/ql.h	29;"	d
ql_prev	deps/jemalloc/include/jemalloc/internal/ql.h	33;"	d
ql_remove	deps/jemalloc/include/jemalloc/internal/ql.h	61;"	d
ql_reverse_foreach	deps/jemalloc/include/jemalloc/internal/ql.h	85;"	d
ql_tail_insert	deps/jemalloc/include/jemalloc/internal/ql.h	54;"	d
ql_tail_remove	deps/jemalloc/include/jemalloc/internal/ql.h	77;"	d
ql_verify	src/quicklist.c	1604;"	d	file:
qr	deps/jemalloc/include/jemalloc/internal/qr.h	5;"	d
qr_after_insert	deps/jemalloc/include/jemalloc/internal/qr.h	28;"	d
qr_before_insert	deps/jemalloc/include/jemalloc/internal/qr.h	21;"	d
qr_foreach	deps/jemalloc/include/jemalloc/internal/qr.h	60;"	d
qr_meld	deps/jemalloc/include/jemalloc/internal/qr.h	35;"	d
qr_new	deps/jemalloc/include/jemalloc/internal/qr.h	12;"	d
qr_next	deps/jemalloc/include/jemalloc/internal/qr.h	17;"	d
qr_prev	deps/jemalloc/include/jemalloc/internal/qr.h	19;"	d
qr_remove	deps/jemalloc/include/jemalloc/internal/qr.h	51;"	d
qr_reverse_foreach	deps/jemalloc/include/jemalloc/internal/qr.h	66;"	d
qr_split	deps/jemalloc/include/jemalloc/internal/qr.h	48;"	d
qsort	deps/lua/test/sort.lua	/^function qsort(x,l,u,f)$/;"	f
qsortCompareSetsByCardinality	src/t_set.c	/^int qsortCompareSetsByCardinality(const void *s1, const void *s2) {$/;"	f
qsortCompareSetsByRevCardinality	src/t_set.c	/^int qsortCompareSetsByRevCardinality(const void *s1, const void *s2) {$/;"	f
querybuf	src/server.h	/^    sds querybuf;           \/* Buffer we use to accumulate client queries. *\/$/;"	m	struct:client
querybuf_peak	src/server.h	/^    size_t querybuf_peak;   \/* Recent (100ms or more) peak of querybuf size. *\/$/;"	m	struct:client
queueClientForReprocessing	src/blocked.c	/^void queueClientForReprocessing(client *c) {$/;"	f
queueLoadModule	src/config.c	/^void queueLoadModule(sds path, sds *argv, int argc) {$/;"	f
queueMultiCommand	src/multi.c	/^void queueMultiCommand(client *c) {$/;"	f
queueSentinelConfig	src/sentinel.c	/^void queueSentinelConfig(sds *argv, int argc, int linenum, sds line) {$/;"	f
queued	src/server.h	/^    *colon, *queued, *null[4], *nullarray[4], *emptymap[4], *emptyset[4],$/;"	m	struct:sharedObjectsStruct
quicklist	src/quicklist.h	/^    const quicklist *quicklist;$/;"	m	struct:quicklistEntry
quicklist	src/quicklist.h	/^    const quicklist *quicklist;$/;"	m	struct:quicklistIter
quicklist	src/quicklist.h	/^typedef struct quicklist {$/;"	s
quicklist	src/quicklist.h	/^} quicklist;$/;"	t	typeref:struct:quicklist
quicklistAllowsCompression	src/quicklist.c	261;"	d	file:
quicklistAppendValuesFromZiplist	src/quicklist.c	/^quicklist *quicklistAppendValuesFromZiplist(quicklist *quicklist,$/;"	f
quicklistAppendZiplist	src/quicklist.c	/^void quicklistAppendZiplist(quicklist *quicklist, unsigned char *zl) {$/;"	f
quicklistBookmark	src/quicklist.h	/^typedef struct quicklistBookmark {$/;"	s
quicklistBookmark	src/quicklist.h	/^} quicklistBookmark;$/;"	t	typeref:struct:quicklistBookmark
quicklistBookmarkCreate	src/quicklist.c	/^int quicklistBookmarkCreate(quicklist **ql_ref, const char *name, quicklistNode *node) {$/;"	f
quicklistBookmarkDelete	src/quicklist.c	/^int quicklistBookmarkDelete(quicklist *ql, const char *name) {$/;"	f
quicklistBookmarkFind	src/quicklist.c	/^quicklistNode *quicklistBookmarkFind(quicklist *ql, const char *name) {$/;"	f
quicklistBookmarksClear	src/quicklist.c	/^void quicklistBookmarksClear(quicklist *ql) {$/;"	f
quicklistCompare	src/quicklist.c	/^int quicklistCompare(unsigned char *p1, unsigned char *p2, int p2_len) {$/;"	f
quicklistCompress	src/quicklist.c	335;"	d	file:
quicklistCompressNode	src/quicklist.c	208;"	d	file:
quicklistCount	src/quicklist.c	/^unsigned long quicklistCount(const quicklist *ql) { return ql->count; }$/;"	f
quicklistCreate	src/quicklist.c	/^quicklist *quicklistCreate(void) {$/;"	f
quicklistCreateFromZiplist	src/quicklist.c	/^quicklist *quicklistCreateFromZiplist(int fill, int compress,$/;"	f
quicklistCreateNode	src/quicklist.c	/^REDIS_STATIC quicklistNode *quicklistCreateNode(void) {$/;"	f
quicklistDecompressNode	src/quicklist.c	236;"	d	file:
quicklistDecompressNodeForUse	src/quicklist.c	244;"	d	file:
quicklistDelEntry	src/quicklist.c	/^void quicklistDelEntry(quicklistIter *iter, quicklistEntry *entry) {$/;"	f
quicklistDelIndex	src/quicklist.c	/^REDIS_STATIC int quicklistDelIndex(quicklist *quicklist, quicklistNode *node,$/;"	f
quicklistDelRange	src/quicklist.c	/^int quicklistDelRange(quicklist *quicklist, const long start,$/;"	f
quicklistDeleteIfEmpty	src/quicklist.c	574;"	d	file:
quicklistDup	src/quicklist.c	/^quicklist *quicklistDup(quicklist *orig) {$/;"	f
quicklistEntry	src/quicklist.h	/^typedef struct quicklistEntry {$/;"	s
quicklistEntry	src/quicklist.h	/^} quicklistEntry;$/;"	t	typeref:struct:quicklistEntry
quicklistGetIterator	src/quicklist.c	/^quicklistIter *quicklistGetIterator(const quicklist *quicklist, int direction) {$/;"	f
quicklistGetIteratorAtIdx	src/quicklist.c	/^quicklistIter *quicklistGetIteratorAtIdx(const quicklist *quicklist,$/;"	f
quicklistGetLzf	src/quicklist.c	/^size_t quicklistGetLzf(const quicklistNode *node, void **data) {$/;"	f
quicklistIndex	src/quicklist.c	/^int quicklistIndex(const quicklist *quicklist, const long long idx,$/;"	f
quicklistInsertAfter	src/quicklist.c	/^void quicklistInsertAfter(quicklist *quicklist, quicklistEntry *entry,$/;"	f
quicklistInsertBefore	src/quicklist.c	/^void quicklistInsertBefore(quicklist *quicklist, quicklistEntry *entry,$/;"	f
quicklistIter	src/quicklist.h	/^typedef struct quicklistIter {$/;"	s
quicklistIter	src/quicklist.h	/^} quicklistIter;$/;"	t	typeref:struct:quicklistIter
quicklistLZF	src/quicklist.h	/^typedef struct quicklistLZF {$/;"	s
quicklistLZF	src/quicklist.h	/^} quicklistLZF;$/;"	t	typeref:struct:quicklistLZF
quicklistNew	src/quicklist.c	/^quicklist *quicklistNew(int fill, int compress) {$/;"	f
quicklistNext	src/quicklist.c	/^int quicklistNext(quicklistIter *iter, quicklistEntry *entry) {$/;"	f
quicklistNode	src/quicklist.h	/^typedef struct quicklistNode {$/;"	s
quicklistNode	src/quicklist.h	/^} quicklistNode;$/;"	t	typeref:struct:quicklistNode
quicklistNodeIsCompressed	src/quicklist.h	148;"	d
quicklistNodeUpdateSz	src/quicklist.c	474;"	d	file:
quicklistPop	src/quicklist.c	/^int quicklistPop(quicklist *quicklist, int where, unsigned char **data,$/;"	f
quicklistPopCustom	src/quicklist.c	/^int quicklistPopCustom(quicklist *quicklist, int where, unsigned char **data,$/;"	f
quicklistPush	src/quicklist.c	/^void quicklistPush(quicklist *quicklist, void *value, const size_t sz,$/;"	f
quicklistPushHead	src/quicklist.c	/^int quicklistPushHead(quicklist *quicklist, void *value, size_t sz) {$/;"	f
quicklistPushTail	src/quicklist.c	/^int quicklistPushTail(quicklist *quicklist, void *value, size_t sz) {$/;"	f
quicklistRecompressOnly	src/quicklist.c	344;"	d	file:
quicklistRelease	src/quicklist.c	/^void quicklistRelease(quicklist *quicklist) {$/;"	f
quicklistReleaseIterator	src/quicklist.c	/^void quicklistReleaseIterator(quicklistIter *iter) {$/;"	f
quicklistReplaceAtIndex	src/quicklist.c	/^int quicklistReplaceAtIndex(quicklist *quicklist, long index, void *data,$/;"	f
quicklistRotate	src/quicklist.c	/^void quicklistRotate(quicklist *quicklist) {$/;"	f
quicklistSetCompressDepth	src/quicklist.c	/^void quicklistSetCompressDepth(quicklist *quicklist, int compress) {$/;"	f
quicklistSetFill	src/quicklist.c	/^void quicklistSetFill(quicklist *quicklist, int fill) {$/;"	f
quicklistSetOptions	src/quicklist.c	/^void quicklistSetOptions(quicklist *quicklist, int fill, int depth) {$/;"	f
quicklistTest	src/quicklist.c	/^int quicklistTest(int argc, char *argv[], int accurate) {$/;"	f
quiet	src/redis-benchmark.c	/^    int quiet;$/;"	m	struct:config	file:
quorum	src/sentinel.c	/^    unsigned int quorum;\/* Number of sentinels that need to agree on failure. *\/$/;"	m	struct:sentinelRedisInstance	file:
quoted_input	src/redis-cli.c	/^    int quoted_input;   \/* Force input args to be treated as quoted strings *\/$/;"	m	struct:config	file:
r	deps/jemalloc/src/jemalloc.c	/^	void	*r;	\/* Result pointer. *\/$/;"	m	struct:__anon132	file:
r	deps/lua/doc/manual.html	/^     function r() return 1,2,3 end$/;"	f
r	deps/lua/src/llex.h	/^  lua_Number r;$/;"	m	union:__anon96
r	src/geohash.h	/^        } r;$/;"	m	union:__anon51::__anon52	typeref:struct:__anon51::__anon52::__anon53
r	tests/test_helper.tcl	/^proc r {args} {$/;"	p
ractx	exp/exp2_micro.c	/^    redisAsyncContext* ractx;$/;"	m	struct:HotGroupNode	file:
rad_deg	src/geohash_helper.c	/^static inline double rad_deg(double ang) { return ang \/ D_R; }$/;"	f	file:
radius	src/geohash.h	/^        double radius;$/;"	m	union:__anon51::__anon52
randfree	src/redis-benchmark.c	/^    size_t randfree;        \/* Number of unused pointers in client->randptr *\/$/;"	m	struct:_client	file:
randlen	src/redis-benchmark.c	/^    size_t randlen;         \/* Number of pointers in client->randptr *\/$/;"	m	struct:_client	file:
randomInt	tests/support/util.tcl	/^proc randomInt {max} {$/;"	p
randomKey	tests/support/util.tcl	/^proc randomKey {} {$/;"	p
randomSignedInt	tests/support/util.tcl	/^proc randomSignedInt {max} {$/;"	p
randomULong	src/dict.h	158;"	d
randomULong	src/dict.h	160;"	d
randomValue	tests/support/util.tcl	/^proc randomValue {} {$/;"	p
randomizeClientKey	src/redis-benchmark.c	/^static void randomizeClientKey(client c) {$/;"	f	file:
randomkeyCommand	src/db.c	/^void randomkeyCommand(client *c) {$/;"	f
randomkeys	src/redis-benchmark.c	/^    int randomkeys;$/;"	m	struct:config	file:
randomkeys_keyspacelen	src/redis-benchmark.c	/^    int randomkeys_keyspacelen;$/;"	m	struct:config	file:
randpath	tests/support/util.tcl	/^proc randpath args {$/;"	p
randptr	src/redis-benchmark.c	/^    char **randptr;         \/* Pointers to :rand: strings inside the command buf *\/$/;"	m	struct:_client	file:
randstring	src/ziplist.c	/^static int randstring(char *target, unsigned int min, unsigned int max) {$/;"	f	file:
randstring	tests/support/util.tcl	/^proc randstring {min max {type binary}} {$/;"	p
rank	deps/jemalloc/include/jemalloc/internal/witness.h	/^	witness_rank_t		rank;$/;"	m	struct:witness_s
rasterLinkChangeCallback	tests/modules/hooks.c	/^void rasterLinkChangeCallback(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)$/;"	f
rawgco2ts	deps/lua/src/lstate.h	149;"	d
rawgco2u	deps/lua/src/lstate.h	151;"	d
rawmode	deps/linenoise/linenoise.c	/^static int rawmode = 0; \/* For atexit() function to check if restore is needed*\/$/;"	v	file:
rawtsvalue	deps/lua/src/lobject.h	94;"	d
rawuvalue	deps/lua/src/lobject.h	96;"	d
rax	src/module.c	/^    rax *rax;                       \/* The radix tree. *\/$/;"	m	struct:RedisModuleDict	file:
rax	src/module.c	/^    rax *rax;                       \/* parsed info data. *\/$/;"	m	struct:RedisModuleServerInfoData	file:
rax	src/rax.h	/^typedef struct rax {$/;"	s
rax	src/rax.h	/^} rax;$/;"	t	typeref:struct:rax
rax	src/stream.h	/^    rax *rax;               \/* The radix tree holding the stream. *\/$/;"	m	struct:stream
raxAddChild	src/rax.c	/^raxNode *raxAddChild(raxNode *n, unsigned char c, raxNode **childptr, raxNode ***parentlink) {$/;"	f
raxCompare	src/rax.c	/^int raxCompare(raxIterator *iter, const char *op, unsigned char *key, size_t key_len) {$/;"	f
raxCompressNode	src/rax.c	/^raxNode *raxCompressNode(raxNode *n, unsigned char *s, size_t len, raxNode **child) {$/;"	f
raxDebugMsg	src/rax.c	/^static int raxDebugMsg = 1;$/;"	v	file:
raxDebugShowNode	src/rax.c	/^void raxDebugShowNode(const char *msg, raxNode *n) {$/;"	f
raxDefragFunction	src/defrag.c	/^typedef void *(raxDefragFunction)(raxIterator *ri, void *privdata, long *defragged);$/;"	t	file:
raxEOF	src/rax.c	/^int raxEOF(raxIterator *it) {$/;"	f
raxFind	src/rax.c	/^void *raxFind(rax *rax, unsigned char *s, size_t len) {$/;"	f
raxFindParentLink	src/rax.c	/^raxNode **raxFindParentLink(raxNode *parent, raxNode *child) {$/;"	f
raxFree	src/rax.c	/^void raxFree(rax *rax) {$/;"	f
raxFreeWithCallback	src/rax.c	/^void raxFreeWithCallback(rax *rax, void (*free_callback)(void*)) {$/;"	f
raxGenericInsert	src/rax.c	/^int raxGenericInsert(rax *rax, unsigned char *s, size_t len, void *data, void **old, int overwrite) {$/;"	f
raxGetData	src/rax.c	/^void *raxGetData(raxNode *n) {$/;"	f
raxInsert	src/rax.c	/^int raxInsert(rax *rax, unsigned char *s, size_t len, void *data, void **old) {$/;"	f
raxIterator	src/rax.h	/^typedef struct raxIterator {$/;"	s
raxIterator	src/rax.h	/^} raxIterator;$/;"	t	typeref:struct:raxIterator
raxIteratorAddChars	src/rax.c	/^int raxIteratorAddChars(raxIterator *it, unsigned char *s, size_t len) {$/;"	f
raxIteratorDelChars	src/rax.c	/^void raxIteratorDelChars(raxIterator *it, size_t count) {$/;"	f
raxIteratorNextStep	src/rax.c	/^int raxIteratorNextStep(raxIterator *it, int noup) {$/;"	f
raxIteratorPrevStep	src/rax.c	/^int raxIteratorPrevStep(raxIterator *it, int noup) {$/;"	f
raxLowWalk	src/rax.c	/^static inline size_t raxLowWalk(rax *rax, unsigned char *s, size_t len, raxNode **stopnode, raxNode ***plink, int *splitpos, raxStack *ts) {$/;"	f	file:
raxNew	src/rax.c	/^rax *raxNew(void) {$/;"	f
raxNewNode	src/rax.c	/^raxNode *raxNewNode(size_t children, int datafield) {$/;"	f
raxNext	src/rax.c	/^int raxNext(raxIterator *it) {$/;"	f
raxNode	src/rax.h	/^typedef struct raxNode {$/;"	s
raxNode	src/rax.h	/^} raxNode;$/;"	t	typeref:struct:raxNode
raxNodeCallback	src/rax.h	/^typedef int (*raxNodeCallback)(raxNode **noderef);$/;"	t
raxNodeCurrentLength	src/rax.c	177;"	d	file:
raxNodeFirstChildPtr	src/rax.c	169;"	d	file:
raxNodeLastChildPtr	src/rax.c	161;"	d	file:
raxNotFound	src/rax.c	/^void *raxNotFound = (void*)"rax-not-found-pointer";$/;"	v
raxPadding	src/rax.c	157;"	d	file:
raxPrev	src/rax.c	/^int raxPrev(raxIterator *it) {$/;"	f
raxRandomWalk	src/rax.c	/^int raxRandomWalk(raxIterator *it, size_t steps) {$/;"	f
raxReallocForData	src/rax.c	/^raxNode *raxReallocForData(raxNode *n, void *data) {$/;"	f
raxRecursiveFree	src/rax.c	/^void raxRecursiveFree(rax *rax, raxNode *n, void (*free_callback)(void*)) {$/;"	f
raxRecursiveShow	src/rax.c	/^void raxRecursiveShow(int level, int lpad, raxNode *n) {$/;"	f
raxRemove	src/rax.c	/^int raxRemove(rax *rax, unsigned char *s, size_t len, void **old) {$/;"	f
raxRemoveChild	src/rax.c	/^raxNode *raxRemoveChild(raxNode *parent, raxNode *child) {$/;"	f
raxSeek	src/rax.c	/^int raxSeek(raxIterator *it, const char *op, unsigned char *ele, size_t len) {$/;"	f
raxSeekGreatest	src/rax.c	/^int raxSeekGreatest(raxIterator *it) {$/;"	f
raxSetData	src/rax.c	/^void raxSetData(raxNode *n, void *data) {$/;"	f
raxSetDebugMsg	src/rax.c	/^void raxSetDebugMsg(int onoff) {$/;"	f
raxShow	src/rax.c	/^void raxShow(rax *rax) {$/;"	f
raxSize	src/rax.c	/^uint64_t raxSize(rax *rax) {$/;"	f
raxStack	src/rax.h	/^typedef struct raxStack {$/;"	s
raxStack	src/rax.h	/^} raxStack;$/;"	t	typeref:struct:raxStack
raxStackFree	src/rax.c	/^static inline void raxStackFree(raxStack *ts) {$/;"	f	file:
raxStackInit	src/rax.c	/^static inline void raxStackInit(raxStack *ts) {$/;"	f	file:
raxStackPeek	src/rax.c	/^static inline void *raxStackPeek(raxStack *ts) {$/;"	f	file:
raxStackPop	src/rax.c	/^static inline void *raxStackPop(raxStack *ts) {$/;"	f	file:
raxStackPush	src/rax.c	/^static inline int raxStackPush(raxStack *ts, void *ptr) {$/;"	f	file:
raxStart	src/rax.c	/^void raxStart(raxIterator *it, rax *rt) {$/;"	f
raxStop	src/rax.c	/^void raxStop(raxIterator *it) {$/;"	f
raxTouch	src/rax.c	/^unsigned long raxTouch(raxNode *n) {$/;"	f
raxTryInsert	src/rax.c	/^int raxTryInsert(rax *rax, unsigned char *s, size_t len, void *data, void **old) {$/;"	f
rax_free	src/rax_malloc.h	43;"	d
rax_malloc	src/rax_malloc.h	41;"	d
rax_realloc	src/rax_malloc.h	42;"	d
rb_gen	deps/jemalloc/include/jemalloc/internal/rb.h	342;"	d
rb_new	deps/jemalloc/include/jemalloc/internal/rb.h	124;"	d
rb_node	deps/jemalloc/include/jemalloc/internal/rb.h	31;"	d
rb_node	deps/jemalloc/include/jemalloc/internal/rb.h	37;"	d
rb_proto	deps/jemalloc/include/jemalloc/internal/rb.h	167;"	d
rb_tree	deps/jemalloc/include/jemalloc/internal/rb.h	46;"	d
rbt_node_new	deps/jemalloc/include/jemalloc/internal/rb.h	116;"	d
rbt_node_new	deps/jemalloc/include/jemalloc/internal/rb.h	87;"	d
rbtn_black_height	deps/jemalloc/test/unit/rb.c	5;"	d	file:
rbtn_black_set	deps/jemalloc/include/jemalloc/internal/rb.h	111;"	d
rbtn_black_set	deps/jemalloc/include/jemalloc/internal/rb.h	81;"	d
rbtn_color_set	deps/jemalloc/include/jemalloc/internal/rb.h	105;"	d
rbtn_color_set	deps/jemalloc/include/jemalloc/internal/rb.h	72;"	d
rbtn_first	deps/jemalloc/include/jemalloc/internal/rb.h	129;"	d
rbtn_last	deps/jemalloc/include/jemalloc/internal/rb.h	139;"	d
rbtn_left_get	deps/jemalloc/include/jemalloc/internal/rb.h	52;"	d
rbtn_left_set	deps/jemalloc/include/jemalloc/internal/rb.h	54;"	d
rbtn_red_get	deps/jemalloc/include/jemalloc/internal/rb.h	103;"	d
rbtn_red_get	deps/jemalloc/include/jemalloc/internal/rb.h	69;"	d
rbtn_red_set	deps/jemalloc/include/jemalloc/internal/rb.h	108;"	d
rbtn_red_set	deps/jemalloc/include/jemalloc/internal/rb.h	77;"	d
rbtn_right_get	deps/jemalloc/include/jemalloc/internal/rb.h	60;"	d
rbtn_right_get	deps/jemalloc/include/jemalloc/internal/rb.h	96;"	d
rbtn_right_set	deps/jemalloc/include/jemalloc/internal/rb.h	63;"	d
rbtn_right_set	deps/jemalloc/include/jemalloc/internal/rb.h	98;"	d
rbtn_rotate_left	deps/jemalloc/include/jemalloc/internal/rb.h	148;"	d
rbtn_rotate_right	deps/jemalloc/include/jemalloc/internal/rb.h	155;"	d
rcvbuf	src/cluster.h	/^    char *rcvbuf;               \/* Packet reception buffer *\/$/;"	m	struct:clusterLink
rcvbuf_alloc	src/cluster.h	/^    size_t rcvbuf_alloc;        \/* Allocated size of rcvbuf *\/$/;"	m	struct:clusterLink
rcvbuf_len	src/cluster.h	/^    size_t rcvbuf_len;          \/* Used size of rcvbuf *\/$/;"	m	struct:clusterLink
rdbCheckError	src/redis-check-rdb.c	/^void rdbCheckError(const char *fmt, ...) {$/;"	f
rdbCheckHandleCrash	src/redis-check-rdb.c	/^void rdbCheckHandleCrash(int sig, siginfo_t *info, void *secret) {$/;"	f
rdbCheckInfo	src/redis-check-rdb.c	/^void rdbCheckInfo(const char *fmt, ...) {$/;"	f
rdbCheckMode	src/redis-check-rdb.c	/^int rdbCheckMode = 0;$/;"	v
rdbCheckSetError	src/redis-check-rdb.c	/^void rdbCheckSetError(const char *fmt, ...) {$/;"	f
rdbCheckSetupSignals	src/redis-check-rdb.c	/^void rdbCheckSetupSignals(void) {$/;"	f
rdbEncodeInteger	src/rdb.c	/^int rdbEncodeInteger(long long value, unsigned char *enc) {$/;"	f
rdbFileBeingLoaded	src/rdb.c	/^char* rdbFileBeingLoaded = NULL; \/* used for rdb checking on read error *\/$/;"	v
rdbGenericLoadStringObject	src/rdb.c	/^void *rdbGenericLoadStringObject(rio *rdb, int flags, size_t *lenptr) {$/;"	f
rdbIsObjectType	src/rdb.h	97;"	d
rdbLoad	src/rdb.c	/^int rdbLoad(char *filename, rdbSaveInfo *rsi, int rdbflags) {$/;"	f
rdbLoadBinaryDoubleValue	src/rdb.c	/^int rdbLoadBinaryDoubleValue(rio *rdb, double *val) {$/;"	f
rdbLoadBinaryFloatValue	src/rdb.c	/^int rdbLoadBinaryFloatValue(rio *rdb, float *val) {$/;"	f
rdbLoadCheckModuleValue	src/rdb.c	/^robj *rdbLoadCheckModuleValue(rio *rdb, char *modulename) {$/;"	f
rdbLoadDoubleValue	src/rdb.c	/^int rdbLoadDoubleValue(rio *rdb, double *val) {$/;"	f
rdbLoadEncodedStringObject	src/rdb.c	/^robj *rdbLoadEncodedStringObject(rio *rdb) {$/;"	f
rdbLoadIntegerObject	src/rdb.c	/^void *rdbLoadIntegerObject(rio *rdb, int enctype, int flags, size_t *lenptr) {$/;"	f
rdbLoadLen	src/rdb.c	/^uint64_t rdbLoadLen(rio *rdb, int *isencoded) {$/;"	f
rdbLoadLenByRef	src/rdb.c	/^int rdbLoadLenByRef(rio *rdb, int *isencoded, uint64_t *lenptr) {$/;"	f
rdbLoadLzfStringObject	src/rdb.c	/^void *rdbLoadLzfStringObject(rio *rdb, int flags, size_t *lenptr) {$/;"	f
rdbLoadMillisecondTime	src/rdb.c	/^long long rdbLoadMillisecondTime(rio *rdb, int rdbver) {$/;"	f
rdbLoadObject	src/rdb.c	/^robj *rdbLoadObject(int rdbtype, rio *rdb, sds key) {$/;"	f
rdbLoadObjectType	src/rdb.c	/^int rdbLoadObjectType(rio *rdb) {$/;"	f
rdbLoadProgressCallback	src/rdb.c	/^void rdbLoadProgressCallback(rio *r, const void *buf, size_t len) {$/;"	f
rdbLoadRio	src/rdb.c	/^int rdbLoadRio(rio *rdb, int rdbflags, rdbSaveInfo *rsi) {$/;"	f
rdbLoadStringObject	src/rdb.c	/^robj *rdbLoadStringObject(rio *rdb) {$/;"	f
rdbLoadTime	src/rdb.c	/^time_t rdbLoadTime(rio *rdb) {$/;"	f
rdbLoadType	src/rdb.c	/^int rdbLoadType(rio *rdb) {$/;"	f
rdbPipeReadHandler	src/replication.c	/^void rdbPipeReadHandler(struct aeEventLoop *eventLoop, int fd, void *clientData, int mask) {$/;"	f
rdbPipeWriteHandler	src/replication.c	/^void rdbPipeWriteHandler(struct connection *conn) {$/;"	f
rdbPipeWriteHandlerConnRemoved	src/replication.c	/^void rdbPipeWriteHandlerConnRemoved(struct connection *conn) {$/;"	f
rdbPopulateSaveInfo	src/rdb.c	/^rdbSaveInfo *rdbPopulateSaveInfo(rdbSaveInfo *rsi) {$/;"	f
rdbRemoveTempFile	src/rdb.c	/^void rdbRemoveTempFile(pid_t childpid, int from_signal) {$/;"	f
rdbReportCorruptRDB	src/rdb.c	47;"	d	file:
rdbReportError	src/rdb.c	/^void rdbReportError(int corruption_error, int linenum, char *reason, ...) {$/;"	f
rdbReportReadError	src/rdb.c	49;"	d	file:
rdbSave	src/rdb.c	/^int rdbSave(char *filename, rdbSaveInfo *rsi) {$/;"	f
rdbSaveAuxField	src/rdb.c	/^ssize_t rdbSaveAuxField(rio *rdb, void *key, size_t keylen, void *val, size_t vallen) {$/;"	f
rdbSaveAuxFieldStrInt	src/rdb.c	/^ssize_t rdbSaveAuxFieldStrInt(rio *rdb, char *key, long long val) {$/;"	f
rdbSaveAuxFieldStrStr	src/rdb.c	/^ssize_t rdbSaveAuxFieldStrStr(rio *rdb, char *key, char *val) {$/;"	f
rdbSaveBackground	src/rdb.c	/^int rdbSaveBackground(char *filename, rdbSaveInfo *rsi) {$/;"	f
rdbSaveBinaryDoubleValue	src/rdb.c	/^int rdbSaveBinaryDoubleValue(rio *rdb, double val) {$/;"	f
rdbSaveBinaryFloatValue	src/rdb.c	/^int rdbSaveBinaryFloatValue(rio *rdb, float val) {$/;"	f
rdbSaveDoubleValue	src/rdb.c	/^int rdbSaveDoubleValue(rio *rdb, double val) {$/;"	f
rdbSaveInfo	src/server.h	/^typedef struct rdbSaveInfo {$/;"	s
rdbSaveInfo	src/server.h	/^} rdbSaveInfo;$/;"	t	typeref:struct:rdbSaveInfo
rdbSaveInfoAuxFields	src/rdb.c	/^int rdbSaveInfoAuxFields(rio *rdb, int rdbflags, rdbSaveInfo *rsi) {$/;"	f
rdbSaveKeyValuePair	src/rdb.c	/^int rdbSaveKeyValuePair(rio *rdb, robj *key, robj *val, long long expiretime) {$/;"	f
rdbSaveLen	src/rdb.c	/^int rdbSaveLen(rio *rdb, uint64_t len) {$/;"	f
rdbSaveLongLongAsStringObject	src/rdb.c	/^ssize_t rdbSaveLongLongAsStringObject(rio *rdb, long long value) {$/;"	f
rdbSaveLzfBlob	src/rdb.c	/^ssize_t rdbSaveLzfBlob(rio *rdb, void *data, size_t compress_len,$/;"	f
rdbSaveLzfStringObject	src/rdb.c	/^ssize_t rdbSaveLzfStringObject(rio *rdb, unsigned char *s, size_t len) {$/;"	f
rdbSaveMillisecondTime	src/rdb.c	/^int rdbSaveMillisecondTime(rio *rdb, long long t) {$/;"	f
rdbSaveModulesAux	src/module.c	/^ssize_t rdbSaveModulesAux(rio *rdb, int when) {$/;"	f
rdbSaveObject	src/rdb.c	/^ssize_t rdbSaveObject(rio *rdb, robj *o, robj *key) {$/;"	f
rdbSaveObjectType	src/rdb.c	/^int rdbSaveObjectType(rio *rdb, robj *o) {$/;"	f
rdbSaveRawString	src/rdb.c	/^ssize_t rdbSaveRawString(rio *rdb, unsigned char *s, size_t len) {$/;"	f
rdbSaveRio	src/rdb.c	/^int rdbSaveRio(rio *rdb, int *error, int rdbflags, rdbSaveInfo *rsi) {$/;"	f
rdbSaveRioWithEOFMark	src/rdb.c	/^int rdbSaveRioWithEOFMark(rio *rdb, int *error, rdbSaveInfo *rsi) {$/;"	f
rdbSaveSingleModuleAux	src/rdb.c	/^ssize_t rdbSaveSingleModuleAux(rio *rdb, int when, moduleType *mt) {$/;"	f
rdbSaveStreamConsumers	src/rdb.c	/^size_t rdbSaveStreamConsumers(rio *rdb, streamCG *cg) {$/;"	f
rdbSaveStreamPEL	src/rdb.c	/^ssize_t rdbSaveStreamPEL(rio *rdb, rax *pel, int nacks) {$/;"	f
rdbSaveStringObject	src/rdb.c	/^ssize_t rdbSaveStringObject(rio *rdb, robj *obj) {$/;"	f
rdbSaveToSlavesSockets	src/rdb.c	/^int rdbSaveToSlavesSockets(rdbSaveInfo *rsi) {$/;"	f
rdbSaveType	src/rdb.c	/^int rdbSaveType(rio *rdb, unsigned char type) {$/;"	f
rdbSavedObjectLen	src/rdb.c	/^size_t rdbSavedObjectLen(robj *o, robj *key) {$/;"	f
rdbShowGenericInfo	src/redis-check-rdb.c	/^void rdbShowGenericInfo(void) {$/;"	f
rdbTryIntegerEncoding	src/rdb.c	/^int rdbTryIntegerEncoding(char *s, size_t len, unsigned char *enc) {$/;"	f
rdbWriteRaw	src/rdb.c	/^static ssize_t rdbWriteRaw(rio *rdb, void *p, size_t len) {$/;"	f	file:
rdb_bgsave_scheduled	src/server.h	/^    int rdb_bgsave_scheduled;       \/* BGSAVE when possible if true. *\/$/;"	m	struct:redisServer
rdb_check_doing_string	src/redis-check-rdb.c	/^char *rdb_check_doing_string[] = {$/;"	v
rdb_checksum	src/server.h	/^    int rdb_checksum;               \/* Use RDB checksum? *\/$/;"	m	struct:redisServer
rdb_child_exit_pipe	src/server.h	/^    int rdb_child_exit_pipe;        \/* Used by the diskless parent allow child exit. *\/$/;"	m	struct:redisServer
rdb_child_type	src/server.h	/^    int rdb_child_type;             \/* Type of save by active child. *\/$/;"	m	struct:redisServer
rdb_compression	src/server.h	/^    int rdb_compression;            \/* Use compression in RDB? *\/$/;"	m	struct:redisServer
rdb_del_sync_files	src/server.h	/^    int rdb_del_sync_files;         \/* Remove RDB files used only for SYNC if$/;"	m	struct:redisServer
rdb_filename	src/redis-cli.c	/^    char *rdb_filename;$/;"	m	struct:config	file:
rdb_filename	src/server.h	/^    char *rdb_filename;             \/* Name of RDB file *\/$/;"	m	struct:redisServer
rdb_fsync_range	src/config.h	117;"	d
rdb_fsync_range	src/config.h	119;"	d
rdb_key_save_delay	src/server.h	/^    int rdb_key_save_delay;         \/* Delay in microseconds between keys while$/;"	m	struct:redisServer
rdb_load	src/redismodule.h	/^    RedisModuleTypeLoadFunc rdb_load;$/;"	m	struct:RedisModuleTypeMethods
rdb_load	src/server.h	/^    moduleTypeLoadFunc rdb_load;$/;"	m	struct:RedisModuleType
rdb_pipe_buff	src/server.h	/^    char *rdb_pipe_buff;            \/* In diskless replication, this buffer holds data *\/$/;"	m	struct:redisServer
rdb_pipe_bufflen	src/server.h	/^    int rdb_pipe_bufflen;           \/* that was read from the the rdb pipe. *\/$/;"	m	struct:redisServer
rdb_pipe_conns	src/server.h	/^    connection **rdb_pipe_conns;    \/* Connections which are currently the *\/$/;"	m	struct:redisServer
rdb_pipe_numconns	src/server.h	/^    int rdb_pipe_numconns;          \/* target of diskless rdb fork child. *\/$/;"	m	struct:redisServer
rdb_pipe_numconns_writing	src/server.h	/^    int rdb_pipe_numconns_writing;  \/* Number of rdb conns with pending writes. *\/$/;"	m	struct:redisServer
rdb_pipe_read	src/server.h	/^    int rdb_pipe_read;              \/* RDB pipe used to transfer the rdb data *\/$/;"	m	struct:redisServer
rdb_save	src/redismodule.h	/^    RedisModuleTypeSaveFunc rdb_save;$/;"	m	struct:RedisModuleTypeMethods
rdb_save	src/server.h	/^    moduleTypeSaveFunc rdb_save;$/;"	m	struct:RedisModuleType
rdb_save_incremental_fsync	src/server.h	/^    int rdb_save_incremental_fsync;   \/* fsync incrementally while rdb saving? *\/$/;"	m	struct:redisServer
rdb_save_time_last	src/server.h	/^    time_t rdb_save_time_last;      \/* Time used by last RDB save run. *\/$/;"	m	struct:redisServer
rdb_save_time_start	src/server.h	/^    time_t rdb_save_time_start;     \/* Current RDB save start time. *\/$/;"	m	struct:redisServer
rdb_type_string	src/redis-check-rdb.c	/^char *rdb_type_string[] = {$/;"	v
rdbstate	src/redis-check-rdb.c	/^} rdbstate;$/;"	v	typeref:struct:__anon61
reRunParaSingle	exp/exp1.sh	/^reRunParaSingle() {$/;"	f
read	deps/hiredis/adapters/qt.h	/^        void read() { redisAsyncHandleRead(m_ctx); }$/;"	f	class:RedisQtAdapter
read	deps/hiredis/hiredis.h	/^    ssize_t (*read)(struct redisContext *, char *, size_t);$/;"	m	struct:redisContextFuncs
read	deps/jemalloc/include/jemalloc/internal/hooks.h	10;"	d
read	deps/jemalloc/src/tsd.c	304;"	d	file:
read	src/connection.h	/^    int (*read)(struct connection *conn, void *buf, size_t buf_len);$/;"	m	struct:ConnectionType
read	src/rio.h	/^    size_t (*read)(struct _rio *, void *buf, size_t len);$/;"	m	struct:_rio
readArgFromStdin	src/redis-cli.c	/^static sds readArgFromStdin(void) {$/;"	f	file:
readArgc	src/redis-check-aof.c	/^int readArgc(FILE *fp, long *target) {$/;"	f
readBytes	deps/hiredis/read.c	/^static char *readBytes(redisReader *r, unsigned int bytes) {$/;"	f	file:
readBytes	src/redis-check-aof.c	/^int readBytes(FILE *fp, char *target, long length) {$/;"	f
readChildInfo	src/childinfo.c	/^int readChildInfo(childInfoType *information_type, size_t *cow, monotime *cow_updated, size_t *keys, double* progress) {$/;"	f
readConn	src/redis-cli.c	/^static ssize_t readConn(redisContext *c, char *buf, size_t len)$/;"	f	file:
readFromClient	src/controller.c	/^void readFromClient(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
readHandler	src/redis-benchmark.c	/^static void readHandler(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	file:
readLine	deps/hiredis/read.c	/^static char *readLine(redisReader *r, int *_len) {$/;"	f	file:
readLong	src/redis-check-aof.c	/^int readLong(FILE *fp, char prefix, long *target) {$/;"	f
readOOMScoreAdj	src/server.c	/^static void readOOMScoreAdj(void) {$/;"	f	file:
readQueryFromClient	src/networking.c	/^void readQueryFromClient(connection *conn) {$/;"	f
readString	src/redis-check-aof.c	/^int readString(FILE *fp, char** target) {$/;"	f
readSyncBulkPayload	src/replication.c	/^void readSyncBulkPayload(connection *conn) {$/;"	f
read_chars	deps/lua/src/liolib.c	/^static int read_chars (lua_State *L, FILE *f, size_t n) {$/;"	f	file:
read_cli	tests/integration/redis-cli.tcl	/^    proc read_cli {fd} {$/;"	p
read_from_replication_stream	tests/test_helper.tcl	/^proc read_from_replication_stream {s} {$/;"	p
read_from_test_client	tests/test_helper.tcl	/^proc read_from_test_client fd {$/;"	p
read_handler	src/connection.h	/^    ConnectionCallbackFunc read_handler;$/;"	m	struct:connection
read_limit	src/rio.h	/^            size_t read_limit;  \/* don't allow to buffer\/read more than that *\/$/;"	m	struct:_rio::__anon54::__anon57
read_line	deps/lua/src/liolib.c	/^static int read_line (lua_State *L, FILE *f) {$/;"	f	file:
read_long_string	deps/lua/src/llex.c	/^static void read_long_string (LexState *ls, SemInfo *seminfo, int sep) {$/;"	f	file:
read_number	deps/lua/src/liolib.c	/^static int read_number (lua_State *L, FILE *f) {$/;"	f	file:
read_numeral	deps/lua/src/llex.c	/^static void read_numeral (LexState *ls, SemInfo *seminfo) {$/;"	f	file:
read_proc_title	tests/unit/other.tcl	/^proc read_proc_title {pid} {$/;"	p
read_reploff	src/server.h	/^    long long read_reploff; \/* Read replication offset if this is a master. *\/$/;"	m	struct:client
read_so_far	src/rio.h	/^            size_t read_so_far; \/* amount of data read from the rio (not buffered) *\/$/;"	m	struct:_rio::__anon54::__anon57
read_string	deps/lua/src/llex.c	/^static void read_string (LexState *ls, int del, SemInfo *seminfo) {$/;"	f	file:
readable	deps/lua/src/loadlib.c	/^static int readable (const char *filename) {$/;"	f	file:
reader	deps/hiredis/hiredis.h	/^    redisReader *reader; \/* Protocol reader *\/$/;"	m	struct:redisContext
reader	deps/lua/src/lzio.h	/^  lua_Reader reader;$/;"	m	struct:Zio
reading	deps/hiredis/adapters/ae.h	/^    int reading, writing;$/;"	m	struct:redisAeEvents
reading	deps/hiredis/adapters/libev.h	/^    int reading, writing;$/;"	m	struct:redisLibevEvents
reading	src/sentinel.c	/^    int reading, writing;$/;"	m	struct:redisAeEvents	file:
readlink	deps/jemalloc/include/jemalloc/internal/hooks.h	12;"	d
readonlyCommand	src/cluster.c	/^void readonlyCommand(client *c) {$/;"	f
readwriteCommand	src/cluster.c	/^void readwriteCommand(client *c) {$/;"	f
readyList	src/server.h	/^typedef struct readyList {$/;"	s
readyList	src/server.h	/^} readyList;$/;"	t	typeref:struct:readyList
ready_keys	src/server.h	/^    dict *ready_keys;           \/* Blocked keys that received a PUSH *\/$/;"	m	struct:redisDb
ready_keys	src/server.h	/^    list *ready_keys;        \/* List of readyList structures for BLPOP & co *\/$/;"	m	struct:redisServer
realloc	deps/jemalloc/src/zone.c	/^	void *(*realloc)(struct _malloc_zone_t *, void *, size_t);$/;"	m	struct:_malloc_zone_t	file:
realloc	src/zmalloc.c	72;"	d	file:
realloc	src/zmalloc.c	77;"	d	file:
reallocFn	deps/hiredis/alloc.h	/^    void *(*reallocFn)(void*,size_t);$/;"	m	struct:hiredisAllocFuncs
reallocs	deps/lua/src/strbuf.h	/^    int reallocs;$/;"	m	struct:__anon105
reallymarkobject	deps/lua/src/lgc.c	/^static void reallymarkobject (global_State *g, GCObject *o) {$/;"	f	file:
reason	src/acl.c	/^    int reason;         \/* Reason for denying the command. ACL_DENIED_*. *\/$/;"	m	struct:ACLLogEntry	file:
receiveChildInfo	src/childinfo.c	/^void receiveChildInfo(void) {$/;"	f
receiveSynchronousResponse	src/replication.c	/^char *receiveSynchronousResponse(connection *conn) {$/;"	f
recfield	deps/lua/src/lparser.c	/^static void recfield (LexState *ls, struct ConsControl *cc) {$/;"	f	file:
recompress	src/quicklist.h	/^    unsigned int recompress : 1; \/* was this node previous compressed? *\/$/;"	m	struct:quicklistNode
reconnect	tests/test_helper.tcl	/^proc reconnect {args} {$/;"	p
reconnectingRedisCommand	src/redis-cli.c	/^static redisReply *reconnectingRedisCommand(redisContext *c, const char *fmt, ...) {$/;"	f	file:
recorded	deps/hdr_histogram/hdr_histogram.h	/^        struct hdr_iter_recorded recorded;$/;"	m	union:hdr_iter::__anon117	typeref:struct:hdr_iter::__anon117::hdr_iter_recorded
recorded_iter_next	deps/hdr_histogram/hdr_histogram.c	/^static bool recorded_iter_next(struct hdr_iter* iter)$/;"	f	file:
recv	deps/hiredis/sockcompat.h	86;"	d
redis	tests/support/redis.tcl	/^proc redis {{server 127.0.0.1} {port 6379} {defer 0} {tls 0} {tlsoptions {}}} {$/;"	p
redisAeAddRead	deps/hiredis/adapters/ae.h	/^static void redisAeAddRead(void *privdata) {$/;"	f
redisAeAddRead	src/sentinel.c	/^static void redisAeAddRead(void *privdata) {$/;"	f	file:
redisAeAddWrite	deps/hiredis/adapters/ae.h	/^static void redisAeAddWrite(void *privdata) {$/;"	f
redisAeAddWrite	src/sentinel.c	/^static void redisAeAddWrite(void *privdata) {$/;"	f	file:
redisAeAttach	deps/hiredis/adapters/ae.h	/^static int redisAeAttach(aeEventLoop *loop, redisAsyncContext *ac) {$/;"	f
redisAeAttach	src/sentinel.c	/^static int redisAeAttach(aeEventLoop *loop, redisAsyncContext *ac) {$/;"	f	file:
redisAeCleanup	deps/hiredis/adapters/ae.h	/^static void redisAeCleanup(void *privdata) {$/;"	f
redisAeCleanup	src/sentinel.c	/^static void redisAeCleanup(void *privdata) {$/;"	f	file:
redisAeDelRead	deps/hiredis/adapters/ae.h	/^static void redisAeDelRead(void *privdata) {$/;"	f
redisAeDelRead	src/sentinel.c	/^static void redisAeDelRead(void *privdata) {$/;"	f	file:
redisAeDelWrite	deps/hiredis/adapters/ae.h	/^static void redisAeDelWrite(void *privdata) {$/;"	f
redisAeDelWrite	src/sentinel.c	/^static void redisAeDelWrite(void *privdata) {$/;"	f	file:
redisAeEvents	deps/hiredis/adapters/ae.h	/^typedef struct redisAeEvents {$/;"	s
redisAeEvents	deps/hiredis/adapters/ae.h	/^} redisAeEvents;$/;"	t	typeref:struct:redisAeEvents
redisAeEvents	src/sentinel.c	/^typedef struct redisAeEvents {$/;"	s	file:
redisAeEvents	src/sentinel.c	/^} redisAeEvents;$/;"	t	typeref:struct:redisAeEvents	file:
redisAeReadEvent	deps/hiredis/adapters/ae.h	/^static void redisAeReadEvent(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
redisAeReadEvent	src/sentinel.c	/^static void redisAeReadEvent(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	file:
redisAeWriteEvent	deps/hiredis/adapters/ae.h	/^static void redisAeWriteEvent(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
redisAeWriteEvent	src/sentinel.c	/^static void redisAeWriteEvent(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	file:
redisAppendCommand	deps/hiredis/hiredis.c	/^int redisAppendCommand(redisContext *c, const char *format, ...) {$/;"	f
redisAppendCommandArgv	deps/hiredis/hiredis.c	/^int redisAppendCommandArgv(redisContext *c, int argc, const char **argv, const size_t *argvlen) {$/;"	f
redisAppendFormattedCommand	deps/hiredis/hiredis.c	/^int redisAppendFormattedCommand(redisContext *c, const char *cmd, size_t len) {$/;"	f
redisAsciiArt	src/server.c	/^void redisAsciiArt(void) {$/;"	f
redisAsyncCommand	deps/hiredis/async.c	/^int redisAsyncCommand(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, const char *format, ...) {$/;"	f
redisAsyncCommandArgv	deps/hiredis/async.c	/^int redisAsyncCommandArgv(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, int argc, const char **argv, const size_t *argvlen) {$/;"	f
redisAsyncConnect	deps/hiredis/async.c	/^redisAsyncContext *redisAsyncConnect(const char *ip, int port) {$/;"	f
redisAsyncConnectBind	deps/hiredis/async.c	/^redisAsyncContext *redisAsyncConnectBind(const char *ip, int port,$/;"	f
redisAsyncConnectBindWithReuse	deps/hiredis/async.c	/^redisAsyncContext *redisAsyncConnectBindWithReuse(const char *ip, int port,$/;"	f
redisAsyncConnectUnix	deps/hiredis/async.c	/^redisAsyncContext *redisAsyncConnectUnix(const char *path) {$/;"	f
redisAsyncConnectWithOptions	deps/hiredis/async.c	/^redisAsyncContext *redisAsyncConnectWithOptions(const redisOptions *options) {$/;"	f
redisAsyncContext	deps/hiredis/async.h	/^typedef struct redisAsyncContext {$/;"	s
redisAsyncContext	deps/hiredis/async.h	/^} redisAsyncContext;$/;"	t	typeref:struct:redisAsyncContext
redisAsyncDisconnect	deps/hiredis/async.c	/^void redisAsyncDisconnect(redisAsyncContext *ac) {$/;"	f
redisAsyncFormattedCommand	deps/hiredis/async.c	/^int redisAsyncFormattedCommand(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, const char *cmd, size_t len) {$/;"	f
redisAsyncFree	deps/hiredis/async.c	/^void redisAsyncFree(redisAsyncContext *ac) {$/;"	f
redisAsyncHandleRead	deps/hiredis/async.c	/^void redisAsyncHandleRead(redisAsyncContext *ac) {$/;"	f
redisAsyncHandleTimeout	deps/hiredis/async.c	/^void redisAsyncHandleTimeout(redisAsyncContext *ac) {$/;"	f
redisAsyncHandleWrite	deps/hiredis/async.c	/^void redisAsyncHandleWrite(redisAsyncContext *ac) {$/;"	f
redisAsyncInitialize	deps/hiredis/async.c	/^static redisAsyncContext *redisAsyncInitialize(redisContext *c) {$/;"	f	file:
redisAsyncPushFn	deps/hiredis/hiredis.h	/^typedef void (redisAsyncPushFn)(struct redisAsyncContext *, void *);$/;"	t
redisAsyncRead	deps/hiredis/async.c	/^void redisAsyncRead(redisAsyncContext *ac) {$/;"	f
redisAsyncSetConnectCallback	deps/hiredis/async.c	/^int redisAsyncSetConnectCallback(redisAsyncContext *ac, redisConnectCallback *fn) {$/;"	f
redisAsyncSetDisconnectCallback	deps/hiredis/async.c	/^int redisAsyncSetDisconnectCallback(redisAsyncContext *ac, redisDisconnectCallback *fn) {$/;"	f
redisAsyncSetPushCallback	deps/hiredis/async.c	/^redisAsyncPushFn *redisAsyncSetPushCallback(redisAsyncContext *ac, redisAsyncPushFn *fn) {$/;"	f
redisAsyncSetTimeout	deps/hiredis/async.c	/^int redisAsyncSetTimeout(redisAsyncContext *ac, struct timeval tv) {$/;"	f
redisAsyncWrite	deps/hiredis/async.c	/^void redisAsyncWrite(redisAsyncContext *ac) {$/;"	f
redisAtomic	src/atomicvar.h	59;"	d
redisAtomic	src/atomicvar.h	87;"	d
redisAtomic	src/atomicvar.h	88;"	d
redisBitpos	src/bitops.c	/^long redisBitpos(void *s, unsigned long count, int bit) {$/;"	f
redisBufferRead	deps/hiredis/hiredis.c	/^int redisBufferRead(redisContext *c) {$/;"	f
redisBufferWrite	deps/hiredis/hiredis.c	/^int redisBufferWrite(redisContext *c, int *done) {$/;"	f
redisBuildId	src/release.c	/^uint64_t redisBuildId(void) {$/;"	f
redisBuildIdString	src/release.c	/^char *redisBuildIdString(void) {$/;"	f
redisCallback	deps/hiredis/async.h	/^typedef struct redisCallback {$/;"	s
redisCallback	deps/hiredis/async.h	/^} redisCallback;$/;"	t	typeref:struct:redisCallback
redisCallbackFn	deps/hiredis/async.h	/^typedef void (redisCallbackFn)(struct redisAsyncContext*, void*, void*);$/;"	t
redisCallbackList	deps/hiredis/async.h	/^typedef struct redisCallbackList {$/;"	s
redisCallbackList	deps/hiredis/async.h	/^} redisCallbackList;$/;"	t	typeref:struct:redisCallbackList
redisCheckConnectDone	deps/hiredis/net.c	/^int redisCheckConnectDone(redisContext *c, int *completed) {$/;"	f
redisCheckSocketError	deps/hiredis/net.c	/^int redisCheckSocketError(redisContext *c) {$/;"	f
redisCommand	deps/hiredis/hiredis.c	/^void *redisCommand(redisContext *c, const char *format, ...) {$/;"	f
redisCommand	src/server.h	/^struct redisCommand {$/;"	s
redisCommandArgv	deps/hiredis/hiredis.c	/^void *redisCommandArgv(redisContext *c, int argc, const char **argv, const size_t *argvlen) {$/;"	f
redisCommandProc	src/server.h	/^typedef void redisCommandProc(client *c);$/;"	t
redisCommandTable	src/server.c	/^    struct redisCommand redisCommandTable[] = {$/;"	v	typeref:struct:redisCommand
redisCommunicateSystemd	src/server.c	/^int redisCommunicateSystemd(const char *sd_notify_msg) {$/;"	f
redisConfig	src/redis-benchmark.c	/^typedef struct redisConfig {$/;"	s	file:
redisConfig	src/redis-benchmark.c	/^} redisConfig;$/;"	t	typeref:struct:redisConfig	file:
redisConnect	deps/hiredis/hiredis.c	/^redisContext *redisConnect(const char *ip, int port) {$/;"	f
redisConnectBindNonBlock	deps/hiredis/hiredis.c	/^redisContext *redisConnectBindNonBlock(const char *ip, int port,$/;"	f
redisConnectBindNonBlockWithReuse	deps/hiredis/hiredis.c	/^redisContext *redisConnectBindNonBlockWithReuse(const char *ip, int port,$/;"	f
redisConnectCallback	deps/hiredis/async.h	/^typedef void (redisConnectCallback)(const struct redisAsyncContext*, int status);$/;"	t
redisConnectFd	deps/hiredis/hiredis.c	/^redisContext *redisConnectFd(redisFD fd) {$/;"	f
redisConnectNonBlock	deps/hiredis/hiredis.c	/^redisContext *redisConnectNonBlock(const char *ip, int port) {$/;"	f
redisConnectUnix	deps/hiredis/hiredis.c	/^redisContext *redisConnectUnix(const char *path) {$/;"	f
redisConnectUnixNonBlock	deps/hiredis/hiredis.c	/^redisContext *redisConnectUnixNonBlock(const char *path) {$/;"	f
redisConnectUnixWithTimeout	deps/hiredis/hiredis.c	/^redisContext *redisConnectUnixWithTimeout(const char *path, const struct timeval tv) {$/;"	f
redisConnectWithOptions	deps/hiredis/hiredis.c	/^redisContext *redisConnectWithOptions(const redisOptions *options) {$/;"	f
redisConnectWithTimeout	deps/hiredis/hiredis.c	/^redisContext *redisConnectWithTimeout(const char *ip, int port, const struct timeval tv) {$/;"	f
redisConnectionType	deps/hiredis/hiredis.h	/^enum redisConnectionType {$/;"	g
redisContext	deps/hiredis/hiredis.h	/^typedef struct redisContext {$/;"	s
redisContext	deps/hiredis/hiredis.h	/^} redisContext;$/;"	t	typeref:struct:redisContext
redisContextConnectBindTcp	deps/hiredis/net.c	/^int redisContextConnectBindTcp(redisContext *c, const char *addr, int port,$/;"	f
redisContextConnectTcp	deps/hiredis/net.c	/^int redisContextConnectTcp(redisContext *c, const char *addr, int port,$/;"	f
redisContextConnectUnix	deps/hiredis/net.c	/^int redisContextConnectUnix(redisContext *c, const char *path, const struct timeval *timeout) {$/;"	f
redisContextDefaultFuncs	deps/hiredis/hiredis.c	/^static redisContextFuncs redisContextDefaultFuncs = {$/;"	v	file:
redisContextFuncs	deps/hiredis/hiredis.h	/^typedef struct redisContextFuncs {$/;"	s
redisContextFuncs	deps/hiredis/hiredis.h	/^} redisContextFuncs;$/;"	t	typeref:struct:redisContextFuncs
redisContextInit	deps/hiredis/hiredis.c	/^static redisContext *redisContextInit(void) {$/;"	f	file:
redisContextSSLFuncs	deps/hiredis/ssl.c	/^redisContextFuncs redisContextSSLFuncs = {$/;"	v
redisContextSSLFuncs	deps/hiredis/ssl.c	/^redisContextFuncs redisContextSSLFuncs;$/;"	v
redisContextSetTimeout	deps/hiredis/net.c	/^int redisContextSetTimeout(redisContext *c, const struct timeval tv) {$/;"	f
redisContextTimeoutMsec	deps/hiredis/net.c	/^static int redisContextTimeoutMsec(redisContext *c, long *result)$/;"	f	file:
redisContextUpdateCommandTimeout	deps/hiredis/net.c	/^int redisContextUpdateCommandTimeout(redisContext *c, const struct timeval *timeout) {$/;"	f
redisContextUpdateConnectTimeout	deps/hiredis/net.c	/^int redisContextUpdateConnectTimeout(redisContext *c, const struct timeval *timeout) {$/;"	f
redisContextWaitReady	deps/hiredis/net.c	/^static int redisContextWaitReady(redisContext *c, long msec) {$/;"	f	file:
redisCopy	utils/redis-copy.rb	/^def redisCopy(opts={})$/;"	f
redisCreateSSLContext	deps/hiredis/ssl.c	/^redisSSLContext *redisCreateSSLContext(const char *cacert_filename, const char *capath,$/;"	f
redisCreateSocket	deps/hiredis/net.c	/^static int redisCreateSocket(redisContext *c, int type) {$/;"	f	file:
redisDb	src/server.h	/^typedef struct redisDb {$/;"	s
redisDb	src/server.h	/^} redisDb;$/;"	t	typeref:struct:redisDb
redisDebug	src/server.h	2771;"	d
redisDebugMark	src/server.h	2773;"	d
redisDisconnectCallback	deps/hiredis/async.h	/^typedef void (redisDisconnectCallback)(const struct redisAsyncContext*, int status);$/;"	t
redisEnableKeepAlive	deps/hiredis/hiredis.c	/^int redisEnableKeepAlive(redisContext *c) {$/;"	f
redisError	src/server.h	/^struct redisError {$/;"	s
redisFD	deps/hiredis/hiredis.h	/^typedef int redisFD;$/;"	t
redisFD	deps/hiredis/hiredis.h	/^typedef unsigned long long redisFD; \/* SOCKET = 64-bit UINT_PTR *\/$/;"	t
redisFD	deps/hiredis/hiredis.h	/^typedef unsigned long redisFD;      \/* SOCKET = 32-bit UINT_PTR *\/$/;"	t
redisFork	src/server.c	/^int redisFork(int purpose) {$/;"	f
redisFormatCommand	deps/hiredis/hiredis.c	/^int redisFormatCommand(char **target, const char *format, ...) {$/;"	f
redisFormatCommandArgv	deps/hiredis/hiredis.c	/^int redisFormatCommandArgv(char **target, int argc, const char **argv, const size_t *argvlen) {$/;"	f
redisFormatSdsCommandArgv	deps/hiredis/hiredis.c	/^int redisFormatSdsCommandArgv(hisds *target, int argc, const char **argv,$/;"	f
redisFree	deps/hiredis/hiredis.c	/^void redisFree(redisContext *c) {$/;"	f
redisFreeCommand	deps/hiredis/hiredis.c	/^void redisFreeCommand(char *cmd) {$/;"	f
redisFreeKeepFd	deps/hiredis/hiredis.c	/^redisFD redisFreeKeepFd(redisContext *c) {$/;"	f
redisFreeSSLContext	deps/hiredis/ssl.c	/^void redisFreeSSLContext(redisSSLContext *ctx)$/;"	f
redisFreeSdsCommand	deps/hiredis/hiredis.c	/^void redisFreeSdsCommand(hisds cmd) {$/;"	f
redisFunctionSym	src/server.h	/^struct redisFunctionSym {$/;"	s
redisGetKeysProc	src/server.h	/^typedef int redisGetKeysProc(struct redisCommand *cmd, robj **argv, int argc, getKeysResult *result);$/;"	t
redisGetReply	deps/hiredis/hiredis.c	/^int redisGetReply(redisContext *c, void **reply) {$/;"	f
redisGetReplyFromReader	deps/hiredis/hiredis.c	/^int redisGetReplyFromReader(redisContext *c, void **reply) {$/;"	f
redisGitDirty	src/release.c	/^char *redisGitDirty(void) {$/;"	f
redisGitSHA1	src/release.c	/^char *redisGitSHA1(void) {$/;"	f
redisHandledPushReply	deps/hiredis/hiredis.c	/^static int redisHandledPushReply(redisContext *c, void *reply) {$/;"	f	file:
redisInitOpenSSL	deps/hiredis/ssl.c	/^int redisInitOpenSSL(void)$/;"	f
redisInitiateSSL	deps/hiredis/ssl.c	/^int redisInitiateSSL(redisContext *c, SSL *ssl) {$/;"	f
redisInitiateSSLWithContext	deps/hiredis/ssl.c	/^int redisInitiateSSLWithContext(redisContext *c, redisSSLContext *redis_ssl_ctx)$/;"	f
redisIsPushReply	deps/hiredis/hiredis.h	100;"	d
redisIsSpontaneousPushReply	deps/hiredis/async.c	480;"	d	file:
redisIsSubscribeReply	deps/hiredis/async.c	/^static int redisIsSubscribeReply(redisReply *reply) {$/;"	f	file:
redisIsSupervised	src/server.c	/^int redisIsSupervised(int mode) {$/;"	f
redisIvykisAddRead	deps/hiredis/adapters/ivykis.h	/^static void redisIvykisAddRead(void *privdata) {$/;"	f
redisIvykisAddWrite	deps/hiredis/adapters/ivykis.h	/^static void redisIvykisAddWrite(void *privdata) {$/;"	f
redisIvykisAttach	deps/hiredis/adapters/ivykis.h	/^static int redisIvykisAttach(redisAsyncContext *ac) {$/;"	f
redisIvykisCleanup	deps/hiredis/adapters/ivykis.h	/^static void redisIvykisCleanup(void *privdata) {$/;"	f
redisIvykisDelRead	deps/hiredis/adapters/ivykis.h	/^static void redisIvykisDelRead(void *privdata) {$/;"	f
redisIvykisDelWrite	deps/hiredis/adapters/ivykis.h	/^static void redisIvykisDelWrite(void *privdata) {$/;"	f
redisIvykisEvents	deps/hiredis/adapters/ivykis.h	/^typedef struct redisIvykisEvents {$/;"	s
redisIvykisEvents	deps/hiredis/adapters/ivykis.h	/^} redisIvykisEvents;$/;"	t	typeref:struct:redisIvykisEvents
redisIvykisReadEvent	deps/hiredis/adapters/ivykis.h	/^static void redisIvykisReadEvent(void *arg) {$/;"	f
redisIvykisWriteEvent	deps/hiredis/adapters/ivykis.h	/^static void redisIvykisWriteEvent(void *arg) {$/;"	f
redisKeepAlive	deps/hiredis/net.c	/^int redisKeepAlive(redisContext *c, int interval) {$/;"	f
redisLibevAddRead	deps/hiredis/adapters/libev.h	/^static void redisLibevAddRead(void *privdata) {$/;"	f
redisLibevAddWrite	deps/hiredis/adapters/libev.h	/^static void redisLibevAddWrite(void *privdata) {$/;"	f
redisLibevAttach	deps/hiredis/adapters/libev.h	/^static int redisLibevAttach(EV_P_ redisAsyncContext *ac) {$/;"	f
redisLibevCleanup	deps/hiredis/adapters/libev.h	/^static void redisLibevCleanup(void *privdata) {$/;"	f
redisLibevDelRead	deps/hiredis/adapters/libev.h	/^static void redisLibevDelRead(void *privdata) {$/;"	f
redisLibevDelWrite	deps/hiredis/adapters/libev.h	/^static void redisLibevDelWrite(void *privdata) {$/;"	f
redisLibevEvents	deps/hiredis/adapters/libev.h	/^typedef struct redisLibevEvents {$/;"	s
redisLibevEvents	deps/hiredis/adapters/libev.h	/^} redisLibevEvents;$/;"	t	typeref:struct:redisLibevEvents
redisLibevReadEvent	deps/hiredis/adapters/libev.h	/^static void redisLibevReadEvent(EV_P_ ev_io *watcher, int revents) {$/;"	f
redisLibevSetTimeout	deps/hiredis/adapters/libev.h	/^static void redisLibevSetTimeout(void *privdata, struct timeval tv) {$/;"	f
redisLibevStopTimer	deps/hiredis/adapters/libev.h	/^static void redisLibevStopTimer(void *privdata) {$/;"	f
redisLibevTimeout	deps/hiredis/adapters/libev.h	/^static void redisLibevTimeout(EV_P_ ev_timer *timer, int revents) {$/;"	f
redisLibevWriteEvent	deps/hiredis/adapters/libev.h	/^static void redisLibevWriteEvent(EV_P_ ev_io *watcher, int revents) {$/;"	f
redisLibeventAddRead	deps/hiredis/adapters/libevent.h	/^static void redisLibeventAddRead(void *privdata) {$/;"	f
redisLibeventAddWrite	deps/hiredis/adapters/libevent.h	/^static void redisLibeventAddWrite(void *privdata) {$/;"	f
redisLibeventAttach	deps/hiredis/adapters/libevent.h	/^static int redisLibeventAttach(redisAsyncContext *ac, struct event_base *base) {$/;"	f
redisLibeventCleanup	deps/hiredis/adapters/libevent.h	/^static void redisLibeventCleanup(void *privdata) {$/;"	f
redisLibeventDelRead	deps/hiredis/adapters/libevent.h	/^static void redisLibeventDelRead(void *privdata) {$/;"	f
redisLibeventDelWrite	deps/hiredis/adapters/libevent.h	/^static void redisLibeventDelWrite(void *privdata) {$/;"	f
redisLibeventDestroy	deps/hiredis/adapters/libevent.h	/^static void redisLibeventDestroy(redisLibeventEvents *e) {$/;"	f
redisLibeventEvents	deps/hiredis/adapters/libevent.h	/^typedef struct redisLibeventEvents {$/;"	s
redisLibeventEvents	deps/hiredis/adapters/libevent.h	/^} redisLibeventEvents;$/;"	t	typeref:struct:redisLibeventEvents
redisLibeventHandler	deps/hiredis/adapters/libevent.h	/^static void redisLibeventHandler(int fd, short event, void *arg) {$/;"	f
redisLibeventSetTimeout	deps/hiredis/adapters/libevent.h	/^static void redisLibeventSetTimeout(void *privdata, struct timeval tv) {$/;"	f
redisLibeventUpdate	deps/hiredis/adapters/libevent.h	/^static void redisLibeventUpdate(void *privdata, short flag, int isRemove) {$/;"	f
redisLibuvAddRead	deps/hiredis/adapters/libuv.h	/^static void redisLibuvAddRead(void *privdata) {$/;"	f
redisLibuvAddWrite	deps/hiredis/adapters/libuv.h	/^static void redisLibuvAddWrite(void *privdata) {$/;"	f
redisLibuvAttach	deps/hiredis/adapters/libuv.h	/^static int redisLibuvAttach(redisAsyncContext* ac, uv_loop_t* loop) {$/;"	f
redisLibuvCleanup	deps/hiredis/adapters/libuv.h	/^static void redisLibuvCleanup(void *privdata) {$/;"	f
redisLibuvDelRead	deps/hiredis/adapters/libuv.h	/^static void redisLibuvDelRead(void *privdata) {$/;"	f
redisLibuvDelWrite	deps/hiredis/adapters/libuv.h	/^static void redisLibuvDelWrite(void *privdata) {$/;"	f
redisLibuvEvents	deps/hiredis/adapters/libuv.h	/^typedef struct redisLibuvEvents {$/;"	s
redisLibuvEvents	deps/hiredis/adapters/libuv.h	/^} redisLibuvEvents;$/;"	t	typeref:struct:redisLibuvEvents
redisLibuvPoll	deps/hiredis/adapters/libuv.h	/^static void redisLibuvPoll(uv_poll_t* handle, int status, int events) {$/;"	f
redisLrand48	src/rand.c	/^int32_t redisLrand48() {$/;"	f
redisMacOSAddRead	deps/hiredis/adapters/macosx.h	/^static void redisMacOSAddRead(void *privdata) {$/;"	f
redisMacOSAddWrite	deps/hiredis/adapters/macosx.h	/^static void redisMacOSAddWrite(void *privdata) {$/;"	f
redisMacOSAsyncCallback	deps/hiredis/adapters/macosx.h	/^static void redisMacOSAsyncCallback(CFSocketRef __unused s, CFSocketCallBackType callbackType, CFDataRef __unused address, const void __unused *data, void *info) {$/;"	f
redisMacOSAttach	deps/hiredis/adapters/macosx.h	/^static int redisMacOSAttach(redisAsyncContext *redisAsyncCtx, CFRunLoopRef runLoop) {$/;"	f
redisMacOSCleanup	deps/hiredis/adapters/macosx.h	/^static void redisMacOSCleanup(void *privdata) {$/;"	f
redisMacOSDelRead	deps/hiredis/adapters/macosx.h	/^static void redisMacOSDelRead(void *privdata) {$/;"	f
redisMacOSDelWrite	deps/hiredis/adapters/macosx.h	/^static void redisMacOSDelWrite(void *privdata) {$/;"	f
redisMemOverhead	src/server.h	/^struct redisMemOverhead {$/;"	s
redisNetClose	deps/hiredis/net.c	/^void redisNetClose(redisContext *c) {$/;"	f
redisNetRead	deps/hiredis/net.c	/^ssize_t redisNetRead(redisContext *c, char *buf, size_t bufcap) {$/;"	f
redisNetWrite	deps/hiredis/net.c	/^ssize_t redisNetWrite(redisContext *c) {$/;"	f
redisNodeFlags	src/cluster.c	/^struct redisNodeFlags {$/;"	s	file:
redisNodeFlagsTable	src/cluster.c	/^static struct redisNodeFlags redisNodeFlagsTable[] = {$/;"	v	typeref:struct:redisNodeFlags	file:
redisObject	src/server.h	/^typedef struct redisObject {$/;"	s
redisOp	src/server.h	/^typedef struct redisOp {$/;"	s
redisOp	src/server.h	/^} redisOp;$/;"	t	typeref:struct:redisOp
redisOpArray	src/server.h	/^typedef struct redisOpArray {$/;"	s
redisOpArray	src/server.h	/^} redisOpArray;$/;"	t	typeref:struct:redisOpArray
redisOpArrayAppend	src/server.c	/^int redisOpArrayAppend(redisOpArray *oa, struct redisCommand *cmd, int dbid,$/;"	f
redisOpArrayFree	src/server.c	/^void redisOpArrayFree(redisOpArray *oa) {$/;"	f
redisOpArrayInit	src/server.c	/^void redisOpArrayInit(redisOpArray *oa) {$/;"	f
redisOptions	deps/hiredis/hiredis.h	/^} redisOptions;$/;"	t	typeref:struct:__anon80
redisOutOfMemoryHandler	src/server.c	/^void redisOutOfMemoryHandler(size_t allocation_size) {$/;"	f
redisPopcount	src/bitops.c	/^size_t redisPopcount(void *s, long count) {$/;"	f
redisProcTitleGetVariable	src/server.c	/^static sds redisProcTitleGetVariable(const sds varname, void *arg)$/;"	f	file:
redisProcessCallbacks	deps/hiredis/async.c	/^void redisProcessCallbacks(redisAsyncContext *ac) {$/;"	f
redisProtocolToLuaType	src/scripting.c	/^char *redisProtocolToLuaType(lua_State *lua, char* reply) {$/;"	f
redisProtocolToLuaType_Aggregate	src/scripting.c	/^char *redisProtocolToLuaType_Aggregate(lua_State *lua, char *reply, int atype) {$/;"	f
redisProtocolToLuaType_Bool	src/scripting.c	/^char *redisProtocolToLuaType_Bool(lua_State *lua, char *reply, int tf) {$/;"	f
redisProtocolToLuaType_Bulk	src/scripting.c	/^char *redisProtocolToLuaType_Bulk(lua_State *lua, char *reply) {$/;"	f
redisProtocolToLuaType_Double	src/scripting.c	/^char *redisProtocolToLuaType_Double(lua_State *lua, char *reply) {$/;"	f
redisProtocolToLuaType_Error	src/scripting.c	/^char *redisProtocolToLuaType_Error(lua_State *lua, char *reply) {$/;"	f
redisProtocolToLuaType_Int	src/scripting.c	/^char *redisProtocolToLuaType_Int(lua_State *lua, char *reply) {$/;"	f
redisProtocolToLuaType_Null	src/scripting.c	/^char *redisProtocolToLuaType_Null(lua_State *lua, char *reply) {$/;"	f
redisProtocolToLuaType_Status	src/scripting.c	/^char *redisProtocolToLuaType_Status(lua_State *lua, char *reply) {$/;"	f
redisPushAutoFree	deps/hiredis/hiredis.c	/^static void redisPushAutoFree(void *privdata, void *reply) {$/;"	f	file:
redisPushFn	deps/hiredis/hiredis.h	/^typedef void (redisPushFn)(void *, void *);$/;"	t
redisReadTask	deps/hiredis/read.h	/^typedef struct redisReadTask {$/;"	s
redisReadTask	deps/hiredis/read.h	/^} redisReadTask;$/;"	t	typeref:struct:redisReadTask
redisReader	deps/hiredis/read.h	/^typedef struct redisReader {$/;"	s
redisReader	deps/hiredis/read.h	/^} redisReader;$/;"	t	typeref:struct:redisReader
redisReaderCreate	deps/hiredis/hiredis.c	/^redisReader *redisReaderCreate(void) {$/;"	f
redisReaderCreateWithFunctions	deps/hiredis/read.c	/^redisReader *redisReaderCreateWithFunctions(redisReplyObjectFunctions *fn) {$/;"	f
redisReaderFeed	deps/hiredis/read.c	/^int redisReaderFeed(redisReader *r, const char *buf, size_t len) {$/;"	f
redisReaderFree	deps/hiredis/read.c	/^void redisReaderFree(redisReader *r) {$/;"	f
redisReaderGetError	deps/hiredis/read.h	123;"	d
redisReaderGetObject	deps/hiredis/read.h	122;"	d
redisReaderGetReply	deps/hiredis/read.c	/^int redisReaderGetReply(redisReader *r, void **reply) {$/;"	f
redisReaderGrow	deps/hiredis/read.c	/^static int redisReaderGrow(redisReader *r) {$/;"	f	file:
redisReaderSetPrivdata	deps/hiredis/read.h	121;"	d
redisReconnect	deps/hiredis/hiredis.c	/^int redisReconnect(redisContext *c) {$/;"	f
redisReply	deps/hiredis/hiredis.h	/^typedef struct redisReply {$/;"	s
redisReply	deps/hiredis/hiredis.h	/^} redisReply;$/;"	t	typeref:struct:redisReply
redisReplyObjectFunctions	deps/hiredis/read.h	/^typedef struct redisReplyObjectFunctions {$/;"	s
redisReplyObjectFunctions	deps/hiredis/read.h	/^} redisReplyObjectFunctions;$/;"	t	typeref:struct:redisReplyObjectFunctions
redisSSL	deps/hiredis/ssl.c	/^typedef struct redisSSL {$/;"	s	file:
redisSSL	deps/hiredis/ssl.c	/^} redisSSL;$/;"	t	typeref:struct:redisSSL	file:
redisSSLAsyncRead	deps/hiredis/ssl.c	/^static void redisSSLAsyncRead(redisAsyncContext *ac) {$/;"	f	file:
redisSSLAsyncWrite	deps/hiredis/ssl.c	/^static void redisSSLAsyncWrite(redisAsyncContext *ac) {$/;"	f	file:
redisSSLConnect	deps/hiredis/ssl.c	/^static int redisSSLConnect(redisContext *c, SSL *ssl) {$/;"	f	file:
redisSSLContext	deps/hiredis/hiredis_ssl.h	/^typedef struct redisSSLContext redisSSLContext;$/;"	t	typeref:struct:redisSSLContext
redisSSLContext	deps/hiredis/ssl.c	/^struct redisSSLContext {$/;"	s	file:
redisSSLContextError	deps/hiredis/hiredis_ssl.h	/^} redisSSLContextError;$/;"	t	typeref:enum:__anon89
redisSSLContextGetError	deps/hiredis/ssl.c	/^const char *redisSSLContextGetError(redisSSLContextError error)$/;"	f
redisSSLFree	deps/hiredis/ssl.c	/^static void redisSSLFree(void *privctx){$/;"	f	file:
redisSSLRead	deps/hiredis/ssl.c	/^static ssize_t redisSSLRead(redisContext *c, char *buf, size_t bufcap) {$/;"	f	file:
redisSSLWrite	deps/hiredis/ssl.c	/^static ssize_t redisSSLWrite(redisContext *c) {$/;"	f	file:
redisServer	src/server.h	/^struct redisServer {$/;"	s
redisSetBlocking	deps/hiredis/net.c	/^static int redisSetBlocking(redisContext *c, int blocking) {$/;"	f	file:
redisSetCpuAffinity	src/server.c	/^void redisSetCpuAffinity(const char *cpulist) {$/;"	f
redisSetProcTitle	src/server.c	/^int redisSetProcTitle(char *title) {$/;"	f
redisSetPushCallback	deps/hiredis/hiredis.c	/^redisPushFn *redisSetPushCallback(redisContext *c, redisPushFn *fn) {$/;"	f
redisSetReuseAddr	deps/hiredis/net.c	/^static int redisSetReuseAddr(redisContext *c) {$/;"	f	file:
redisSetTcpNoDelay	deps/hiredis/net.c	/^int redisSetTcpNoDelay(redisContext *c) {$/;"	f
redisSetTimeout	deps/hiredis/hiredis.c	/^int redisSetTimeout(redisContext *c, const struct timeval tv) {$/;"	f
redisSha1	utils/redis-sha1.rb	/^def redisSha1(opts={})$/;"	f
redisSortObject	src/server.h	/^} redisSortObject;$/;"	t	typeref:struct:_redisSortObject
redisSortOperation	src/server.h	/^} redisSortOperation;$/;"	t	typeref:struct:_redisSortOperation
redisSrand48	src/rand.c	/^void redisSrand48(int32_t seedval) {$/;"	f
redisSupervisedSystemd	src/server.c	/^static int redisSupervisedSystemd(void) {$/;"	f	file:
redisSupervisedUpstart	src/server.c	/^static int redisSupervisedUpstart(void) {$/;"	f	file:
redisTLSContextConfig	src/server.h	/^typedef struct redisTLSContextConfig {$/;"	s
redisTLSContextConfig	src/server.h	/^} redisTLSContextConfig;$/;"	t	typeref:struct:redisTLSContextConfig
redisTest	src/server.c	/^struct redisTest {$/;"	s	file:
redisTestProc	src/server.c	/^typedef int redisTestProc(int argc, char **argv, int accurate);$/;"	t	file:
redisTests	src/server.c	/^} redisTests[] = {$/;"	v	typeref:struct:redisTest
redisTimerCallback	deps/hiredis/async.h	/^typedef void(redisTimerCallback)(void *timer, void *privdata);$/;"	t
redis_check_aof_main	src/redis-check-aof.c	/^int redis_check_aof_main(int argc, char **argv) {$/;"	f
redis_check_rdb	src/redis-check-rdb.c	/^int redis_check_rdb(char *rdbfilename, FILE *fp) {$/;"	f
redis_check_rdb_main	src/redis-check-rdb.c	/^int redis_check_rdb_main(int argc, char **argv, FILE *fp) {$/;"	f
redis_client	tests/instances.tcl	/^proc redis_client {type id} {$/;"	p
redis_client	tests/test_helper.tcl	/^proc redis_client {args} {$/;"	p
redis_cluster	tests/support/cluster.tcl	/^proc redis_cluster {nodes {tls -1}} {$/;"	p
redis_config	src/redis-benchmark.c	/^    struct redisConfig *redis_config;$/;"	m	struct:clusterNode	typeref:struct:clusterNode::redisConfig	file:
redis_config	src/redis-benchmark.c	/^    struct redisConfig *redis_config;$/;"	m	struct:config	typeref:struct:config::redisConfig	file:
redis_deferring_client	tests/instances.tcl	/^proc redis_deferring_client {type id} {$/;"	p
redis_deferring_client	tests/test_helper.tcl	/^proc redis_deferring_client {args} {$/;"	p
redis_fstat	src/config.h	43;"	d
redis_fstat	src/config.h	46;"	d
redis_fsync	src/config.h	95;"	d
redis_fsync	src/config.h	97;"	d
redis_math_random	src/scripting.c	/^int redis_math_random (lua_State *L) {$/;"	f
redis_math_randomseed	src/scripting.c	/^int redis_math_randomseed (lua_State *L) {$/;"	f
redis_set_thread_title	src/config.h	238;"	d
redis_set_thread_title	src/config.h	242;"	d
redis_set_thread_title	src/config.h	245;"	d
redis_set_thread_title	src/config.h	248;"	d
redis_set_thread_title	src/config.h	253;"	d
redis_set_thread_title	src/config.h	255;"	d
redis_source_add_read	deps/hiredis/adapters/glib.h	/^redis_source_add_read (gpointer data)$/;"	f
redis_source_add_write	deps/hiredis/adapters/glib.h	/^redis_source_add_write (gpointer data)$/;"	f
redis_source_check	deps/hiredis/adapters/glib.h	/^redis_source_check (GSource *source)$/;"	f
redis_source_cleanup	deps/hiredis/adapters/glib.h	/^redis_source_cleanup (gpointer data)$/;"	f
redis_source_del_read	deps/hiredis/adapters/glib.h	/^redis_source_del_read (gpointer data)$/;"	f
redis_source_del_write	deps/hiredis/adapters/glib.h	/^redis_source_del_write (gpointer data)$/;"	f
redis_source_dispatch	deps/hiredis/adapters/glib.h	/^redis_source_dispatch (GSource      *source,$/;"	f
redis_source_finalize	deps/hiredis/adapters/glib.h	/^redis_source_finalize (GSource *source)$/;"	f
redis_source_new	deps/hiredis/adapters/glib.h	/^redis_source_new (redisAsyncContext *ac)$/;"	f
redis_source_prepare	deps/hiredis/adapters/glib.h	/^redis_source_prepare (GSource *source,$/;"	f
redis_stat	src/config.h	44;"	d
redis_stat	src/config.h	47;"	d
redis_tls_client_ctx	src/tls.c	/^SSL_CTX *redis_tls_client_ctx = NULL;$/;"	v
redis_tls_ctx	src/tls.c	/^SSL_CTX *redis_tls_ctx = NULL;$/;"	v
redis_unreachable	src/config.h	101;"	d
redis_unreachable	src/config.h	103;"	d
redisbenchmark	tests/support/benchmark.tcl	/^proc redisbenchmark {host port {opts {}}} {$/;"	p
redisbenchmark_tls_config	tests/support/benchmark.tcl	/^proc redisbenchmark_tls_config {testsdir} {$/;"	p
rediscli	tests/support/cli.tcl	/^proc rediscli {host port {opts {}}} {$/;"	p
rediscli_tls_config	tests/support/cli.tcl	/^proc rediscli_tls_config {testsdir} {$/;"	p
rediscmd	src/module.c	/^    struct redisCommand *rediscmd;$/;"	m	struct:RedisModuleCommandProxy	typeref:struct:RedisModuleCommandProxy::redisCommand	file:
redisvAppendCommand	deps/hiredis/hiredis.c	/^int redisvAppendCommand(redisContext *c, const char *format, va_list ap) {$/;"	f
redisvAsyncCommand	deps/hiredis/async.c	/^int redisvAsyncCommand(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, const char *format, va_list ap) {$/;"	f
redisvCommand	deps/hiredis/hiredis.c	/^void *redisvCommand(redisContext *c, const char *format, va_list ap) {$/;"	f
redisvFormatCommand	deps/hiredis/hiredis.c	/^int redisvFormatCommand(char **target, const char *format, va_list ap) {$/;"	f
reentrancy	deps/jemalloc/test/src/test.c	/^static reentrancy_t reentrancy;$/;"	v	file:
reentrancy_t	deps/jemalloc/test/src/test.c	/^} reentrancy_t;$/;"	t	typeref:enum:__anon123	file:
reentrancy_t_str	deps/jemalloc/test/src/test.c	/^reentrancy_t_str(reentrancy_t r) {$/;"	f	file:
refcount	src/ae.h	/^    int refcount; \/* refcount to prevent timer events from being$/;"	m	struct:aeTimeEvent
refcount	src/sentinel.c	/^    int refcount;          \/* Number of sentinelRedisInstance owners. *\/$/;"	m	struct:instanceLink	file:
refcount	src/server.h	/^    int refcount;$/;"	m	struct:redisObject
refreshGoodSlavesCount	src/replication.c	/^void refreshGoodSlavesCount(void) {$/;"	f
refreshLine	deps/linenoise/linenoise.c	/^static void refreshLine(struct linenoiseState *l) {$/;"	f	file:
refreshMultiLine	deps/linenoise/linenoise.c	/^static void refreshMultiLine(struct linenoiseState *l) {$/;"	f	file:
refreshShowHints	deps/linenoise/linenoise.c	/^void refreshShowHints(struct abuf *ab, struct linenoiseState *l, int plen) {$/;"	f
refreshSingleLine	deps/linenoise/linenoise.c	/^static void refreshSingleLine(struct linenoiseState *l) {$/;"	f	file:
refreshTimeout	deps/hiredis/async_private.h	/^static inline void refreshTimeout(redisAsyncContext *ctx) {$/;"	f
refs	src/connection.h	/^    short int refs;$/;"	m	struct:connection
reg_size	deps/jemalloc/include/jemalloc/internal/bin.h	/^	size_t			reg_size;$/;"	m	struct:bin_info_s
reg_size_compute	deps/jemalloc/include/jemalloc/internal/size_classes.sh	/^reg_size_compute() {$/;"	f
registerSSLEvent	src/tls.c	/^void registerSSLEvent(tls_connection *conn, WantIOType want) {$/;"	f
registerlocalvar	deps/lua/src/lparser.c	/^static int registerlocalvar (LexState *ls, TString *varname) {$/;"	f	file:
registers	src/hyperloglog.c	/^    uint8_t registers[]; \/* Data bytes. *\/$/;"	m	struct:hllhdr	file:
registry	deps/lua/src/lstate.h	25;"	d
rehash	deps/lua/src/ltable.c	/^static void rehash (lua_State *L, Table *t, const TValue *ek) {$/;"	f	file:
rehashidx	src/dict.h	/^    long rehashidx; \/* rehashing not in progress if rehashidx == -1 *\/$/;"	m	struct:dict
reinit_lock	deps/jemalloc/src/zone.c	/^	void (*reinit_lock)(malloc_zone_t *);$/;"	m	struct:malloc_introspection_t	file:
rejectCommand	src/server.c	/^void rejectCommand(client *c, robj *reply) {$/;"	f
rejectCommandFormat	src/server.c	/^void rejectCommandFormat(client *c, const char *fmt, ...) {$/;"	f
rejected_calls	src/server.h	/^    long long microseconds, calls, rejected_calls, failed_calls;$/;"	m	struct:redisCommand
related_ins	src/cluster.h	/^    dict *related_ins;$/;"	m	struct:slotState
releaseInstanceLink	src/sentinel.c	/^instanceLink *releaseInstanceLink(instanceLink *link, sentinelRedisInstance *ri)$/;"	f
releaseSentinelAddr	src/sentinel.c	/^void releaseSentinelAddr(sentinelAddr *sa) {$/;"	f
releaseSentinelRedisInstance	src/sentinel.c	/^void releaseSentinelRedisInstance(sentinelRedisInstance *ri) {$/;"	f
release_hdr	src/Makefile	/^release_hdr := $(shell sh -c '.\/mkreleasehdr.sh')$/;"	m
remarkupvals	deps/lua/src/lgc.c	/^static void remarkupvals (global_State *g) {$/;"	f	file:
rememberSlaveKeyWithExpire	src/expire.c	/^void rememberSlaveKeyWithExpire(redisDb *db, robj *key) {$/;"	f
removeClientFromTimeoutTable	src/timeout.c	/^void removeClientFromTimeoutTable(client *c) {$/;"	f
removeExpire	src/db.c	/^int removeExpire(redisDb *db, robj *key) {$/;"	f
removeMatchingSentinelFromMaster	src/sentinel.c	/^int removeMatchingSentinelFromMaster(sentinelRedisInstance *master, char *runid) {$/;"	f
removeRDBUsedToSyncReplicas	src/replication.c	/^void removeRDBUsedToSyncReplicas(void) {$/;"	f
removeSignalHandlers	src/server.c	/^void removeSignalHandlers(void) {$/;"	f
remove_iterate_cb	deps/jemalloc/test/unit/rb.c	/^remove_iterate_cb(tree_t *tree, node_t *node, void *data) {$/;"	f	file:
remove_reverse_iterate_cb	deps/jemalloc/test/unit/rb.c	/^remove_reverse_iterate_cb(tree_t *tree, node_t *node, void *data) {$/;"	f	file:
removeentry	deps/lua/src/lgc.c	/^static void removeentry (Node *n) {$/;"	f	file:
removevalues	deps/lua/src/lcode.c	/^static void removevalues (FuncState *fs, int list) {$/;"	f	file:
removevars	deps/lua/src/lparser.c	/^static void removevars (LexState *ls, int tolevel) {$/;"	f	file:
remrangebyrank	tests/unit/type/zset.tcl	/^            proc remrangebyrank {min max} {$/;"	p
remrangebyscore	tests/unit/type/zset.tcl	/^            proc remrangebyscore {min max} {$/;"	p
renameCommand	src/db.c	/^void renameCommand(client *c) {$/;"	f
renameGenericCommand	src/db.c	/^void renameGenericCommand(client *c, int nx) {$/;"	f
renamedCommandsDictType	src/sentinel.c	/^dictType renamedCommandsDictType = {$/;"	v
renamed_commands	src/sentinel.c	/^    dict *renamed_commands;     \/* Commands renamed in this instance:$/;"	m	struct:sentinelRedisInstance	file:
renamenxCommand	src/db.c	/^void renamenxCommand(client *c) {$/;"	f
renderCanvas	src/lolwut5.c	/^static sds renderCanvas(lwCanvas *canvas) {$/;"	f	file:
renderCanvas	src/lolwut6.c	/^static sds renderCanvas(lwCanvas *canvas) {$/;"	f	file:
repeat	src/redis-cli.c	/^    long repeat;$/;"	m	struct:config	file:
repeatstat	deps/lua/src/lparser.c	/^static void repeatstat (LexState *ls, int line) {$/;"	f	file:
repl	src/redis-cli.c	/^static void repl(void) {$/;"	f	file:
repl1_offset	src/redismodule.h	/^    uint64_t repl1_offset;  \/* Main replication offset *\/$/;"	m	struct:RedisModuleReplicationInfo
repl2_offset	src/redismodule.h	/^    uint64_t repl2_offset;  \/* Offset of replid2 validity *\/$/;"	m	struct:RedisModuleReplicationInfo
replBackupCallback	tests/modules/testrdb.c	/^void replBackupCallback(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)$/;"	f
replScriptCacheDictType	src/server.c	/^dictType replScriptCacheDictType = {$/;"	v
repl_ack_off	src/server.h	/^    long long repl_ack_off; \/* Replication ack offset, if this is a slave. *\/$/;"	m	struct:client
repl_ack_time	src/server.h	/^    long long repl_ack_time;\/* Replication ack time, if this is a slave. *\/$/;"	m	struct:client
repl_backlog	src/server.h	/^    char *repl_backlog;             \/* Replication backlog for partial syncs *\/$/;"	m	struct:redisServer
repl_backlog	src/server.h	/^    size_t repl_backlog;$/;"	m	struct:redisMemOverhead
repl_backlog_histlen	src/server.h	/^    long long repl_backlog_histlen; \/* Backlog actual data length *\/$/;"	m	struct:redisServer
repl_backlog_idx	src/server.h	/^    long long repl_backlog_idx;     \/* Backlog circular buffer current offset,$/;"	m	struct:redisServer
repl_backlog_off	src/server.h	/^    long long repl_backlog_off;     \/* Replication "master offset" of first$/;"	m	struct:redisServer
repl_backlog_size	src/server.h	/^    long long repl_backlog_size;    \/* Backlog circular buffer size *\/$/;"	m	struct:redisServer
repl_backlog_time_limit	src/server.h	/^    time_t repl_backlog_time_limit; \/* Time without slaves after the backlog$/;"	m	struct:redisServer
repl_disable_tcp_nodelay	src/server.h	/^    int repl_disable_tcp_nodelay;   \/* Disable TCP_NODELAY after SYNC? *\/$/;"	m	struct:redisServer
repl_diskless_load	src/server.h	/^    int repl_diskless_load;         \/* Slave parse RDB directly from the socket.$/;"	m	struct:redisServer
repl_diskless_load_enum	src/config.c	/^configEnum repl_diskless_load_enum[] = {$/;"	v
repl_diskless_sync	src/server.h	/^    int repl_diskless_sync;         \/* Master send RDB to slaves sockets directly. *\/$/;"	m	struct:redisServer
repl_diskless_sync_delay	src/server.h	/^    int repl_diskless_sync_delay;   \/* Delay to start a diskless repl BGSAVE. *\/$/;"	m	struct:redisServer
repl_down_since	src/server.h	/^    time_t repl_down_since; \/* Unix time at which link with master went down *\/$/;"	m	struct:redisServer
repl_good_slaves_count	src/server.h	/^    int repl_good_slaves_count;     \/* Number of slaves with lag <= max_lag. *\/$/;"	m	struct:redisServer
repl_id	src/server.h	/^    char repl_id[CONFIG_RUN_ID_SIZE+1];     \/* Replication ID. *\/$/;"	m	struct:rdbSaveInfo
repl_id_is_set	src/server.h	/^    int repl_id_is_set;  \/* True if repl_id field is set. *\/$/;"	m	struct:rdbSaveInfo
repl_last_partial_write	src/server.h	/^    long long repl_last_partial_write; \/* The last time the server did a partial write from the RDB child pipe to this replica  *\/$/;"	m	struct:client
repl_min_slaves_max_lag	src/server.h	/^    int repl_min_slaves_max_lag;    \/* Max lag of <count> slaves to write. *\/$/;"	m	struct:redisServer
repl_min_slaves_to_write	src/server.h	/^    int repl_min_slaves_to_write;   \/* Min number of slaves to write. *\/$/;"	m	struct:redisServer
repl_no_slaves_since	src/server.h	/^    time_t repl_no_slaves_since;    \/* We have no slaves since that time.$/;"	m	struct:redisServer
repl_offset	src/cluster.h	/^    long long repl_offset;      \/* Last known repl offset for this node. *\/$/;"	m	struct:clusterNode
repl_offset	src/server.h	/^    long long repl_offset;                  \/* Replication offset. *\/$/;"	m	struct:rdbSaveInfo
repl_offset_time	src/cluster.h	/^    mstime_t repl_offset_time;  \/* Unix time we received offset for this node *\/$/;"	m	struct:clusterNode
repl_ping_slave_period	src/server.h	/^    int repl_ping_slave_period;     \/* Master pings the slave every N seconds *\/$/;"	m	struct:redisServer
repl_put_online_on_ack	src/server.h	/^    int repl_put_online_on_ack; \/* Install slave write handler on first ACK. *\/$/;"	m	struct:client
repl_scriptcache_dict	src/server.h	/^    dict *repl_scriptcache_dict;        \/* SHA1 all slaves are aware of. *\/$/;"	m	struct:redisServer
repl_scriptcache_fifo	src/server.h	/^    list *repl_scriptcache_fifo;        \/* First in, first out LRU eviction. *\/$/;"	m	struct:redisServer
repl_scriptcache_size	src/server.h	/^    unsigned int repl_scriptcache_size; \/* Max number of elements. *\/$/;"	m	struct:redisServer
repl_serve_stale_data	src/server.h	/^    int repl_serve_stale_data; \/* Serve stale data when link is down? *\/$/;"	m	struct:redisServer
repl_slave_ignore_maxmemory	src/server.h	/^    int repl_slave_ignore_maxmemory;    \/* If true slaves do not evict. *\/$/;"	m	struct:redisServer
repl_slave_lazy_flush	src/server.h	/^    int repl_slave_lazy_flush;          \/* Lazy FLUSHALL before loading DB? *\/$/;"	m	struct:redisServer
repl_slave_ro	src/server.h	/^    int repl_slave_ro;          \/* Slave is read only? *\/$/;"	m	struct:redisServer
repl_state	src/server.h	/^    int repl_state;          \/* Replication status if the instance is a slave *\/$/;"	m	struct:redisServer
repl_state	src/server.h	/^} repl_state;$/;"	t	typeref:enum:__anon15
repl_stream_db	src/server.h	/^    int repl_stream_db;  \/* DB to select in server.master client. *\/$/;"	m	struct:rdbSaveInfo
repl_syncio_timeout	src/server.h	/^    int repl_syncio_timeout; \/* Timeout for synchronous I\/O calls *\/$/;"	m	struct:redisServer
repl_timeout	src/server.h	/^    int repl_timeout;               \/* Timeout after N seconds of master idle *\/$/;"	m	struct:redisServer
repl_transfer_fd	src/server.h	/^    int repl_transfer_fd;    \/* Slave -> Master SYNC temp file descriptor *\/$/;"	m	struct:redisServer
repl_transfer_last_fsync_off	src/server.h	/^    off_t repl_transfer_last_fsync_off; \/* Offset when we fsync-ed last time. *\/$/;"	m	struct:redisServer
repl_transfer_lastio	src/server.h	/^    time_t repl_transfer_lastio; \/* Unix time of the latest read, for timeout *\/$/;"	m	struct:redisServer
repl_transfer_read	src/server.h	/^    off_t repl_transfer_read; \/* Amount of RDB read from master during sync. *\/$/;"	m	struct:redisServer
repl_transfer_s	src/server.h	/^    connection *repl_transfer_s;     \/* Slave -> Master SYNC connection *\/$/;"	m	struct:redisServer
repl_transfer_size	src/server.h	/^    off_t repl_transfer_size; \/* Size of RDB to read from master during sync. *\/$/;"	m	struct:redisServer
repl_transfer_tmpfile	src/server.h	/^    char *repl_transfer_tmpfile; \/* Slave-> master SYNC temp file name *\/$/;"	m	struct:redisServer
replaceClientCommandVector	src/networking.c	/^void replaceClientCommandVector(client *c, int argc, robj **argv) {$/;"	f
replaceSatelliteDictKeyPtrAndOrDefragDictEntry	src/defrag.c	/^dictEntry* replaceSatelliteDictKeyPtrAndOrDefragDictEntry(dict *d, sds oldkey, sds newkey, uint64_t hash, long *defragged) {$/;"	f
replconf	src/server.h	/^    *script, *replconf, *eval, *persist, *set, *pexpireat, *pexpire, $/;"	m	struct:sharedObjectsStruct
replconfCommand	src/replication.c	/^void replconfCommand(client *c) {$/;"	f
repldbfd	src/server.h	/^    int repldbfd;           \/* Replication DB file descriptor. *\/$/;"	m	struct:client
repldboff	src/server.h	/^    off_t repldboff;        \/* Replication DB file offset. *\/$/;"	m	struct:client
repldbsize	src/server.h	/^    off_t repldbsize;       \/* Replication DB file size. *\/$/;"	m	struct:client
replica_announced	src/sentinel.c	/^    int replica_announced; \/* Replica announcing according to its INFO output. *\/$/;"	m	struct:sentinelRedisInstance	file:
replica_announced	src/server.h	/^    int replica_announced;          \/* If true, replica is announced by Sentinel *\/$/;"	m	struct:redisServer
replicaofCommand	src/replication.c	/^void replicaofCommand(client *c) {$/;"	f
replicas	src/redis-cli.c	/^    int replicas;$/;"	m	struct:clusterManagerCommand	file:
replicas_count	src/redis-benchmark.c	/^    int replicas_count;$/;"	m	struct:clusterNode	file:
replicas_count	src/redis-cli.c	/^    int replicas_count;$/;"	m	struct:clusterManagerNode	file:
replicate	src/redis-benchmark.c	/^    sds replicate;  \/* Master ID if node is a slave *\/$/;"	m	struct:clusterNode	file:
replicate	src/redis-cli.c	/^    sds replicate;  \/* Master ID if node is a slave *\/$/;"	m	struct:clusterManagerNode	file:
replicationAbortSyncTransfer	src/replication.c	/^void replicationAbortSyncTransfer(void) {$/;"	f
replicationCacheMaster	src/replication.c	/^void replicationCacheMaster(client *c) {$/;"	f
replicationCacheMasterUsingMyself	src/replication.c	/^void replicationCacheMasterUsingMyself(void) {$/;"	f
replicationChangeCallback	tests/modules/hooks.c	/^void replicationChangeCallback(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)$/;"	f
replicationCountAcksByOffset	src/replication.c	/^int replicationCountAcksByOffset(long long offset) {$/;"	f
replicationCreateMasterClient	src/replication.c	/^void replicationCreateMasterClient(connection *conn, int dbid) {$/;"	f
replicationCron	src/replication.c	/^void replicationCron(void) {$/;"	f
replicationDiscardCachedMaster	src/replication.c	/^void replicationDiscardCachedMaster(void) {$/;"	f
replicationEmptyDbCallback	src/replication.c	/^void replicationEmptyDbCallback(void *privdata) {$/;"	f
replicationFeedMonitors	src/replication.c	/^void replicationFeedMonitors(client *c, list *monitors, int dictid, robj **argv, int argc) {$/;"	f
replicationFeedSlaves	src/replication.c	/^void replicationFeedSlaves(list *slaves, int dictid, robj **argv, int argc) {$/;"	f
replicationFeedSlavesFromMasterStream	src/replication.c	/^void replicationFeedSlavesFromMasterStream(list *slaves, char *buf, size_t buflen) {$/;"	f
replicationGetSlaveName	src/replication.c	/^char *replicationGetSlaveName(client *c) {$/;"	f
replicationGetSlaveOffset	src/replication.c	/^long long replicationGetSlaveOffset(void) {$/;"	f
replicationHandleMasterDisconnection	src/replication.c	/^void replicationHandleMasterDisconnection(void) {$/;"	f
replicationRequestAckFromSlaves	src/replication.c	/^void replicationRequestAckFromSlaves(void) {$/;"	f
replicationResurrectCachedMaster	src/replication.c	/^void replicationResurrectCachedMaster(connection *conn) {$/;"	f
replicationScriptCacheAdd	src/replication.c	/^void replicationScriptCacheAdd(sds sha1) {$/;"	f
replicationScriptCacheExists	src/replication.c	/^int replicationScriptCacheExists(sds sha1) {$/;"	f
replicationScriptCacheFlush	src/replication.c	/^void replicationScriptCacheFlush(void) {$/;"	f
replicationScriptCacheInit	src/replication.c	/^void replicationScriptCacheInit(void) {$/;"	f
replicationSendAck	src/replication.c	/^void replicationSendAck(void) {$/;"	f
replicationSendNewlineToMaster	src/replication.c	/^void replicationSendNewlineToMaster(void) {$/;"	f
replicationSetMaster	src/replication.c	/^void replicationSetMaster(char *ip, int port) {$/;"	f
replicationSetupSlaveForFullResync	src/replication.c	/^int replicationSetupSlaveForFullResync(client *slave, long long offset) {$/;"	f
replicationStartPendingFork	src/replication.c	/^void replicationStartPendingFork(void) {$/;"	f
replicationUnsetMaster	src/replication.c	/^void replicationUnsetMaster(void) {$/;"	f
replication_allowed	src/server.h	/^    int replication_allowed;        \/* Are we allowed to replicate? *\/$/;"	m	struct:redisServer
replid	src/server.h	/^    char replid[CONFIG_RUN_ID_SIZE+1];  \/* My current replication ID. *\/$/;"	m	struct:redisServer
replid	src/server.h	/^    char replid[CONFIG_RUN_ID_SIZE+1]; \/* Master replication ID (if master). *\/$/;"	m	struct:client
replid1	src/redismodule.h	/^    char *replid1;          \/* Main replication ID *\/$/;"	m	struct:RedisModuleReplicationInfo
replid2	src/redismodule.h	/^    char *replid2;          \/* Secondary replication ID *\/$/;"	m	struct:RedisModuleReplicationInfo
replid2	src/server.h	/^    char replid2[CONFIG_RUN_ID_SIZE+1]; \/* replid inherited from master*\/$/;"	m	struct:redisServer
replies	deps/hiredis/async.h	/^    redisCallbackList replies;$/;"	m	struct:redisAsyncContext
reploff	src/server.h	/^    long long reploff;      \/* Applied replication offset if this is a master. *\/$/;"	m	struct:client
reploffset	src/server.h	/^    long long reploffset;   \/* Replication offset to reach. *\/$/;"	m	struct:blockingState
replpreamble	src/server.h	/^    sds replpreamble;       \/* Replication DB preamble. *\/$/;"	m	struct:client
replstate	src/server.h	/^    int replstate;          \/* Replication state if this is a slave. *\/$/;"	m	struct:client
reply	deps/hiredis/read.h	/^    void *reply; \/* Temporary reply pointer *\/$/;"	m	struct:redisReader
reply	src/server.h	/^    list *reply;            \/* List of reply objects to send to the client. *\/$/;"	m	struct:client
replyToBlockedClientTimedOut	src/blocked.c	/^void replyToBlockedClientTimedOut(client *c) {$/;"	f
reply_bytes	src/server.h	/^    unsigned long long reply_bytes; \/* Tot bytes of objects in reply list. *\/$/;"	m	struct:client
reply_callback	src/module.c	/^    RedisModuleCmdFunc reply_callback; \/* Reply callback on normal completion.*\/$/;"	m	struct:RedisModuleBlockedClient	file:
reply_client	src/module.c	/^    client *reply_client;           \/* Fake client used to accumulate replies$/;"	m	struct:RedisModuleBlockedClient	file:
report	deps/lua/src/lua.c	/^static int report (lua_State *L, int status) {$/;"	f	file:
representClusterNodeFlags	src/cluster.c	/^sds representClusterNodeFlags(sds ci, uint16_t flags) {$/;"	f
reqtype	src/server.h	/^    int reqtype;            \/* Request protocol type: PROTO_REQ_* *\/$/;"	m	struct:client
requested_section	src/module.c	/^    const char *requested_section;$/;"	m	struct:RedisModuleInfoCtx	file:
requests	src/redis-benchmark.c	/^    int requests;$/;"	m	struct:config	file:
requests_finished	src/redis-benchmark.c	/^    redisAtomic int requests_finished;$/;"	m	struct:config	file:
requests_issued	src/redis-benchmark.c	/^    redisAtomic int requests_issued;$/;"	m	struct:config	file:
requirepass	src/server.h	/^    sds requirepass;              \/* Remember the cleartext password set with$/;"	m	struct:redisServer
reserved	deps/lua/src/lobject.h	/^    lu_byte reserved;$/;"	m	struct:TString::__anon107
reserved1	deps/jemalloc/src/zone.c	/^	void *reserved1;$/;"	m	struct:_malloc_zone_t	file:
reserved2	deps/jemalloc/src/zone.c	/^	void *reserved2;$/;"	m	struct:_malloc_zone_t	file:
reset	src/setproctitle.c	/^	_Bool reset;$/;"	m	struct:__anon60	file:
reset2bits	deps/lua/src/lgc.h	36;"	d
resetChildState	src/server.c	/^void resetChildState() {$/;"	f
resetClient	src/networking.c	/^void resetClient(client *c) {$/;"	f
resetClient	src/redis-benchmark.c	/^static void resetClient(client c) {$/;"	f	file:
resetCommand	src/networking.c	/^void resetCommand(client *c) {$/;"	f
resetCommandTableStats	src/server.c	/^void resetCommandTableStats(void) {$/;"	f
resetErrorTableStats	src/server.c	/^void resetErrorTableStats(void) {$/;"	f
resetLuaClient	src/scripting.c	/^void resetLuaClient(void) {$/;"	f
resetManualFailover	src/cluster.c	/^void resetManualFailover(void) {$/;"	f
resetServerSaveParams	src/config.c	/^void resetServerSaveParams(void) {$/;"	f
resetServerStats	src/server.c	/^void resetServerStats(void) {$/;"	f
resetStatus	exp/exp1.sh	/^resetStatus() {$/;"	f
reset_cluster	tests/cluster/tests/20-half-migrated-slot.tcl	/^proc reset_cluster {} {$/;"	p
resetbit	deps/lua/src/lgc.h	33;"	d
resetbits	deps/lua/src/lgc.h	27;"	d
resethookcount	deps/lua/src/ldebug.h	18;"	d
resetstack	deps/lua/src/ldo.c	/^static void resetstack (lua_State *L, int status) {$/;"	f	file:
resident	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	atomic_zu_t		resident; \/* Derived. *\/$/;"	m	struct:arena_stats_s
resident	deps/jemalloc/include/jemalloc/internal/base_structs.h	/^	size_t		resident;$/;"	m	struct:base_s
resident	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	size_t resident;$/;"	m	struct:ctl_stats_s
resize	deps/lua/src/ltable.c	/^static void resize (lua_State *L, Table *t, int nasize, int nhsize) {$/;"	f	file:
resizeReplicationBacklog	src/replication.c	/^void resizeReplicationBacklog(long long newsize) {$/;"	f
reslabs	deps/jemalloc/include/jemalloc/internal/bin_stats.h	/^	uint64_t	reslabs;$/;"	m	struct:bin_stats_s
resolve_hostnames	src/sentinel.c	/^    int resolve_hostnames;       \/* Support use of hostnames, assuming DNS is well configured. *\/$/;"	m	struct:sentinelState	file:
resp	src/server.h	/^    int resp;               \/* RESP protocol version. Can be 2 or 3. *\/$/;"	m	struct:client
resp3	src/redis-cli.c	/^    int resp3;$/;"	m	struct:config	file:
restartAOFAfterSYNC	src/replication.c	/^void restartAOFAfterSYNC() {$/;"	f
restartServer	src/server.c	/^int restartServer(int flags, mstime_t delay) {$/;"	f
restart_instance	tests/instances.tcl	/^proc restart_instance {type id} {$/;"	p
restart_killed_instances	tests/sentinel/tests/includes/init-tests.tcl	/^proc restart_killed_instances {} {$/;"	p
restart_server	tests/support/server.tcl	/^proc restart_server {level wait_ready rotate_logs} {$/;"	p
restoreCommand	src/cluster.c	/^void restoreCommand(client *c) {$/;"	f
restoreDbBackup	src/db.c	/^void restoreDbBackup(dbBackup *buckup) {$/;"	f
restore_stack_limit	deps/lua/src/ldo.c	/^static void restore_stack_limit (lua_State *L) {$/;"	f	file:
restoreci	deps/lua/src/ldo.h	28;"	d
restorestack	deps/lua/src/ldo.h	25;"	d
restrict	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_decls.h	76;"	d
restrict	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	30;"	d
result	deps/jemalloc/src/jemalloc.c	/^	void **result;$/;"	m	struct:dynamic_opts_s	file:
resume	deps/lua/src/ldo.c	/^static void resume (lua_State *L, void *ud) {$/;"	f	file:
resume_error	deps/lua/src/ldo.c	/^static int resume_error (lua_State *L, const char *msg) {$/;"	f	file:
retainOriginalCommandVector	src/networking.c	/^static void retainOriginalCommandVector(client *c) {$/;"	f	file:
retain_grow_limit	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	pszind_t		retain_grow_limit;$/;"	m	struct:arena_s
retained	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	atomic_zu_t		retained; \/* Derived. *\/$/;"	m	struct:arena_stats_s
retained	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	size_t retained;$/;"	m	struct:ctl_stats_s
retry_num	src/sentinel.c	/^    int retry_num;          \/* Number of times we tried to execute it. *\/$/;"	m	struct:sentinelScriptJob	file:
retrycount	src/server.h	/^    *time, *pxat, *px, *retrycount, *force, *justid, $/;"	m	struct:sharedObjectsStruct
retstat	deps/lua/src/lparser.c	/^static void retstat (LexState *ls) {$/;"	f	file:
rev	deps/hiredis/adapters/libev.h	/^    ev_io rev, wev;$/;"	m	struct:redisLibevEvents
rev	src/dict.c	/^static unsigned long rev(unsigned long v) {$/;"	f	file:
rev	src/stream.h	/^    int rev;                \/* True if iterating end to start (reverse). *\/$/;"	m	struct:streamIterator
rev8	src/crcspeed.c	/^static inline uint64_t rev8(uint64_t a) {$/;"	f	file:
revokeClientAuthentication	src/module.c	/^void revokeClientAuthentication(client *c) {$/;"	f
rewrite	src/config.c	/^    void (*rewrite)(typeData data, const char *name, struct rewriteConfigState *state);$/;"	m	struct:typeInterface	file:
rewriteAppendOnlyFile	src/aof.c	/^int rewriteAppendOnlyFile(char *filename) {$/;"	f
rewriteAppendOnlyFileBackground	src/aof.c	/^int rewriteAppendOnlyFileBackground(void) {$/;"	f
rewriteAppendOnlyFileRio	src/aof.c	/^int rewriteAppendOnlyFileRio(rio *aof) {$/;"	f
rewriteClientCommandArgument	src/networking.c	/^void rewriteClientCommandArgument(client *c, int i, robj *newval) {$/;"	f
rewriteClientCommandVector	src/networking.c	/^void rewriteClientCommandVector(client *c, int argc, ...) {$/;"	f
rewriteConfigSentinelOption	src/sentinel.c	/^void rewriteConfigSentinelOption(struct rewriteConfigState *state) {$/;"	f
rewriteHashObject	src/aof.c	/^int rewriteHashObject(rio *r, robj *key, robj *o) {$/;"	f
rewriteListObject	src/aof.c	/^int rewriteListObject(rio *r, robj *key, robj *o) {$/;"	f
rewriteModuleObject	src/aof.c	/^int rewriteModuleObject(rio *r, robj *key, robj *o) {$/;"	f
rewriteSetObject	src/aof.c	/^int rewriteSetObject(rio *r, robj *key, robj *o) {$/;"	f
rewriteSortedSetObject	src/aof.c	/^int rewriteSortedSetObject(rio *r, robj *key, robj *o) {$/;"	f
rewriteStreamObject	src/aof.c	/^int rewriteStreamObject(rio *r, robj *key, robj *o) {$/;"	f
rfds	src/ae_select.c	/^    fd_set rfds, wfds;$/;"	m	struct:aeApiState	file:
rfileProc	src/ae.h	/^    aeFileProc *rfileProc;$/;"	m	struct:aeFileEvent
ri	src/module.c	/^    raxIterator ri;$/;"	m	struct:RedisModuleDictIter	file:
ri	src/stream.h	/^    raxIterator ri;         \/* Rax iterator. *\/$/;"	m	struct:streamIterator
ridx	deps/hiredis/read.h	/^    int ridx; \/* Index of current read task *\/$/;"	m	struct:redisReader
right	deps/lua/src/lparser.c	/^  lu_byte right; \/* right priority *\/$/;"	m	struct:__anon113	file:
right	src/server.h	/^    *emptyscan, *multi, *exec, *left, *right, *hset, *srem, *xgroup, *xclaim,  $/;"	m	struct:sharedObjectsStruct
ring_s	deps/jemalloc/test/unit/qr.c	/^struct ring_s {$/;"	s	file:
ring_t	deps/jemalloc/test/unit/qr.c	/^typedef struct ring_s ring_t;$/;"	t	typeref:struct:ring_s	file:
rio	src/redis-check-rdb.c	/^    rio *rio;$/;"	m	struct:__anon61	file:
rio	src/rio.h	/^typedef struct _rio rio;$/;"	t	typeref:struct:_rio
rio	src/server.h	/^    rio *rio;           \/* Rio stream. *\/$/;"	m	struct:RedisModuleIO
rioBufferFlush	src/rio.c	/^static int rioBufferFlush(rio *r) {$/;"	f	file:
rioBufferIO	src/rio.c	/^static const rio rioBufferIO = {$/;"	v	file:
rioBufferRead	src/rio.c	/^static size_t rioBufferRead(rio *r, void *buf, size_t len) {$/;"	f	file:
rioBufferTell	src/rio.c	/^static off_t rioBufferTell(rio *r) {$/;"	f	file:
rioBufferWrite	src/rio.c	/^static size_t rioBufferWrite(rio *r, const void *buf, size_t len) {$/;"	f	file:
rioClearErrors	src/rio.h	/^static inline void rioClearErrors(rio *r) {$/;"	f
rioConnFlush	src/rio.c	/^static int rioConnFlush(rio *r) {$/;"	f	file:
rioConnIO	src/rio.c	/^static const rio rioConnIO = {$/;"	v	file:
rioConnRead	src/rio.c	/^static size_t rioConnRead(rio *r, void *buf, size_t len) {$/;"	f	file:
rioConnTell	src/rio.c	/^static off_t rioConnTell(rio *r) {$/;"	f	file:
rioConnWrite	src/rio.c	/^static size_t rioConnWrite(rio *r, const void *buf, size_t len) {$/;"	f	file:
rioFdFlush	src/rio.c	/^static int rioFdFlush(rio *r) {$/;"	f	file:
rioFdIO	src/rio.c	/^static const rio rioFdIO = {$/;"	v	file:
rioFdRead	src/rio.c	/^static size_t rioFdRead(rio *r, void *buf, size_t len) {$/;"	f	file:
rioFdTell	src/rio.c	/^static off_t rioFdTell(rio *r) {$/;"	f	file:
rioFdWrite	src/rio.c	/^static size_t rioFdWrite(rio *r, const void *buf, size_t len) {$/;"	f	file:
rioFileFlush	src/rio.c	/^static int rioFileFlush(rio *r) {$/;"	f	file:
rioFileIO	src/rio.c	/^static const rio rioFileIO = {$/;"	v	file:
rioFileRead	src/rio.c	/^static size_t rioFileRead(rio *r, void *buf, size_t len) {$/;"	f	file:
rioFileTell	src/rio.c	/^static off_t rioFileTell(rio *r) {$/;"	f	file:
rioFileWrite	src/rio.c	/^static size_t rioFileWrite(rio *r, const void *buf, size_t len) {$/;"	f	file:
rioFlush	src/rio.h	/^static inline int rioFlush(rio *r) {$/;"	f
rioFreeConn	src/rio.c	/^void rioFreeConn(rio *r, sds *remaining) {$/;"	f
rioFreeFd	src/rio.c	/^void rioFreeFd(rio *r) {$/;"	f
rioGenericUpdateChecksum	src/rio.c	/^void rioGenericUpdateChecksum(rio *r, const void *buf, size_t len) {$/;"	f
rioGetReadError	src/rio.h	/^static inline int rioGetReadError(rio *r) {$/;"	f
rioGetWriteError	src/rio.h	/^static inline int rioGetWriteError(rio *r) {$/;"	f
rioInitWithBuffer	src/rio.c	/^void rioInitWithBuffer(rio *r, sds s) {$/;"	f
rioInitWithConn	src/rio.c	/^void rioInitWithConn(rio *r, connection *conn, size_t read_limit) {$/;"	f
rioInitWithFd	src/rio.c	/^void rioInitWithFd(rio *r, int fd) {$/;"	f
rioInitWithFile	src/rio.c	/^void rioInitWithFile(rio *r, FILE *fp) {$/;"	f
rioRead	src/rio.h	/^static inline size_t rioRead(rio *r, void *buf, size_t len) {$/;"	f
rioSetAutoSync	src/rio.c	/^void rioSetAutoSync(rio *r, off_t bytes) {$/;"	f
rioTell	src/rio.h	/^static inline off_t rioTell(rio *r) {$/;"	f
rioWrite	src/rio.h	/^static inline size_t rioWrite(rio *r, const void *buf, size_t len) {$/;"	f
rioWriteBulkCount	src/rio.c	/^size_t rioWriteBulkCount(rio *r, char prefix, long count) {$/;"	f
rioWriteBulkDouble	src/rio.c	/^size_t rioWriteBulkDouble(rio *r, double d) {$/;"	f
rioWriteBulkLongLong	src/rio.c	/^size_t rioWriteBulkLongLong(rio *r, long long l) {$/;"	f
rioWriteBulkObject	src/aof.c	/^int rioWriteBulkObject(rio *r, robj *obj) {$/;"	f
rioWriteBulkStreamID	src/aof.c	/^int rioWriteBulkStreamID(rio *r,streamID *id) {$/;"	f
rioWriteBulkString	src/rio.c	/^size_t rioWriteBulkString(rio *r, const char *buf, size_t len) {$/;"	f
rioWriteHashIteratorCursor	src/aof.c	/^static int rioWriteHashIteratorCursor(rio *r, hashTypeIterator *hi, int what) {$/;"	f	file:
rioWriteStreamEmptyConsumer	src/aof.c	/^int rioWriteStreamEmptyConsumer(rio *r, robj *key, const char *groupname, size_t groupname_len, streamConsumer *consumer) {$/;"	f
rioWriteStreamPendingEntry	src/aof.c	/^int rioWriteStreamPendingEntry(rio *r, robj *key, const char *groupname, size_t groupname_len, streamConsumer *consumer, unsigned char *rawid, streamNACK *nack) {$/;"	f
robj	src/server.h	/^} robj;$/;"	t	typeref:struct:redisObject
rol	src/sha1.c	31;"	d	file:
roleChangeCallback	tests/modules/hooks.c	/^void roleChangeCallback(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)$/;"	f
roleCommand	src/replication.c	/^void roleCommand(client *c) {$/;"	f
role_reported	src/sentinel.c	/^    int role_reported;$/;"	m	struct:sentinelRedisInstance	file:
role_reported_time	src/sentinel.c	/^    mstime_t role_reported_time;$/;"	m	struct:sentinelRedisInstance	file:
root	deps/jemalloc/include/jemalloc/internal/rtree.h	/^	rtree_leaf_elm_t	root[1U << (RTREE_NSB\/RTREE_HEIGHT)];$/;"	m	struct:rtree_s
root	deps/jemalloc/include/jemalloc/internal/rtree.h	/^	rtree_node_elm_t	root[1U << (RTREE_NSB\/RTREE_HEIGHT)];$/;"	m	struct:rtree_s
root_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t	root_node[] = {$/;"	v	file:
rootgc	deps/lua/src/lstate.h	/^  GCObject *rootgc;  \/* list of all collectable objects *\/$/;"	m	struct:global_State
roslaveerr	src/server.h	/^    *masterdownerr, *roslaveerr, *execaborterr, *noautherr, *noreplicaserr,$/;"	m	struct:sharedObjectsStruct
roundFloat	tests/support/util.tcl	/^proc roundFloat f {$/;"	p
rpop	src/server.h	/^    *rpop, *lpop, *lpush, *rpoplpush, *lmove, *blmove, *zpopmin, *zpopmax,$/;"	m	struct:sharedObjectsStruct
rpopCommand	src/server.h	/^                        *lpopCommand, *rpopCommand, *zpopminCommand,$/;"	m	struct:redisServer	typeref:struct:redisServer::
rpopCommand	src/t_list.c	/^void rpopCommand(client *c) {$/;"	f
rpoplpush	src/server.h	/^    *rpop, *lpop, *lpush, *rpoplpush, *lmove, *blmove, *zpopmin, *zpopmax,$/;"	m	struct:sharedObjectsStruct
rpoplpushCommand	src/server.h	/^                        *xgroupCommand, *rpoplpushCommand, *lmoveCommand;$/;"	m	struct:redisServer	typeref:struct:redisServer::
rpoplpushCommand	src/t_list.c	/^void rpoplpushCommand(client *c) {$/;"	f
rpushCommand	src/t_list.c	/^void rpushCommand(client *c) {$/;"	f
rpushxCommand	src/t_list.c	/^void rpushxCommand(client *c) {$/;"	f
rs	src/module.c	/^            zrangespec rs;         \/* Score range. *\/$/;"	m	struct:RedisModuleKey::__anon62::__anon63	file:
rshift128	deps/jemalloc/test/src/SFMT.c	/^static inline void rshift128(w128_t *out, w128_t const *in, int shift) {$/;"	f	file:
rss_extra	src/server.h	/^    float rss_extra;$/;"	m	struct:redisMemOverhead
rss_extra_bytes	src/server.h	/^    size_t rss_extra_bytes;$/;"	m	struct:redisMemOverhead
rt	src/rax.h	/^    rax *rt;                \/* Radix tree we are iterating. *\/$/;"	m	struct:raxIterator
rtree_cache_direct_map	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_cache_direct_map(uintptr_t key) {$/;"	f
rtree_child_leaf_read	deps/jemalloc/src/rtree.c	/^rtree_child_leaf_read(tsdn_t *tsdn, rtree_t *rtree, rtree_node_elm_t *elm,$/;"	f	file:
rtree_child_leaf_tryread	deps/jemalloc/src/rtree.c	/^rtree_child_leaf_tryread(rtree_node_elm_t *elm, bool dependent) {$/;"	f	file:
rtree_child_node_read	deps/jemalloc/src/rtree.c	/^rtree_child_node_read(tsdn_t *tsdn, rtree_t *rtree, rtree_node_elm_t *elm,$/;"	f	file:
rtree_child_node_tryread	deps/jemalloc/src/rtree.c	/^rtree_child_node_tryread(rtree_node_elm_t *elm, bool dependent) {$/;"	f	file:
rtree_clear	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_clear(tsdn_t *tsdn, rtree_t *rtree, rtree_ctx_t *rtree_ctx,$/;"	f
rtree_ctx_cache_elm_s	deps/jemalloc/include/jemalloc/internal/rtree_tsd.h	/^struct rtree_ctx_cache_elm_s {$/;"	s
rtree_ctx_cache_elm_t	deps/jemalloc/include/jemalloc/internal/rtree_tsd.h	/^typedef struct rtree_ctx_cache_elm_s rtree_ctx_cache_elm_t;$/;"	t	typeref:struct:rtree_ctx_cache_elm_s
rtree_ctx_data_init	deps/jemalloc/src/rtree.c	/^rtree_ctx_data_init(rtree_ctx_t *ctx) {$/;"	f
rtree_ctx_s	deps/jemalloc/include/jemalloc/internal/rtree_tsd.h	/^struct rtree_ctx_s {$/;"	s
rtree_ctx_t	deps/jemalloc/include/jemalloc/internal/rtree_tsd.h	/^typedef struct rtree_ctx_s rtree_ctx_t;$/;"	t	typeref:struct:rtree_ctx_s
rtree_delete	deps/jemalloc/src/rtree.c	/^rtree_delete(tsdn_t *tsdn, rtree_t *rtree) {$/;"	f
rtree_delete_subtree	deps/jemalloc/src/rtree.c	/^rtree_delete_subtree(tsdn_t *tsdn, rtree_t *rtree, rtree_node_elm_t *subtree,$/;"	f	file:
rtree_extent_read	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_extent_read(tsdn_t *tsdn, rtree_t *rtree, rtree_ctx_t *rtree_ctx,$/;"	f
rtree_extent_szind_read	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_extent_szind_read(tsdn_t *tsdn, rtree_t *rtree, rtree_ctx_t *rtree_ctx,$/;"	f
rtree_leaf_alloc	deps/jemalloc/src/rtree.c	/^rtree_leaf_alloc_t *JET_MUTABLE rtree_leaf_alloc = rtree_leaf_alloc_impl;$/;"	v
rtree_leaf_alloc_impl	deps/jemalloc/src/rtree.c	/^rtree_leaf_alloc_impl(tsdn_t *tsdn, rtree_t *rtree, size_t nelms) {$/;"	f	file:
rtree_leaf_alloc_intercept	deps/jemalloc/test/unit/rtree.c	/^rtree_leaf_alloc_intercept(tsdn_t *tsdn, rtree_t *rtree, size_t nelms) {$/;"	f	file:
rtree_leaf_alloc_orig	deps/jemalloc/test/unit/rtree.c	/^rtree_leaf_alloc_t *rtree_leaf_alloc_orig;$/;"	v
rtree_leaf_alloc_t	deps/jemalloc/include/jemalloc/internal/rtree.h	/^typedef rtree_leaf_elm_t *(rtree_leaf_alloc_t)(tsdn_t *, rtree_t *, size_t);$/;"	t
rtree_leaf_dalloc	deps/jemalloc/src/rtree.c	/^UNUSED rtree_leaf_dalloc_t *JET_MUTABLE rtree_leaf_dalloc =$/;"	v
rtree_leaf_dalloc_impl	deps/jemalloc/src/rtree.c	/^rtree_leaf_dalloc_impl(tsdn_t *tsdn, rtree_t *rtree, rtree_leaf_elm_t *leaf) {$/;"	f	file:
rtree_leaf_dalloc_intercept	deps/jemalloc/test/unit/rtree.c	/^rtree_leaf_dalloc_intercept(tsdn_t *tsdn, rtree_t *rtree,$/;"	f	file:
rtree_leaf_dalloc_orig	deps/jemalloc/test/unit/rtree.c	/^rtree_leaf_dalloc_t *rtree_leaf_dalloc_orig;$/;"	v
rtree_leaf_dalloc_t	deps/jemalloc/include/jemalloc/internal/rtree.h	/^typedef void (rtree_leaf_dalloc_t)(tsdn_t *, rtree_t *, rtree_leaf_elm_t *);$/;"	t
rtree_leaf_elm_bits_extent_get	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_leaf_elm_bits_extent_get(uintptr_t bits) {$/;"	f
rtree_leaf_elm_bits_read	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_leaf_elm_bits_read(tsdn_t *tsdn, rtree_t *rtree, rtree_leaf_elm_t *elm,$/;"	f
rtree_leaf_elm_bits_slab_get	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_leaf_elm_bits_slab_get(uintptr_t bits) {$/;"	f
rtree_leaf_elm_bits_szind_get	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_leaf_elm_bits_szind_get(uintptr_t bits) {$/;"	f
rtree_leaf_elm_extent_read	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_leaf_elm_extent_read(UNUSED tsdn_t *tsdn, UNUSED rtree_t *rtree,$/;"	f
rtree_leaf_elm_extent_write	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_leaf_elm_extent_write(UNUSED tsdn_t *tsdn, UNUSED rtree_t *rtree,$/;"	f
rtree_leaf_elm_lookup	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_leaf_elm_lookup(tsdn_t *tsdn, rtree_t *rtree, rtree_ctx_t *rtree_ctx,$/;"	f
rtree_leaf_elm_lookup_hard	deps/jemalloc/src/rtree.c	/^rtree_leaf_elm_lookup_hard(tsdn_t *tsdn, rtree_t *rtree, rtree_ctx_t *rtree_ctx,$/;"	f
rtree_leaf_elm_s	deps/jemalloc/include/jemalloc/internal/rtree.h	/^struct rtree_leaf_elm_s {$/;"	s
rtree_leaf_elm_slab_read	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_leaf_elm_slab_read(UNUSED tsdn_t *tsdn, UNUSED rtree_t *rtree,$/;"	f
rtree_leaf_elm_slab_write	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_leaf_elm_slab_write(UNUSED tsdn_t *tsdn, UNUSED rtree_t *rtree,$/;"	f
rtree_leaf_elm_szind_read	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_leaf_elm_szind_read(UNUSED tsdn_t *tsdn, UNUSED rtree_t *rtree,$/;"	f
rtree_leaf_elm_szind_slab_update	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_leaf_elm_szind_slab_update(tsdn_t *tsdn, rtree_t *rtree,$/;"	f
rtree_leaf_elm_szind_write	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_leaf_elm_szind_write(UNUSED tsdn_t *tsdn, UNUSED rtree_t *rtree,$/;"	f
rtree_leaf_elm_t	deps/jemalloc/include/jemalloc/internal/rtree_tsd.h	/^typedef struct rtree_leaf_elm_s rtree_leaf_elm_t;$/;"	t	typeref:struct:rtree_leaf_elm_s
rtree_leaf_elm_write	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_leaf_elm_write(tsdn_t *tsdn, rtree_t *rtree, rtree_leaf_elm_t *elm,$/;"	f
rtree_leaf_init	deps/jemalloc/src/rtree.c	/^rtree_leaf_init(tsdn_t *tsdn, rtree_t *rtree, atomic_p_t *elmp) {$/;"	f	file:
rtree_leaf_valid	deps/jemalloc/src/rtree.c	/^rtree_leaf_valid(rtree_leaf_elm_t *leaf) {$/;"	f	file:
rtree_leafkey	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_leafkey(uintptr_t key) {$/;"	f
rtree_level_s	deps/jemalloc/include/jemalloc/internal/rtree.h	/^struct rtree_level_s {$/;"	s
rtree_level_t	deps/jemalloc/include/jemalloc/internal/rtree.h	/^typedef struct rtree_level_s rtree_level_t;$/;"	t	typeref:struct:rtree_level_s
rtree_levels	deps/jemalloc/include/jemalloc/internal/rtree.h	/^static const rtree_level_t rtree_levels[] = {$/;"	v
rtree_new	deps/jemalloc/src/rtree.c	/^rtree_new(rtree_t *rtree, bool zeroed) {$/;"	f
rtree_node_alloc	deps/jemalloc/src/rtree.c	/^rtree_node_alloc_t *JET_MUTABLE rtree_node_alloc = rtree_node_alloc_impl;$/;"	v
rtree_node_alloc_impl	deps/jemalloc/src/rtree.c	/^rtree_node_alloc_impl(tsdn_t *tsdn, rtree_t *rtree, size_t nelms) {$/;"	f	file:
rtree_node_alloc_intercept	deps/jemalloc/test/unit/rtree.c	/^rtree_node_alloc_intercept(tsdn_t *tsdn, rtree_t *rtree, size_t nelms) {$/;"	f	file:
rtree_node_alloc_orig	deps/jemalloc/test/unit/rtree.c	/^rtree_node_alloc_t *rtree_node_alloc_orig;$/;"	v
rtree_node_alloc_t	deps/jemalloc/include/jemalloc/internal/rtree.h	/^typedef rtree_node_elm_t *(rtree_node_alloc_t)(tsdn_t *, rtree_t *, size_t);$/;"	t
rtree_node_dalloc	deps/jemalloc/src/rtree.c	/^UNUSED rtree_node_dalloc_t *JET_MUTABLE rtree_node_dalloc =$/;"	v
rtree_node_dalloc_impl	deps/jemalloc/src/rtree.c	/^rtree_node_dalloc_impl(tsdn_t *tsdn, rtree_t *rtree, rtree_node_elm_t *node) {$/;"	f	file:
rtree_node_dalloc_intercept	deps/jemalloc/test/unit/rtree.c	/^rtree_node_dalloc_intercept(tsdn_t *tsdn, rtree_t *rtree,$/;"	f	file:
rtree_node_dalloc_orig	deps/jemalloc/test/unit/rtree.c	/^rtree_node_dalloc_t *rtree_node_dalloc_orig;$/;"	v
rtree_node_dalloc_t	deps/jemalloc/include/jemalloc/internal/rtree.h	/^typedef void (rtree_node_dalloc_t)(tsdn_t *, rtree_t *, rtree_node_elm_t *);$/;"	t
rtree_node_elm_s	deps/jemalloc/include/jemalloc/internal/rtree.h	/^struct rtree_node_elm_s {$/;"	s
rtree_node_elm_t	deps/jemalloc/include/jemalloc/internal/rtree.h	/^typedef struct rtree_node_elm_s rtree_node_elm_t;$/;"	t	typeref:struct:rtree_node_elm_s
rtree_node_init	deps/jemalloc/src/rtree.c	/^rtree_node_init(tsdn_t *tsdn, rtree_t *rtree, unsigned level,$/;"	f	file:
rtree_node_valid	deps/jemalloc/src/rtree.c	/^rtree_node_valid(rtree_node_elm_t *node) {$/;"	f	file:
rtree_read	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_read(tsdn_t *tsdn, rtree_t *rtree, rtree_ctx_t *rtree_ctx, uintptr_t key,$/;"	f
rtree_s	deps/jemalloc/include/jemalloc/internal/rtree.h	/^struct rtree_s {$/;"	s
rtree_subkey	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_subkey(uintptr_t key, unsigned level) {$/;"	f
rtree_szind_read	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_szind_read(tsdn_t *tsdn, rtree_t *rtree, rtree_ctx_t *rtree_ctx,$/;"	f
rtree_szind_slab_read	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_szind_slab_read(tsdn_t *tsdn, rtree_t *rtree, rtree_ctx_t *rtree_ctx,$/;"	f
rtree_szind_slab_update	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_szind_slab_update(tsdn_t *tsdn, rtree_t *rtree, rtree_ctx_t *rtree_ctx,$/;"	f
rtree_t	deps/jemalloc/include/jemalloc/internal/rtree.h	/^typedef struct rtree_s rtree_t;$/;"	t	typeref:struct:rtree_s
rtree_write	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_write(tsdn_t *tsdn, rtree_t *rtree, rtree_ctx_t *rtree_ctx, uintptr_t key,$/;"	f
run	deps/hiredis/examples/example-qt.cpp	/^void ExampleQt::run() {$/;"	f	class:ExampleQt
run	exp/3_ycsb_client.sh	/^run() {$/;"	f
run-tests	utils/speed-regression.tcl	/^proc run-tests branches {$/;"	p
runExp1	exp/exp1.sh	/^runExp1() {$/;"	f
runHgInstance	exp/1_build_redis_cluster.sh	/^runHgInstance() {$/;"	f
runOneInstance	cluster.sh	/^runOneInstance() {$/;"	f
runRedisInstance	exp/1_build_redis_cluster.sh	/^runRedisInstance() {$/;"	f
runSyncTest	exp/exp1.sh	/^runSyncTest() {$/;"	f
runTest1	exp/exp4.sh	/^runTest1() {$/;"	f
runTest2	exp/exp4.sh	/^runTest2() {$/;"	f
runWorkload	exp/baseline.sh	/^runWorkload() {$/;"	f
runWorkload	exp/exp1.sh	/^runWorkload() {$/;"	f
runWorkload	exp/exp4.sh	/^runWorkload() {$/;"	f
runYCSB	exp/2_run_ycsb.sh	/^runYCSB() {$/;"	f
runYCSB_JAVA	exp/2_run_ycsb.sh	/^runYCSB_JAVA() {$/;"	f
run_cli	tests/integration/redis-cli.tcl	/^    proc run_cli {args} {$/;"	p
run_cli_with_input_file	tests/integration/redis-cli.tcl	/^    proc run_cli_with_input_file {path args} {$/;"	p
run_cli_with_input_pipe	tests/integration/redis-cli.tcl	/^    proc run_cli_with_input_pipe {cmd args} {$/;"	p
run_command	tests/integration/redis-cli.tcl	/^    proc run_command {fd cmd} {$/;"	p
run_experiment	utils/hyperloglog/hll-gnuplot-graph.rb	/^def run_experiment(r,seed,max,step)$/;"	f
run_interval	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^	nstime_t run_interval;$/;"	m	struct:background_thread_stats_s
run_solo	tests/test_helper.tcl	/^proc run_solo {name code} {$/;"	p
run_tests	tests/instances.tcl	/^proc run_tests {} {$/;"	p
run_with_period	src/server.h	504;"	d
runargs	deps/lua/src/lua.c	/^static int runargs (lua_State *L, char **argv, int n) {$/;"	f	file:
runid	src/sentinel.c	/^    char *runid;    \/* Run ID of this instance, or unique ID if is a Sentinel.*\/$/;"	m	struct:sentinelRedisInstance	file:
runid	src/sentinel.c	/^    char *runid;$/;"	m	struct:sentinelLeader	file:
runid	src/server.h	/^    char runid[CONFIG_RUN_ID_SIZE+1];  \/* ID always different at every exec. *\/$/;"	m	struct:redisServer
running_scripts	src/sentinel.c	/^    int running_scripts;    \/* Number of scripts in execution right now. *\/$/;"	m	struct:sentinelState	file:
runtime_check	deps/lua/src/lvm.c	345;"	d	file:
s	deps/jemalloc/src/jemalloc.c	/^	size_t	s;	\/* Request size. *\/$/;"	m	struct:__anon132	file:
s	deps/jemalloc/test/src/SFMT.c	/^    vector unsigned int s;$/;"	m	union:W128_T	file:
s	deps/lua/src/lauxlib.c	/^  const char *s;$/;"	m	struct:LoadS	file:
s	deps/lua/src/lparser.h	/^    struct { int info, aux; } s;$/;"	m	union:expdesc::__anon94	typeref:struct:expdesc::__anon94::__anon95
s	tests/cluster/cluster.tcl	/^proc s {n field} {$/;"	p
s	tests/test_helper.tcl	/^proc s {args} {$/;"	p
s64	src/dict.h	/^        int64_t s64;$/;"	m	union:dictEntry::__anon29
s_down_since_time	src/sentinel.c	/^    mstime_t s_down_since_time; \/* Subjectively down since time. *\/$/;"	m	struct:sentinelRedisInstance	file:
s_free	src/sdsalloc.h	47;"	d
s_free_usable	src/sdsalloc.h	52;"	d
s_malloc	src/sdsalloc.h	43;"	d
s_malloc_usable	src/sdsalloc.h	48;"	d
s_realloc	src/sdsalloc.h	44;"	d
s_realloc_usable	src/sdsalloc.h	49;"	d
s_trymalloc	src/sdsalloc.h	45;"	d
s_trymalloc_usable	src/sdsalloc.h	50;"	d
s_tryrealloc	src/sdsalloc.h	46;"	d
s_tryrealloc_usable	src/sdsalloc.h	51;"	d
saddCommand	src/t_set.c	/^void saddCommand(client *c) {$/;"	f
saddr	deps/hiredis/async.h	/^    struct sockaddr *saddr;$/;"	m	struct:redisAsyncContext	typeref:struct:redisAsyncContext::sockaddr
saddr	deps/hiredis/hiredis.h	/^    struct sockadr *saddr;$/;"	m	struct:redisContext	typeref:struct:redisContext::sockadr
safe	src/dict.h	/^    int table, safe;$/;"	m	struct:dictIterator
sameobjecterr	src/server.h	/^    *emptyarray, *wrongtypeerr, *nokeyerr, *syntaxerr, *sameobjecterr,$/;"	m	struct:sharedObjectsStruct
sample	src/sparkline.h	/^struct sample {$/;"	s
samples	src/latency.h	/^    struct latencySample samples[LATENCY_TS_LEN]; \/* Latest history. *\/$/;"	m	struct:latencyTimeSeries	typeref:struct:latencyTimeSeries::latencySample
samples	src/latency.h	/^    uint32_t samples;       \/* Number of non-zero samples. *\/$/;"	m	struct:latencyStats
samples	src/server.h	/^        long long samples[STATS_METRIC_SAMPLES];$/;"	m	struct:redisServer::__anon20
samples	src/sparkline.h	/^    struct sample *samples;$/;"	m	struct:sequence	typeref:struct:sequence::sample
sanitize_dump_payload	src/server.h	/^    int sanitize_dump_payload;      \/* Enables deep sanitization for ziplist and listpack in RDB and RESTORE. *\/$/;"	m	struct:redisServer
sanitize_dump_payload_enum	src/config.c	/^configEnum sanitize_dump_payload_enum[] = {$/;"	v
save	deps/lua/src/llex.c	/^static void save (LexState *ls, int c) {$/;"	f	file:
save	src/redis-benchmark.c	/^    sds save;$/;"	m	struct:redisConfig	file:
saveCommand	src/rdb.c	/^void saveCommand(client *c) {$/;"	f
save_and_next	deps/lua/src/llex.c	48;"	d	file:
saveci	deps/lua/src/ldo.h	27;"	d
saved_oparray	src/module.c	/^    redisOpArray saved_oparray;    \/* When propagating commands in a callback$/;"	m	struct:RedisModuleCtx	file:
savedpc	deps/lua/src/lstate.h	/^  const Instruction *savedpc;  \/* `savedpc' of current function *\/$/;"	m	struct:lua_State
savedpc	deps/lua/src/lstate.h	/^  const Instruction *savedpc;$/;"	m	struct:CallInfo
saveparam	src/server.h	/^struct saveparam {$/;"	s
saveparams	src/server.h	/^    struct saveparam *saveparams;   \/* Save points array for RDB *\/$/;"	m	struct:redisServer	typeref:struct:redisServer::saveparam
saveparamslen	src/server.h	/^    int saveparamslen;              \/* Number of saving points *\/$/;"	m	struct:redisServer
savestack	deps/lua/src/ldo.h	24;"	d
saw_depth_error	deps/jemalloc/test/unit/witness.c	/^static bool saw_depth_error;$/;"	v	file:
saw_junking	deps/jemalloc/test/unit/junk.c	/^static bool saw_junking;$/;"	v	file:
saw_lock_error	deps/jemalloc/test/unit/witness.c	/^static bool saw_lock_error;$/;"	v	file:
saw_not_owner_error	deps/jemalloc/test/unit/witness.c	/^static bool saw_not_owner_error;$/;"	v	file:
saw_owner_error	deps/jemalloc/test/unit/witness.c	/^static bool saw_owner_error;$/;"	v	file:
scanCallback	src/db.c	/^void scanCallback(void *privdata, const dictEntry *de) {$/;"	f
scanCommand	src/db.c	/^void scanCommand(client *c) {$/;"	f
scanDatabaseForReadyLists	src/db.c	/^void scanDatabaseForReadyLists(redisDb *db) {$/;"	f
scanGenericCommand	src/db.c	/^void scanGenericCommand(client *c, robj *o, unsigned long cursor) {$/;"	f
scanLaterHash	src/defrag.c	/^long scanLaterHash(robj *ob, unsigned long *cursor) {$/;"	f
scanLaterHashCallback	src/defrag.c	/^void scanLaterHashCallback(void *privdata, const dictEntry *_de) {$/;"	f
scanLaterList	src/defrag.c	/^long scanLaterList(robj *ob, unsigned long *cursor, long long endtime, long long *defragged) {$/;"	f
scanLaterSet	src/defrag.c	/^long scanLaterSet(robj *ob, unsigned long *cursor) {$/;"	f
scanLaterSetCallback	src/defrag.c	/^void scanLaterSetCallback(void *privdata, const dictEntry *_de) {$/;"	f
scanLaterStreamListpacks	src/defrag.c	/^int scanLaterStreamListpacks(robj *ob, unsigned long *cursor, long long endtime, long long *defragged) {$/;"	f
scanLaterZset	src/defrag.c	/^long scanLaterZset(robj *ob, unsigned long *cursor) {$/;"	f
scanLaterZsetCallback	src/defrag.c	/^void scanLaterZsetCallback(void *privdata, const dictEntry *_de) {$/;"	f
scanLaterZsetData	src/defrag.c	/^} scanLaterZsetData;$/;"	t	typeref:struct:__anon71	file:
scanMode	src/redis-cli.c	/^static void scanMode(void) {$/;"	f	file:
scan_entry	utils/lru/lfu-simulation.c	/^uint8_t scan_entry(struct entry *e) {$/;"	f
scan_key	tests/modules/scan.c	/^int scan_key(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
scan_key_callback	tests/modules/scan.c	/^void scan_key_callback(RedisModuleKey *key, RedisModuleString* field, RedisModuleString* value, void *privdata) {$/;"	f
scan_key_pd	tests/modules/scan.c	/^} scan_key_pd;$/;"	t	typeref:struct:__anon77	file:
scan_mode	src/redis-cli.c	/^    int scan_mode;$/;"	m	struct:config	file:
scan_strings	tests/modules/scan.c	/^int scan_strings(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
scan_strings_callback	tests/modules/scan.c	/^void scan_strings_callback(RedisModuleCtx *ctx, RedisModuleString* keyname, RedisModuleKey* key, void *privdata) {$/;"	f
scan_strings_pd	tests/modules/scan.c	/^} scan_strings_pd;$/;"	t	typeref:struct:__anon76	file:
scanformat	deps/lua/src/lstrlib.c	/^static const char *scanformat (lua_State *L, const char *strfrmt, char *form) {$/;"	f	file:
scardCommand	src/t_set.c	/^void scardCommand(client *c) {$/;"	f
scheduleTimer	deps/hiredis/async.h	/^        void (*scheduleTimer)(void *privdata, struct timeval tv);$/;"	m	struct:redisAsyncContext::__anon87
score	src/geo.h	/^    double score;$/;"	m	struct:geoPoint
score	src/server.h	/^        double score;$/;"	m	union:_redisSortObject::__anon22
score	src/server.h	/^    double score;$/;"	m	struct:zskiplistNode
score	src/t_zset.c	/^    double score;$/;"	m	struct:__anon8	file:
scoresOfGeoHashBox	src/geo.c	/^void scoresOfGeoHashBox(GeoHashBits hash, GeoHashFix52Bits *min, GeoHashFix52Bits *max) {$/;"	f
script	src/server.h	/^    *script, *replconf, *eval, *persist, *set, *pexpireat, *pexpire, $/;"	m	struct:sharedObjectsStruct
scriptCommand	src/scripting.c	/^void scriptCommand(client *c) {$/;"	f
scriptingEnableGlobalsProtection	src/scripting.c	/^void scriptingEnableGlobalsProtection(lua_State *lua) {$/;"	f
scriptingInit	src/scripting.c	/^void scriptingInit(int setup) {$/;"	f
scriptingRelease	src/scripting.c	/^void scriptingRelease(int async) {$/;"	f
scriptingReset	src/scripting.c	/^void scriptingReset(int async) {$/;"	f
scripts_queue	src/sentinel.c	/^    list *scripts_queue;            \/* Queue of user scripts to execute. *\/$/;"	m	struct:sentinelState	file:
sdiffCommand	src/t_set.c	/^void sdiffCommand(client *c) {$/;"	f
sdiffstoreCommand	src/t_set.c	/^void sdiffstoreCommand(client *c) {$/;"	f
sdigits10	src/util.c	/^uint32_t sdigits10(int64_t v) {$/;"	f
sds	deps/hiredis/sdscompat.h	45;"	d
sds	src/config.c	/^    sdsConfigData sds;$/;"	m	union:typeData	file:
sds	src/sds.h	/^typedef char *sds;$/;"	t
sdsAllocPtr	deps/hiredis/sdscompat.h	54;"	d
sdsAllocPtr	src/sds.c	/^void *sdsAllocPtr(sds s) {$/;"	f
sdsAllocSize	deps/hiredis/sdscompat.h	55;"	d
sdsAllocSize	src/sds.c	/^size_t sdsAllocSize(sds s) {$/;"	f
sdsCatColorizedLdbReply	src/redis-cli.c	/^sds sdsCatColorizedLdbReply(sds o, char *s, size_t len) {$/;"	f
sdsConfigData	src/config.c	/^typedef struct sdsConfigData {$/;"	s	file:
sdsConfigData	src/config.c	/^} sdsConfigData;$/;"	t	typeref:struct:sdsConfigData	file:
sdsEncodedObject	src/server.h	2034;"	d
sdsHdrSize	src/sds.c	/^static inline int sdsHdrSize(char type) {$/;"	f	file:
sdsIncrLen	deps/hiredis/sdscompat.h	74;"	d
sdsIncrLen	src/sds.c	/^void sdsIncrLen(sds s, ssize_t incr) {$/;"	f
sdsMakeRoomFor	deps/hiredis/sdscompat.h	78;"	d
sdsMakeRoomFor	src/sds.c	/^sds sdsMakeRoomFor(sds s, size_t addlen) {$/;"	f
sdsRemoveFreeSpace	deps/hiredis/sdscompat.h	85;"	d
sdsRemoveFreeSpace	src/sds.c	/^sds sdsRemoveFreeSpace(sds s) {$/;"	f
sdsReplyDictType	src/server.c	/^dictType sdsReplyDictType = {$/;"	v
sdsReqType	src/sds.c	/^static inline char sdsReqType(size_t string_size) {$/;"	f	file:
sdsTest	src/sds.c	/^int sdsTest(int argc, char **argv, int accurate) {$/;"	f
sdsTestTemplateCallback	src/sds.c	/^static sds sdsTestTemplateCallback(sds varname, void *arg) {$/;"	f	file:
sdsTypeMaxSize	src/sds.c	/^static inline size_t sdsTypeMaxSize(char type) {$/;"	f	file:
sdsZmallocSize	src/networking.c	/^size_t sdsZmallocSize(sds s) {$/;"	f
sds_free	deps/hiredis/sdscompat.h	69;"	d
sds_free	src/sds.c	/^void sds_free(void *ptr) { s_free(ptr); }$/;"	f
sds_malloc	deps/hiredis/sdscompat.h	79;"	d
sds_malloc	src/sds.c	/^void *sds_malloc(size_t size) { return s_malloc(size); }$/;"	f
sds_realloc	deps/hiredis/sdscompat.h	84;"	d
sds_realloc	src/sds.c	/^void *sds_realloc(void *ptr, size_t size) { return s_realloc(ptr,size); }$/;"	f
sdsalloc	deps/hiredis/sdscompat.h	51;"	d
sdsalloc	src/sds.h	/^static inline size_t sdsalloc(const sds s) {$/;"	f
sdsavail	deps/hiredis/sdscompat.h	48;"	d
sdsavail	src/sds.h	/^static inline size_t sdsavail(const sds s) {$/;"	f
sdscat	deps/hiredis/sdscompat.h	56;"	d
sdscat	src/sds.c	/^sds sdscat(sds s, const char *t) {$/;"	f
sdscatcolor	src/redis-cli.c	/^sds sdscatcolor(sds o, char *s, size_t len, char *color) {$/;"	f
sdscatfmt	deps/hiredis/sdscompat.h	57;"	d
sdscatfmt	src/sds.c	/^sds sdscatfmt(sds s, char const *fmt, ...) {$/;"	f
sdscatlen	deps/hiredis/sdscompat.h	58;"	d
sdscatlen	src/sds.c	/^sds sdscatlen(sds s, const void *t, size_t len) {$/;"	f
sdscatprintf	deps/hiredis/sdscompat.h	59;"	d
sdscatprintf	src/sds.c	/^sds sdscatprintf(sds s, const char *fmt, ...) {$/;"	f
sdscatrepr	deps/hiredis/sdscompat.h	60;"	d
sdscatrepr	src/sds.c	/^sds sdscatrepr(sds s, const char *p, size_t len) {$/;"	f
sdscatsds	deps/hiredis/sdscompat.h	61;"	d
sdscatsds	src/sds.c	/^sds sdscatsds(sds s, const sds t) {$/;"	f
sdscatvprintf	deps/hiredis/sdscompat.h	62;"	d
sdscatvprintf	src/sds.c	/^sds sdscatvprintf(sds s, const char *fmt, va_list ap) {$/;"	f
sdsclear	deps/hiredis/sdscompat.h	63;"	d
sdsclear	src/sds.c	/^void sdsclear(sds s) {$/;"	f
sdscmp	deps/hiredis/sdscompat.h	64;"	d
sdscmp	src/sds.c	/^int sdscmp(const sds s1, const sds s2) {$/;"	f
sdscmplex	src/t_zset.c	/^int sdscmplex(sds a, sds b) {$/;"	f
sdscpy	deps/hiredis/sdscompat.h	65;"	d
sdscpy	src/sds.c	/^sds sdscpy(sds s, const char *t) {$/;"	f
sdscpylen	deps/hiredis/sdscompat.h	66;"	d
sdscpylen	src/sds.c	/^sds sdscpylen(sds s, const char *t, size_t len) {$/;"	f
sdsdup	deps/hiredis/sdscompat.h	67;"	d
sdsdup	src/sds.c	/^sds sdsdup(const sds s) {$/;"	f
sdsempty	deps/hiredis/sdscompat.h	68;"	d
sdsempty	src/sds.c	/^sds sdsempty(void) {$/;"	f
sdsfree	deps/hiredis/sdscompat.h	70;"	d
sdsfree	src/sds.c	/^void sdsfree(sds s) {$/;"	f
sdsfreesplitres	deps/hiredis/sdscompat.h	71;"	d
sdsfreesplitres	src/sds.c	/^void sdsfreesplitres(sds *tokens, int count) {$/;"	f
sdsfromlonglong	deps/hiredis/sdscompat.h	72;"	d
sdsfromlonglong	src/sds.c	/^sds sdsfromlonglong(long long value) {$/;"	f
sdsgrowzero	deps/hiredis/sdscompat.h	73;"	d
sdsgrowzero	src/sds.c	/^sds sdsgrowzero(sds s, size_t len) {$/;"	f
sdshdr16	src/sds.h	/^struct __attribute__ ((__packed__)) sdshdr16 {$/;"	s
sdshdr32	src/sds.h	/^struct __attribute__ ((__packed__)) sdshdr32 {$/;"	s
sdshdr5	src/sds.h	/^struct __attribute__ ((__packed__)) sdshdr5 {$/;"	s
sdshdr64	src/sds.h	/^struct __attribute__ ((__packed__)) sdshdr64 {$/;"	s
sdshdr8	src/sds.h	/^struct __attribute__ ((__packed__)) sdshdr8 {$/;"	s
sdsinclen	deps/hiredis/sdscompat.h	50;"	d
sdsinclen	src/sds.h	/^static inline void sdsinclen(sds s, size_t inc) {$/;"	f
sdsjoin	deps/hiredis/sdscompat.h	75;"	d
sdsjoin	src/sds.c	/^sds sdsjoin(char **argv, int argc, char *sep) {$/;"	f
sdsjoinsds	deps/hiredis/sdscompat.h	76;"	d
sdsjoinsds	src/sds.c	/^sds sdsjoinsds(sds *argv, int argc, const char *sep, size_t seplen) {$/;"	f
sdslen	deps/hiredis/sdscompat.h	47;"	d
sdslen	src/sds.h	/^static inline size_t sdslen(const sds s) {$/;"	f
sdsll2str	deps/hiredis/sdscompat.h	77;"	d
sdsll2str	src/sds.c	/^int sdsll2str(char *s, long long value) {$/;"	f
sdsmapchars	deps/hiredis/sdscompat.h	80;"	d
sdsmapchars	src/sds.c	/^sds sdsmapchars(sds s, const char *from, const char *to, size_t setlen) {$/;"	f
sdsnew	deps/hiredis/sdscompat.h	81;"	d
sdsnew	src/sds.c	/^sds sdsnew(const char *init) {$/;"	f
sdsnewlen	deps/hiredis/sdscompat.h	82;"	d
sdsnewlen	src/sds.c	/^sds sdsnewlen(const void *init, size_t initlen) {$/;"	f
sdsrange	deps/hiredis/sdscompat.h	83;"	d
sdsrange	src/sds.c	/^void sdsrange(sds s, ssize_t start, ssize_t end) {$/;"	f
sdssetalloc	deps/hiredis/sdscompat.h	52;"	d
sdssetalloc	src/sds.h	/^static inline void sdssetalloc(sds s, size_t newlen) {$/;"	f
sdssetlen	deps/hiredis/sdscompat.h	49;"	d
sdssetlen	src/sds.h	/^static inline void sdssetlen(sds s, size_t newlen) {$/;"	f
sdssplitargs	deps/hiredis/sdscompat.h	86;"	d
sdssplitargs	src/sds.c	/^sds *sdssplitargs(const char *line, int *argc) {$/;"	f
sdssplitlen	deps/hiredis/sdscompat.h	87;"	d
sdssplitlen	src/sds.c	/^sds *sdssplitlen(const char *s, ssize_t len, const char *sep, int seplen, int *count) {$/;"	f
sdstemplate	src/sds.c	/^sds sdstemplate(const char *template, sdstemplate_callback_t cb_func, void *cb_arg)$/;"	f
sdstemplate_callback_t	src/sds.h	/^typedef sds (*sdstemplate_callback_t)(const sds variable, void *arg);$/;"	t
sdstolower	deps/hiredis/sdscompat.h	88;"	d
sdstolower	src/sds.c	/^void sdstolower(sds s) {$/;"	f
sdstoupper	deps/hiredis/sdscompat.h	89;"	d
sdstoupper	src/sds.c	/^void sdstoupper(sds s) {$/;"	f
sdstrim	deps/hiredis/sdscompat.h	90;"	d
sdstrim	src/sds.c	/^sds sdstrim(sds s, const char *cset) {$/;"	f
sdstrynewlen	src/sds.c	/^sds sdstrynewlen(const void *init, size_t initlen) {$/;"	f
sdsull2str	deps/hiredis/sdscompat.h	91;"	d
sdsull2str	src/sds.c	/^int sdsull2str(char *s, unsigned long long v) {$/;"	f
sdsupdatelen	deps/hiredis/sdscompat.h	92;"	d
sdsupdatelen	src/sds.c	/^void sdsupdatelen(sds s) {$/;"	f
searchPreMonitorCfgName	src/sentinel.c	/^int searchPreMonitorCfgName(const char *name) {$/;"	f
searchvar	deps/lua/src/lparser.c	/^static int searchvar (FuncState *fs, TString *n) {$/;"	f	file:
secReporter	src/server.c	/^void secReporter() {$/;"	f
second_replid_offset	src/server.h	/^    long long second_replid_offset; \/* Accept offsets up to this for replid2. *\/$/;"	m	struct:redisServer
seconds	src/server.h	/^    time_t seconds;$/;"	m	struct:saveparam
section_doc	src/modules/gendoc.rb	/^def section_doc(src, i)$/;"	f
section_name_to_id	src/modules/gendoc.rb	/^def section_name_to_id(name)$/;"	f
sections	src/module.c	/^    int sections;       \/* number of sections we collected so far *\/$/;"	m	struct:RedisModuleInfoCtx	file:
secure_getenv	deps/jemalloc/include/jemalloc/internal/hooks.h	15;"	d
securityWarningCommand	src/networking.c	/^void securityWarningCommand(client *c) {$/;"	f
seekNewline	deps/hiredis/read.c	/^static char *seekNewline(char *s, size_t len) {$/;"	f	file:
seen_last_value	deps/hdr_histogram/hdr_histogram.h	/^    bool seen_last_value;$/;"	m	struct:hdr_iter_percentiles
seen_time	src/stream.h	/^    mstime_t seen_time;         \/* Last time this consumer was active. *\/$/;"	m	struct:streamConsumer
select	src/server.h	/^    *select[PROTO_SHARED_SELECT_CMDS],$/;"	m	struct:sharedObjectsStruct
selectClientNum	exp/exp1.sh	/^selectClientNum() {$/;"	f
selectCommand	src/db.c	/^void selectCommand(client *c) {$/;"	f
selectDb	src/db.c	/^int selectDb(client *c, int id) {$/;"	f
selectNode	exp/1_build_redis_cluster.sh	/^selectNode() {$/;"	f
select_database	deps/hiredis/test.c	/^static redisContext *select_database(redisContext *c) {$/;"	f	file:
selectionsort	deps/lua/test/sort.lua	/^function selectionsort(x,n,f)$/;"	f
seminfo	deps/lua/src/llex.h	/^  SemInfo seminfo;$/;"	m	struct:Token
send	deps/hiredis/sockcompat.h	87;"	d
sendBulkToSlave	src/replication.c	/^void sendBulkToSlave(connection *conn) {$/;"	f
sendCapa	src/redis-cli.c	/^void sendCapa() {$/;"	f
sendChildCowInfo	src/server.c	/^void sendChildCowInfo(childInfoType info_type, char *pname) {$/;"	f
sendChildInfo	src/server.c	/^void sendChildInfo(childInfoType info_type, size_t keys, char *pname) {$/;"	f
sendChildInfoGeneric	src/childinfo.c	/^void sendChildInfoGeneric(childInfoType info_type, size_t keys, double progress, char *pname) {$/;"	f
sendCommand	src/replication.c	/^char *sendCommand(connection *conn, ...) {$/;"	f
sendCommandArgv	src/replication.c	/^char *sendCommandArgv(connection *conn, int argc, char **argv, size_t *argv_lens) {$/;"	f
sendCommandRaw	src/replication.c	/^char* sendCommandRaw(connection *conn, sds cmd) {$/;"	f
sendMsgToController	src/cluster.c	/^void sendMsgToController(char* msg) {$/;"	f
sendRdbOnly	src/redis-cli.c	/^void sendRdbOnly(void) {$/;"	f
sendReplconf	src/redis-cli.c	/^void sendReplconf(const char* arg1, const char* arg2) {$/;"	f
sendReplyToClient	src/networking.c	/^void sendReplyToClient(connection *conn) {$/;"	f
sendScan	src/redis-cli.c	/^static redisReply *sendScan(unsigned long long *it) {$/;"	f	file:
sendSync	src/redis-cli.c	/^unsigned long long sendSync(redisContext *c, char *out_eof) {$/;"	f
sendToClient	src/controller.c	/^void sendToClient(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
sendTrackingMessage	src/tracking.c	/^void sendTrackingMessage(client *c, char *keyname, size_t keylen, int proto) {$/;"	f
send_client_tracking	deps/hiredis/test.c	/^static void send_client_tracking(redisContext *c, const char *str) {$/;"	f	file:
send_data_packet	tests/test_helper.tcl	/^proc send_data_packet {fd status data} {$/;"	p
send_hello	deps/hiredis/test.c	/^static void send_hello(redisContext *c, int version) {$/;"	f	file:
sender	src/cluster.h	/^    char sender[CLUSTER_NAMELEN]; \/* Name of the sender node *\/$/;"	m	struct:__anon43
sentinel	deps/lua/src/loadlib.c	448;"	d	file:
sentinel	src/sentinel.c	/^} sentinel;$/;"	v	typeref:struct:sentinelState
sentinelAbortFailover	src/sentinel.c	/^void sentinelAbortFailover(sentinelRedisInstance *ri) {$/;"	f
sentinelAddFlagsToDictOfRedisInstances	src/sentinel.c	/^void sentinelAddFlagsToDictOfRedisInstances(dict *instances, int flags) {$/;"	f
sentinelAddr	src/sentinel.c	/^typedef struct sentinelAddr {$/;"	s	file:
sentinelAddr	src/sentinel.c	/^} sentinelAddr;$/;"	t	typeref:struct:sentinelAddr	file:
sentinelAddrEqualsHostname	src/sentinel.c	/^int sentinelAddrEqualsHostname(sentinelAddr *a, char *hostname) {$/;"	f
sentinelAddrIsEqual	src/sentinel.c	/^int sentinelAddrIsEqual(sentinelAddr *a, sentinelAddr *b) {$/;"	f
sentinelAskMasterStateToOtherSentinels	src/sentinel.c	/^void sentinelAskMasterStateToOtherSentinels(sentinelRedisInstance *master, int flags) {$/;"	f
sentinelCallClientReconfScript	src/sentinel.c	/^void sentinelCallClientReconfScript(sentinelRedisInstance *master, int role, char *state, sentinelAddr *from, sentinelAddr *to) {$/;"	f
sentinelCheckConfigFile	src/sentinel.c	/^void sentinelCheckConfigFile(void) {$/;"	f
sentinelCheckCreateInstanceErrors	src/sentinel.c	/^const char *sentinelCheckCreateInstanceErrors(int role) {$/;"	f
sentinelCheckObjectivelyDown	src/sentinel.c	/^void sentinelCheckObjectivelyDown(sentinelRedisInstance *master) {$/;"	f
sentinelCheckSubjectivelyDown	src/sentinel.c	/^void sentinelCheckSubjectivelyDown(sentinelRedisInstance *ri) {$/;"	f
sentinelCheckTiltCondition	src/sentinel.c	/^void sentinelCheckTiltCondition(void) {$/;"	f
sentinelCollectTerminatedScripts	src/sentinel.c	/^void sentinelCollectTerminatedScripts(void) {$/;"	f
sentinelCommand	src/sentinel.c	/^void sentinelCommand(client *c) {$/;"	f
sentinelConfig	src/server.h	/^struct sentinelConfig {$/;"	s
sentinelConfigGetCommand	src/sentinel.c	/^void sentinelConfigGetCommand(client *c) {$/;"	f
sentinelConfigSetCommand	src/sentinel.c	/^void sentinelConfigSetCommand(client *c) {$/;"	f
sentinelDelFlagsToDictOfRedisInstances	src/sentinel.c	/^void sentinelDelFlagsToDictOfRedisInstances(dict *instances, int flags) {$/;"	f
sentinelDiscardReplyCallback	src/sentinel.c	/^void sentinelDiscardReplyCallback(redisAsyncContext *c, void *reply, void *privdata) {$/;"	f
sentinelDisconnectCallback	src/sentinel.c	/^void sentinelDisconnectCallback(const redisAsyncContext *c, int status) {$/;"	f
sentinelDropConnections	src/sentinel.c	/^int sentinelDropConnections(void) {$/;"	f
sentinelEvent	src/sentinel.c	/^void sentinelEvent(int level, char *type, sentinelRedisInstance *ri,$/;"	f
sentinelFailoverDetectEnd	src/sentinel.c	/^void sentinelFailoverDetectEnd(sentinelRedisInstance *master) {$/;"	f
sentinelFailoverReconfNextSlave	src/sentinel.c	/^void sentinelFailoverReconfNextSlave(sentinelRedisInstance *master) {$/;"	f
sentinelFailoverSelectSlave	src/sentinel.c	/^void sentinelFailoverSelectSlave(sentinelRedisInstance *ri) {$/;"	f
sentinelFailoverSendSlaveOfNoOne	src/sentinel.c	/^void sentinelFailoverSendSlaveOfNoOne(sentinelRedisInstance *ri) {$/;"	f
sentinelFailoverStateMachine	src/sentinel.c	/^void sentinelFailoverStateMachine(sentinelRedisInstance *ri) {$/;"	f
sentinelFailoverStateStr	src/sentinel.c	/^const char *sentinelFailoverStateStr(int state) {$/;"	f
sentinelFailoverSwitchToPromotedSlave	src/sentinel.c	/^void sentinelFailoverSwitchToPromotedSlave(sentinelRedisInstance *master) {$/;"	f
sentinelFailoverWaitPromotion	src/sentinel.c	/^void sentinelFailoverWaitPromotion(sentinelRedisInstance *ri) {$/;"	f
sentinelFailoverWaitStart	src/sentinel.c	/^void sentinelFailoverWaitStart(sentinelRedisInstance *ri) {$/;"	f
sentinelFlushConfig	src/sentinel.c	/^void sentinelFlushConfig(void) {$/;"	f
sentinelForceHelloUpdateDictOfRedisInstances	src/sentinel.c	/^void sentinelForceHelloUpdateDictOfRedisInstances(dict *instances) {$/;"	f
sentinelForceHelloUpdateForMaster	src/sentinel.c	/^int sentinelForceHelloUpdateForMaster(sentinelRedisInstance *master) {$/;"	f
sentinelGenerateInitialMonitorEvents	src/sentinel.c	/^void sentinelGenerateInitialMonitorEvents(void) {$/;"	f
sentinelGetCurrentMasterAddress	src/sentinel.c	/^sentinelAddr *sentinelGetCurrentMasterAddress(sentinelRedisInstance *master) {$/;"	f
sentinelGetLeader	src/sentinel.c	/^char *sentinelGetLeader(sentinelRedisInstance *master, uint64_t epoch) {$/;"	f
sentinelGetMasterByName	src/sentinel.c	/^sentinelRedisInstance *sentinelGetMasterByName(char *name) {$/;"	f
sentinelGetMasterByNameOrReplyError	src/sentinel.c	/^sentinelRedisInstance *sentinelGetMasterByNameOrReplyError(client *c,$/;"	f
sentinelGetScriptListNodeByPid	src/sentinel.c	/^listNode *sentinelGetScriptListNodeByPid(pid_t pid) {$/;"	f
sentinelHandleConfiguration	src/sentinel.c	/^const char *sentinelHandleConfiguration(char **argv, int argc) {$/;"	f
sentinelHandleDictOfRedisInstances	src/sentinel.c	/^void sentinelHandleDictOfRedisInstances(dict *instances) {$/;"	f
sentinelHandleRedisInstance	src/sentinel.c	/^void sentinelHandleRedisInstance(sentinelRedisInstance *ri) {$/;"	f
sentinelInfoCommand	src/sentinel.c	/^void sentinelInfoCommand(client *c) {$/;"	f
sentinelInfoReplyCallback	src/sentinel.c	/^void sentinelInfoReplyCallback(redisAsyncContext *c, void *reply, void *privdata) {$/;"	f
sentinelInstanceMapCommand	src/sentinel.c	/^char *sentinelInstanceMapCommand(sentinelRedisInstance *ri, char *command) {$/;"	f
sentinelIsQuorumReachable	src/sentinel.c	/^int sentinelIsQuorumReachable(sentinelRedisInstance *master, int *usableptr) {$/;"	f
sentinelIsRunning	src/sentinel.c	/^void sentinelIsRunning(void) {$/;"	f
sentinelKillTimedoutScripts	src/sentinel.c	/^void sentinelKillTimedoutScripts(void) {$/;"	f
sentinelLeader	src/sentinel.c	/^struct sentinelLeader {$/;"	s	file:
sentinelLeaderIncr	src/sentinel.c	/^int sentinelLeaderIncr(dict *counters, char *runid) {$/;"	f
sentinelLinkEstablishedCallback	src/sentinel.c	/^void sentinelLinkEstablishedCallback(const redisAsyncContext *c, int status) {$/;"	f
sentinelLoadQueueEntry	src/server.h	/^struct sentinelLoadQueueEntry {$/;"	s
sentinelMasterLooksSane	src/sentinel.c	/^int sentinelMasterLooksSane(sentinelRedisInstance *master) {$/;"	f
sentinelPendingScriptsCommand	src/sentinel.c	/^void sentinelPendingScriptsCommand(client *c) {$/;"	f
sentinelPingReplyCallback	src/sentinel.c	/^void sentinelPingReplyCallback(redisAsyncContext *c, void *reply, void *privdata) {$/;"	f
sentinelProcessHelloMessage	src/sentinel.c	/^void sentinelProcessHelloMessage(char *hello, int hello_len) {$/;"	f
sentinelPropagateDownAfterPeriod	src/sentinel.c	/^void sentinelPropagateDownAfterPeriod(sentinelRedisInstance *master) {$/;"	f
sentinelPublishCommand	src/sentinel.c	/^void sentinelPublishCommand(client *c) {$/;"	f
sentinelPublishReplyCallback	src/sentinel.c	/^void sentinelPublishReplyCallback(redisAsyncContext *c, void *reply, void *privdata) {$/;"	f
sentinelReceiveHelloMessages	src/sentinel.c	/^void sentinelReceiveHelloMessages(redisAsyncContext *c, void *reply, void *privdata) {$/;"	f
sentinelReceiveIsMasterDownReply	src/sentinel.c	/^void sentinelReceiveIsMasterDownReply(redisAsyncContext *c, void *reply, void *privdata) {$/;"	f
sentinelReconnectInstance	src/sentinel.c	/^void sentinelReconnectInstance(sentinelRedisInstance *ri) {$/;"	f
sentinelRedisInstance	src/sentinel.c	/^typedef struct sentinelRedisInstance {$/;"	s	file:
sentinelRedisInstance	src/sentinel.c	/^} sentinelRedisInstance;$/;"	t	typeref:struct:sentinelRedisInstance	file:
sentinelRedisInstanceLookupSlave	src/sentinel.c	/^sentinelRedisInstance *sentinelRedisInstanceLookupSlave($/;"	f
sentinelRedisInstanceNoDownFor	src/sentinel.c	/^int sentinelRedisInstanceNoDownFor(sentinelRedisInstance *ri, mstime_t ms) {$/;"	f
sentinelRedisInstanceTypeStr	src/sentinel.c	/^const char *sentinelRedisInstanceTypeStr(sentinelRedisInstance *ri) {$/;"	f
sentinelRefreshInstanceInfo	src/sentinel.c	/^void sentinelRefreshInstanceInfo(sentinelRedisInstance *ri, const char *info) {$/;"	f
sentinelReleaseScriptJob	src/sentinel.c	/^void sentinelReleaseScriptJob(sentinelScriptJob *sj) {$/;"	f
sentinelResetMaster	src/sentinel.c	/^void sentinelResetMaster(sentinelRedisInstance *ri, int flags) {$/;"	f
sentinelResetMasterAndChangeAddress	src/sentinel.c	/^int sentinelResetMasterAndChangeAddress(sentinelRedisInstance *master, char *hostname, int port) {$/;"	f
sentinelResetMastersByPattern	src/sentinel.c	/^int sentinelResetMastersByPattern(char *pattern, int flags) {$/;"	f
sentinelRoleCommand	src/sentinel.c	/^void sentinelRoleCommand(client *c) {$/;"	f
sentinelRunPendingScripts	src/sentinel.c	/^void sentinelRunPendingScripts(void) {$/;"	f
sentinelScheduleScriptExecution	src/sentinel.c	/^void sentinelScheduleScriptExecution(char *path, ...) {$/;"	f
sentinelScriptJob	src/sentinel.c	/^typedef struct sentinelScriptJob {$/;"	s	file:
sentinelScriptJob	src/sentinel.c	/^} sentinelScriptJob;$/;"	t	typeref:struct:sentinelScriptJob	file:
sentinelScriptRetryDelay	src/sentinel.c	/^mstime_t sentinelScriptRetryDelay(int retry_num) {$/;"	f
sentinelSelectSlave	src/sentinel.c	/^sentinelRedisInstance *sentinelSelectSlave(sentinelRedisInstance *master) {$/;"	f
sentinelSendAuthIfNeeded	src/sentinel.c	/^void sentinelSendAuthIfNeeded(sentinelRedisInstance *ri, redisAsyncContext *c) {$/;"	f
sentinelSendHello	src/sentinel.c	/^int sentinelSendHello(sentinelRedisInstance *ri) {$/;"	f
sentinelSendPeriodicCommands	src/sentinel.c	/^void sentinelSendPeriodicCommands(sentinelRedisInstance *ri) {$/;"	f
sentinelSendPing	src/sentinel.c	/^int sentinelSendPing(sentinelRedisInstance *ri) {$/;"	f
sentinelSendSlaveOf	src/sentinel.c	/^int sentinelSendSlaveOf(sentinelRedisInstance *ri, const sentinelAddr *addr) {$/;"	f
sentinelSetClientName	src/sentinel.c	/^void sentinelSetClientName(sentinelRedisInstance *ri, redisAsyncContext *c, char *type) {$/;"	f
sentinelSetCommand	src/sentinel.c	/^void sentinelSetCommand(client *c) {$/;"	f
sentinelSimFailureCrash	src/sentinel.c	/^void sentinelSimFailureCrash(void) {$/;"	f
sentinelStartFailover	src/sentinel.c	/^void sentinelStartFailover(sentinelRedisInstance *master) {$/;"	f
sentinelStartFailoverIfNeeded	src/sentinel.c	/^int sentinelStartFailoverIfNeeded(sentinelRedisInstance *master) {$/;"	f
sentinelState	src/sentinel.c	/^struct sentinelState {$/;"	s	file:
sentinelTimer	src/sentinel.c	/^void sentinelTimer(void) {$/;"	f
sentinelTryConnectionSharing	src/sentinel.c	/^int sentinelTryConnectionSharing(sentinelRedisInstance *ri) {$/;"	f
sentinelUpdateSentinelAddressInAllMasters	src/sentinel.c	/^int sentinelUpdateSentinelAddressInAllMasters(sentinelRedisInstance *ri) {$/;"	f
sentinelVoteLeader	src/sentinel.c	/^char *sentinelVoteLeader(sentinelRedisInstance *master, uint64_t req_epoch, char *req_runid, uint64_t *leader_epoch) {$/;"	f
sentinel_	deps/lua/src/loadlib.c	/^static const int sentinel_ = 0;$/;"	v	file:
sentinel_auth_pass	src/sentinel.c	/^    char *sentinel_auth_pass;    \/* Password to use for AUTH against other sentinel *\/$/;"	m	struct:sentinelState	file:
sentinel_auth_user	src/sentinel.c	/^    char *sentinel_auth_user;    \/* Username for ACLs AUTH against other sentinel. *\/$/;"	m	struct:sentinelState	file:
sentinel_config	src/server.h	/^    struct sentinelConfig *sentinel_config; \/* sentinel config to load at startup time. *\/$/;"	m	struct:redisServer	typeref:struct:redisServer::sentinelConfig
sentinel_mode	src/server.h	/^    int sentinel_mode;          \/* True if this instance is a Sentinel. *\/$/;"	m	struct:redisServer
sentinelcmds	src/sentinel.c	/^struct redisCommand sentinelcmds[] = {$/;"	v	typeref:struct:redisCommand
sentinels	src/sentinel.c	/^    dict *sentinels;    \/* Other sentinels monitoring the same master. *\/$/;"	m	struct:sentinelRedisInstance	file:
sentlen	src/server.h	/^    size_t sentlen;         \/* Amount of bytes already sent in the current$/;"	m	struct:client
sep_line	deps/jemalloc/include/jemalloc/internal/size_classes.sh	/^sep_line() {$/;"	f
seq	src/redismodule.h	/^    uint64_t seq;$/;"	m	struct:RedisModuleStreamID
seq	src/stream.h	/^    uint64_t seq;       \/* Sequence number. *\/$/;"	m	struct:streamID
sequence	src/sparkline.h	/^struct sequence {$/;"	s
serveClientBlockedOnList	src/t_list.c	/^int serveClientBlockedOnList(client *receiver, robj *key, robj *dstkey, redisDb *db, robj *value, int wherefrom, int whereto)$/;"	f
serveClientsBlockedOnKeyByModule	src/blocked.c	/^void serveClientsBlockedOnKeyByModule(readyList *rl) {$/;"	f
serveClientsBlockedOnListKey	src/blocked.c	/^void serveClientsBlockedOnListKey(robj *o, readyList *rl) {$/;"	f
serveClientsBlockedOnSortedSetKey	src/blocked.c	/^void serveClientsBlockedOnSortedSetKey(robj *o, readyList *rl) {$/;"	f
serveClientsBlockedOnStreamKey	src/blocked.c	/^void serveClientsBlockedOnStreamKey(robj *o, readyList *rl) {$/;"	f
server	src/server.c	/^struct redisServer server; \/* Server global state *\/$/;"	v	typeref:struct:redisServer
serverAssert	src/server.h	508;"	d
serverAssertWithInfo	src/server.h	507;"	d
serverCron	src/server.c	/^int serverCron(struct aeEventLoop *eventLoop, long long id, void *clientData) {$/;"	f
serverLog	src/server.h	2761;"	d
serverLogFromHandler	src/server.c	/^void serverLogFromHandler(int level, const char *msg) {$/;"	f
serverLogHexDump	src/debug.c	/^void serverLogHexDump(int level, char *descr, void *value, size_t len) {$/;"	f
serverLogObjectDebugInfo	src/debug.c	/^void serverLogObjectDebugInfo(const robj *o) {$/;"	f
serverLogRaw	src/server.c	/^void serverLogRaw(int level, const char *msg) {$/;"	f
serverPanic	src/server.h	509;"	d
server_cpulist	src/server.h	/^    char *server_cpulist; \/* cpu affinity list of redis server main\/io thread. *\/$/;"	m	struct:redisServer
server_is_up	tests/support/server.tcl	/^proc server_is_up {host port retrynum} {$/;"	p
server_name	deps/hiredis/ssl.c	/^    char *server_name;$/;"	m	struct:redisSSLContext	file:
session_cache_size	src/server.h	/^    int session_cache_size;$/;"	m	struct:redisTLSContextConfig
session_cache_timeout	src/server.h	/^    int session_cache_timeout;$/;"	m	struct:redisTLSContextConfig
session_caching	src/server.h	/^    int session_caching;$/;"	m	struct:redisTLSContextConfig
set	src/config.c	/^    int (*set)(typeData data, sds value, int update, const char **err);$/;"	m	struct:typeInterface	file:
set	src/server.h	/^    *script, *replconf, *eval, *persist, *set, *pexpireat, *pexpire, $/;"	m	struct:sharedObjectsStruct
set	src/t_zset.c	/^        } set;$/;"	m	union:__anon2::__anon3	typeref:union:__anon2::__anon3::_iterset	file:
set2	deps/lua/src/ltablib.c	/^static void set2 (lua_State *L, int i, int j) {$/;"	f	file:
set2bits	deps/lua/src/lgc.h	35;"	d
setAccumulatorDictType	src/t_zset.c	/^dictType setAccumulatorDictType = {$/;"	v
setBlockingTimeout	src/tls.c	/^static void setBlockingTimeout(tls_connection *conn, long long timeout) {$/;"	f	file:
setClusterKeyHashTag	src/redis-benchmark.c	/^static void setClusterKeyHashTag(client c) {$/;"	f	file:
setCommand	src/t_string.c	/^void setCommand(client *c) {$/;"	f
setContext	deps/hiredis/adapters/qt.h	/^        int setContext(redisAsyncContext * ac) {$/;"	f	class:RedisQtAdapter
setDeferredAggregateLen	src/networking.c	/^void setDeferredAggregateLen(client *c, void *node, long length, char prefix) {$/;"	f
setDeferredArrayLen	src/networking.c	/^void setDeferredArrayLen(client *c, void *node, long length) {$/;"	f
setDeferredAttributeLen	src/networking.c	/^void setDeferredAttributeLen(client *c, void *node, long length) {$/;"	f
setDeferredMapLen	src/networking.c	/^void setDeferredMapLen(client *c, void *node, long length) {$/;"	f
setDeferredPushLen	src/networking.c	/^void setDeferredPushLen(client *c, void *node, long length) {$/;"	f
setDeferredReply	src/networking.c	/^void setDeferredReply(client *c, void *node, const char *s, size_t length) {$/;"	f
setDeferredReplyBulkSds	src/networking.c	/^void setDeferredReplyBulkSds(client *c, void *node, sds s) {$/;"	f
setDeferredReplyStreamID	src/t_stream.c	/^void setDeferredReplyStreamID(client *c, void *dr, streamID *id) {$/;"	f
setDeferredSetLen	src/networking.c	/^void setDeferredSetLen(client *c, void *node, long length) {$/;"	f
setDictType	src/server.c	/^dictType setDictType = {$/;"	v
setExpire	src/db.c	/^void setExpire(client *c, redisDb *db, robj *key, long long when) {$/;"	f
setGenericCommand	src/t_string.c	/^void setGenericCommand(client *c, int flags, robj *key, robj *val, robj *expire, int unit, robj *ok_reply, robj *abort_reply) {$/;"	f
setHotSlot	exp/exp1.sh	/^setHotSlot() {$/;"	f
setIOPendingCount	src/networking.c	/^static inline void setIOPendingCount(int i, unsigned long count) {$/;"	f	file:
setKey	src/db.c	/^void setKey(client *c, redisDb *db, robj *key, robj *val) {$/;"	f
setOOMScoreAdj	src/server.c	/^int setOOMScoreAdj(int process_class) {$/;"	f
setProtocolError	src/networking.c	/^static void setProtocolError(const char *errstr, client *c) {$/;"	f	file:
setReplica	exp/inithg.sh	/^setReplica() {$/;"	f
setReplicaStatus	exp/7_public_func.sh	/^setReplicaStatus() {$/;"	f
setSignedBitfield	src/bitops.c	/^void setSignedBitfield(unsigned char *p, uint64_t offset, uint64_t bits, int64_t value) {$/;"	f
setTypeAdd	src/t_set.c	/^int setTypeAdd(robj *subject, sds value) {$/;"	f
setTypeConvert	src/t_set.c	/^void setTypeConvert(robj *setobj, int enc) {$/;"	f
setTypeCreate	src/t_set.c	/^robj *setTypeCreate(sds value) {$/;"	f
setTypeDup	src/t_set.c	/^robj *setTypeDup(robj *o) {$/;"	f
setTypeInitIterator	src/t_set.c	/^setTypeIterator *setTypeInitIterator(robj *subject) {$/;"	f
setTypeIsMember	src/t_set.c	/^int setTypeIsMember(robj *subject, sds value) {$/;"	f
setTypeIterator	src/server.h	/^} setTypeIterator;$/;"	t	typeref:struct:__anon25
setTypeNext	src/t_set.c	/^int setTypeNext(setTypeIterator *si, sds *sdsele, int64_t *llele) {$/;"	f
setTypeNextObject	src/t_set.c	/^sds setTypeNextObject(setTypeIterator *si) {$/;"	f
setTypeRandomElement	src/t_set.c	/^int setTypeRandomElement(robj *setobj, sds *sdsele, int64_t *llele) {$/;"	f
setTypeReleaseIterator	src/t_set.c	/^void setTypeReleaseIterator(setTypeIterator *si) {$/;"	f
setTypeRemove	src/t_set.c	/^int setTypeRemove(robj *setobj, sds value) {$/;"	f
setTypeSize	src/t_set.c	/^unsigned long setTypeSize(const robj *subject) {$/;"	f
setUnsignedBitfield	src/bitops.c	/^void setUnsignedBitfield(unsigned char *p, uint64_t offset, uint64_t bits, uint64_t value) {$/;"	f
set_all_instances_hostname	tests/sentinel/tests/08-hostname-conf.tcl	/^proc set_all_instances_hostname {hostname} {$/;"	p
set_cluster_node_timeout	tests/cluster/cluster.tcl	/^proc set_cluster_node_timeout {to} {$/;"	p
set_errcode	src/redis-cli.c	/^    int set_errcode;$/;"	m	struct:config	file:
set_errno	deps/jemalloc/include/jemalloc/internal/util.h	/^set_errno(int errnum) {$/;"	f
set_errno_on_error	deps/jemalloc/src/jemalloc.c	/^	bool set_errno_on_error;$/;"	m	struct:static_opts_s	file:
set_instance_attrib	tests/instances.tcl	/^proc set_instance_attrib {type id attrib newval} {$/;"	p
set_jemalloc_bg_thread	src/zmalloc.c	/^void set_jemalloc_bg_thread(int enable) {$/;"	f
set_max_intset_entries	src/server.h	/^    size_t set_max_intset_entries;$/;"	m	struct:redisServer
set_number_format	deps/lua/src/fpconv.c	/^static void set_number_format(char *fmt, int precision)$/;"	f	file:
set_proc_title	src/server.h	/^    int set_proc_title;             \/* True if change proc title *\/$/;"	m	struct:redisServer
set_prof_active	deps/jemalloc/test/unit/prof_reset.c	/^set_prof_active(bool active) {$/;"	f	file:
set_read_handler	src/connection.h	/^    int (*set_read_handler)(struct connection *conn, ConnectionCallbackFunc handler);$/;"	m	struct:ConnectionType
set_redis_announce_ip	tests/sentinel/tests/08-hostname-conf.tcl	/^proc set_redis_announce_ip {addr} {$/;"	p
set_sentinel_config	tests/sentinel/tests/08-hostname-conf.tcl	/^proc set_sentinel_config {keyword value} {$/;"	p
set_write_handler	src/connection.h	/^    int (*set_write_handler)(struct connection *conn, ConnectionCallbackFunc handler, int barrier);$/;"	m	struct:ConnectionType
setarrayvector	deps/lua/src/ltable.c	/^static void setarrayvector (lua_State *L, Table *t, int size) {$/;"	f	file:
setbitCommand	src/bitops.c	/^void setbitCommand(client *c) {$/;"	f
setbits	deps/lua/src/lgc.h	28;"	d
setboolfield	deps/lua/src/loslib.c	/^static void setboolfield (lua_State *L, const char *key, int value) {$/;"	f	file:
setbvalue	deps/lua/src/lobject.h	125;"	d
setclvalue	deps/lua/src/lobject.h	143;"	d
setcpuaffinity	src/setcpuaffinity.c	/^void setcpuaffinity(const char *cpulist) {$/;"	f
setexCommand	src/t_string.c	/^void setexCommand(client *c) {$/;"	f
setfenv	deps/lua/src/loadlib.c	/^static void setfenv (lua_State *L) {$/;"	f	file:
setfield	deps/lua/src/loslib.c	/^static void setfield (lua_State *L, const char *key, int value) {$/;"	f	file:
sethvalue	deps/lua/src/lobject.h	148;"	d
sethvalue2s	deps/lua/src/lobject.h	176;"	d
setid	src/server.h	/^    *lastid, *ping, *setid, *keepttl, *load, *createconsumer,$/;"	m	struct:sharedObjectsStruct
setn	deps/lua/src/ltablib.c	/^static int setn (lua_State *L) {$/;"	f	file:
setnilvalue	deps/lua/src/lobject.h	117;"	d
setnodevector	deps/lua/src/ltable.c	/^static void setnodevector (lua_State *L, Table *t, int size) {$/;"	f	file:
setnvalue	deps/lua/src/lobject.h	119;"	d
setnxCommand	src/t_string.c	/^void setnxCommand(client *c) {$/;"	f
setobj	deps/lua/src/lobject.h	161;"	d
setobj2n	deps/lua/src/lobject.h	183;"	d
setobj2s	deps/lua/src/lobject.h	174;"	d
setobj2t	deps/lua/src/lobject.h	181;"	d
setobjs2s	deps/lua/src/lobject.h	172;"	d
setobjt2t	deps/lua/src/lobject.h	179;"	d
setpath	deps/lua/src/loadlib.c	/^static void setpath (lua_State *L, const char *fieldname, const char *envname,$/;"	f	file:
setproctitle	src/setproctitle.c	/^void setproctitle(const char *fmt, ...) {$/;"	f
setprogdir	deps/lua/src/loadlib.c	/^static void setprogdir (lua_State *L) {$/;"	f	file:
setprogdir	deps/lua/src/loadlib.c	42;"	d	file:
setprogdir	deps/lua/src/loadlib.c	95;"	d	file:
setptvalue	deps/lua/src/lobject.h	153;"	d
setptvalue2s	deps/lua/src/lobject.h	177;"	d
setpvalue	deps/lua/src/lobject.h	122;"	d
setrangeCommand	src/t_string.c	/^void setrangeCommand(client *c) {$/;"	f
setsize	src/ae.h	/^    int setsize; \/* max number of file descriptors tracked *\/$/;"	m	struct:aeEventLoop
setsockopt	deps/hiredis/sockcompat.h	84;"	d
setsvalue	deps/lua/src/lobject.h	128;"	d
setsvalue2n	deps/lua/src/lobject.h	184;"	d
setsvalue2s	deps/lua/src/lobject.h	175;"	d
settable_event	deps/lua/doc/manual.html	/^     function settable_event (table, key, value)$/;"	f
settabsi	deps/lua/src/ldblib.c	/^static void settabsi (lua_State *L, const char *i, int v) {$/;"	f	file:
settabss	deps/lua/src/ldblib.c	/^static void settabss (lua_State *L, const char *i, const char *v) {$/;"	f	file:
setthreshold	deps/lua/src/lgc.c	59;"	d	file:
setthvalue	deps/lua/src/lobject.h	138;"	d
setttype	deps/lua/src/lobject.h	186;"	d
setupChildSignalHandlers	src/server.c	/^void setupChildSignalHandlers(void) {$/;"	f
setupSignalHandlers	src/server.c	/^void setupSignalHandlers(void) {$/;"	f
setup_acl	tests/sentinel/tests/09-acl-support.tcl	/^proc setup_acl {} {$/;"	p
setup_move	tests/unit/type/set.tcl	/^    proc setup_move {} {$/;"	p
setuvalue	deps/lua/src/lobject.h	133;"	d
sflags	src/server.h	/^    char *sflags;   \/* Flags as string representation, one char per flag. *\/$/;"	m	struct:redisCommand
sfmt	deps/jemalloc/test/src/SFMT.c	/^    w128_t sfmt[N];$/;"	m	struct:sfmt_s	file:
sfmt_s	deps/jemalloc/test/src/SFMT.c	/^struct sfmt_s {$/;"	s	file:
sfmt_t	deps/jemalloc/test/include/test/SFMT.h	/^typedef struct sfmt_s sfmt_t;$/;"	t	typeref:struct:sfmt_s
sha1Hash	utils/tracking_collisions.c	/^uint64_t sha1Hash(char *key, size_t len) {$/;"	f
sha1Test	src/sha1.c	/^int sha1Test(int argc, char **argv, int accurate)$/;"	f
sha1hex	src/scripting.c	/^void sha1hex(char *digest, char *script, size_t len) {$/;"	f
sha256_final	src/sha256.c	/^void sha256_final(SHA256_CTX *ctx, BYTE hash[])$/;"	f
sha256_init	src/sha256.c	/^void sha256_init(SHA256_CTX *ctx)$/;"	f
sha256_transform	src/sha256.c	/^void sha256_transform(SHA256_CTX *ctx, const BYTE data[])$/;"	f
sha256_update	src/sha256.c	/^void sha256_update(SHA256_CTX *ctx, const BYTE data[], size_t len)$/;"	f
shaScriptObjectDictType	src/server.c	/^dictType shaScriptObjectDictType = {$/;"	v
shared	src/server.c	/^struct sharedObjectsStruct shared;$/;"	v	typeref:struct:sharedObjectsStruct
sharedObjectsStruct	src/server.h	/^struct sharedObjectsStruct {$/;"	s
sharedapi	src/server.h	/^    dict *sharedapi;            \/* Like moduleapi but containing the APIs that$/;"	m	struct:redisServer
shellCommand	src/controller.c	/^int shellCommand(char* cmd) {$/;"	f
shiftReplicationId	src/replication.c	/^void shiftReplicationId(void) {$/;"	f
short_src	deps/lua/src/lua.h	/^  char short_src[LUA_IDSIZE]; \/* (S) *\/$/;"	m	struct:lua_Debug
should_emit_array_length	src/t_zset.c	/^    int                                  should_emit_array_length;$/;"	m	struct:zrange_result_handler	file:
show	deps/lua/test/sort.lua	/^function show(m,x)$/;"	f
show	utils/hashtable/rehashing.c	/^void show(dict *d) {$/;"	f
showBuckets	utils/hashtable/rehashing.c	/^void showBuckets(dictht ht) {$/;"	f
showLatencyDistLegend	src/redis-cli.c	/^void showLatencyDistLegend(void) {$/;"	f
showLatencyDistSamples	src/redis-cli.c	/^void showLatencyDistSamples(struct distsamples *samples, long long tot) {$/;"	f
showLatencyReport	src/redis-benchmark.c	/^static void showLatencyReport(void) {$/;"	f	file:
showLatestBacklog	src/replication.c	/^void showLatestBacklog(void) {$/;"	f
showThroughput	src/redis-benchmark.c	/^int showThroughput(struct aeEventLoop *eventLoop, long long id, void *clientData) {$/;"	f
show_clients_state	tests/test_helper.tcl	/^proc show_clients_state {} {$/;"	p
show_cluster_status	tests/integration/psync2.tcl	/^proc show_cluster_status {} {$/;"	p
show_entry	utils/lru/lfu-simulation.c	/^void show_entry(long pos, struct entry *e) {$/;"	f
showerrors	src/redis-benchmark.c	/^    int showerrors;$/;"	m	struct:config	file:
shutdown	src/redis-cli.c	/^    int shutdown;$/;"	m	struct:config	file:
shutdownCallback	tests/modules/hooks.c	/^void shutdownCallback(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)$/;"	f
shutdownCommand	src/db.c	/^void shutdownCommand(client *c) {$/;"	f
shutdown_asap	src/server.h	/^    volatile sig_atomic_t shutdown_asap; \/* SHUTDOWN needed ASAP *\/$/;"	m	struct:redisServer
si	deps/jemalloc/test/src/SFMT.c	/^    __m128i si;$/;"	m	union:W128_T	file:
sig	src/cluster.h	/^    char sig[4];        \/* Signature "RCmb" (Redis Cluster message bus). *\/$/;"	m	struct:__anon43
sigKillChildHandler	src/server.c	/^static void sigKillChildHandler(int sig) {$/;"	f	file:
sigShutdownHandler	src/server.c	/^static void sigShutdownHandler(int sig) {$/;"	f	file:
sigcontext_t	src/debug.c	/^typedef ucontext_t sigcontext_t;$/;"	t	file:
sign	src/bitops.c	/^    int sign;           \/* True if signed, otherwise unsigned op. *\/$/;"	m	struct:bitfieldOp	file:
signalFlushedDb	src/db.c	/^void signalFlushedDb(int dbid, int async) {$/;"	f
signalKeyAsReady	src/blocked.c	/^void signalKeyAsReady(redisDb *db, robj *key, int type) {$/;"	f
signalModifiedKey	src/db.c	/^void signalModifiedKey(client *c, redisDb *db, robj *key) {$/;"	f
signal_idle_client	tests/test_helper.tcl	/^proc signal_idle_client fd {$/;"	p
signalready	src/module.c	/^            int signalready;       \/* Flag that signalKeyAsReady() is needed. *\/$/;"	m	struct:RedisModuleKey::__anon62::__anon64	file:
significant_figures	deps/hdr_histogram/hdr_histogram.h	/^    int32_t significant_figures;$/;"	m	struct:hdr_histogram
significant_figures	deps/hdr_histogram/hdr_histogram.h	/^    int64_t significant_figures;$/;"	m	struct:hdr_histogram_bucket_config
sigsegvHandler	src/debug.c	/^void sigsegvHandler(int sig, siginfo_t *info, void *secret) {$/;"	f
simfailure_flags	src/sentinel.c	/^    unsigned long simfailure_flags; \/* Failures simulation. *\/$/;"	m	struct:sentinelState	file:
simpleexp	deps/lua/src/lparser.c	/^static void simpleexp (LexState *ls, expdesc *v) {$/;"	f	file:
simulate_bit_op	tests/unit/bitops.tcl	/^proc simulate_bit_op {op args} {$/;"	p
since	src/help.h	/^  char *since;$/;"	m	struct:commandHelp
singlematch	deps/lua/src/lstrlib.c	/^static int singlematch (int c, const char *p, const char *ep) {$/;"	f	file:
singlestep	deps/lua/src/lgc.c	/^static l_mem singlestep (lua_State *L) {$/;"	f	file:
singlevar	deps/lua/src/lparser.c	/^static void singlevar (LexState *ls, expdesc *var) {$/;"	f	file:
singlevaraux	deps/lua/src/lparser.c	/^static int singlevaraux (FuncState *fs, TString *n, expdesc *var, int base) {$/;"	f	file:
sinterCommand	src/t_set.c	/^void sinterCommand(client *c) {$/;"	f
sinterGenericCommand	src/t_set.c	/^void sinterGenericCommand(client *c, robj **setkeys,$/;"	f
sinterstoreCommand	src/t_set.c	/^void sinterstoreCommand(client *c) {$/;"	f
siphash	src/siphash.c	/^uint64_t siphash(const uint8_t *in, const size_t inlen, const uint8_t *k) {$/;"	f
siphash_nocase	src/siphash.c	/^uint64_t siphash_nocase(const uint8_t *in, const size_t inlen, const uint8_t *k)$/;"	f
siphash_test	src/siphash.c	/^int siphash_test(void) {$/;"	f
siptlw	src/siphash.c	/^int siptlw(int c) {$/;"	f
sismemberCommand	src/t_set.c	/^void sismemberCommand(client *c) {$/;"	f
size	deps/hiredis/dict.h	/^    unsigned long size;$/;"	m	struct:dict
size	deps/jemalloc/include/jemalloc/internal/base_structs.h	/^	size_t		size;$/;"	m	struct:base_block_s
size	deps/jemalloc/src/zone.c	/^	size_t (*size)(struct _malloc_zone_t *, const void *);$/;"	m	struct:_malloc_zone_t	file:
size	deps/jemalloc/src/zone.c	/^	vm_size_t size;$/;"	m	struct:__anon127	file:
size	deps/lua/src/lauxlib.c	/^  size_t size;$/;"	m	struct:LoadS	file:
size	deps/lua/src/lstate.h	/^  int size;$/;"	m	struct:stringtable
size	deps/lua/src/strbuf.h	/^    int size;$/;"	m	struct:__anon105
size	src/cluster.h	/^    int size;             \/* Num of master nodes with at least one slot *\/$/;"	m	struct:clusterState
size	src/dict.h	/^    unsigned long size;$/;"	m	struct:dictht
size	src/module.c	/^    uint32_t size;$/;"	m	struct:RedisModulePoolAllocBlock	file:
size	src/rax.h	/^    uint32_t size:29;     \/* Number of children, or compressed string len. *\/$/;"	m	struct:raxNode
size	src/server.h	/^    int size;                           \/* Available array size *\/$/;"	m	struct:__anon21
size	src/server.h	/^    size_t size, used;$/;"	m	struct:clientReplyBlock
sizeCclosure	deps/lua/src/lfunc.h	14;"	d
sizeLclosure	deps/lua/src/lfunc.h	17;"	d
sizeMeetsSafetyLimit	src/quicklist.c	421;"	d	file:
size_allocated	deps/jemalloc/src/zone.c	/^	size_t size_allocated;$/;"	m	struct:malloc_statistics_t	file:
size_ci	deps/lua/src/lstate.h	/^  int size_ci;  \/* size of array `base_ci' *\/$/;"	m	struct:lua_State
size_class	deps/jemalloc/include/jemalloc/internal/size_classes.sh	/^size_class() {$/;"	f
size_classes	deps/jemalloc/include/jemalloc/internal/size_classes.sh	/^size_classes() {$/;"	f
size_in_use	deps/jemalloc/src/zone.c	/^	size_t size_in_use;$/;"	m	struct:malloc_statistics_t	file:
size_val	deps/jemalloc/include/jemalloc/internal/emitter.h	/^		size_t size_val;$/;"	m	union:emitter_col_s::__anon136
sizearray	deps/lua/src/lobject.h	/^  int sizearray;  \/* size of `array' array *\/$/;"	m	struct:Table
sizecmd	src/redis-cli.c	/^    char *sizecmd;$/;"	m	struct:__anon14	file:
sizecode	deps/lua/src/lobject.h	/^  int sizecode;$/;"	m	struct:Proto
sizek	deps/lua/src/lobject.h	/^  int sizek;  \/* size of `k' *\/$/;"	m	struct:Proto
sizelineinfo	deps/lua/src/lobject.h	/^  int sizelineinfo;$/;"	m	struct:Proto
sizelocvars	deps/lua/src/lobject.h	/^  int sizelocvars;$/;"	m	struct:Proto
sizemask	deps/hiredis/dict.h	/^    unsigned long sizemask;$/;"	m	struct:dict
sizemask	src/dict.h	/^    unsigned long sizemask;$/;"	m	struct:dictht
sizenode	deps/lua/src/lobject.h	360;"	d
sizep	deps/lua/src/lobject.h	/^  int sizep;  \/* size of `p' *\/$/;"	m	struct:Proto
sizestring	deps/lua/src/lstring.h	16;"	d
sizeudata	deps/lua/src/lstring.h	18;"	d
sizeunit	src/redis-cli.c	/^    char *sizeunit;$/;"	m	struct:__anon14	file:
sizeupvalues	deps/lua/src/lobject.h	/^  int sizeupvalues;$/;"	m	struct:Proto
skip_cert_verify	src/cli_common.h	/^    int skip_cert_verify;$/;"	m	struct:cliSSLconfig
skip_checksum_validation	src/server.h	/^    int skip_checksum_validation;   \/* Disables checksum validateion for RDB and RESTORE payload. *\/$/;"	m	struct:redisServer
skip_sep	deps/lua/src/llex.c	/^static int skip_sep (LexState *ls) {$/;"	f	file:
skips	deps/hiredis/test.c	/^static int tests = 0, fails = 0, skips = 0;$/;"	v	file:
skyscraper	src/lolwut6.c	/^struct skyscraper {$/;"	s	file:
sl	src/t_zset.c	/^            } sl;$/;"	m	union:__anon2::__anon3::_iterzset	typeref:struct:__anon2::__anon3::_iterzset::__anon7	file:
slab	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	bool slab;$/;"	m	struct:alloc_ctx_s
slab_size	deps/jemalloc/include/jemalloc/internal/bin.h	/^	size_t			slab_size;$/;"	m	struct:bin_info_s
slab_size	deps/jemalloc/include/jemalloc/internal/size_classes.sh	/^slab_size() {$/;"	f
slabcur	deps/jemalloc/include/jemalloc/internal/bin.h	/^	extent_t		*slabcur;$/;"	m	struct:bin_s
slabs_full	deps/jemalloc/include/jemalloc/internal/bin.h	/^	extent_list_t		slabs_full;$/;"	m	struct:bin_s
slabs_nonfull	deps/jemalloc/include/jemalloc/internal/bin.h	/^	extent_heap_t		slabs_nonfull;$/;"	m	struct:bin_s
slaveIsInHandshakeState	src/replication.c	/^int slaveIsInHandshakeState(void) {$/;"	f
slaveKeysWithExpire	src/expire.c	/^dict *slaveKeysWithExpire = NULL;$/;"	v
slaveMode	src/redis-cli.c	/^static void slaveMode(void) {$/;"	f	file:
slaveTryPartialResynchronization	src/replication.c	/^int slaveTryPartialResynchronization(connection *conn, int read_reply) {$/;"	f
slave_addr	src/server.h	/^    char *slave_addr;       \/* Optionally given by REPLCONF ip-address *\/$/;"	m	struct:client
slave_announce_ip	src/server.h	/^    char *slave_announce_ip;        \/* Give the master this ip address. *\/$/;"	m	struct:redisServer
slave_announce_port	src/server.h	/^    int slave_announce_port;        \/* Give the master this listening port. *\/$/;"	m	struct:redisServer
slave_capa	src/server.h	/^    int slave_capa;         \/* Slave capabilities: SLAVE_CAPA_* bitwise OR. *\/$/;"	m	struct:client
slave_conf_change_time	src/sentinel.c	/^    mstime_t slave_conf_change_time; \/* Last time slave master addr changed. *\/$/;"	m	struct:sentinelRedisInstance	file:
slave_listening_port	src/server.h	/^    int slave_listening_port; \/* As configured with: REPLCONF listening-port *\/$/;"	m	struct:client
slave_master_host	src/sentinel.c	/^    char *slave_master_host;    \/* Master host as reported by INFO *\/$/;"	m	struct:sentinelRedisInstance	file:
slave_master_link_status	src/sentinel.c	/^    int slave_master_link_status; \/* Master link status as reported by INFO *\/$/;"	m	struct:sentinelRedisInstance	file:
slave_master_port	src/sentinel.c	/^    int slave_master_port;      \/* Master port as reported by INFO *\/$/;"	m	struct:sentinelRedisInstance	file:
slave_mode	src/redis-cli.c	/^    int slave_mode;$/;"	m	struct:config	file:
slave_priority	src/sentinel.c	/^    int slave_priority; \/* Slave priority according to its INFO output. *\/$/;"	m	struct:sentinelRedisInstance	file:
slave_priority	src/server.h	/^    int slave_priority;             \/* Reported in INFO and used by Sentinel. *\/$/;"	m	struct:redisServer
slave_reconf_sent_time	src/sentinel.c	/^    mstime_t slave_reconf_sent_time; \/* Time at which we sent SLAVE OF <new> *\/$/;"	m	struct:sentinelRedisInstance	file:
slave_repl_offset	src/sentinel.c	/^    unsigned long long slave_repl_offset; \/* Slave replication offset. *\/$/;"	m	struct:sentinelRedisInstance	file:
slaveof	src/cluster.h	/^    char slaveof[CLUSTER_NAMELEN];$/;"	m	struct:__anon43
slaveof	src/cluster.h	/^    struct clusterNode *slaveof; \/* pointer to the master node. Note that it$/;"	m	struct:clusterNode	typeref:struct:clusterNode::clusterNode
slaves	src/cluster.h	/^    struct clusterNode **slaves; \/* pointers to slave nodes *\/$/;"	m	struct:clusterNode	typeref:struct:clusterNode::clusterNode
slaves	src/sentinel.c	/^    dict *slaves;       \/* Slaves for this master instance. *\/$/;"	m	struct:sentinelRedisInstance	file:
slaves	src/server.h	/^    list *slaves, *monitors;    \/* List of slaves and MONITORs *\/$/;"	m	struct:redisServer
slaveseldb	src/server.h	/^    int slaveseldb;                 \/* Last SELECTed DB in replication output *\/$/;"	m	struct:redisServer
slen	src/ziplist.h	/^    unsigned int slen;$/;"	m	struct:__anon70
slot	src/cluster.h	/^    uint16_t slot; \/* hot slot *\/$/;"	m	struct:__anon35
slot	src/redis-cli.c	/^    int slot;$/;"	m	struct:clusterManagerReshardTableItem	file:
slotHotMetric	src/cluster.c	/^void slotHotMetric(int time_period, int tag) {$/;"	f
slotHotMetricCluster	src/cluster.c	/^void slotHotMetricCluster() {$/;"	f
slotHotnessStatus	src/cluster.c	/^void slotHotnessStatus() {$/;"	f
slotList2str	src/cluster.c	/^sds slotList2str(slotState* slot_list, int list_len, int type) {$/;"	f
slotState	src/cluster.h	/^typedef struct slotState {$/;"	s
slotState	src/cluster.h	/^} slotState;$/;"	t	typeref:struct:slotState
slotToKeyAdd	src/db.c	/^void slotToKeyAdd(sds key) {$/;"	f
slotToKeyDel	src/db.c	/^void slotToKeyDel(sds key) {$/;"	f
slotToKeyFlush	src/db.c	/^void slotToKeyFlush(int async) {$/;"	f
slotToKeyUpdateKey	src/db.c	/^void slotToKeyUpdateKey(sds key, int add) {$/;"	f
slot_hot	src/cluster.h	/^    hotState slot_hot;$/;"	m	struct:slotState
slot_hotness	exp/slot_log_dealer.py	/^slot_hotness = [0]*16384;$/;"	v
slot_status	src/cluster.h	/^    slotState slot_status[CLUSTER_SLOTS];$/;"	m	struct:clusterState
slots	src/cluster.h	/^    clusterNode *slots[CLUSTER_SLOTS];$/;"	m	struct:clusterState
slots	src/cluster.h	/^    unsigned char slots[CLUSTER_SLOTS\/8]; \/* Slots bitmap. *\/$/;"	m	struct:__anon34
slots	src/cluster.h	/^    unsigned char slots[CLUSTER_SLOTS\/8]; \/* slots handled by this node *\/$/;"	m	struct:clusterNode
slots	src/redis-benchmark.c	/^    int *slots;$/;"	m	struct:clusterNode	file:
slots	src/redis-cli.c	/^    int slots;$/;"	m	struct:clusterManagerCommand	file:
slots	src/redis-cli.c	/^    uint8_t slots[CLUSTER_MANAGER_SLOTS];$/;"	m	struct:clusterManagerNode	file:
slots_count	src/redis-benchmark.c	/^    int slots_count;$/;"	m	struct:clusterNode	file:
slots_count	src/redis-cli.c	/^    int slots_count;$/;"	m	struct:clusterManagerNode	file:
slots_info	src/cluster.h	/^    sds slots_info; \/* Slots info represented by string. *\/$/;"	m	struct:clusterNode
slots_keys_count	src/cluster.h	/^    uint64_t slots_keys_count[CLUSTER_SLOTS];$/;"	m	struct:clusterState
slots_keys_count	src/db.c	/^    uint64_t slots_keys_count[CLUSTER_SLOTS];$/;"	m	struct:dbBackup	file:
slots_last_update	src/redis-benchmark.c	/^    int slots_last_update;$/;"	m	struct:_client	file:
slots_last_update	src/redis-benchmark.c	/^    redisAtomic int slots_last_update;$/;"	m	struct:config	file:
slots_to_keys	src/cluster.h	/^    rax *slots_to_keys;$/;"	m	struct:clusterState
slots_to_keys	src/db.c	/^    rax *slots_to_keys;$/;"	m	struct:dbBackup	file:
slow	deps/jemalloc/src/jemalloc.c	/^	bool slow;$/;"	m	struct:static_opts_s	file:
slowlog	src/server.h	/^    list *slowlog;                  \/* SLOWLOG list of commands *\/$/;"	m	struct:redisServer
slowlogCommand	src/slowlog.c	/^void slowlogCommand(client *c) {$/;"	f
slowlogCreateEntry	src/slowlog.c	/^slowlogEntry *slowlogCreateEntry(client *c, robj **argv, int argc, long long duration) {$/;"	f
slowlogEntry	src/slowlog.h	/^typedef struct slowlogEntry {$/;"	s
slowlogEntry	src/slowlog.h	/^} slowlogEntry;$/;"	t	typeref:struct:slowlogEntry
slowlogFreeEntry	src/slowlog.c	/^void slowlogFreeEntry(void *septr) {$/;"	f
slowlogInit	src/slowlog.c	/^void slowlogInit(void) {$/;"	f
slowlogPushCurrentCommand	src/server.c	/^void slowlogPushCurrentCommand(client *c, struct redisCommand *cmd, ustime_t duration) {$/;"	f
slowlogPushEntryIfNeeded	src/slowlog.c	/^void slowlogPushEntryIfNeeded(client *c, robj **argv, int argc, long long duration) {$/;"	f
slowlogReset	src/slowlog.c	/^void slowlogReset(void) {$/;"	f
slowlog_entry_id	src/server.h	/^    long long slowlog_entry_id;     \/* SLOWLOG current entry ID *\/$/;"	m	struct:redisServer
slowlog_log_slower_than	src/server.h	/^    long long slowlog_log_slower_than; \/* SLOWLOG time limit (to get logged) *\/$/;"	m	struct:redisServer
slowlog_max_len	src/server.h	/^    unsigned long slowlog_max_len;     \/* SLOWLOG max number of items logged *\/$/;"	m	struct:redisServer
slowscripterr	src/server.h	/^    *outofrangeerr, *noscripterr, *loadingerr, *slowscripterr, *bgsaveerr,$/;"	m	struct:sharedObjectsStruct
smapsGetSharedDirty	src/server.c	/^static int smapsGetSharedDirty(unsigned long addr) {$/;"	f	file:
smismemberCommand	src/t_set.c	/^void smismemberCommand(client *c) {$/;"	f
smooth	deps/jemalloc/include/jemalloc/internal/smoothstep.sh	/^smooth() {$/;"	f
smoother	deps/jemalloc/include/jemalloc/internal/smoothstep.sh	/^smoother() {$/;"	f
smoothest	deps/jemalloc/include/jemalloc/internal/smoothstep.sh	/^smoothest() {$/;"	f
smoothstep_tab	deps/jemalloc/test/unit/smoothstep.c	/^static const uint64_t smoothstep_tab[] = {$/;"	v	file:
smoveCommand	src/t_set.c	/^void smoveCommand(client *c) {$/;"	f
sndbuf	src/cluster.h	/^    sds sndbuf;                 \/* Packet send buffer *\/$/;"	m	struct:clusterLink
sni	src/cli_common.h	/^    char *sni;$/;"	m	struct:cliSSLconfig
snprintf	deps/hdr_histogram/hdr_histogram.c	901;"	d	file:
snprintf	deps/hdr_histogram/hdr_histogram.c	919;"	d	file:
snprintf	deps/hiredis/win32.h	24;"	d
socket	deps/hiredis/sockcompat.h	79;"	d
socketFds	src/server.h	/^typedef struct socketFds {$/;"	s
socketFds	src/server.h	/^} socketFds;$/;"	t	typeref:struct:socketFds
socketRef	deps/hiredis/adapters/macosx.h	/^    CFSocketRef socketRef;$/;"	m	struct:__anon86
sockname	src/server.h	/^    sds sockname;           \/* Cached connection target address. *\/$/;"	m	struct:client
sofd	src/server.h	/^    int sofd;                   \/* Unix socket file descriptor *\/$/;"	m	struct:redisServer
soft_limit_bytes	src/server.h	/^    unsigned long long soft_limit_bytes;$/;"	m	struct:clientBufferLimitsConfig
soft_limit_seconds	src/server.h	/^    time_t soft_limit_seconds;$/;"	m	struct:clientBufferLimitsConfig
solve	deps/lua/test/bisect.lua	/^function solve(f,a,b)$/;"	f
sort	deps/lua/src/ltablib.c	/^static int sort (lua_State *L) {$/;"	f	file:
sortCommand	src/sort.c	/^void sortCommand(client *c) {$/;"	f
sortCompare	src/sort.c	/^int sortCompare(const void *s1, const void *s2) {$/;"	f
sortGetKeys	src/db.c	/^int sortGetKeys(struct redisCommand *cmd, robj **argv, int argc, getKeysResult *result) {$/;"	f
sortPointers	utils/hashtable/rehashing.c	/^int sortPointers(const void *a, const void *b) {$/;"	f
sort_alpha	src/server.h	/^    int sort_alpha;$/;"	m	struct:redisServer
sort_bypattern	src/server.h	/^    int sort_bypattern;$/;"	m	struct:redisServer
sort_comp	deps/lua/src/ltablib.c	/^static int sort_comp (lua_State *L, int a, int b) {$/;"	f	file:
sort_desc	src/server.h	/^    int sort_desc;$/;"	m	struct:redisServer
sort_gp_asc	src/geo.c	/^static int sort_gp_asc(const void *a, const void *b) {$/;"	f	file:
sort_gp_desc	src/geo.c	/^static int sort_gp_desc(const void *a, const void *b) {$/;"	f	file:
sort_store	src/server.h	/^    int sort_store;$/;"	m	struct:redisServer
source	deps/hiredis/adapters/glib.h	/^    GSource source;$/;"	m	struct:__anon85
source	deps/lua/src/llex.h	/^  TString *source;  \/* current source name *\/$/;"	m	struct:LexState
source	deps/lua/src/lobject.h	/^  TString  *source;$/;"	m	struct:Proto
source	deps/lua/src/lua.h	/^  const char *source;	\/* (S) *\/$/;"	m	struct:lua_Debug
source	src/redis-cli.c	/^    clusterManagerNode *source;$/;"	m	struct:clusterManagerReshardTableItem	file:
sourceRef	deps/hiredis/adapters/macosx.h	/^    CFRunLoopSourceRef sourceRef;$/;"	m	struct:__anon86
source_addr	deps/hiredis/hiredis.h	/^            const char *source_addr;$/;"	m	struct:__anon80::__anon81::__anon82
source_addr	deps/hiredis/hiredis.h	/^        char *source_addr;$/;"	m	struct:redisContext::__anon83
south	src/geohash.h	/^    GeoHashBits south;$/;"	m	struct:__anon50
south_east	src/geohash.h	/^    GeoHashBits south_east;$/;"	m	struct:__anon50
south_west	src/geohash.h	/^    GeoHashBits south_west;$/;"	m	struct:__anon50
space	src/server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *pong, *space,$/;"	m	struct:sharedObjectsStruct
span	src/server.h	/^        unsigned long span;$/;"	m	struct:zskiplistNode::zskiplistLevel
sparklineRender	src/sparkline.c	/^sds sparklineRender(sds output, struct sequence *seq, int columns, int rows, int flags) {$/;"	f
sparklineRenderRange	src/sparkline.c	/^sds sparklineRenderRange(sds output, struct sequence *seq, int rows, int offset, int len, int flags) {$/;"	f
sparklineSequenceAddSample	src/sparkline.c	/^void sparklineSequenceAddSample(struct sequence *seq, double value, char *label) {$/;"	f
spawn_instance	tests/instances.tcl	/^proc spawn_instance {type base_port count {conf {}} {base_conf_file ""}} {$/;"	p
spawn_server	tests/support/server.tcl	/^proc spawn_server {config_file stdout stderr} {$/;"	p
special_asterick	src/server.h	/^    *getack, *special_asterick, *special_equals, *default_username,$/;"	m	struct:sharedObjectsStruct
special_equals	src/server.h	/^    *getack, *special_asterick, *special_equals, *default_username,$/;"	m	struct:sharedObjectsStruct
specifics	deps/hdr_histogram/hdr_histogram.h	/^    } specifics;$/;"	m	struct:hdr_iter	typeref:union:hdr_iter::__anon117
spectrum_palette	src/redis-cli.c	/^int *spectrum_palette;$/;"	v
spectrum_palette_color	src/redis-cli.c	/^int spectrum_palette_color[] = {0,233,234,235,237,239,241,243,245,247,144,143,142,184,226,214,208,202,196};$/;"	v
spectrum_palette_color_size	src/redis-cli.c	/^int spectrum_palette_color_size = 19;$/;"	v
spectrum_palette_mono	src/redis-cli.c	/^int spectrum_palette_mono[] = {0,233,234,235,237,239,241,243,245,247,249,251,253};$/;"	v
spectrum_palette_mono_size	src/redis-cli.c	/^int spectrum_palette_mono_size = 13;$/;"	v
spectrum_palette_size	src/redis-cli.c	/^int spectrum_palette_size;$/;"	v
spin_adaptive	deps/jemalloc/include/jemalloc/internal/spin.h	/^spin_adaptive(spin_t *spin) {$/;"	f
spin_cpu_spinwait	deps/jemalloc/include/jemalloc/internal/spin.h	/^spin_cpu_spinwait() {$/;"	f
spin_t	deps/jemalloc/include/jemalloc/internal/spin.h	/^} spin_t;$/;"	t	typeref:struct:__anon139
split	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^	extent_split_t		*split;$/;"	m	struct:extent_hooks_s
spopCommand	src/t_set.c	/^void spopCommand(client *c) {$/;"	f
spopWithCountCommand	src/t_set.c	/^void spopWithCountCommand(client *c) {$/;"	f
spt_clearenv	src/setproctitle.c	/^int spt_clearenv(void) {$/;"	f
spt_copyargs	src/setproctitle.c	/^static int spt_copyargs(int argc, char *argv[]) {$/;"	f	file:
spt_copyenv	src/setproctitle.c	/^static int spt_copyenv(int envc, char *oldenv[]) {$/;"	f	file:
spt_init	src/setproctitle.c	/^void spt_init(int argc, char *argv[]) {$/;"	f
spt_min	src/setproctitle.c	/^static inline size_t spt_min(size_t a, size_t b) {$/;"	f	file:
sptr	src/t_zset.c	/^                unsigned char *eptr, *sptr;$/;"	m	struct:__anon2::__anon3::_iterzset::__anon6	file:
srandmemberCommand	src/t_set.c	/^void srandmemberCommand(client *c) {$/;"	f
srandmemberWithCountCommand	src/t_set.c	/^void srandmemberWithCountCommand(client *c) {$/;"	f
src	src/scripting.c	/^    sds *src;   \/* Lua script source code split by line. *\/$/;"	m	struct:ldbState	file:
src_end	deps/lua/src/lstrlib.c	/^  const char *src_end;  \/* end (`\\0') of source string *\/$/;"	m	struct:MatchState	file:
src_init	deps/lua/src/lstrlib.c	/^  const char *src_init;  \/* init of source string *\/$/;"	m	struct:MatchState	file:
srcroot	deps/jemalloc/Makefile	/^srcroot := $/;"	m
srem	src/server.h	/^    *emptyscan, *multi, *exec, *left, *right, *hset, *srem, *xgroup, *xclaim,  $/;"	m	struct:sharedObjectsStruct
sremCommand	src/server.h	/^                        *zpopmaxCommand, *sremCommand, *execCommand,$/;"	m	struct:redisServer	typeref:struct:redisServer::
sremCommand	src/t_set.c	/^void sremCommand(client *c) {$/;"	f
srv	tests/test_helper.tcl	/^proc srv {args} {$/;"	p
sscanCommand	src/t_set.c	/^void sscanCommand(client *c) {$/;"	f
ssize_t	deps/hiredis/hiredis.h	/^typedef long long ssize_t;$/;"	t
ssize_t	deps/hiredis/sds.h	/^typedef long long ssize_t;$/;"	t
ssize_t	deps/hiredis/sockcompat.h	/^typedef long long ssize_t;$/;"	t
ssize_t	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_decls.h	/^typedef intptr_t ssize_t;$/;"	t
ssize_val	deps/jemalloc/include/jemalloc/internal/emitter.h	/^		ssize_t ssize_val;$/;"	m	union:emitter_col_s::__anon136
ssl	deps/hiredis/ssl.c	/^    SSL *ssl;$/;"	m	struct:redisSSL	file:
ssl	deps/hiredis/test.c	/^    } ssl;$/;"	m	struct:config	typeref:struct:config::__anon92	file:
ssl	src/tls.c	/^    SSL *ssl;$/;"	m	struct:tls_connection	file:
sslLockAcquire	deps/hiredis/ssl.c	/^static void sslLockAcquire(sslLockType *l) {$/;"	f	file:
sslLockAcquire	deps/hiredis/ssl.c	/^static void sslLockAcquire(sslLockType* l) {$/;"	f	file:
sslLockInit	deps/hiredis/ssl.c	/^static void sslLockInit(sslLockType *l) {$/;"	f	file:
sslLockInit	deps/hiredis/ssl.c	/^static void sslLockInit(sslLockType* l) {$/;"	f	file:
sslLockRelease	deps/hiredis/ssl.c	/^static void sslLockRelease(sslLockType *l) {$/;"	f	file:
sslLockRelease	deps/hiredis/ssl.c	/^static void sslLockRelease(sslLockType* l) {$/;"	f	file:
sslLockType	deps/hiredis/ssl.c	/^typedef CRITICAL_SECTION sslLockType;$/;"	t	file:
sslLockType	deps/hiredis/ssl.c	/^typedef pthread_mutex_t sslLockType;$/;"	t	file:
sslLockingCallback	src/tls.c	/^static void sslLockingCallback(int mode, int lock_id, const char *f, int line) {$/;"	f	file:
ssl_ctx	deps/hiredis/ssl.c	/^    SSL_CTX *ssl_ctx;$/;"	m	struct:redisSSLContext	file:
ssl_error	src/tls.c	/^    char *ssl_error;$/;"	m	struct:tls_connection	file:
sslconfig	src/redis-benchmark.c	/^    struct cliSSLconfig sslconfig;$/;"	m	struct:config	typeref:struct:config::cliSSLconfig	file:
sslconfig	src/redis-cli.c	/^    cliSSLconfig sslconfig;$/;"	m	struct:config	file:
sst	src/config.c	/^        ssize_t *sst;$/;"	m	union:numericConfigData::__anon45	file:
st	src/config.c	/^        size_t *st;$/;"	m	union:numericConfigData::__anon45	file:
stack	deps/lua/src/lstate.h	/^  StkId stack;  \/* stack base *\/$/;"	m	struct:lua_State
stack	src/rax.h	/^    raxStack stack;         \/* Stack used for unsafe iteration. *\/$/;"	m	struct:raxIterator
stack	src/rax.h	/^    void **stack; \/* Points to static_items or an heap allocated array. *\/$/;"	m	struct:raxStack
stack_init	deps/lua/src/lstate.c	/^static void stack_init (lua_State *L1, lua_State *L) {$/;"	f	file:
stack_last	deps/lua/src/lstate.h	/^  StkId stack_last;  \/* last free slot in the stack *\/$/;"	m	struct:lua_State
stack_nelms	deps/jemalloc/src/tcache.c	/^static unsigned		stack_nelms; \/* Total stack elms per tcache. *\/$/;"	v	file:
stacksize	deps/lua/src/lstate.h	/^  int stacksize;$/;"	m	struct:lua_State
stagfree	src/redis-benchmark.c	/^    size_t stagfree;        \/* Number of unused pointers in client->stagptr *\/$/;"	m	struct:_client	file:
staglen	src/redis-benchmark.c	/^    size_t staglen;         \/* Number of pointers in client->stagptr *\/$/;"	m	struct:_client	file:
stagptr	src/redis-benchmark.c	/^    char **stagptr;         \/* Pointers to slot hashtags (cluster mode only) *\/$/;"	m	struct:_client	file:
standardConfig	src/config.c	/^typedef struct standardConfig {$/;"	s	file:
standardConfig	src/config.c	/^} standardConfig;$/;"	t	typeref:struct:standardConfig	file:
start	src/module.c	/^            uint32_t start;        \/* Start pos for positional ranges. *\/$/;"	m	struct:RedisModuleKey::__anon62::__anon63	file:
start	src/redis-benchmark.c	/^    long long start;        \/* Start time of a request *\/$/;"	m	struct:_client	file:
start	src/redis-benchmark.c	/^    long long start;$/;"	m	struct:config	file:
startAppendOnly	src/aof.c	/^int startAppendOnly(void) {$/;"	f
startBenchmarkThreads	src/redis-benchmark.c	/^static void startBenchmarkThreads() {$/;"	f	file:
startBgsaveForReplication	src/replication.c	/^int startBgsaveForReplication(int mincapa) {$/;"	f
startLoading	src/rdb.c	/^void startLoading(size_t size, int rdbflags) {$/;"	f
startLoadingFile	src/rdb.c	/^void startLoadingFile(FILE *fp, char* filename, int rdbflags) {$/;"	f
startMonitor	exp/4_monitor.sh	/^startMonitor() {$/;"	f
startOneNodeMonitor	exp/4_monitor.sh	/^startOneNodeMonitor() {$/;"	f
startSaving	src/rdb.c	/^void startSaving(int rdbflags) {$/;"	f
startThreadedIO	src/networking.c	/^void startThreadedIO(void) {$/;"	f
start_benchmark	src/dict.c	1218;"	d	file:
start_bg_block_op	tests/integration/block-repl.tcl	/^proc start_bg_block_op {host port db ops tls} {$/;"	p
start_bg_complex_data	tests/support/util.tcl	/^proc start_bg_complex_data {host port db ops} {$/;"	p
start_capture	deps/lua/src/lstrlib.c	/^static const char *start_capture (MatchState *ms, const char *s,$/;"	f	file:
start_key	src/stream.h	/^    uint64_t start_key[2];  \/* Start key as 128 bit big endian. *\/$/;"	m	struct:streamIterator
start_server	tests/support/server.tcl	/^proc start_server {options {code undefined}} {$/;"	p
start_server_and_kill_it	tests/integration/rdb.tcl	/^proc start_server_and_kill_it {overrides code} {$/;"	p
start_server_aof	tests/integration/aof-race.tcl	/^proc start_server_aof {overrides code} {$/;"	p
start_server_aof	tests/integration/aof.tcl	/^proc start_server_aof {overrides code} {$/;"	p
start_server_error	tests/support/server.tcl	/^proc start_server_error {config_file error} {$/;"	p
start_time	src/sentinel.c	/^    mstime_t start_time;    \/* Script execution time if the script is running,$/;"	m	struct:sentinelScriptJob	file:
start_write_load	tests/support/util.tcl	/^proc start_write_load {host port seconds} {$/;"	p
startpc	deps/lua/src/lobject.h	/^  int startpc;  \/* first point where variable is active *\/$/;"	m	struct:LocVar
startup_allocated	src/server.h	/^    size_t startup_allocated;$/;"	m	struct:redisMemOverhead
statMode	src/redis-cli.c	/^static void statMode(void) {$/;"	f	file:
stat_active_defrag_hits	src/server.h	/^    long long stat_active_defrag_hits;      \/* number of allocations moved *\/$/;"	m	struct:redisServer
stat_active_defrag_key_hits	src/server.h	/^    long long stat_active_defrag_key_hits;  \/* number of keys with moved allocations *\/$/;"	m	struct:redisServer
stat_active_defrag_key_misses	src/server.h	/^    long long stat_active_defrag_key_misses;\/* number of keys scanned and not moved *\/$/;"	m	struct:redisServer
stat_active_defrag_misses	src/server.h	/^    long long stat_active_defrag_misses;    \/* number of allocations scanned but not moved *\/$/;"	m	struct:redisServer
stat_active_defrag_scanned	src/server.h	/^    long long stat_active_defrag_scanned;   \/* number of dictEntries scanned *\/$/;"	m	struct:redisServer
stat_aof_cow_bytes	src/server.h	/^    size_t stat_aof_cow_bytes;      \/* Copy on write bytes during AOF rewrite. *\/$/;"	m	struct:redisServer
stat_clients_type_memory	src/server.h	/^    uint64_t stat_clients_type_memory[CLIENT_TYPE_COUNT];\/* Mem usage by type *\/$/;"	m	struct:redisServer
stat_current_cow_bytes	src/server.h	/^    size_t stat_current_cow_bytes;  \/* Copy on write bytes while child is active. *\/$/;"	m	struct:redisServer
stat_current_cow_updated	src/server.h	/^    monotime stat_current_cow_updated;  \/* Last update time of stat_current_cow_bytes *\/$/;"	m	struct:redisServer
stat_current_save_keys_processed	src/server.h	/^    size_t stat_current_save_keys_processed;  \/* Processed keys while child is active. *\/$/;"	m	struct:redisServer
stat_current_save_keys_total	src/server.h	/^    size_t stat_current_save_keys_total;  \/* Number of keys when child started. *\/$/;"	m	struct:redisServer
stat_dump_payload_sanitizations	src/server.h	/^    long long stat_dump_payload_sanitizations; \/* Number deep dump payloads integrity validations. *\/$/;"	m	struct:redisServer
stat_evictedkeys	src/server.h	/^    long long stat_evictedkeys;     \/* Number of evicted keys (maxmemory) *\/$/;"	m	struct:redisServer
stat_expire_cycle_time_used	src/server.h	/^    long long stat_expire_cycle_time_used; \/* Cumulative microseconds used. *\/$/;"	m	struct:redisServer
stat_expired_stale_perc	src/server.h	/^    double stat_expired_stale_perc; \/* Percentage of keys probably expired *\/$/;"	m	struct:redisServer
stat_expired_time_cap_reached_count	src/server.h	/^    long long stat_expired_time_cap_reached_count; \/* Early expire cylce stops.*\/$/;"	m	struct:redisServer
stat_expiredkeys	src/server.h	/^    long long stat_expiredkeys;     \/* Number of expired keys *\/$/;"	m	struct:redisServer
stat_fork_rate	src/server.h	/^    double stat_fork_rate;          \/* Fork rate in GB\/sec. *\/$/;"	m	struct:redisServer
stat_fork_time	src/server.h	/^    long long stat_fork_time;       \/* Time needed to perform latest fork() *\/$/;"	m	struct:redisServer
stat_io_reads_processed	src/server.h	/^    long long stat_io_reads_processed; \/* Number of read events processed by IO \/ Main threads *\/$/;"	m	struct:redisServer
stat_io_writes_processed	src/server.h	/^    long long stat_io_writes_processed; \/* Number of write events processed by IO \/ Main threads *\/$/;"	m	struct:redisServer
stat_keyspace_hits	src/server.h	/^    long long stat_keyspace_hits;   \/* Number of successful lookups of keys *\/$/;"	m	struct:redisServer
stat_keyspace_misses	src/server.h	/^    long long stat_keyspace_misses; \/* Number of failed lookups of keys *\/$/;"	m	struct:redisServer
stat_mode	src/redis-cli.c	/^    int stat_mode;$/;"	m	struct:config	file:
stat_module_cow_bytes	src/server.h	/^    size_t stat_module_cow_bytes;   \/* Copy on write bytes during module fork. *\/$/;"	m	struct:redisServer
stat_module_progress	src/server.h	/^    double stat_module_progress;   \/* Module save progress. *\/$/;"	m	struct:redisServer
stat_net_input_bytes	src/server.h	/^    redisAtomic long long stat_net_input_bytes; \/* Bytes read from network. *\/$/;"	m	struct:redisServer
stat_net_output_bytes	src/server.h	/^    redisAtomic long long stat_net_output_bytes; \/* Bytes written to network. *\/$/;"	m	struct:redisServer
stat_numcommands	src/server.h	/^    long long stat_numcommands;     \/* Number of processed commands *\/$/;"	m	struct:redisServer
stat_numconnections	src/server.h	/^    long long stat_numconnections;  \/* Number of connections received *\/$/;"	m	struct:redisServer
stat_peak_memory	src/server.h	/^    size_t stat_peak_memory;        \/* Max used memory record *\/$/;"	m	struct:redisServer
stat_rdb_cow_bytes	src/server.h	/^    size_t stat_rdb_cow_bytes;      \/* Copy on write bytes during RDB saving. *\/$/;"	m	struct:redisServer
stat_rejected_conn	src/server.h	/^    long long stat_rejected_conn;   \/* Clients rejected because of maxclients *\/$/;"	m	struct:redisServer
stat_starttime	src/server.h	/^    time_t stat_starttime;          \/* Server start time *\/$/;"	m	struct:redisServer
stat_sync_full	src/server.h	/^    long long stat_sync_full;       \/* Number of full resyncs with slaves. *\/$/;"	m	struct:redisServer
stat_sync_partial_err	src/server.h	/^    long long stat_sync_partial_err;\/* Number of unaccepted PSYNC requests. *\/$/;"	m	struct:redisServer
stat_sync_partial_ok	src/server.h	/^    long long stat_sync_partial_ok; \/* Number of accepted PSYNC requests. *\/$/;"	m	struct:redisServer
stat_total_error_replies	src/server.h	/^    long long stat_total_error_replies; \/* Total number of issued error replies ( command + rejected errors ) *\/$/;"	m	struct:redisServer
stat_total_forks	src/server.h	/^    long long stat_total_forks;     \/* Total count of fork. *\/$/;"	m	struct:redisServer
stat_total_reads_processed	src/server.h	/^    redisAtomic long long stat_total_reads_processed; \/* Total number of read events processed *\/$/;"	m	struct:redisServer
stat_total_writes_processed	src/server.h	/^    redisAtomic long long stat_total_writes_processed; \/* Total number of write events processed *\/$/;"	m	struct:redisServer
stat_unexpected_error_replies	src/server.h	/^    long long stat_unexpected_error_replies; \/* Number of unexpected (aof-loading, replica to master, etc.) error replies *\/$/;"	m	struct:redisServer
state	deps/hiredis/adapters/libevent.h	/^    short state;$/;"	m	struct:redisLibeventEvents
state	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^	background_thread_state_t	state;$/;"	m	struct:background_thread_info_s
state	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^	extent_state_t		state;$/;"	m	struct:extents_s
state	deps/jemalloc/include/jemalloc/internal/log.h	/^	atomic_u_t state;$/;"	m	struct:log_var_s
state	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	prof_tctx_state_t	state;$/;"	m	struct:prof_tctx_s
state	deps/jemalloc/include/jemalloc/internal/tsd.h	/^	tsd_state_t	state;$/;"	m	struct:tsd_s
state	src/cluster.h	/^    int state;            \/* CLUSTER_OK, CLUSTER_FAIL, ... *\/$/;"	m	struct:clusterState
state	src/cluster.h	/^    unsigned char state; \/* Cluster state from the POV of the sender *\/$/;"	m	struct:__anon43
state	src/connection.h	/^    ConnectionState state;$/;"	m	struct:connection
state	src/sha1.h	/^    uint32_t state[5];$/;"	m	struct:__anon69
state	src/sha256.h	/^	WORD state[8];$/;"	m	struct:__anon68
state_size	deps/lua/src/lstate.c	27;"	d	file:
statement	deps/lua/src/lparser.c	/^static int statement (LexState *ls) {$/;"	f	file:
static_items	src/rax.h	/^    void *static_items[RAX_STACK_STATIC_ITEMS];$/;"	m	struct:raxStack
static_opts_init	deps/jemalloc/src/jemalloc.c	/^static_opts_init(static_opts_t *static_opts) {$/;"	f
static_opts_s	deps/jemalloc/src/jemalloc.c	/^struct static_opts_s {$/;"	s	file:
static_opts_t	deps/jemalloc/src/jemalloc.c	/^typedef struct static_opts_s static_opts_t;$/;"	t	typeref:struct:static_opts_s	file:
statistics	deps/jemalloc/src/zone.c	/^	void (*statistics)(malloc_zone_t *, malloc_statistics_t *);$/;"	m	struct:malloc_introspection_t	file:
statnames	deps/lua/src/lbaselib.c	/^static const char *const statnames[] =$/;"	v	file:
stats	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	arena_stats_decay_t	*stats;$/;"	m	struct:arena_decay_s
stats	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	arena_stats_t		stats;$/;"	m	struct:arena_s
stats	deps/jemalloc/include/jemalloc/internal/bin.h	/^	bin_stats_t	stats;$/;"	m	struct:bin_s
stats_arena_bins_print	deps/jemalloc/src/stats.c	/^stats_arena_bins_print(emitter_t *emitter, bool mutex, unsigned i) {$/;"	f	file:
stats_arena_lextents_print	deps/jemalloc/src/stats.c	/^stats_arena_lextents_print(emitter_t *emitter, unsigned i) {$/;"	f	file:
stats_arena_mutexes_print	deps/jemalloc/src/stats.c	/^stats_arena_mutexes_print(emitter_t *emitter, unsigned arena_ind) {$/;"	f	file:
stats_arena_print	deps/jemalloc/src/stats.c	/^stats_arena_print(emitter_t *emitter, unsigned i, bool bins, bool large,$/;"	f	file:
stats_arenas_i_bins_j_index	deps/jemalloc/src/ctl.c	/^stats_arenas_i_bins_j_index(tsdn_t *tsdn, const size_t *mib, size_t miblen,$/;"	f	file:
stats_arenas_i_bins_j_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t stats_arenas_i_bins_j_node[] = {$/;"	v	file:
stats_arenas_i_bins_node	deps/jemalloc/src/ctl.c	/^static const ctl_indexed_node_t stats_arenas_i_bins_node[] = {$/;"	v	file:
stats_arenas_i_index	deps/jemalloc/src/ctl.c	/^stats_arenas_i_index(tsdn_t *tsdn, const size_t *mib, size_t miblen, size_t i) {$/;"	f	file:
stats_arenas_i_large_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t stats_arenas_i_large_node[] = {$/;"	v	file:
stats_arenas_i_lextents_j_index	deps/jemalloc/src/ctl.c	/^stats_arenas_i_lextents_j_index(tsdn_t *tsdn, const size_t *mib, size_t miblen,$/;"	f	file:
stats_arenas_i_lextents_j_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t stats_arenas_i_lextents_j_node[] = {$/;"	v	file:
stats_arenas_i_lextents_node	deps/jemalloc/src/ctl.c	/^static const ctl_indexed_node_t stats_arenas_i_lextents_node[] = {$/;"	v	file:
stats_arenas_i_mutexes_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t stats_arenas_i_mutexes_node[] = {$/;"	v	file:
stats_arenas_i_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t stats_arenas_i_node[] = {$/;"	v	file:
stats_arenas_i_small_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t stats_arenas_i_small_node[] = {$/;"	v	file:
stats_arenas_node	deps/jemalloc/src/ctl.c	/^static const ctl_indexed_node_t stats_arenas_node[] = {$/;"	v	file:
stats_background_thread_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t stats_background_thread_node[] = {$/;"	v	file:
stats_bus_messages_received	src/cluster.h	/^    long long stats_bus_messages_received[CLUSTERMSG_TYPE_COUNT];$/;"	m	struct:clusterState
stats_bus_messages_sent	src/cluster.h	/^    long long stats_bus_messages_sent[CLUSTERMSG_TYPE_COUNT];$/;"	m	struct:clusterState
stats_general_print	deps/jemalloc/src/stats.c	/^stats_general_print(emitter_t *emitter) {$/;"	f	file:
stats_mutexes_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t stats_mutexes_node[] = {$/;"	v	file:
stats_mutexes_reset_ctl	deps/jemalloc/src/ctl.c	/^stats_mutexes_reset_ctl(tsd_t *tsd, const size_t *mib, size_t miblen,$/;"	f	file:
stats_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t stats_node[] = {$/;"	v	file:
stats_pfail_nodes	src/cluster.h	/^    long long stats_pfail_nodes;    \/* Number of nodes in PFAIL status,$/;"	m	struct:clusterState
stats_print	deps/jemalloc/src/stats.c	/^stats_print(void (*write_cb)(void *, const char *), void *cbopaque,$/;"	f
stats_print_atexit	deps/jemalloc/src/jemalloc.c	/^stats_print_atexit(void) {$/;"	f	file:
stats_print_helper	deps/jemalloc/src/stats.c	/^stats_print_helper(emitter_t *emitter, bool merged, bool destroyed,$/;"	f	file:
stats_print_tot_num_options	deps/jemalloc/include/jemalloc/internal/stats.h	/^    stats_print_tot_num_options$/;"	e	enum:__anon159
status	deps/lua/src/ldo.c	/^  volatile int status;  \/* error code *\/$/;"	m	struct:lua_longjmp	file:
status	deps/lua/src/ldump.c	/^ int status;$/;"	m	struct:__anon115	file:
status	deps/lua/src/lstate.h	/^  lu_byte status;$/;"	m	struct:lua_State
status	deps/lua/src/lua.c	/^  int status;$/;"	m	struct:Smain	file:
status	src/cluster.h	/^    uint16_t status; \/* add status, 1 means add, 2 means delete, 0 means default *\/$/;"	m	struct:__anon35
status	tests/support/util.tcl	/^proc status {r property} {$/;"	p
stdbool_h	deps/jemalloc/include/msvc_compat/C99/stdbool.h	2;"	d
stdinarg	src/redis-cli.c	/^    int stdinarg; \/* get last arg from stdin. (-x option) *\/$/;"	m	struct:config	file:
step	src/geohash.h	/^    uint8_t step;$/;"	m	struct:__anon47
step	src/scripting.c	/^    int step;   \/* Stop at next line regardless of breakpoints. *\/$/;"	m	struct:ldbState	file:
stop	src/ae.h	/^    int stop;$/;"	m	struct:aeEventLoop
stopAppendOnly	src/aof.c	/^void stopAppendOnly(void) {$/;"	f
stopC	cluster.sh	/^stopC() {$/;"	f
stopClient	exp/4_monitor.sh	/^stopClient() {$/;"	f
stopClient	exp/exp4.sh	/^stopClient() {$/;"	f
stopCluster	exp/1_build_redis_cluster.sh	/^stopCluster() {$/;"	f
stopLoading	src/rdb.c	/^void stopLoading(int success) {$/;"	f
stopMonitor	exp/4_monitor.sh	/^stopMonitor() {$/;"	f
stopOneNodeMonitor	exp/4_monitor.sh	/^stopOneNodeMonitor() {$/;"	f
stopRedisInstance	exp/1_build_redis_cluster.sh	/^stopRedisInstance() {$/;"	f
stopSaving	src/rdb.c	/^void stopSaving(int success) {$/;"	f
stopThreadedIO	src/networking.c	/^void stopThreadedIO(void) {$/;"	f
stopThreadedIOIfNeeded	src/networking.c	/^int stopThreadedIOIfNeeded(void) {$/;"	f
stop_bg_block_op	tests/integration/block-repl.tcl	/^proc stop_bg_block_op {handle} {$/;"	p
stop_bg_complex_data	tests/support/util.tcl	/^proc stop_bg_complex_data {handle} {$/;"	p
stop_instance	tests/instances.tcl	/^proc stop_instance pid {$/;"	p
stop_write_load	tests/support/util.tcl	/^proc stop_write_load {handle} {$/;"	p
stop_writes_on_bgsave_err	src/server.h	/^    int stop_writes_on_bgsave_err;  \/* Don't allow writes if can't BGSAVE *\/$/;"	m	struct:redisServer
str	deps/hiredis/hiredis.h	/^    char *str; \/* Used for REDIS_REPLY_ERROR, REDIS_REPLY_STRING$/;"	m	struct:redisReply
str	deps/hiredis/test.c	/^    int str;$/;"	m	struct:pushCounters	file:
str	src/module.c	/^        const char *str; \/* String pointer for string and error replies. This$/;"	m	union:RedisModuleCallReply::__anon65	file:
strChildType	src/server.c	/^const char *strChildType(int type) {$/;"	f
strEncoding	src/object.c	/^char *strEncoding(int encoding) {$/;"	f
strEntryBytesLarge	src/ziplist.c	/^static size_t strEntryBytesLarge(size_t slen) {$/;"	f	file:
strEntryBytesSmall	src/ziplist.c	/^static size_t strEntryBytesSmall(size_t slen) {$/;"	f	file:
str_byte	deps/lua/src/lstrlib.c	/^static int str_byte (lua_State *L) {$/;"	f	file:
str_char	deps/lua/src/lstrlib.c	/^static int str_char (lua_State *L) {$/;"	f	file:
str_checkname	deps/lua/src/lparser.c	/^static TString *str_checkname (LexState *ls) {$/;"	f	file:
str_dump	deps/lua/src/lstrlib.c	/^static int str_dump (lua_State *L) {$/;"	f	file:
str_find	deps/lua/src/lstrlib.c	/^static int str_find (lua_State *L) {$/;"	f	file:
str_find_aux	deps/lua/src/lstrlib.c	/^static int str_find_aux (lua_State *L, int find) {$/;"	f	file:
str_format	deps/lua/src/lstrlib.c	/^static int str_format (lua_State *L) {$/;"	f	file:
str_gsub	deps/lua/src/lstrlib.c	/^static int str_gsub (lua_State *L) {$/;"	f	file:
str_len	deps/lua/src/lstrlib.c	/^static int str_len (lua_State *L) {$/;"	f	file:
str_lower	deps/lua/src/lstrlib.c	/^static int str_lower (lua_State *L) {$/;"	f	file:
str_match	deps/lua/src/lstrlib.c	/^static int str_match (lua_State *L) {$/;"	f	file:
str_rep	deps/lua/src/lstrlib.c	/^static int str_rep (lua_State *L) {$/;"	f	file:
str_reverse	deps/lua/src/lstrlib.c	/^static int str_reverse (lua_State *L) {$/;"	f	file:
str_sub	deps/lua/src/lstrlib.c	/^static int str_sub (lua_State *L) {$/;"	f	file:
str_upper	deps/lua/src/lstrlib.c	/^static int str_upper (lua_State *L) {$/;"	f	file:
str_val	deps/jemalloc/include/jemalloc/internal/emitter.h	/^		const char *str_val;$/;"	m	union:emitter_col_s::__anon136
stralgoCommand	src/t_string.c	/^void stralgoCommand(client *c) {$/;"	f
stralgoLCS	src/t_string.c	/^void stralgoLCS(client *c) {$/;"	f
strbuf_allocated	deps/lua/src/strbuf.h	/^static inline int strbuf_allocated(strbuf_t *s)$/;"	f
strbuf_append_char	deps/lua/src/strbuf.h	/^static inline void strbuf_append_char(strbuf_t *s, const char c)$/;"	f
strbuf_append_char_unsafe	deps/lua/src/strbuf.h	/^static inline void strbuf_append_char_unsafe(strbuf_t *s, const char c)$/;"	f
strbuf_append_fmt	deps/lua/src/strbuf.c	/^void strbuf_append_fmt(strbuf_t *s, int len, const char *fmt, ...)$/;"	f
strbuf_append_fmt_retry	deps/lua/src/strbuf.c	/^void strbuf_append_fmt_retry(strbuf_t *s, const char *fmt, ...)$/;"	f
strbuf_append_mem	deps/lua/src/strbuf.h	/^static inline void strbuf_append_mem(strbuf_t *s, const char *c, int len)$/;"	f
strbuf_append_mem_unsafe	deps/lua/src/strbuf.h	/^static inline void strbuf_append_mem_unsafe(strbuf_t *s, const char *c, int len)$/;"	f
strbuf_append_string	deps/lua/src/strbuf.c	/^void strbuf_append_string(strbuf_t *s, const char *str)$/;"	f
strbuf_empty_length	deps/lua/src/strbuf.h	/^static inline int strbuf_empty_length(strbuf_t *s)$/;"	f
strbuf_empty_ptr	deps/lua/src/strbuf.h	/^static inline char *strbuf_empty_ptr(strbuf_t *s)$/;"	f
strbuf_ensure_empty_length	deps/lua/src/strbuf.h	/^static inline void strbuf_ensure_empty_length(strbuf_t *s, int len)$/;"	f
strbuf_ensure_null	deps/lua/src/strbuf.h	/^static inline void strbuf_ensure_null(strbuf_t *s)$/;"	f
strbuf_extend_length	deps/lua/src/strbuf.h	/^static inline void strbuf_extend_length(strbuf_t *s, int len)$/;"	f
strbuf_free	deps/lua/src/strbuf.c	/^void strbuf_free(strbuf_t *s)$/;"	f
strbuf_free_to_string	deps/lua/src/strbuf.c	/^char *strbuf_free_to_string(strbuf_t *s, int *len)$/;"	f
strbuf_init	deps/lua/src/strbuf.c	/^void strbuf_init(strbuf_t *s, int len)$/;"	f
strbuf_length	deps/lua/src/strbuf.h	/^static inline int strbuf_length(strbuf_t *s)$/;"	f
strbuf_new	deps/lua/src/strbuf.c	/^strbuf_t *strbuf_new(int len)$/;"	f
strbuf_reset	deps/lua/src/strbuf.h	/^static inline void strbuf_reset(strbuf_t *s)$/;"	f
strbuf_resize	deps/lua/src/strbuf.c	/^void strbuf_resize(strbuf_t *s, int len)$/;"	f
strbuf_set_increment	deps/lua/src/strbuf.c	/^void strbuf_set_increment(strbuf_t *s, int increment)$/;"	f
strbuf_string	deps/lua/src/strbuf.h	/^static inline char *strbuf_string(strbuf_t *s, int *len)$/;"	f
strbuf_t	deps/lua/src/strbuf.h	/^} strbuf_t;$/;"	t	typeref:struct:__anon105
strcasecmp	deps/hiredis/win32.h	12;"	d
strdupFn	deps/hiredis/alloc.h	/^    char *(*strdupFn)(const char*);$/;"	m	struct:hiredisAllocFuncs
stream	src/module.c	/^        } stream;$/;"	m	union:RedisModuleKey::__anon62	typeref:struct:RedisModuleKey::__anon62::__anon64	file:
stream	src/stream.h	/^    stream *stream;         \/* The stream we are iterating. *\/$/;"	m	struct:streamIterator
stream	src/stream.h	/^typedef struct stream {$/;"	s
stream	src/stream.h	/^} stream;$/;"	t	typeref:struct:stream
streamAddTrimArgs	src/t_stream.c	/^} streamAddTrimArgs;$/;"	t	typeref:struct:__anon11	file:
streamAppendItem	src/t_stream.c	/^int streamAppendItem(stream *s, robj **argv, int64_t numfields, streamID *added_id, streamID *use_id) {$/;"	f
streamCG	src/stream.h	/^typedef struct streamCG {$/;"	s
streamCG	src/stream.h	/^} streamCG;$/;"	t	typeref:struct:streamCG
streamCompareID	src/t_stream.c	/^int streamCompareID(streamID *a, streamID *b) {$/;"	f
streamCompareID	tests/unit/type/stream.tcl	/^proc streamCompareID {a b} {$/;"	p
streamConsumer	src/stream.h	/^typedef struct streamConsumer {$/;"	s
streamConsumer	src/stream.h	/^} streamConsumer;$/;"	t	typeref:struct:streamConsumer
streamCreateCG	src/t_stream.c	/^streamCG *streamCreateCG(stream *s, char *name, size_t namelen, streamID *id) {$/;"	f
streamCreateNACK	src/t_stream.c	/^streamNACK *streamCreateNACK(streamConsumer *consumer) {$/;"	f
streamDecodeID	src/t_stream.c	/^void streamDecodeID(void *buf, streamID *id) {$/;"	f
streamDecrID	src/t_stream.c	/^int streamDecrID(streamID *id) {$/;"	f
streamDelConsumer	src/t_stream.c	/^uint64_t streamDelConsumer(streamCG *cg, sds name) {$/;"	f
streamDeleteItem	src/t_stream.c	/^int streamDeleteItem(stream *s, streamID *id) {$/;"	f
streamDup	src/t_stream.c	/^robj *streamDup(robj *o) {$/;"	f
streamEncodeID	src/t_stream.c	/^void streamEncodeID(void *buf, streamID *id) {$/;"	f
streamFreeCG	src/t_stream.c	/^void streamFreeCG(streamCG *cg) {$/;"	f
streamFreeConsumer	src/t_stream.c	/^void streamFreeConsumer(streamConsumer *sc) {$/;"	f
streamFreeNACK	src/t_stream.c	/^void streamFreeNACK(streamNACK *na) {$/;"	f
streamGenericParseIDOrReply	src/t_stream.c	/^int streamGenericParseIDOrReply(client *c, const robj *o, streamID *id, uint64_t missing_seq, int strict) {$/;"	f
streamGetEdgeID	src/t_stream.c	/^void streamGetEdgeID(stream *s, int first, streamID *edge_id)$/;"	f
streamID	src/stream.h	/^typedef struct streamID {$/;"	s
streamID	src/stream.h	/^} streamID;$/;"	t	typeref:struct:streamID
streamIncrID	src/t_stream.c	/^int streamIncrID(streamID *id) {$/;"	f
streamIterator	src/stream.h	/^typedef struct streamIterator {$/;"	s
streamIterator	src/stream.h	/^} streamIterator;$/;"	t	typeref:struct:streamIterator
streamIteratorGetField	src/t_stream.c	/^void streamIteratorGetField(streamIterator *si, unsigned char **fieldptr, unsigned char **valueptr, int64_t *fieldlen, int64_t *valuelen) {$/;"	f
streamIteratorGetID	src/t_stream.c	/^int streamIteratorGetID(streamIterator *si, streamID *id, int64_t *numfields) {$/;"	f
streamIteratorRemoveEntry	src/t_stream.c	/^void streamIteratorRemoveEntry(streamIterator *si, streamID *current) {$/;"	f
streamIteratorStart	src/t_stream.c	/^void streamIteratorStart(streamIterator *si, stream *s, streamID *start, streamID *end, int rev) {$/;"	f
streamIteratorStop	src/t_stream.c	/^void streamIteratorStop(streamIterator *si) {$/;"	f
streamLastValidID	src/t_stream.c	/^void streamLastValidID(stream *s, streamID *maxid)$/;"	f
streamLength	src/t_stream.c	/^unsigned long streamLength(const robj *subject) {$/;"	f
streamLogListpackContent	src/t_stream.c	/^void streamLogListpackContent(unsigned char *lp) {$/;"	f
streamLookupCG	src/t_stream.c	/^streamCG *streamLookupCG(stream *s, sds groupname) {$/;"	f
streamLookupConsumer	src/t_stream.c	/^streamConsumer *streamLookupConsumer(streamCG *cg, sds name, int flags, int *created) {$/;"	f
streamNACK	src/stream.h	/^typedef struct streamNACK {$/;"	s
streamNACK	src/stream.h	/^} streamNACK;$/;"	t	typeref:struct:streamNACK
streamNew	src/t_stream.c	/^stream *streamNew(void) {$/;"	f
streamNextID	src/t_stream.c	/^void streamNextID(streamID *last_id, streamID *new_id) {$/;"	f
streamNextID	tests/unit/type/stream.tcl	/^proc streamNextID {id} {$/;"	p
streamParseAddOrTrimArgsOrReply	src/t_stream.c	/^static int streamParseAddOrTrimArgsOrReply(client *c, streamAddTrimArgs *args, int xadd) {$/;"	f	file:
streamParseID	src/t_stream.c	/^int streamParseID(const robj *o, streamID *id) {$/;"	f
streamParseIDOrReply	src/t_stream.c	/^int streamParseIDOrReply(client *c, robj *o, streamID *id, uint64_t missing_seq) {$/;"	f
streamParseIntervalIDOrReply	src/t_stream.c	/^int streamParseIntervalIDOrReply(client *c, robj *o, streamID *id, int *exclude, uint64_t missing_seq) {$/;"	f
streamParseStrictIDOrReply	src/t_stream.c	/^int streamParseStrictIDOrReply(client *c, robj *o, streamID *id, uint64_t missing_seq) {$/;"	f
streamPropInfo	src/stream.h	/^typedef struct streamPropInfo {$/;"	s
streamPropInfo	src/stream.h	/^} streamPropInfo;$/;"	t	typeref:struct:streamPropInfo
streamPropagateConsumerCreation	src/t_stream.c	/^void streamPropagateConsumerCreation(client *c, robj *key, robj *groupname, sds consumername) {$/;"	f
streamPropagateGroupID	src/t_stream.c	/^void streamPropagateGroupID(client *c, robj *key, streamCG *group, robj *groupname) {$/;"	f
streamPropagateXCLAIM	src/t_stream.c	/^void streamPropagateXCLAIM(client *c, robj *key, streamCG *group, robj *groupname, robj *id, streamNACK *nack) {$/;"	f
streamRadixTreeMemoryUsage	src/object.c	/^size_t streamRadixTreeMemoryUsage(rax *rax) {$/;"	f
streamRandomID	tests/unit/type/stream.tcl	/^proc streamRandomID {min_id max_id} {$/;"	p
streamReplyWithRange	src/t_stream.c	/^size_t streamReplyWithRange(client *c, stream *s, streamID *start, streamID *end, size_t count, int rev, streamCG *group, streamConsumer *consumer, int flags, streamPropInfo *spi) {$/;"	f
streamReplyWithRangeFromConsumerPEL	src/t_stream.c	/^size_t streamReplyWithRangeFromConsumerPEL(client *c, stream *s, streamID *start, streamID *end, size_t count, streamConsumer *consumer) {$/;"	f
streamRewriteApproxSpecifier	src/t_stream.c	/^void streamRewriteApproxSpecifier(client *c, int idx) {$/;"	f
streamRewriteTrimArgument	src/t_stream.c	/^void streamRewriteTrimArgument(client *c, stream *s, int trim_strategy, int idx) {$/;"	f
streamSimulateXRANGE	tests/unit/type/stream.tcl	/^proc streamSimulateXRANGE {items start end} {$/;"	p
streamTrim	src/t_stream.c	/^int64_t streamTrim(stream *s, streamAddTrimArgs *args) {$/;"	f
streamTrimByID	src/t_stream.c	/^int64_t streamTrimByID(stream *s, streamID minid, int approx) {$/;"	f
streamTrimByLength	src/t_stream.c	/^int64_t streamTrimByLength(stream *s, long long maxlen, int approx) {$/;"	f
streamTypeLookupWriteOrCreate	src/t_stream.c	/^robj *streamTypeLookupWriteOrCreate(client *c, robj *key, int no_create) {$/;"	f
streamValidateListpackIntegrity	src/t_stream.c	/^int streamValidateListpackIntegrity(unsigned char *lp, size_t size, int deep) {$/;"	f
stream_add	tests/modules/stream.c	/^int stream_add(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
stream_addn	tests/modules/stream.c	/^int stream_addn(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
stream_delete	tests/modules/stream.c	/^int stream_delete(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
stream_id	src/blocked.c	/^    streamID stream_id;     \/* Stream ID if we blocked in a stream. *\/$/;"	m	struct:bkinfo	file:
stream_node_max_bytes	src/server.h	/^    size_t stream_node_max_bytes;$/;"	m	struct:redisServer
stream_node_max_entries	src/server.h	/^    long long stream_node_max_entries;$/;"	m	struct:redisServer
stream_range	tests/modules/stream.c	/^int stream_range(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
stream_trim	tests/modules/stream.c	/^int stream_trim(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
strerror_r	deps/hiredis/win32.h	53;"	d
stress	src/ziplist.c	/^static void stress(int pos, int num, int maxsize, int dnum) {$/;"	f	file:
stressGetKeys	utils/hashtable/rehashing.c	/^void stressGetKeys(dict *d, int times, int *perfect_run, int *approx_run) {$/;"	f
stressers	tests/unit/type/zset.tcl	/^    proc stressers {encoding} {$/;"	p
string	deps/lua/src/lua_cjson.c	/^        const char *string;$/;"	m	union:__anon103::__anon104	file:
string	src/config.c	/^    stringConfigData string;$/;"	m	union:typeData	file:
string2d	src/util.c	/^int string2d(const char *s, size_t slen, double *dp) {$/;"	f
string2l	src/util.c	/^int string2l(const char *s, size_t slen, long *lval) {$/;"	f
string2ld	src/util.c	/^int string2ld(const char *s, size_t slen, long double *dp) {$/;"	f
string2ll	deps/hiredis/read.c	/^static int string2ll(const char *s, size_t slen, long long *value) {$/;"	f	file:
string2ll	src/util.c	/^int string2ll(const char *s, size_t slen, long long *value) {$/;"	f
string2printable	tests/support/util.tcl	/^proc string2printable s {$/;"	p
string2ull	src/util.c	/^int string2ull(const char *s, unsigned long long *value) {$/;"	f
stringCheckPrefix	src/tracking.c	/^static int stringCheckPrefix(unsigned char *s1, size_t s1_len, unsigned char *s2, size_t s2_len) {$/;"	f	file:
stringConfigData	src/config.c	/^typedef struct stringConfigData {$/;"	s	file:
stringConfigData	src/config.c	/^} stringConfigData;$/;"	t	typeref:struct:stringConfigData	file:
stringFromLongLong	src/dict.c	/^char *stringFromLongLong(long long value) {$/;"	f
stringObjectLen	src/object.c	/^size_t stringObjectLen(robj *o) {$/;"	f
string_len	deps/lua/src/lua_cjson.c	/^    int string_len;$/;"	m	struct:__anon103	file:
stringmark	deps/lua/src/lgc.c	40;"	d	file:
stringmatch	src/util.c	/^int stringmatch(const char *pattern, const char *string, int nocase) {$/;"	f
stringmatchlen	src/util.c	/^int stringmatchlen(const char *pattern, int patternLen,$/;"	f
stringmatchlen_fuzz_test	src/util.c	/^int stringmatchlen_fuzz_test(void) {$/;"	f
strings_h	deps/jemalloc/include/msvc_compat/strings.h	2;"	d
stringtable	deps/lua/src/lstate.h	/^typedef struct stringtable {$/;"	s
stringtable	deps/lua/src/lstate.h	/^} stringtable;$/;"	t	typeref:struct:stringtable
strip	deps/lua/src/ldump.c	/^ int strip;$/;"	m	struct:__anon115	file:
stripping	deps/lua/src/luac.c	/^static int stripping=0;			\/* strip debug information? *\/$/;"	v	file:
strlenCommand	src/t_string.c	/^void strlenCommand(client *c) {$/;"	f
strlib	deps/lua/src/lstrlib.c	/^static const luaL_Reg strlib[] = {$/;"	v	file:
strncasecmp	deps/hiredis/win32.h	16;"	d
strt	deps/lua/src/lstate.h	/^  stringtable strt;  \/* hash table for strings *\/$/;"	m	struct:global_State
strtod_buffer_size	deps/lua/src/fpconv.c	/^static int strtod_buffer_size(const char *s)$/;"	f	file:
strtold	src/object.c	36;"	d	file:
strval	tests/modules/datatype.c	/^    RedisModuleString *strval;$/;"	m	struct:__anon79	file:
sub	deps/hiredis/async.h	/^    } sub;$/;"	m	struct:redisAsyncContext	typeref:struct:redisAsyncContext::__anon88
sub	exp/slot_log_dealer.py	/^        sub = int(after[m][1]) - int(before[m][1])$/;"	v
sub_bucket_count	deps/hdr_histogram/hdr_histogram.h	/^    int32_t sub_bucket_count;$/;"	m	struct:hdr_histogram
sub_bucket_count	deps/hdr_histogram/hdr_histogram.h	/^    int32_t sub_bucket_count;$/;"	m	struct:hdr_histogram_bucket_config
sub_bucket_half_count	deps/hdr_histogram/hdr_histogram.h	/^    int32_t sub_bucket_half_count;$/;"	m	struct:hdr_histogram
sub_bucket_half_count	deps/hdr_histogram/hdr_histogram.h	/^    int32_t sub_bucket_half_count;$/;"	m	struct:hdr_histogram_bucket_config
sub_bucket_half_count_magnitude	deps/hdr_histogram/hdr_histogram.h	/^    int32_t sub_bucket_half_count_magnitude;$/;"	m	struct:hdr_histogram
sub_bucket_half_count_magnitude	deps/hdr_histogram/hdr_histogram.h	/^    int32_t sub_bucket_half_count_magnitude;$/;"	m	struct:hdr_histogram_bucket_config
sub_bucket_mask	deps/hdr_histogram/hdr_histogram.h	/^    int64_t sub_bucket_mask;$/;"	m	struct:hdr_histogram
sub_bucket_mask	deps/hdr_histogram/hdr_histogram.h	/^    int64_t sub_bucket_mask;$/;"	m	struct:hdr_histogram_bucket_config
sub_worker	tests/modules/blockedclient.c	/^void *sub_worker(void *arg) {$/;"	f
subexpr	deps/lua/src/lparser.c	/^static BinOpr subexpr (LexState *ls, expdesc *v, unsigned int limit) {$/;"	f	file:
subject	src/server.h	/^    robj *subject;$/;"	m	struct:__anon23
subject	src/server.h	/^    robj *subject;$/;"	m	struct:__anon25
subject	src/server.h	/^    robj *subject;$/;"	m	struct:__anon26
subject	src/t_zset.c	/^    robj *subject;$/;"	m	struct:__anon2	file:
subscribe	tests/support/util.tcl	/^proc subscribe {client channels} {$/;"	p
subscribeCommand	src/pubsub.c	/^void subscribeCommand(client *c) {$/;"	f
subscribebulk	src/server.h	/^    *busykeyerr, *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,$/;"	m	struct:sharedObjectsStruct
summary	src/help.h	/^  char *summary;$/;"	m	struct:commandHelp
sunionCommand	src/t_set.c	/^void sunionCommand(client *c) {$/;"	f
sunionDiffGenericCommand	src/t_set.c	/^void sunionDiffGenericCommand(client *c, robj **setkeys, int setnum,$/;"	f
sunionstoreCommand	src/t_set.c	/^void sunionstoreCommand(client *c) {$/;"	f
super_arena_i_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t super_arena_i_node[] = {$/;"	v	file:
super_arenas_bin_i_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t super_arenas_bin_i_node[] = {$/;"	v	file:
super_arenas_lextent_i_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t super_arenas_lextent_i_node[] = {$/;"	v	file:
super_root_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t super_root_node[] = {$/;"	v	file:
super_stats_arenas_i_bins_j_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t super_stats_arenas_i_bins_j_node[] = {$/;"	v	file:
super_stats_arenas_i_lextents_j_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t super_stats_arenas_i_lextents_j_node[] = {$/;"	v	file:
super_stats_arenas_i_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t super_stats_arenas_i_node[] = {$/;"	v	file:
supervised	src/server.h	/^    int supervised;                 \/* 1 if supervised, 0 otherwise. *\/$/;"	m	struct:redisServer
supervised_mode	src/server.h	/^    int supervised_mode;            \/* See SUPERVISED_* *\/$/;"	m	struct:redisServer
supervised_mode_enum	src/config.c	/^configEnum supervised_mode_enum[] = {$/;"	v
sval	src/ziplist.h	/^    unsigned char *sval;$/;"	m	struct:__anon70
svalue	deps/lua/src/lobject.h	211;"	d
swap	deps/jemalloc/test/include/test/SFMT-alti.h	/^static inline void swap(w128_t *array, int size) {$/;"	f
swap	deps/jemalloc/test/src/SFMT.c	/^static inline void swap(w128_t *array, int size) {$/;"	f	file:
swap	src/pqsort.c	78;"	d	file:
swapDbCallback	tests/modules/hooks.c	/^void swapDbCallback(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)$/;"	f
swapcode	src/pqsort.c	54;"	d	file:
swapdbCommand	src/db.c	/^void swapdbCommand(client *c) {$/;"	f
swapfunc	src/pqsort.c	/^swapfunc(char *a, char *b, size_t n, int swaptype)$/;"	f	file:
sweepgc	deps/lua/src/lstate.h	/^  GCObject **sweepgc;  \/* position of sweep in `rootgc' *\/$/;"	m	struct:global_State
sweeplist	deps/lua/src/lgc.c	/^static GCObject **sweeplist (lua_State *L, GCObject **p, lu_mem count) {$/;"	f	file:
sweepstrgc	deps/lua/src/lstate.h	/^  int sweepstrgc;  \/* position of sweep in `strt' *\/$/;"	m	struct:global_State
sweepwholelist	deps/lua/src/lgc.c	404;"	d	file:
switch_after	utils/lru/lfu-simulation.c	/^time_t switch_after = 30; \/* Switch access pattern after N seconds. *\/$/;"	v
symbexec	deps/lua/src/ldebug.c	/^static Instruction symbexec (const Proto *pt, int lastpc, int reg) {$/;"	f	file:
sync	src/redismodule.h	/^    int32_t sync;           \/* Synchronous or threaded flush?. *\/$/;"	m	struct:RedisModuleFlushInfo
syncCommand	src/replication.c	/^void syncCommand(client *c) {$/;"	f
syncRead	src/syncio.c	/^ssize_t syncRead(int fd, char *ptr, ssize_t size, long long timeout) {$/;"	f
syncReadLine	src/syncio.c	/^ssize_t syncReadLine(int fd, char *ptr, ssize_t size, long long timeout) {$/;"	f
syncWithMaster	src/replication.c	/^void syncWithMaster(connection *conn) {$/;"	f
syncWrite	src/syncio.c	/^ssize_t syncWrite(int fd, char *ptr, ssize_t size, long long timeout) {$/;"	f
sync_read	src/connection.h	/^    ssize_t (*sync_read)(struct connection *conn, char *ptr, ssize_t size, long long timeout);$/;"	m	struct:ConnectionType
sync_readline	src/connection.h	/^    ssize_t (*sync_readline)(struct connection *conn, char *ptr, ssize_t size, long long timeout);$/;"	m	struct:ConnectionType
sync_time	src/cluster.h	/^    bool sync_time;$/;"	m	struct:clusterState
sync_write	src/connection.h	/^    ssize_t (*sync_write)(struct connection *conn, char *ptr, ssize_t size, long long timeout);$/;"	m	struct:ConnectionType
syntaxerr	src/server.h	/^    *emptyarray, *wrongtypeerr, *nokeyerr, *syntaxerr, *sameobjecterr,$/;"	m	struct:sharedObjectsStruct
syslib	deps/lua/src/loslib.c	/^static const luaL_Reg syslib[] = {$/;"	v	file:
syslog_enabled	src/server.h	/^    int syslog_enabled;             \/* Is syslog enabled? *\/$/;"	m	struct:redisServer
syslog_facility	src/server.h	/^    int syslog_facility;            \/* Syslog facility *\/$/;"	m	struct:redisServer
syslog_facility_enum	src/config.c	/^configEnum syslog_facility_enum[] = {$/;"	v
syslog_ident	src/server.h	/^    char *syslog_ident;             \/* Syslog ident *\/$/;"	m	struct:redisServer
system_memory_size	src/server.h	/^    size_t system_memory_size;  \/* Total memory in system as reported by OS *\/$/;"	m	struct:redisServer
sz	deps/jemalloc/test/unit/retained.c	/^static size_t		sz;$/;"	v	file:
sz	src/quicklist.h	/^    unsigned int sz;             \/* ziplist size in bytes *\/$/;"	m	struct:quicklistNode
sz	src/quicklist.h	/^    unsigned int sz; \/* LZF size in bytes*\/$/;"	m	struct:quicklistLZF
sz	src/quicklist.h	/^    unsigned int sz;$/;"	m	struct:quicklistEntry
sz_index2size	deps/jemalloc/include/jemalloc/internal/sz.h	/^sz_index2size(szind_t index) {$/;"	f
sz_index2size_compute	deps/jemalloc/include/jemalloc/internal/sz.h	/^sz_index2size_compute(szind_t index) {$/;"	f
sz_index2size_lookup	deps/jemalloc/include/jemalloc/internal/sz.h	/^sz_index2size_lookup(szind_t index) {$/;"	f
sz_large_pad	deps/jemalloc/include/jemalloc/internal/sz.h	/^static const size_t sz_large_pad =$/;"	v
sz_pind2sz	deps/jemalloc/include/jemalloc/internal/sz.h	/^sz_pind2sz(pszind_t pind) {$/;"	f
sz_pind2sz_compute	deps/jemalloc/include/jemalloc/internal/sz.h	/^sz_pind2sz_compute(pszind_t pind) {$/;"	f
sz_pind2sz_lookup	deps/jemalloc/include/jemalloc/internal/sz.h	/^sz_pind2sz_lookup(pszind_t pind) {$/;"	f
sz_psz2ind	deps/jemalloc/include/jemalloc/internal/sz.h	/^sz_psz2ind(size_t psz) {$/;"	f
sz_psz2u	deps/jemalloc/include/jemalloc/internal/sz.h	/^sz_psz2u(size_t psz) {$/;"	f
sz_s2u	deps/jemalloc/include/jemalloc/internal/sz.h	/^sz_s2u(size_t size) {$/;"	f
sz_s2u_compute	deps/jemalloc/include/jemalloc/internal/sz.h	/^sz_s2u_compute(size_t size) {$/;"	f
sz_s2u_lookup	deps/jemalloc/include/jemalloc/internal/sz.h	/^sz_s2u_lookup(size_t size) {$/;"	f
sz_sa2u	deps/jemalloc/include/jemalloc/internal/sz.h	/^sz_sa2u(size_t size, size_t alignment) {$/;"	f
sz_size2index	deps/jemalloc/include/jemalloc/internal/sz.h	/^sz_size2index(size_t size) {$/;"	f
sz_size2index_compute	deps/jemalloc/include/jemalloc/internal/sz.h	/^sz_size2index_compute(size_t size) {$/;"	f
sz_size2index_lookup	deps/jemalloc/include/jemalloc/internal/sz.h	/^sz_size2index_lookup(size_t size) {$/;"	f
szind	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	szind_t szind;$/;"	m	struct:alloc_ctx_s
szind_t	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^typedef unsigned szind_t;$/;"	t
t	deps/lua/src/llex.h	/^  Token t;  \/* current token *\/$/;"	m	struct:LexState
t	deps/lua/src/lparser.c	/^  expdesc *t;  \/* table descriptor *\/$/;"	m	struct:ConsControl	file:
t	deps/lua/src/lparser.h	/^  int t;  \/* patch list of `exit when true' *\/$/;"	m	struct:expdesc
t	src/geohash.h	/^    } t;$/;"	m	struct:__anon51	typeref:union:__anon51::__anon52
t0	deps/jemalloc/test/include/test/timer.h	/^	nstime_t t0;$/;"	m	struct:__anon126
t1	deps/jemalloc/test/include/test/timer.h	/^	nstime_t t1;$/;"	m	struct:__anon126
tab	deps/jemalloc/include/jemalloc/internal/ckh.h	/^	ckhc_t *tab;$/;"	m	struct:__anon151
tab_funcs	deps/lua/src/ltablib.c	/^static const luaL_Reg tab_funcs[] = {$/;"	v	file:
table	deps/hiredis/dict.h	/^    dictEntry **table;$/;"	m	struct:dict
table	src/dict.h	/^    dictEntry **table;$/;"	m	struct:dictht
table	src/dict.h	/^    int table, safe;$/;"	m	struct:dictIterator
table_is_an_array	deps/lua/src/lua_cmsgpack.c	/^int table_is_an_array(lua_State *L) {$/;"	f
table_printf_json	deps/jemalloc/test/unit/emitter.c	/^static const char *table_printf_json =$/;"	v	file:
table_printf_table	deps/jemalloc/test/unit/emitter.c	/^static const char *table_printf_table =$/;"	v	file:
table_row_json	deps/jemalloc/test/unit/emitter.c	/^static const char *table_row_json =$/;"	v	file:
table_row_table	deps/jemalloc/test/unit/emitter.c	/^static const char *table_row_table =$/;"	v	file:
tag_error	deps/lua/src/lauxlib.c	/^static void tag_error (lua_State *L, int narg, int tag) {$/;"	f	file:
tags	tests/support/server.tcl	/^proc tags {tags code} {$/;"	p
tags_acceptable	tests/support/server.tcl	/^proc tags_acceptable {err_return} {$/;"	p
tail	deps/hiredis/async.h	/^    redisCallback *head, *tail;$/;"	m	struct:redisCallbackList
tail	src/adlist.h	/^    listNode *tail;$/;"	m	struct:list
tail	src/quicklist.h	/^    quicklistNode *tail;$/;"	m	struct:quicklist
tail	src/server.h	/^    struct zskiplistNode *header, *tail;$/;"	m	struct:zskiplist	typeref:struct:zskiplist::
tailcalls	deps/lua/src/lstate.h	/^  int tailcalls;  \/* number of tail calls lost under this entry *\/$/;"	m	struct:CallInfo
target	src/server.h	/^    int argc, dbid, target;$/;"	m	struct:redisOp
target	src/server.h	/^    robj *target;           \/* The key that should receive the element,$/;"	m	struct:blockingState
target_replica_host	src/server.h	/^    char *target_replica_host; \/* Failover target host. If null during a$/;"	m	struct:redisServer
target_replica_port	src/server.h	/^    int target_replica_port; \/* Failover target port *\/$/;"	m	struct:redisServer
task	deps/hiredis/read.h	/^    redisReadTask **task;$/;"	m	struct:redisReader
tasks	deps/hiredis/read.h	/^    int tasks;$/;"	m	struct:redisReader
tcache	deps/jemalloc/include/jemalloc/internal/tcache_structs.h	/^		tcache_t	*tcache;$/;"	m	union:tcaches_s::__anon149
tcache_alloc_large	deps/jemalloc/include/jemalloc/internal/tcache_inlines.h	/^tcache_alloc_large(tsd_t *tsd, arena_t *arena, tcache_t *tcache, size_t size,$/;"	f
tcache_alloc_small	deps/jemalloc/include/jemalloc/internal/tcache_inlines.h	/^tcache_alloc_small(tsd_t *tsd, arena_t *arena, tcache_t *tcache,$/;"	f
tcache_alloc_small_hard	deps/jemalloc/src/tcache.c	/^tcache_alloc_small_hard(tsdn_t *tsdn, arena_t *arena, tcache_t *tcache,$/;"	f
tcache_arena_associate	deps/jemalloc/src/tcache.c	/^tcache_arena_associate(tsdn_t *tsdn, tcache_t *tcache, arena_t *arena) {$/;"	f
tcache_arena_dissociate	deps/jemalloc/src/tcache.c	/^tcache_arena_dissociate(tsdn_t *tsdn, tcache_t *tcache) {$/;"	f	file:
tcache_arena_reassociate	deps/jemalloc/src/tcache.c	/^tcache_arena_reassociate(tsdn_t *tsdn, tcache_t *tcache, arena_t *arena) {$/;"	f
tcache_available	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_a.h	/^tcache_available(tsd_t *tsd) {$/;"	f
tcache_bin_flush_large	deps/jemalloc/src/tcache.c	/^tcache_bin_flush_large(tsd_t *tsd, cache_bin_t *tbin, szind_t binind,$/;"	f
tcache_bin_flush_small	deps/jemalloc/src/tcache.c	/^tcache_bin_flush_small(tsd_t *tsd, tcache_t *tcache, cache_bin_t *tbin,$/;"	f
tcache_bin_info	deps/jemalloc/src/tcache.c	/^cache_bin_info_t	*tcache_bin_info;$/;"	v
tcache_boot	deps/jemalloc/src/tcache.c	/^tcache_boot(tsdn_t *tsdn) {$/;"	f
tcache_bytes	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	atomic_zu_t		tcache_bytes; \/* Derived. *\/$/;"	m	struct:arena_stats_s
tcache_cleanup	deps/jemalloc/src/tcache.c	/^tcache_cleanup(tsd_t *tsd) {$/;"	f
tcache_create_ctl	deps/jemalloc/src/ctl.c	/^tcache_create_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	file:
tcache_create_explicit	deps/jemalloc/src/tcache.c	/^tcache_create_explicit(tsd_t *tsd) {$/;"	f
tcache_dalloc_large	deps/jemalloc/include/jemalloc/internal/tcache_inlines.h	/^tcache_dalloc_large(tsd_t *tsd, tcache_t *tcache, void *ptr, szind_t binind,$/;"	f
tcache_dalloc_small	deps/jemalloc/include/jemalloc/internal/tcache_inlines.h	/^tcache_dalloc_small(tsd_t *tsd, tcache_t *tcache, void *ptr, szind_t binind,$/;"	f
tcache_destroy	deps/jemalloc/src/tcache.c	/^tcache_destroy(tsd_t *tsd, tcache_t *tcache, bool tsd_tcache) {$/;"	f	file:
tcache_destroy_ctl	deps/jemalloc/src/ctl.c	/^tcache_destroy_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	file:
tcache_enabled_get	deps/jemalloc/include/jemalloc/internal/tcache_inlines.h	/^tcache_enabled_get(tsd_t *tsd) {$/;"	f
tcache_enabled_set	deps/jemalloc/include/jemalloc/internal/tcache_inlines.h	/^tcache_enabled_set(tsd_t *tsd, bool enabled) {$/;"	f
tcache_event	deps/jemalloc/include/jemalloc/internal/tcache_inlines.h	/^tcache_event(tsd_t *tsd, tcache_t *tcache) {$/;"	f
tcache_event_hard	deps/jemalloc/src/tcache.c	/^tcache_event_hard(tsd_t *tsd, tcache_t *tcache) {$/;"	f
tcache_flush	deps/jemalloc/src/tcache.c	/^tcache_flush(tsd_t *tsd) {$/;"	f
tcache_flush_cache	deps/jemalloc/src/tcache.c	/^tcache_flush_cache(tsd_t *tsd, tcache_t *tcache) {$/;"	f	file:
tcache_flush_ctl	deps/jemalloc/src/ctl.c	/^tcache_flush_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	file:
tcache_get	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_a.h	/^tcache_get(tsd_t *tsd) {$/;"	f
tcache_ind	deps/jemalloc/src/jemalloc.c	/^	unsigned tcache_ind;$/;"	m	struct:dynamic_opts_s	file:
tcache_init	deps/jemalloc/src/tcache.c	/^tcache_init(tsd_t *tsd, tcache_t *tcache, void *avail_stack) {$/;"	f	file:
tcache_large_bin_get	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_a.h	/^tcache_large_bin_get(tcache_t *tcache, szind_t binind) {$/;"	f
tcache_maxclass	deps/jemalloc/src/tcache.c	/^size_t			tcache_maxclass;$/;"	v
tcache_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t	tcache_node[] = {$/;"	v	file:
tcache_postfork_child	deps/jemalloc/src/tcache.c	/^tcache_postfork_child(tsdn_t *tsdn) {$/;"	f
tcache_postfork_parent	deps/jemalloc/src/tcache.c	/^tcache_postfork_parent(tsdn_t *tsdn) {$/;"	f
tcache_prefork	deps/jemalloc/src/tcache.c	/^tcache_prefork(tsdn_t *tsdn) {$/;"	f
tcache_ql	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	ql_head(tcache_t)			tcache_ql;$/;"	m	struct:arena_s
tcache_ql_mtx	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	malloc_mutex_t				tcache_ql_mtx;$/;"	m	struct:arena_s
tcache_s	deps/jemalloc/include/jemalloc/internal/tcache_structs.h	/^struct tcache_s {$/;"	s
tcache_salloc	deps/jemalloc/src/tcache.c	/^tcache_salloc(tsdn_t *tsdn, const void *ptr) {$/;"	f
tcache_small_bin_get	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_a.h	/^tcache_small_bin_get(tcache_t *tcache, szind_t binind) {$/;"	f
tcache_stats_merge	deps/jemalloc/src/tcache.c	/^tcache_stats_merge(tsdn_t *tsdn, tcache_t *tcache, arena_t *arena) {$/;"	f
tcache_t	deps/jemalloc/include/jemalloc/internal/tcache_types.h	/^typedef struct tcache_s tcache_t;$/;"	t	typeref:struct:tcache_s
tcaches	deps/jemalloc/src/tcache.c	/^tcaches_t		*tcaches;$/;"	v
tcaches_avail	deps/jemalloc/src/tcache.c	/^static tcaches_t	*tcaches_avail;$/;"	v	file:
tcaches_create	deps/jemalloc/src/tcache.c	/^tcaches_create(tsd_t *tsd, unsigned *r_ind) {$/;"	f
tcaches_create_prep	deps/jemalloc/src/tcache.c	/^tcaches_create_prep(tsd_t *tsd) {$/;"	f	file:
tcaches_destroy	deps/jemalloc/src/tcache.c	/^tcaches_destroy(tsd_t *tsd, unsigned ind) {$/;"	f
tcaches_elm_remove	deps/jemalloc/src/tcache.c	/^tcaches_elm_remove(tsd_t *tsd, tcaches_t *elm) {$/;"	f	file:
tcaches_flush	deps/jemalloc/src/tcache.c	/^tcaches_flush(tsd_t *tsd, unsigned ind) {$/;"	f
tcaches_get	deps/jemalloc/include/jemalloc/internal/tcache_inlines.h	/^tcaches_get(tsd_t *tsd, unsigned ind) {$/;"	f
tcaches_mtx	deps/jemalloc/src/tcache.c	/^static malloc_mutex_t	tcaches_mtx;$/;"	v	file:
tcaches_past	deps/jemalloc/src/tcache.c	/^static unsigned		tcaches_past;$/;"	v	file:
tcaches_s	deps/jemalloc/include/jemalloc/internal/tcache_structs.h	/^struct tcaches_s {$/;"	s
tcaches_t	deps/jemalloc/include/jemalloc/internal/tcache_types.h	/^typedef struct tcaches_s tcaches_t;$/;"	t	typeref:struct:tcaches_s
tconcat	deps/lua/src/ltablib.c	/^static int tconcat (lua_State *L) {$/;"	f	file:
tcp	deps/hiredis/hiredis.h	/^        } tcp;$/;"	m	union:__anon80::__anon81	typeref:struct:__anon80::__anon81::__anon82
tcp	deps/hiredis/hiredis.h	/^    } tcp;$/;"	m	struct:redisContext	typeref:struct:redisContext::__anon83
tcp	deps/hiredis/test.c	/^    } tcp;$/;"	m	struct:config	typeref:struct:config::__anon90	file:
tcp_backlog	src/server.h	/^    int tcp_backlog;            \/* TCP listen() backlog *\/$/;"	m	struct:redisServer
tcpkeepalive	src/server.h	/^    int tcpkeepalive;               \/* Set SO_KEEPALIVE if non-zero. *\/$/;"	m	struct:redisServer
tctx_link	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	rb_node(prof_tctx_t)	tctx_link;$/;"	m	struct:prof_tctx_s
tctx_uid	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	uint64_t		tctx_uid;$/;"	m	struct:prof_tctx_s
tctx_uid_next	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	uint64_t		tctx_uid_next;$/;"	m	struct:prof_tdata_s
tctxs	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	prof_tctx_tree_t	tctxs;$/;"	m	struct:prof_gctx_s
tdata	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	prof_tdata_t		*tdata;$/;"	m	struct:prof_tctx_s
tdata_link	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	rb_node(prof_tdata_t)	tdata_link;$/;"	m	struct:prof_tdata_s
tdata_locks	deps/jemalloc/src/prof.c	/^static malloc_mutex_t	*tdata_locks;$/;"	v	file:
tdatas	deps/jemalloc/src/prof.c	/^static prof_tdata_tree_t	tdatas;$/;"	v	file:
tdatas_mtx	deps/jemalloc/src/prof.c	/^static malloc_mutex_t	tdatas_mtx;$/;"	v	file:
teardown_acl	tests/sentinel/tests/09-acl-support.tcl	/^proc teardown_acl {} {$/;"	p
tell	src/rio.h	/^    off_t (*tell)(struct _rio *);$/;"	m	struct:_rio
test	deps/hiredis/test.c	67;"	d	file:
test	deps/jemalloc/configure	/^    test()$/;"	f
test	deps/jemalloc/test/include/test/test.h	310;"	d
test	deps/lua/test/factorial.lua	/^function test(x)$/;"	f
test	deps/lua/test/fib.lua	/^function test(s,f)$/;"	f
test	tests/instances.tcl	/^proc test {descr code} {$/;"	p
test	tests/support/test.tcl	/^proc test {name code {okpattern undefined} {options undefined}} {$/;"	p
test1	deps/jemalloc/configure	/^    test1()$/;"	f
test2	deps/jemalloc/configure	/^    test2()$/;"	f
test2bits	deps/lua/src/lgc.h	37;"	d
test3	deps/jemalloc/configure	/^    test3()$/;"	f
testAMode	deps/lua/src/lopcodes.h	257;"	d
testHashingFunction	utils/tracking_collisions.c	/^unsigned long testHashingFunction(uint64_t (*hash)(char *, size_t)) {$/;"	f
testTMode	deps/lua/src/lopcodes.h	258;"	d
test_allocator_injection	deps/hiredis/test.c	/^static void test_allocator_injection(void) {$/;"	f	file:
test_append_formatted_commands	deps/hiredis/test.c	/^static void test_append_formatted_commands(struct config config) {$/;"	f	file:
test_bitmap_init_body	deps/jemalloc/test/unit/bitmap.c	/^test_bitmap_init_body(const bitmap_info_t *binfo, size_t nbits) {$/;"	f	file:
test_bitmap_initializer_body	deps/jemalloc/test/unit/bitmap.c	/^test_bitmap_initializer_body(const bitmap_info_t *binfo, size_t nbits) {$/;"	f	file:
test_bitmap_set_body	deps/jemalloc/test/unit/bitmap.c	/^test_bitmap_set_body(const bitmap_info_t *binfo, size_t nbits) {$/;"	f	file:
test_bitmap_size_body	deps/jemalloc/test/unit/bitmap.c	/^test_bitmap_size_body(const bitmap_info_t *binfo, size_t nbits,$/;"	f	file:
test_bitmap_unset_body	deps/jemalloc/test/unit/bitmap.c	/^test_bitmap_unset_body(const bitmap_info_t *binfo, size_t nbits) {$/;"	f	file:
test_bitmap_xfu_body	deps/jemalloc/test/unit/bitmap.c	/^test_bitmap_xfu_body(const bitmap_info_t *binfo, size_t nbits) {$/;"	f	file:
test_blocking_connection	deps/hiredis/test.c	/^static void test_blocking_connection(struct config config) {$/;"	f	file:
test_blocking_connection_errors	deps/hiredis/test.c	/^static void test_blocking_connection_errors(void) {$/;"	f	file:
test_blocking_connection_timeouts	deps/hiredis/test.c	/^static void test_blocking_connection_timeouts(struct config config) {$/;"	f	file:
test_blocking_io_errors	deps/hiredis/test.c	/^static void test_blocking_io_errors(struct config config) {$/;"	f	file:
test_call_generic	tests/modules/misc.c	/^int test_call_generic(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
test_call_info	tests/modules/misc.c	/^int test_call_info(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
test_callback_t	deps/jemalloc/include/jemalloc/internal/tsd.h	/^typedef void (*test_callback_t)(int *);$/;"	t
test_client_main	tests/test_helper.tcl	/^proc test_client_main server_port {$/;"	p
test_clientinfo	tests/modules/misc.c	/^int test_clientinfo(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
test_cluster_publish	tests/cluster/tests/09-pubsub.tcl	/^proc test_cluster_publish {instance instances} {$/;"	p
test_cond	deps/hiredis/test.c	68;"	d	file:
test_cond	src/testhelp.h	44;"	d
test_count	deps/jemalloc/test/src/test.c	/^static unsigned		test_count = 0;$/;"	v	file:
test_counts	deps/jemalloc/test/src/test.c	/^static test_status_t	test_counts[test_status_count] = {0, 0, 0};$/;"	v	file:
test_createtimer	tests/modules/timer.c	/^int test_createtimer(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
test_dbsize	tests/modules/misc.c	/^int test_dbsize(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
test_empty_list	deps/jemalloc/test/unit/ql.c	/^test_empty_list(list_head_t *head) {$/;"	f	file:
test_entries_list	deps/jemalloc/test/unit/ql.c	/^test_entries_list(list_head_t *head, list_t *entries, unsigned nentries) {$/;"	f	file:
test_entries_ring	deps/jemalloc/test/unit/qr.c	/^test_entries_ring(ring_t *entries) {$/;"	f	file:
test_eof	deps/lua/src/liolib.c	/^static int test_eof (lua_State *L, FILE *f) {$/;"	f	file:
test_extent_body	deps/jemalloc/test/integration/extent.c	/^test_extent_body(unsigned arena_ind) {$/;"	f	file:
test_fail	deps/jemalloc/test/src/test.c	/^test_fail(const char *format, ...) {$/;"	f
test_flushall	tests/modules/misc.c	/^int test_flushall(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
test_format_commands	deps/hiredis/test.c	/^static void test_format_commands(void) {$/;"	f	file:
test_free_null	deps/hiredis/test.c	/^static void test_free_null(void) {$/;"	f	file:
test_getclientcert	tests/modules/misc.c	/^int test_getclientcert(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
test_getlfu	tests/modules/misc.c	/^int test_getlfu(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
test_getlru	tests/modules/misc.c	/^int test_getlru(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
test_gettimer	tests/modules/timer.c	/^int test_gettimer(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
test_independent_entries	deps/jemalloc/test/unit/qr.c	/^test_independent_entries(ring_t *entries) {$/;"	f	file:
test_interactive_cli	tests/integration/redis-cli.tcl	/^    proc test_interactive_cli {name code} {$/;"	p
test_invalid_timeout_errors	deps/hiredis/test.c	/^static void test_invalid_timeout_errors(struct config config) {$/;"	f	file:
test_is_reentrant	deps/jemalloc/test/src/test.c	/^test_is_reentrant() {$/;"	f
test_is_selected	src/redis-benchmark.c	/^int test_is_selected(char *name) {$/;"	f
test_junk	deps/jemalloc/test/unit/junk.c	/^test_junk(size_t sz_min, size_t sz_max) {$/;"	f	file:
test_ld_conv	tests/modules/misc.c	/^int test_ld_conv(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
test_ll2string	src/util.c	/^static void test_ll2string(void) {$/;"	f	file:
test_log_tsctx	tests/modules/misc.c	/^int test_log_tsctx(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
test_manual_hook_auto_arena	deps/jemalloc/test/integration/extent.c	/^test_manual_hook_auto_arena(void) {$/;"	f	file:
test_manual_hook_body	deps/jemalloc/test/integration/extent.c	/^test_manual_hook_body(void) {$/;"	f	file:
test_memory_efficiency	tests/unit/memefficiency.tcl	/^proc test_memory_efficiency {range} {$/;"	p
test_name	deps/jemalloc/test/src/test.c	/^static const char *	test_name = "";$/;"	v	file:
test_no_malloc_init	deps/jemalloc/test/include/test/test.h	316;"	d
test_no_reentrancy	deps/jemalloc/test/include/test/test.h	313;"	d
test_nontty_cli	tests/integration/redis-cli.tcl	/^    proc test_nontty_cli {name code} {$/;"	p
test_privdata_hooks	deps/hiredis/test.c	/^static void test_privdata_hooks(struct config config) {$/;"	f	file:
test_prng_lg_range_u32	deps/jemalloc/test/unit/prng.c	/^test_prng_lg_range_u32(bool atomic) {$/;"	f	file:
test_prng_lg_range_u64	deps/jemalloc/test/unit/prng.c	/^test_prng_lg_range_u64(void) {$/;"	f	file:
test_prng_lg_range_zu	deps/jemalloc/test/unit/prng.c	/^test_prng_lg_range_zu(bool atomic) {$/;"	f	file:
test_prng_range_u32	deps/jemalloc/test/unit/prng.c	/^test_prng_range_u32(bool atomic) {$/;"	f	file:
test_prng_range_u64	deps/jemalloc/test/unit/prng.c	/^test_prng_range_u64(void) {$/;"	f	file:
test_prng_range_zu	deps/jemalloc/test/unit/prng.c	/^test_prng_range_zu(bool atomic) {$/;"	f	file:
test_psync	tests/integration/replication-psync.tcl	/^proc test_psync {descr duration backlog_size backlog_ttl delay cond mdl sdl reconnect} {$/;"	p
test_randomkey	tests/modules/misc.c	/^int test_randomkey(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
test_redis_cli_rdb_dump	tests/integration/redis-cli.tcl	/^    proc test_redis_cli_rdb_dump {} {$/;"	p
test_redisversion	tests/modules/misc.c	/^int test_redisversion(RedisModuleCtx *ctx, RedisModuleString **argv, int argc){$/;"	f
test_repeat_background_thread_ctl	deps/jemalloc/test/unit/background_thread.c	/^test_repeat_background_thread_ctl(bool before) {$/;"	f	file:
test_reply_reader	deps/hiredis/test.c	/^static void test_reply_reader(void) {$/;"	f	file:
test_report	src/testhelp.h	48;"	d
test_resp3_push_handler	deps/hiredis/test.c	/^static void test_resp3_push_handler(redisContext *c) {$/;"	f	file:
test_resp3_push_options	deps/hiredis/test.c	/^static void test_resp3_push_options(struct config config) {$/;"	f	file:
test_rtree	deps/jemalloc/test/unit/rtree.c	/^rtree_t test_rtree;$/;"	v
test_server_cron	tests/test_helper.tcl	/^proc test_server_cron {} {$/;"	p
test_server_main	tests/test_helper.tcl	/^proc test_server_main {} {$/;"	p
test_setlfu	tests/modules/misc.c	/^int test_setlfu(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
test_setlru	tests/modules/misc.c	/^int test_setlru(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
test_skip	deps/jemalloc/test/src/test.c	/^test_skip(const char *format, ...) {$/;"	f
test_skip_if	deps/jemalloc/test/include/test/test.h	319;"	d
test_skipped	deps/hiredis/test.c	69;"	d	file:
test_slave_buffers	tests/unit/maxmemory.tcl	/^proc test_slave_buffers {test_name cmd_count payload_len limit_memory pipeline} {$/;"	p
test_slave_load_expired_keys	tests/cluster/tests/14-consistency-check.tcl	/^proc test_slave_load_expired_keys {aof} {$/;"	p
test_split_entries	deps/jemalloc/test/unit/qr.c	/^test_split_entries(ring_t *entries) {$/;"	f	file:
test_status	deps/jemalloc/test/src/test.c	/^static test_status_t	test_status = test_status_pass;$/;"	v	file:
test_status_count	deps/jemalloc/test/include/test/test.h	/^	test_status_count = 3$/;"	e	enum:__anon125
test_status_fail	deps/jemalloc/test/include/test/test.h	/^	test_status_fail = 2,$/;"	e	enum:__anon125
test_status_pass	deps/jemalloc/test/include/test/test.h	/^	test_status_pass = 0,$/;"	e	enum:__anon125
test_status_skip	deps/jemalloc/test/include/test/test.h	/^	test_status_skip = 1,$/;"	e	enum:__anon125
test_status_string	deps/jemalloc/test/src/test.c	/^test_status_string(test_status_t test_status) {$/;"	f	file:
test_status_t	deps/jemalloc/test/include/test/test.h	/^} test_status_t;$/;"	t	typeref:enum:__anon125
test_stoptimer	tests/modules/timer.c	/^int test_stoptimer(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
test_string2l	src/util.c	/^static void test_string2l(void) {$/;"	f	file:
test_string2ll	src/util.c	/^static void test_string2ll(void) {$/;"	f	file:
test_switch_background_thread_ctl	deps/jemalloc/test/unit/background_thread.c	/^test_switch_background_thread_ctl(bool new_val) {$/;"	f	file:
test_t	deps/jemalloc/test/include/test/test.h	/^typedef void (test_t)(void);$/;"	t
test_then_block	deps/lua/src/lparser.c	/^static int test_then_block (LexState *ls) {$/;"	f	file:
test_threads	deps/jemalloc/msvc/test_threads/test_threads.cpp	/^int test_threads() {$/;"	f
test_throughput	deps/hiredis/test.c	/^static void test_throughput(struct config config) {$/;"	f	file:
test_tty_cli	tests/integration/redis-cli.tcl	/^    proc test_tty_cli {name code} {$/;"	p
test_zero	deps/jemalloc/test/integration/xallocx.c	/^test_zero(size_t szmin, size_t szmax) {$/;"	f	file:
test_zero	deps/jemalloc/test/unit/zero.c	/^test_zero(size_t sz_min, size_t sz_max) {$/;"	f	file:
testbit	deps/lua/src/lgc.h	34;"	d
testbits	deps/lua/src/lgc.h	29;"	d
testit	utils/lru/test-lru.rb	/^def testit(filename)$/;"	f
testnext	deps/lua/src/lparser.c	/^static int testnext (LexState *ls, int c) {$/;"	f	file:
testrdb_aux_load	tests/modules/testrdb.c	/^int testrdb_aux_load(RedisModuleIO *rdb, int encver, int when) {$/;"	f
testrdb_aux_save	tests/modules/testrdb.c	/^void testrdb_aux_save(RedisModuleIO *rdb, int when) {$/;"	f
testrdb_get_after	tests/modules/testrdb.c	/^int testrdb_get_after(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
testrdb_get_before	tests/modules/testrdb.c	/^int testrdb_get_before(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
testrdb_get_key	tests/modules/testrdb.c	/^int testrdb_get_key(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
testrdb_set_after	tests/modules/testrdb.c	/^int testrdb_set_after(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
testrdb_set_before	tests/modules/testrdb.c	/^int testrdb_set_before(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
testrdb_set_key	tests/modules/testrdb.c	/^int testrdb_set_key(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f
testrdb_type	tests/modules/testrdb.c	/^RedisModuleType *testrdb_type = NULL;$/;"	v
testrdb_type_free	tests/modules/testrdb.c	/^void testrdb_type_free(void *value) {$/;"	f
testrdb_type_load	tests/modules/testrdb.c	/^void *testrdb_type_load(RedisModuleIO *rdb, int encver) {$/;"	f
testrdb_type_save	tests/modules/testrdb.c	/^void testrdb_type_save(RedisModuleIO *rdb, void *value) {$/;"	f
tests	deps/hiredis/test.c	/^static int tests = 0, fails = 0, skips = 0;$/;"	v	file:
tests	src/redis-benchmark.c	/^    char *tests;$/;"	m	struct:config	file:
testsorts	deps/lua/test/sort.lua	/^function testsorts(x)$/;"	f
th	deps/lua/src/lstate.h	/^  struct lua_State th;  \/* thread *\/$/;"	m	union:GCObject	typeref:struct:GCObject::lua_State
thd_create	deps/jemalloc/test/src/thd.c	/^thd_create(thd_t *thd, void *(*proc)(void *), void *arg) {$/;"	f
thd_join	deps/jemalloc/test/src/thd.c	/^thd_join(thd_t thd, void **ret) {$/;"	f
thd_receiver_start	deps/jemalloc/test/unit/mq.c	/^thd_receiver_start(void *arg) {$/;"	f	file:
thd_sender_start	deps/jemalloc/test/unit/mq.c	/^thd_sender_start(void *arg) {$/;"	f	file:
thd_start	deps/jemalloc/test/integration/MALLOCX_ARENA.c	/^thd_start(void *arg) {$/;"	f
thd_start	deps/jemalloc/test/integration/allocated.c	/^thd_start(void *arg) {$/;"	f
thd_start	deps/jemalloc/test/integration/thread_arena.c	/^thd_start(void *arg) {$/;"	f
thd_start	deps/jemalloc/test/integration/thread_tcache_enabled.c	/^thd_start(void *arg) {$/;"	f
thd_start	deps/jemalloc/test/unit/mtx.c	/^thd_start(void *varg) {$/;"	f	file:
thd_start	deps/jemalloc/test/unit/prof_accum.c	/^thd_start(void *varg) {$/;"	f	file:
thd_start	deps/jemalloc/test/unit/prof_reset.c	/^thd_start(void *varg) {$/;"	f	file:
thd_start	deps/jemalloc/test/unit/prof_thread_name.c	/^thd_start(void *varg) {$/;"	f	file:
thd_start	deps/jemalloc/test/unit/retained.c	/^thd_start(void *arg) {$/;"	f	file:
thd_start	deps/jemalloc/test/unit/stats.c	/^thd_start(void *arg) {$/;"	f
thd_start	deps/jemalloc/test/unit/tsd.c	/^thd_start(void *arg) {$/;"	f	file:
thd_start_arg_t	deps/jemalloc/test/unit/mtx.c	/^} thd_start_arg_t;$/;"	t	typeref:struct:__anon119	file:
thd_start_reincarnated	deps/jemalloc/test/unit/tsd.c	/^thd_start_reincarnated(void *arg) {$/;"	f	file:
thd_t	deps/jemalloc/test/include/test/thd.h	/^typedef HANDLE thd_t;$/;"	t
thd_t	deps/jemalloc/test/include/test/thd.h	/^typedef pthread_t thd_t;$/;"	t
the_end	tests/test_helper.tcl	/^proc the_end {} {$/;"	p
thislib	deps/lua/src/lua_struct.c	/^static const struct luaL_Reg thislib[] = {$/;"	v	typeref:struct:luaL_Reg	file:
thp_mode_always	deps/jemalloc/include/jemalloc/internal/pages.h	/^	thp_mode_always        = 1, \/* Always set MADV_HUGEPAGE. *\/$/;"	e	enum:__anon148
thp_mode_default	deps/jemalloc/include/jemalloc/internal/pages.h	/^	thp_mode_default       = 0, \/* Do not change hugepage settings. *\/$/;"	e	enum:__anon148
thp_mode_names	deps/jemalloc/src/pages.c	/^const char *thp_mode_names[] = {$/;"	v
thp_mode_names_limit	deps/jemalloc/include/jemalloc/internal/pages.h	/^	thp_mode_names_limit   = 3, \/* Used for option processing. *\/$/;"	e	enum:__anon148
thp_mode_never	deps/jemalloc/include/jemalloc/internal/pages.h	/^	thp_mode_never         = 2, \/* Always set MADV_NOHUGEPAGE. *\/$/;"	e	enum:__anon148
thp_mode_not_supported	deps/jemalloc/include/jemalloc/internal/pages.h	/^	thp_mode_not_supported = 3  \/* No THP support detected. *\/$/;"	e	enum:__anon148
thp_mode_t	deps/jemalloc/include/jemalloc/internal/pages.h	/^} thp_mode_t;$/;"	t	typeref:enum:__anon148
thr_discrim	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	uint64_t		thr_discrim;$/;"	m	struct:prof_tctx_s
thr_discrim	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	uint64_t		thr_discrim;$/;"	m	struct:prof_tdata_s
thr_uid	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	uint64_t		thr_uid;$/;"	m	struct:prof_tctx_s
thr_uid	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	uint64_t		thr_uid;$/;"	m	struct:prof_tdata_s
thread	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^	pthread_t		thread;$/;"	m	struct:background_thread_info_s
thread	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^	pthread_t thread;$/;"	m	struct:tsd_init_block_s
thread	src/redis-benchmark.c	/^    pthread_t thread;$/;"	m	struct:benchmarkThread	file:
threadMain	tests/modules/propagate.c	/^void *threadMain(void *arg) {$/;"	f
thread_arena_ctl	deps/jemalloc/src/ctl.c	/^thread_arena_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	file:
thread_id	src/redis-benchmark.c	/^    int thread_id;$/;"	m	struct:_client	file:
thread_name	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	char			*thread_name;$/;"	m	struct:prof_tdata_s
thread_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t	thread_node[] = {$/;"	v	file:
thread_prof_active_ctl	deps/jemalloc/src/ctl.c	/^thread_prof_active_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	file:
thread_prof_name_ctl	deps/jemalloc/src/ctl.c	/^thread_prof_name_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	file:
thread_prof_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t	thread_prof_node[] = {$/;"	v	file:
thread_tcache_enabled_ctl	deps/jemalloc/src/ctl.c	/^thread_tcache_enabled_ctl(tsd_t *tsd, const size_t *mib, size_t miblen,$/;"	f	file:
thread_tcache_flush_ctl	deps/jemalloc/src/ctl.c	/^thread_tcache_flush_ctl(tsd_t *tsd, const size_t *mib, size_t miblen,$/;"	f	file:
thread_tcache_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t	thread_tcache_node[] = {$/;"	v	file:
threads	src/redis-benchmark.c	/^    struct benchmarkThread **threads;$/;"	m	struct:config	typeref:struct:config::benchmarkThread	file:
threshold	src/redis-cli.c	/^    float threshold;$/;"	m	struct:clusterManagerCommand	file:
thvalue	deps/lua/src/lobject.h	101;"	d
tick	deps/jemalloc/include/jemalloc/internal/ticker.h	/^	int32_t tick;$/;"	m	struct:__anon160
ticker_copy	deps/jemalloc/include/jemalloc/internal/ticker.h	/^ticker_copy(ticker_t *ticker, const ticker_t *other) {$/;"	f
ticker_fixup	deps/jemalloc/include/jemalloc/internal/ticker.h	/^ticker_fixup(ticker_t *ticker) {$/;"	f
ticker_init	deps/jemalloc/include/jemalloc/internal/ticker.h	/^ticker_init(ticker_t *ticker, int32_t nticks) {$/;"	f
ticker_read	deps/jemalloc/include/jemalloc/internal/ticker.h	/^ticker_read(const ticker_t *ticker) {$/;"	f
ticker_t	deps/jemalloc/include/jemalloc/internal/ticker.h	/^} ticker_t;$/;"	t	typeref:struct:__anon160
ticker_tick	deps/jemalloc/include/jemalloc/internal/ticker.h	/^ticker_tick(ticker_t *ticker) {$/;"	f
ticker_ticks	deps/jemalloc/include/jemalloc/internal/ticker.h	/^ticker_ticks(ticker_t *ticker, int32_t nticks) {$/;"	f
ticks_per_half_distance	deps/hdr_histogram/hdr_histogram.h	/^    int32_t ticks_per_half_distance;$/;"	m	struct:hdr_iter_percentiles
tilt	src/sentinel.c	/^    int tilt;           \/* Are we in TILT mode? *\/$/;"	m	struct:sentinelState	file:
tilt_start_time	src/sentinel.c	/^    mstime_t tilt_start_time;       \/* When TITL started. *\/$/;"	m	struct:sentinelState	file:
time	src/bio.c	/^    time_t time; \/* Time at which the job was created. *\/$/;"	m	struct:bio_job	file:
time	src/cluster.h	/^    mstime_t time;             \/* Time of the last report from this node. *\/$/;"	m	struct:clusterNodeFailReport
time	src/latency.h	/^    int32_t time; \/* We don't use time_t to force 4 bytes usage everywhere. *\/$/;"	m	struct:latencySample
time	src/server.h	/^    *time, *pxat, *px, *retrycount, *force, *justid, $/;"	m	struct:sharedObjectsStruct
time	src/slowlog.h	/^    time_t time;        \/* Unix time at which the query was executed. *\/$/;"	m	struct:slowlogEntry
timeCommand	src/server.c	/^void timeCommand(client *c) {$/;"	f
timeEventHead	src/ae.h	/^    aeTimeEvent *timeEventHead;$/;"	m	struct:aeEventLoop
timeEventNextId	src/ae.h	/^    long long timeEventNextId;$/;"	m	struct:aeEventLoop
timeInMilliseconds	src/dict.c	/^long long timeInMilliseconds(void) {$/;"	f
timeProc	src/ae.h	/^    aeTimeProc *timeProc;$/;"	m	struct:aeTimeEvent
time_func	deps/jemalloc/test/stress/microbench.c	/^time_func(timedelta_t *timer, uint64_t nwarmup, uint64_t niter,$/;"	f	file:
time_independent_strcmp	src/acl.c	/^int time_independent_strcmp(char *a, char *b) {$/;"	f
time_mock	deps/jemalloc/test/unit/decay.c	/^static nstime_t time_mock;$/;"	v	file:
time_ms	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	atomic_zd_t		time_ms;$/;"	m	struct:arena_decay_s
timedelta_t	deps/jemalloc/test/include/test/timer.h	/^} timedelta_t;$/;"	t	typeref:struct:__anon126
timeout	deps/hiredis/test.c	/^        struct timeval timeout;$/;"	m	struct:config::__anon90	typeref:struct:config::__anon90::timeval	file:
timeout	src/redis-cli.c	/^    int timeout;$/;"	m	struct:clusterManagerCommand	file:
timeout	src/server.h	/^    mstime_t timeout;       \/* Blocking operation timeout. If UNIX current time$/;"	m	struct:blockingState
timeout_callback	src/module.c	/^    RedisModuleCmdFunc timeout_callback; \/* Reply callback on timeout. *\/$/;"	m	struct:RedisModuleBlockedClient	file:
timer	deps/hiredis/adapters/libev.h	/^    ev_timer timer;$/;"	m	struct:redisLibevEvents
timerHandler	src/modules/hellotimer.c	/^void timerHandler(RedisModuleCtx *ctx, void *data) {$/;"	f
timerHandler	tests/modules/propagate.c	/^void timerHandler(RedisModuleCtx *ctx, void *data) {$/;"	f
timerNestedHandler	tests/modules/propagate.c	/^void timerNestedHandler(RedisModuleCtx *ctx, void *data) {$/;"	f
timer_callback	tests/modules/timer.c	/^static void timer_callback(RedisModuleCtx *ctx, void *data)$/;"	f	file:
timer_ratio	deps/jemalloc/test/src/timer.c	/^timer_ratio(timedelta_t *a, timedelta_t *b, char *buf, size_t buflen) {$/;"	f
timer_start	deps/jemalloc/test/src/timer.c	/^timer_start(timedelta_t *timer) {$/;"	f
timer_stop	deps/jemalloc/test/src/timer.c	/^timer_stop(timedelta_t *timer) {$/;"	f
timer_usec	deps/jemalloc/test/src/timer.c	/^timer_usec(const timedelta_t *timer) {$/;"	f
timezone	src/server.h	/^    time_t timezone;            \/* Cached timezone. As set by tzset(). *\/$/;"	m	struct:redisServer
tinsert	deps/lua/src/ltablib.c	/^static int tinsert (lua_State *L) {$/;"	f	file:
title	src/redis-benchmark.c	/^    const char *title;$/;"	m	struct:config	file:
tls	src/redis-benchmark.c	/^    int tls;$/;"	m	struct:config	file:
tls	src/redis-cli.c	/^    int tls;$/;"	m	struct:config	file:
tlsCleanup	src/tls.c	/^void tlsCleanup(void) {$/;"	f
tlsConfigure	src/tls.c	/^int tlsConfigure(redisTLSContextConfig *ctx_config) {$/;"	f
tlsEventHandler	src/tls.c	/^static void tlsEventHandler(struct aeEventLoop *el, int fd, void *clientData, int mask) {$/;"	f	file:
tlsHandleEvent	src/tls.c	/^static void tlsHandleEvent(tls_connection *conn, int mask) {$/;"	f	file:
tlsHasPendingData	src/tls.c	/^int tlsHasPendingData() {$/;"	f
tlsInit	src/tls.c	/^void tlsInit(void) {$/;"	f
tlsPasswordCallback	src/tls.c	/^static int tlsPasswordCallback(char *buf, int size, int rwflag, void *u) {$/;"	f	file:
tlsProcessPendingData	src/tls.c	/^int tlsProcessPendingData() {$/;"	f
tls_auth_clients	src/server.h	/^    int tls_auth_clients;$/;"	m	struct:redisServer
tls_auth_clients_enum	src/config.c	/^configEnum tls_auth_clients_enum[] = {$/;"	v
tls_cluster	src/server.h	/^    int tls_cluster;$/;"	m	struct:redisServer
tls_connection	src/tls.c	/^typedef struct tls_connection {$/;"	s	file:
tls_connection	src/tls.c	/^} tls_connection;$/;"	t	typeref:struct:tls_connection	file:
tls_ctx_config	src/server.h	/^    redisTLSContextConfig tls_ctx_config;$/;"	m	struct:redisServer
tls_port	src/server.h	/^    int tls_port;               \/* TLS listening port *\/$/;"	m	struct:redisServer
tls_replication	src/server.h	/^    int tls_replication;$/;"	m	struct:redisServer
tlsfd	src/server.h	/^    socketFds tlsfd;            \/* TLS socket file descriptors *\/$/;"	m	struct:redisServer
tmname	deps/lua/src/lstate.h	/^  TString *tmname[TM_N];  \/* array with tag-method names *\/$/;"	m	struct:global_State
tmp	deps/lua/src/lua_cjson.c	/^    strbuf_t *tmp;    \/* Temporary storage for strings *\/$/;"	m	struct:__anon102	file:
tmp_group	exp/merge.py	/^tmp_group=[]$/;"	v
tmpdir	tests/support/tmpfile.tcl	/^proc tmpdir {basename} {$/;"	p
tmpfile	tests/support/tmpfile.tcl	/^proc tmpfile {basename} {$/;"	p
tmudata	deps/lua/src/lstate.h	/^  GCObject *tmudata;  \/* last element of list of userdata to be GC *\/$/;"	m	struct:global_State
to	src/redis-cli.c	/^    char *to;$/;"	m	struct:clusterManagerCommand	file:
to_16bit_minutes	utils/lru/lfu-simulation.c	21;"	d	file:
to_real1	deps/jemalloc/test/include/test/SFMT.h	/^static inline double to_real1(uint32_t v) {$/;"	f
to_real2	deps/jemalloc/test/include/test/SFMT.h	/^static inline double to_real2(uint32_t v) {$/;"	f
to_real3	deps/jemalloc/test/include/test/SFMT.h	/^static inline double to_real3(uint32_t v) {$/;"	f
to_res53	deps/jemalloc/test/include/test/SFMT.h	/^static inline double to_res53(uint64_t v) {$/;"	f
to_res53_mix	deps/jemalloc/test/include/test/SFMT.h	/^static inline double to_res53_mix(uint32_t x, uint32_t y) {$/;"	f
todo_before_sleep	src/cluster.h	/^    int todo_before_sleep; \/* Things to do in clusterBeforeSleep(). *\/$/;"	m	struct:clusterState
tofile	deps/lua/src/liolib.c	/^static FILE *tofile (lua_State *L) {$/;"	f	file:
tofilep	deps/lua/src/liolib.c	54;"	d	file:
token	deps/jemalloc/test/unit/stats_print.c	/^	token_t	token;$/;"	m	struct:parser_s	file:
token	deps/lua/src/llex.h	/^  int token;$/;"	m	struct:Token
token_error	deps/jemalloc/test/unit/stats_print.c	/^token_error(token_t *token) {$/;"	f	file:
token_init	deps/jemalloc/test/unit/stats_print.c	/^token_init(token_t *token, parser_t *parser, token_type_t token_type,$/;"	f	file:
token_t	deps/jemalloc/test/unit/stats_print.c	/^} token_t;$/;"	t	typeref:struct:__anon121	file:
token_type	deps/jemalloc/test/unit/stats_print.c	/^	token_type_t	token_type;$/;"	m	struct:__anon121	file:
token_type_t	deps/jemalloc/test/unit/stats_print.c	/^} token_type_t;$/;"	t	typeref:enum:__anon120	file:
tonumber	deps/lua/src/lvm.h	18;"	d
top	deps/lua/src/lstate.h	/^  StkId	top;  \/* top for this function *\/$/;"	m	struct:CallInfo
top	deps/lua/src/lstate.h	/^  StkId top;  \/* first free slot in the stack *\/$/;"	m	struct:lua_State
toproto	deps/lua/src/luac.c	117;"	d	file:
tostate	deps/lua/src/lstate.c	29;"	d	file:
tostore	deps/lua/src/lparser.c	/^  int tostore;  \/* number of array elements pending to be stored *\/$/;"	m	struct:ConsControl	file:
tostring	deps/lua/src/lvm.h	16;"	d
tot_n_runs	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^	uint64_t		tot_n_runs;$/;"	m	struct:background_thread_info_s
tot_sleep_time	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^	nstime_t		tot_sleep_time;$/;"	m	struct:background_thread_info_s
tot_wait_time	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^	nstime_t		tot_wait_time;$/;"	m	struct:__anon146
total_allocated	src/server.h	/^    size_t total_allocated;$/;"	m	struct:redisMemOverhead
total_count	deps/hdr_histogram/hdr_histogram.h	/^    int64_t total_count;$/;"	m	struct:hdr_histogram
total_count	deps/hdr_histogram/hdr_histogram.h	/^    int64_t total_count;$/;"	m	struct:hdr_iter
total_frag	src/server.h	/^    float total_frag;$/;"	m	struct:redisMemOverhead
total_frag_bytes	src/server.h	/^    ssize_t total_frag_bytes;$/;"	m	struct:redisMemOverhead
total_keys	src/server.h	/^    size_t total_keys;$/;"	m	struct:redisMemOverhead
totalbytes	deps/lua/src/lstate.h	/^  lu_mem totalbytes;  \/* number of bytes currently allocated *\/$/;"	m	struct:global_State
totalsize	src/redis-cli.c	/^    unsigned long long totalsize;$/;"	m	struct:__anon14	file:
totlatency	src/redis-benchmark.c	/^    long long totlatency;$/;"	m	struct:config	file:
totlen	src/cluster.h	/^    uint32_t totlen;    \/* Total length of this message *\/$/;"	m	struct:__anon43
touchAllWatchedKeysInDb	src/multi.c	/^void touchAllWatchedKeysInDb(redisDb *emptied, redisDb *replaced_with) {$/;"	f
touchCommand	src/expire.c	/^void touchCommand(client *c) {$/;"	f
touchWatchedKey	src/multi.c	/^void touchWatchedKey(redisDb *db, robj *key) {$/;"	f
traceback	deps/lua/src/lua.c	/^static int traceback (lua_State *L) {$/;"	f	file:
traceexec	deps/lua/src/lvm.c	/^static void traceexec (lua_State *L, const Instruction *pc) {$/;"	f	file:
traces	src/scripting.c	/^    list *traces; \/* Messages about Redis commands executed since last stop.*\/$/;"	m	struct:ldbState	file:
trackInstantaneousMetric	src/server.c	/^void trackInstantaneousMetric(int metric, long long current_reading) {$/;"	f
trackingBroadcastInvalidationMessages	src/tracking.c	/^void trackingBroadcastInvalidationMessages(void) {$/;"	f
trackingBuildBroadcastReply	src/tracking.c	/^sds trackingBuildBroadcastReply(client *c, rax *keys) {$/;"	f
trackingGetTotalItems	src/tracking.c	/^uint64_t trackingGetTotalItems(void) {$/;"	f
trackingGetTotalKeys	src/tracking.c	/^uint64_t trackingGetTotalKeys(void) {$/;"	f
trackingGetTotalPrefixes	src/tracking.c	/^uint64_t trackingGetTotalPrefixes(void) {$/;"	f
trackingInvalidateKey	src/tracking.c	/^void trackingInvalidateKey(client *c, robj *keyobj) {$/;"	f
trackingInvalidateKeyRaw	src/tracking.c	/^void trackingInvalidateKeyRaw(client *c, char *key, size_t keylen, int bcast) {$/;"	f
trackingInvalidateKeysOnFlush	src/tracking.c	/^void trackingInvalidateKeysOnFlush(int async) {$/;"	f
trackingLimitUsedSlots	src/tracking.c	/^void trackingLimitUsedSlots(void) {$/;"	f
trackingRememberKeyToBroadcast	src/tracking.c	/^void trackingRememberKeyToBroadcast(client *c, char *keyname, size_t keylen) {$/;"	f
trackingRememberKeys	src/tracking.c	/^void trackingRememberKeys(client *c) {$/;"	f
tracking_clients	src/server.h	/^    unsigned int tracking_clients;  \/* # of clients with tracking enabled.*\/$/;"	m	struct:redisServer
tracking_table_max_keys	src/server.h	/^    size_t tracking_table_max_keys; \/* Max number of keys in tracking table. *\/$/;"	m	struct:redisServer
traverseclosure	deps/lua/src/lgc.c	/^static void traverseclosure (global_State *g, Closure *cl) {$/;"	f	file:
traverseproto	deps/lua/src/lgc.c	/^static void traverseproto (global_State *g, Proto *f) {$/;"	f	file:
traversestack	deps/lua/src/lgc.c	/^static void traversestack (global_State *g, lua_State *l) {$/;"	f	file:
traversetable	deps/lua/src/lgc.c	/^static int traversetable (global_State *g, Table *h) {$/;"	f	file:
treatstackoption	deps/lua/src/ldblib.c	/^static void treatstackoption (lua_State *L, lua_State *L1, const char *fname) {$/;"	f	file:
tree_iterate	deps/jemalloc/test/unit/rb.c	/^tree_iterate(tree_t *tree) {$/;"	f	file:
tree_iterate_cb	deps/jemalloc/test/unit/rb.c	/^tree_iterate_cb(tree_t *tree, node_t *node, void *data) {$/;"	f	file:
tree_iterate_reverse	deps/jemalloc/test/unit/rb.c	/^tree_iterate_reverse(tree_t *tree) {$/;"	f	file:
tree_recurse	deps/jemalloc/test/unit/rb.c	/^tree_recurse(node_t *node, unsigned black_height, unsigned black_depth) {$/;"	f	file:
tree_t	deps/jemalloc/test/unit/rb.c	/^typedef rb_tree(node_t) tree_t;$/;"	t	file:
tremove	deps/lua/src/ltablib.c	/^static int tremove (lua_State *L) {$/;"	f	file:
trimReplyUnusedTailSpace	src/networking.c	/^void trimReplyUnusedTailSpace(client *c) {$/;"	f
trimStringObjectIfNeeded	src/object.c	/^void trimStringObjectIfNeeded(robj *o) {$/;"	f
trim_list	tests/unit/type/list.tcl	/^        proc trim_list {type min max} {$/;"	p
trim_strategy	src/t_stream.c	/^    int trim_strategy; \/* TRIM_STRATEGY_* *\/$/;"	m	struct:__anon11	file:
trim_strategy_arg_idx	src/t_stream.c	/^    int trim_strategy_arg_idx; \/* Index of the count in MAXLEN\/MINID, for rewriting. *\/$/;"	m	struct:__anon11	file:
true	deps/jemalloc/include/msvc_compat/C99/stdbool.h	15;"	d
tryObjectEncoding	src/object.c	/^robj *tryObjectEncoding(robj *o) {$/;"	f
tryResizeHashTables	src/server.c	/^void tryResizeHashTables(int dbid) {$/;"	f
try_alloc	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool try_alloc = true;$/;"	v
try_commit	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool try_commit = true;$/;"	v
try_dalloc	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool try_dalloc = true;$/;"	v
try_decommit	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool try_decommit = true;$/;"	v
try_destroy	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool try_destroy = true;$/;"	v
try_merge	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool try_merge = true;$/;"	v
try_purge_forced	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool try_purge_forced = true;$/;"	v
try_purge_lazy	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool try_purge_lazy = true;$/;"	v
try_split	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool try_split = true;$/;"	v
trydecpoint	deps/lua/src/llex.c	/^static void trydecpoint (LexState *ls, SemInfo *seminfo) {$/;"	f	file:
tryfuncTM	deps/lua/src/ldo.c	/^static StkId tryfuncTM (lua_State *L, StkId func) {$/;"	f	file:
ts	deps/lua/src/llex.h	/^  TString *ts;$/;"	m	union:__anon96
ts	deps/lua/src/lstate.h	/^  union TString ts;$/;"	m	union:GCObject	typeref:union:GCObject::TString
tsd	deps/jemalloc/include/jemalloc/internal/tsd.h	/^	tsd_t tsd;$/;"	m	struct:tsdn_s
tsd_assert_fast	deps/jemalloc/include/jemalloc/internal/tsd.h	/^tsd_assert_fast(tsd_t *tsd) {$/;"	f
tsd_boot	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^tsd_boot(void) {$/;"	f
tsd_boot	deps/jemalloc/include/jemalloc/internal/tsd_malloc_thread_cleanup.h	/^tsd_boot(void) {$/;"	f
tsd_boot	deps/jemalloc/include/jemalloc/internal/tsd_tls.h	/^tsd_boot(void) {$/;"	f
tsd_boot	deps/jemalloc/include/jemalloc/internal/tsd_win.h	/^tsd_boot(void) {$/;"	f
tsd_boot0	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^tsd_boot0(void) {$/;"	f
tsd_boot0	deps/jemalloc/include/jemalloc/internal/tsd_malloc_thread_cleanup.h	/^tsd_boot0(void) {$/;"	f
tsd_boot0	deps/jemalloc/include/jemalloc/internal/tsd_tls.h	/^tsd_boot0(void) {$/;"	f
tsd_boot0	deps/jemalloc/include/jemalloc/internal/tsd_win.h	/^tsd_boot0(void) {$/;"	f
tsd_boot1	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^tsd_boot1(void) {$/;"	f
tsd_boot1	deps/jemalloc/include/jemalloc/internal/tsd_malloc_thread_cleanup.h	/^tsd_boot1(void) {$/;"	f
tsd_boot1	deps/jemalloc/include/jemalloc/internal/tsd_tls.h	/^tsd_boot1(void) {$/;"	f
tsd_boot1	deps/jemalloc/include/jemalloc/internal/tsd_win.h	/^tsd_boot1(void) {$/;"	f
tsd_boot_wrapper	deps/jemalloc/src/tsd.c	/^tsd_wrapper_t tsd_boot_wrapper = {$/;"	v
tsd_boot_wrapper	deps/jemalloc/src/tsd.c	/^tsd_wrapper_t tsd_boot_wrapper = {false, TSD_INITIALIZER};$/;"	v
tsd_booted	deps/jemalloc/src/tsd.c	/^bool tsd_booted = false;$/;"	v
tsd_booted_get	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^tsd_booted_get(void) {$/;"	f
tsd_booted_get	deps/jemalloc/include/jemalloc/internal/tsd_malloc_thread_cleanup.h	/^tsd_booted_get(void) {$/;"	f
tsd_booted_get	deps/jemalloc/include/jemalloc/internal/tsd_tls.h	/^tsd_booted_get(void) {$/;"	f
tsd_booted_get	deps/jemalloc/include/jemalloc/internal/tsd_win.h	/^tsd_booted_get(void) {$/;"	f
tsd_cleanup	deps/jemalloc/src/tsd.c	/^tsd_cleanup(void *arg) {$/;"	f
tsd_cleanup_wrapper	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^tsd_cleanup_wrapper(void *arg) {$/;"	f
tsd_cleanup_wrapper	deps/jemalloc/include/jemalloc/internal/tsd_malloc_thread_cleanup.h	/^tsd_cleanup_wrapper(void) {$/;"	f
tsd_cleanup_wrapper	deps/jemalloc/include/jemalloc/internal/tsd_win.h	/^tsd_cleanup_wrapper(void) {$/;"	f
tsd_data_init	deps/jemalloc/src/tsd.c	/^tsd_data_init(tsd_t *tsd) {$/;"	f	file:
tsd_data_init_nocleanup	deps/jemalloc/src/tsd.c	/^tsd_data_init_nocleanup(tsd_t *tsd) {$/;"	f	file:
tsd_do_data_cleanup	deps/jemalloc/src/tsd.c	/^tsd_do_data_cleanup(tsd_t *tsd) {$/;"	f	file:
tsd_fast	deps/jemalloc/include/jemalloc/internal/tsd.h	/^tsd_fast(tsd_t *tsd) {$/;"	f
tsd_fetch	deps/jemalloc/include/jemalloc/internal/tsd.h	/^tsd_fetch(void) {$/;"	f
tsd_fetch_impl	deps/jemalloc/include/jemalloc/internal/tsd.h	/^tsd_fetch_impl(bool init, bool minimal) {$/;"	f
tsd_fetch_min	deps/jemalloc/include/jemalloc/internal/tsd.h	/^tsd_fetch_min(void) {$/;"	f
tsd_fetch_slow	deps/jemalloc/src/tsd.c	/^tsd_fetch_slow(tsd_t *tsd, bool minimal) {$/;"	f
tsd_get	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^tsd_get(bool init) {$/;"	f
tsd_get	deps/jemalloc/include/jemalloc/internal/tsd_malloc_thread_cleanup.h	/^tsd_get(bool init) {$/;"	f
tsd_get	deps/jemalloc/include/jemalloc/internal/tsd_tls.h	/^tsd_get(UNUSED bool init) {$/;"	f
tsd_get	deps/jemalloc/include/jemalloc/internal/tsd_win.h	/^tsd_get(bool init) {$/;"	f
tsd_get_allocates	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^tsd_get_allocates(void) {$/;"	f
tsd_get_allocates	deps/jemalloc/include/jemalloc/internal/tsd_malloc_thread_cleanup.h	/^tsd_get_allocates(void) {$/;"	f
tsd_get_allocates	deps/jemalloc/include/jemalloc/internal/tsd_tls.h	/^tsd_get_allocates(void) {$/;"	f
tsd_get_allocates	deps/jemalloc/include/jemalloc/internal/tsd_win.h	/^tsd_get_allocates(void) {$/;"	f
tsd_init_block_s	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^struct tsd_init_block_s {$/;"	s
tsd_init_block_t	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^typedef struct tsd_init_block_s tsd_init_block_t;$/;"	t	typeref:struct:tsd_init_block_s
tsd_init_check_recursion	deps/jemalloc/src/tsd.c	/^tsd_init_check_recursion(tsd_init_head_t *head, tsd_init_block_t *block) {$/;"	f
tsd_init_finish	deps/jemalloc/src/tsd.c	/^tsd_init_finish(tsd_init_head_t *head, tsd_init_block_t *block) {$/;"	f
tsd_init_head	deps/jemalloc/src/tsd.c	/^tsd_init_head_t	tsd_init_head = {$/;"	v
tsd_init_head_s	deps/jemalloc/src/tsd.c	/^struct tsd_init_head_s {$/;"	s	file:
tsd_init_head_t	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^typedef struct tsd_init_head_s tsd_init_head_t;$/;"	t	typeref:struct:tsd_init_head_s
tsd_initialized	deps/jemalloc/src/tsd.c	/^__thread bool JEMALLOC_TLS_MODEL tsd_initialized = false;$/;"	v
tsd_internal_fetch	deps/jemalloc/include/jemalloc/internal/tsd.h	/^tsd_internal_fetch(void) {$/;"	f
tsd_nominal	deps/jemalloc/include/jemalloc/internal/tsd.h	/^tsd_nominal(tsd_t *tsd) {$/;"	f
tsd_rtree_ctx	deps/jemalloc/include/jemalloc/internal/tsd.h	/^tsd_rtree_ctx(tsd_t *tsd) {$/;"	f
tsd_s	deps/jemalloc/include/jemalloc/internal/tsd.h	/^struct tsd_s {$/;"	s
tsd_set	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^tsd_set(tsd_t *val) {$/;"	f
tsd_set	deps/jemalloc/include/jemalloc/internal/tsd_malloc_thread_cleanup.h	/^tsd_set(tsd_t *val) {$/;"	f
tsd_set	deps/jemalloc/include/jemalloc/internal/tsd_tls.h	/^tsd_set(tsd_t *val) {$/;"	f
tsd_set	deps/jemalloc/include/jemalloc/internal/tsd_win.h	/^tsd_set(tsd_t *val) {$/;"	f
tsd_slow_update	deps/jemalloc/src/tsd.c	/^tsd_slow_update(tsd_t *tsd) {$/;"	f
tsd_state_minimal_initialized	deps/jemalloc/include/jemalloc/internal/tsd.h	/^	tsd_state_minimal_initialized = 2,$/;"	e	enum:__anon143
tsd_state_nominal	deps/jemalloc/include/jemalloc/internal/tsd.h	/^	tsd_state_nominal = 0, \/* Common case --> jnz. *\/$/;"	e	enum:__anon143
tsd_state_nominal_max	deps/jemalloc/include/jemalloc/internal/tsd.h	/^	tsd_state_nominal_max = 1, \/* used for comparison only. *\/$/;"	e	enum:__anon143
tsd_state_nominal_slow	deps/jemalloc/include/jemalloc/internal/tsd.h	/^	tsd_state_nominal_slow = 1, \/* Initialized but on slow path. *\/$/;"	e	enum:__anon143
tsd_state_purgatory	deps/jemalloc/include/jemalloc/internal/tsd.h	/^	tsd_state_purgatory = 3,$/;"	e	enum:__anon143
tsd_state_reincarnated	deps/jemalloc/include/jemalloc/internal/tsd.h	/^	tsd_state_reincarnated = 4,$/;"	e	enum:__anon143
tsd_state_t	deps/jemalloc/include/jemalloc/internal/tsd.h	/^typedef uint8_t tsd_state_t;$/;"	t
tsd_state_uninitialized	deps/jemalloc/include/jemalloc/internal/tsd.h	/^	tsd_state_uninitialized = 5$/;"	e	enum:__anon143
tsd_t	deps/jemalloc/include/jemalloc/internal/tsd_types.h	/^typedef struct tsd_s tsd_t;$/;"	t	typeref:struct:tsd_s
tsd_tcache_data_init	deps/jemalloc/src/tcache.c	/^tsd_tcache_data_init(tsd_t *tsd) {$/;"	f
tsd_tcache_enabled_data_init	deps/jemalloc/src/tcache.c	/^tsd_tcache_enabled_data_init(tsd_t *tsd) {$/;"	f
tsd_tls	deps/jemalloc/src/tsd.c	/^__thread tsd_t JEMALLOC_TLS_MODEL tsd_tls = TSD_INITIALIZER;$/;"	v
tsd_tsd	deps/jemalloc/src/tsd.c	/^DWORD tsd_tsd;$/;"	v
tsd_tsd	deps/jemalloc/src/tsd.c	/^pthread_key_t tsd_tsd;$/;"	v
tsd_tsdn	deps/jemalloc/include/jemalloc/internal/tsd.h	/^tsd_tsdn(tsd_t *tsd) {$/;"	f
tsd_wrapper_get	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^tsd_wrapper_get(bool init) {$/;"	f
tsd_wrapper_get	deps/jemalloc/include/jemalloc/internal/tsd_win.h	/^tsd_wrapper_get(bool init) {$/;"	f
tsd_wrapper_set	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^tsd_wrapper_set(tsd_wrapper_t *wrapper) {$/;"	f
tsd_wrapper_set	deps/jemalloc/include/jemalloc/internal/tsd_win.h	/^tsd_wrapper_set(tsd_wrapper_t *wrapper) {$/;"	f
tsd_wrapper_t	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^} tsd_wrapper_t;$/;"	t	typeref:struct:__anon142
tsd_wrapper_t	deps/jemalloc/include/jemalloc/internal/tsd_win.h	/^} tsd_wrapper_t;$/;"	t	typeref:struct:__anon141
tsdn	deps/jemalloc/src/prof.c	/^	tsdn_t		*tsdn;$/;"	m	struct:prof_tdata_merge_iter_arg_s	file:
tsdn	deps/jemalloc/src/prof.c	/^	tsdn_t	*tsdn;$/;"	m	struct:prof_gctx_dump_iter_arg_s	file:
tsdn	deps/jemalloc/src/prof.c	/^	tsdn_t	*tsdn;$/;"	m	struct:prof_gctx_merge_iter_arg_s	file:
tsdn	deps/jemalloc/src/prof.c	/^	tsdn_t	*tsdn;$/;"	m	struct:prof_tctx_dump_iter_arg_s	file:
tsdn_fetch	deps/jemalloc/include/jemalloc/internal/tsd.h	/^tsdn_fetch(void) {$/;"	f
tsdn_null	deps/jemalloc/include/jemalloc/internal/tsd.h	/^tsdn_null(const tsdn_t *tsdn) {$/;"	f
tsdn_rtree_ctx	deps/jemalloc/include/jemalloc/internal/tsd.h	/^tsdn_rtree_ctx(tsdn_t *tsdn, rtree_ctx_t *fallback) {$/;"	f
tsdn_s	deps/jemalloc/include/jemalloc/internal/tsd.h	/^struct tsdn_s {$/;"	s
tsdn_t	deps/jemalloc/include/jemalloc/internal/tsd_types.h	/^typedef struct tsdn_s tsdn_t;$/;"	t	typeref:struct:tsdn_s
tsdn_tsd	deps/jemalloc/include/jemalloc/internal/tsd.h	/^tsdn_tsd(tsdn_t *tsdn) {$/;"	f
tstats	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^	cache_bin_stats_t tstats;$/;"	m	struct:cache_bin_s
tsv	deps/lua/src/lobject.h	/^  } tsv;$/;"	m	union:TString	typeref:struct:TString::__anon107
tsvalue	deps/lua/src/lobject.h	95;"	d
tt	src/config.c	/^        time_t *tt;$/;"	m	union:numericConfigData::__anon45	file:
ttisboolean	deps/lua/src/lobject.h	84;"	d
ttisfunction	deps/lua/src/lobject.h	83;"	d
ttislightuserdata	deps/lua/src/lobject.h	87;"	d
ttisnil	deps/lua/src/lobject.h	79;"	d
ttisnumber	deps/lua/src/lobject.h	80;"	d
ttisstring	deps/lua/src/lobject.h	81;"	d
ttistable	deps/lua/src/lobject.h	82;"	d
ttisthread	deps/lua/src/lobject.h	86;"	d
ttisuserdata	deps/lua/src/lobject.h	85;"	d
ttlCommand	src/expire.c	/^void ttlCommand(client *c) {$/;"	f
ttlGenericCommand	src/expire.c	/^void ttlGenericCommand(client *c, int output_ms) {$/;"	f
ttype	deps/lua/src/lobject.h	90;"	d
tv	deps/hiredis/adapters/libevent.h	/^    struct timeval tv;$/;"	m	struct:redisLibeventEvents	typeref:struct:redisLibeventEvents::timeval
tvk	deps/lua/src/lobject.h	/^  TValue tvk;$/;"	m	union:TKey
twoto	deps/lua/src/lobject.h	359;"	d
txtToken	deps/lua/src/llex.c	/^static const char *txtToken (LexState *ls, int token) {$/;"	f	file:
type	deps/hiredis/dict.h	/^    dictType *type;$/;"	m	struct:dict
type	deps/hiredis/hiredis.h	/^    int type; \/* REDIS_REPLY_* *\/$/;"	m	struct:redisReply
type	deps/hiredis/hiredis.h	/^    int type;$/;"	m	struct:__anon80
type	deps/hiredis/read.h	/^    int type;$/;"	m	struct:redisReadTask
type	deps/hiredis/test.c	/^    enum connection_type type;$/;"	m	struct:config	typeref:enum:config::connection_type	file:
type	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	emitter_type_t type;$/;"	m	struct:emitter_col_s
type	deps/lua/src/lua_cjson.c	/^    json_token_type_t type;$/;"	m	struct:__anon103	file:
type	src/cluster.h	/^    uint16_t type;      \/* Message type *\/$/;"	m	struct:__anon43
type	src/cluster.h	/^    uint8_t type;           \/* Type from 0 to 255. *\/$/;"	m	struct:__anon36
type	src/connection.h	/^    ConnectionType *type;$/;"	m	struct:connection
type	src/dict.h	/^    dictType *type;$/;"	m	struct:dict
type	src/geohash.h	/^    int type; \/* search type *\/$/;"	m	struct:__anon51
type	src/module.c	/^            uint32_t type;         \/* REDISMODULE_ZSET_RANGE_* *\/$/;"	m	struct:RedisModuleKey::__anon62::__anon63	file:
type	src/module.c	/^    int type;       \/* REDISMODULE_REPLY_... *\/$/;"	m	struct:RedisModuleCallReply	file:
type	src/module.c	/^    int type;$/;"	m	struct:AutoMemEntry	file:
type	src/redis-cli.c	/^    int type;$/;"	m	struct:__anon13	file:
type	src/server.h	/^    int type;$/;"	m	struct:_redisSortOperation
type	src/server.h	/^    moduleType *type;   \/* Module type doing the operation. *\/$/;"	m	struct:RedisModuleIO
type	src/server.h	/^    moduleType *type;$/;"	m	struct:moduleValue
type	src/server.h	/^    unsigned type:4;$/;"	m	struct:redisObject
type	src/t_zset.c	/^    int type; \/* Set, sorted set *\/$/;"	m	struct:__anon2	file:
type	src/t_zset.c	/^    zrange_consumer_type                 type;$/;"	m	struct:zrange_result_handler	file:
typeCommand	src/db.c	/^void typeCommand(client *c) {$/;"	f
typeData	src/config.c	/^typedef union typeData {$/;"	u	file:
typeData	src/config.c	/^} typeData;$/;"	t	typeref:union:typeData	file:
typeInterface	src/config.c	/^typedef struct typeInterface {$/;"	s	file:
typeInterface	src/config.c	/^} typeInterface;$/;"	t	typeref:struct:typeInterface	file:
type_free	src/redis-cli.c	/^void type_free(void* priv_data, void* val) {$/;"	f
type_hash	src/redis-cli.c	/^typeinfo type_hash = { "hash", "HLEN", "fields" };$/;"	v
type_list	src/redis-cli.c	/^typeinfo type_list = { "list", "LLEN", "items" };$/;"	v
type_other	src/redis-cli.c	/^typeinfo type_other = { "other", NULL, "?" };$/;"	v
type_set	src/redis-cli.c	/^typeinfo type_set = { "set", "SCARD", "members" };$/;"	v
type_stream	src/redis-cli.c	/^typeinfo type_stream = { "stream", "XLEN", "entries" };$/;"	v
type_string	src/redis-cli.c	/^typeinfo type_string = { "string", "STRLEN", "bytes" };$/;"	v
type_zset	src/redis-cli.c	/^typeinfo type_zset = { "zset", "ZCARD", "members" };$/;"	v
typeinfo	src/redis-cli.c	/^} typeinfo;$/;"	t	typeref:struct:__anon14	file:
typeinfoDictType	src/redis-cli.c	/^static dictType typeinfoDictType = {$/;"	v	file:
typeinfo_add	src/redis-cli.c	/^static typeinfo* typeinfo_add(dict *types, char* name, typeinfo* type_template) {$/;"	f	file:
types	src/module.c	/^    list *types;    \/* Module data types. *\/$/;"	m	struct:RedisModule	file:
types_json	deps/jemalloc/test/unit/emitter.c	/^static const char *types_json =$/;"	v	file:
types_table	deps/jemalloc/test/unit/emitter.c	/^static const char *types_table =$/;"	v	file:
u	deps/jemalloc/test/src/SFMT.c	/^    uint32_t u[4];$/;"	m	struct:W128_T	file:
u	deps/jemalloc/test/src/SFMT.c	/^    uint32_t u[4];$/;"	m	union:W128_T	file:
u	deps/lua/src/lobject.h	/^  } u;$/;"	m	struct:UpVal	typeref:union:UpVal::__anon109
u	deps/lua/src/lparser.h	/^  } u;$/;"	m	struct:expdesc	typeref:union:expdesc::__anon94
u	deps/lua/src/lstate.h	/^  union Udata u;$/;"	m	union:GCObject	typeref:union:GCObject::Udata
u	src/module.c	/^    } u;$/;"	m	struct:RedisModuleKey	typeref:union:RedisModuleKey::__anon62	file:
u	src/server.h	/^    } u;$/;"	m	struct:_redisSortObject	typeref:union:_redisSortObject::__anon22
u16	src/lzfP.h	/^    typedef unsigned int u16;$/;"	t
u16	src/lzfP.h	/^    typedef unsigned short u16;$/;"	t
u2s	deps/jemalloc/src/malloc_io.c	/^u2s(uintmax_t x, unsigned base, bool uppercase, char *s, size_t *slen_p) {$/;"	f	file:
u64	src/dict.h	/^        uint64_t u64;$/;"	m	union:dictEntry::__anon29
u8	src/lzfP.h	/^typedef unsigned char u8;$/;"	t
u_int	src/solarisfixes.h	50;"	d
u_int32_t	src/solarisfixes.h	51;"	d
uchar	deps/lua/src/lstrlib.c	24;"	d	file:
ud	deps/lua/src/lapi.c	/^  void *ud;$/;"	m	struct:CCallS	file:
ud	deps/lua/src/lstate.h	/^  void *ud;         \/* auxiliary data to `frealloc' *\/$/;"	m	struct:global_State
ui	src/config.c	/^        unsigned int *ui;$/;"	m	union:numericConfigData::__anon45	file:
uint16_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^   typedef unsigned __int16  uint16_t;$/;"	t
uint16_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^   typedef unsigned short    uint16_t;$/;"	t
uint32_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^   typedef unsigned __int32  uint32_t;$/;"	t
uint32_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^   typedef unsigned int      uint32_t;$/;"	t
uint32_t	deps/lua/src/lua_bit.c	/^typedef unsigned __int32 uint32_t;$/;"	t	file:
uint32_val	deps/jemalloc/include/jemalloc/internal/emitter.h	/^		uint32_t uint32_val;$/;"	m	union:emitter_col_s::__anon136
uint64_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef unsigned __int64     uint64_t;$/;"	t
uint64_t	deps/lua/src/lua_bit.c	/^typedef unsigned __int64 uint64_t;$/;"	t	file:
uint64_val	deps/jemalloc/include/jemalloc/internal/emitter.h	/^		uint64_t uint64_val;$/;"	m	union:emitter_col_s::__anon136
uint8_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^   typedef unsigned __int8   uint8_t;$/;"	t
uint8_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^   typedef unsigned char     uint8_t;$/;"	t
uintCompare	src/ziplist.c	/^int uintCompare(const void *a, const void *b) {$/;"	f
uint_fast16_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef uint16_t  uint_fast16_t;$/;"	t
uint_fast32_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef uint32_t  uint_fast32_t;$/;"	t
uint_fast64_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef uint64_t  uint_fast64_t;$/;"	t
uint_fast8_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef uint8_t   uint_fast8_t;$/;"	t
uint_least16_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef uint16_t  uint_least16_t;$/;"	t
uint_least32_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef uint32_t  uint_least32_t;$/;"	t
uint_least64_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef uint64_t  uint_least64_t;$/;"	t
uint_least8_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef uint8_t   uint_least8_t;$/;"	t
uintmax_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef uint64_t  uintmax_t;$/;"	t
uintptr_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^   typedef _W64 unsigned int uintptr_t;$/;"	t
uintptr_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^   typedef unsigned __int64  uintptr_t;$/;"	t
ul	src/config.c	/^        unsigned long *ul;$/;"	m	union:numericConfigData::__anon45	file:
ull	src/config.c	/^        unsigned long long *ull;$/;"	m	union:numericConfigData::__anon45	file:
umask	src/server.h	/^    mode_t umask;               \/* The umask value of the process on startup *\/$/;"	m	struct:redisServer
uname	deps/jemalloc/scripts/gen_run_tests.py	/^uname = uname()[0]$/;"	v
uname_M	src/Makefile	/^uname_M := $(shell sh -c 'uname -m 2>\/dev\/null || echo not')$/;"	m
uname_S	deps/Makefile	/^uname_S:= $(shell sh -c 'uname -s 2>\/dev\/null || echo not')$/;"	m
uname_S	deps/hiredis/Makefile	/^uname_S := $(shell sh -c 'uname -s 2>\/dev\/null || echo not')$/;"	m
uname_S	src/Makefile	/^uname_S := $(shell sh -c 'uname -s 2>\/dev\/null || echo not')$/;"	m
uname_S	src/modules/Makefile	/^uname_S := $(shell sh -c 'uname -s 2>\/dev\/null || echo not')$/;"	m
uname_S	tests/modules/Makefile	/^uname_S := $(shell sh -c 'uname -s 2>\/dev\/null || echo not')$/;"	m
unblockClient	src/blocked.c	/^void unblockClient(client *c) {$/;"	f
unblockClientFromModule	src/module.c	/^void unblockClientFromModule(client *c) {$/;"	f
unblockClientWaitingData	src/blocked.c	/^void unblockClientWaitingData(client *c) {$/;"	f
unblockClientWaitingReplicas	src/replication.c	/^void unblockClientWaitingReplicas(client *c) {$/;"	f
unblocked	src/module.c	/^    int unblocked;          \/* Already on the moduleUnblocked list. *\/$/;"	m	struct:RedisModuleBlockedClient	file:
unblocked_clients	src/server.h	/^    list *unblocked_clients; \/* list of clients to unblock before next loop *\/$/;"	m	struct:redisServer
unbound_search	deps/lua/src/ltable.c	/^static int unbound_search (Table *t, unsigned int j) {$/;"	f	file:
undoConnectWithMaster	src/replication.c	/^void undoConnectWithMaster(void) {$/;"	f
unit_magnitude	deps/hdr_histogram/hdr_histogram.h	/^    int32_t unit_magnitude;$/;"	m	struct:hdr_histogram
unit_magnitude	deps/hdr_histogram/hdr_histogram.h	/^    int64_t unit_magnitude;$/;"	m	struct:hdr_histogram_bucket_config
unix_sock	deps/hiredis/hiredis.h	/^    } unix_sock;$/;"	m	struct:redisContext	typeref:struct:redisContext::__anon84
unix_sock	deps/hiredis/test.c	/^    } unix_sock;$/;"	m	struct:config	typeref:struct:config::__anon91	file:
unix_socket	deps/hiredis/hiredis.h	/^        const char *unix_socket;$/;"	m	union:__anon80::__anon81
unixsocket	src/server.h	/^    char *unixsocket;           \/* UNIX socket path *\/$/;"	m	struct:redisServer
unixsocketperm	src/server.h	/^    mode_t unixsocketperm;      \/* UNIX socket permission *\/$/;"	m	struct:redisServer
unixtime	src/server.h	/^    redisAtomic time_t unixtime; \/* Unix time sampled every cron cycle. *\/$/;"	m	struct:redisServer
unlikely	deps/jemalloc/include/jemalloc/internal/util.h	33;"	d
unlikely	deps/jemalloc/include/jemalloc/internal/util.h	36;"	d
unlikely	src/config.h	108;"	d
unlikely	src/config.h	111;"	d
unlink	src/redismodule.h	/^    RedisModuleTypeUnlinkFunc unlink;$/;"	m	struct:RedisModuleTypeMethods
unlink	src/server.h	/^    *unsubscribebulk, *psubscribebulk, *punsubscribebulk, *del, *unlink,$/;"	m	struct:sharedObjectsStruct
unlink	src/server.h	/^    moduleTypeUnlinkFunc unlink;$/;"	m	struct:RedisModuleType
unlinkClient	src/networking.c	/^void unlinkClient(client *c) {$/;"	f
unlinkCommand	src/db.c	/^void unlinkCommand(client *c) {$/;"	f
unlinkupval	deps/lua/src/lfunc.c	/^static void unlinkupval (UpVal *uv) {$/;"	f	file:
unm_event	deps/lua/doc/manual.html	/^     function unm_event (op)$/;"	f
unmakemask	deps/lua/src/ldblib.c	/^static char *unmakemask (int mask, char *smask) {$/;"	f	file:
unpauseClients	src/networking.c	/^void unpauseClients(void) {$/;"	f
unprotectClient	src/networking.c	/^void unprotectClient(client *c) {$/;"	f
unquoteCString	src/redis-cli.c	/^static sds unquoteCString(char *str) {$/;"	f	file:
unreachable	deps/jemalloc/include/jemalloc/internal/util.h	43;"	d
unreachable_masters	src/redis-cli.c	/^    int unreachable_masters;    \/* Masters we are not able to reach. *\/$/;"	m	struct:clusterManager	file:
unregister_command_name	tests/modules/commandfilter.c	/^static const char unregister_command_name[] = "commandfilter.unregister";$/;"	v	file:
unsafe_info_chars	src/server.c	/^static char unsafe_info_chars[] = "#:\\n\\r";$/;"	v	file:
unsafe_info_chars_substs	src/server.c	/^static char unsafe_info_chars_substs[] = "____";   \/* Must be same length as above *\/$/;"	v	file:
unsetBlockingTimeout	src/tls.c	/^static void unsetBlockingTimeout(tls_connection *conn) {$/;"	f	file:
unsigned_val	deps/jemalloc/include/jemalloc/internal/emitter.h	/^		unsigned unsigned_val;$/;"	m	union:emitter_col_s::__anon136
unsubscribe	tests/support/util.tcl	/^proc unsubscribe {client {channels {}}} {$/;"	p
unsubscribeCommand	src/pubsub.c	/^void unsubscribeCommand(client *c) {$/;"	f
unsubscribebulk	src/server.h	/^    *unsubscribebulk, *psubscribebulk, *punsubscribebulk, *del, *unlink,$/;"	m	struct:sharedObjectsStruct
unsupported_term	deps/linenoise/linenoise.c	/^static char *unsupported_term[] = {"dumb","cons25","emacs",NULL};$/;"	v	file:
unusual_combinations_to_test	deps/jemalloc/scripts/gen_travis.py	/^unusual_combinations_to_test = []$/;"	v
unwatchAllKeys	src/multi.c	/^void unwatchAllKeys(client *c) {$/;"	f
unwatchCommand	src/multi.c	/^void unwatchCommand(client *c) {$/;"	f
update	src/cluster.h	/^    } update;$/;"	m	union:clusterMsgData	typeref:struct:clusterMsgData::__anon40
updateAppendonly	src/config.c	/^static int updateAppendonly(int val, int prev, const char **err) {$/;"	f	file:
updateCachedTime	src/server.c	/^void updateCachedTime(int update_daylight_info) {$/;"	f
updateChildInfo	src/childinfo.c	/^void updateChildInfo(childInfoType information_type, size_t cow, monotime cow_updated, size_t keys, double progress) {$/;"	f
updateClusterSlotsConfiguration	src/redis-benchmark.c	/^static void updateClusterSlotsConfiguration() {$/;"	f	file:
updateDictResizePolicy	src/server.c	/^void updateDictResizePolicy(void) {$/;"	f
updateFailoverStatus	src/replication.c	/^void updateFailoverStatus(void) {$/;"	f
updateGoodSlaves	src/config.c	/^static int updateGoodSlaves(long long val, long long prev, const char **err) {$/;"	f	file:
updateHZ	src/config.c	/^static int updateHZ(long long val, long long prev, const char **err) {$/;"	f	file:
updateJemallocBgThread	src/config.c	/^static int updateJemallocBgThread(int val, int prev, const char **err) {$/;"	f	file:
updateLFU	src/db.c	/^void updateLFU(robj *val) {$/;"	f
updateMaxclients	src/config.c	/^static int updateMaxclients(long long val, long long prev, const char **err) {$/;"	f	file:
updateMaxmemory	src/config.c	/^static int updateMaxmemory(long long val, long long prev, const char **err) {$/;"	f	file:
updateOOMScoreAdj	src/config.c	/^static int updateOOMScoreAdj(int val, int prev, const char **err) {$/;"	f	file:
updateOOMScoreAdjValues	src/config.c	/^static int updateOOMScoreAdjValues(sds *args, const char **err, int apply) {$/;"	f	file:
updateOneSlot	src/cluster.c	/^void updateOneSlot(int slotid, int time_period, int tag) {$/;"	f
updatePort	src/config.c	/^static int updatePort(long long val, long long prev, const char **err) {$/;"	f	file:
updateProcTitleTemplate	src/config.c	/^static int updateProcTitleTemplate(char *val, char *prev, const char **err) {$/;"	f	file:
updateReplBacklogSize	src/config.c	/^static int updateReplBacklogSize(long long val, long long prev, const char **err) {$/;"	f	file:
updateRequirePass	src/config.c	/^int updateRequirePass(sds val, sds prev, const char **err) {$/;"	f
updateSSLEvent	src/tls.c	/^void updateSSLEvent(tls_connection *conn) {$/;"	f
updateSighandlerEnabled	src/config.c	/^static int updateSighandlerEnabled(int val, int prev, const char **err) {$/;"	f	file:
updateSlavesWaitingBgsave	src/replication.c	/^void updateSlavesWaitingBgsave(int bgsaveerr, int type) {$/;"	f
updateStatsOnUnblock	src/blocked.c	/^void updateStatsOnUnblock(client *c, long blocked_us, long reply_us){$/;"	f
updateTLSError	src/tls.c	/^static void updateTLSError(tls_connection *conn) {$/;"	f	file:
updateTLSPort	src/config.c	/^static int updateTLSPort(long long val, long long prev, const char **err) {$/;"	f	file:
updateTlsCfg	src/config.c	/^static int updateTlsCfg(char *val, char *prev, const char **err) {$/;"	f	file:
updateTlsCfgBool	src/config.c	/^static int updateTlsCfgBool(int val, int prev, const char **err) {$/;"	f	file:
updateTlsCfgInt	src/config.c	/^static int updateTlsCfgInt(long long val, long long prev, const char **err) {$/;"	f	file:
update_cksum	src/rio.h	/^    void (*update_cksum)(struct _rio *, const void *buf, size_t len);$/;"	m	struct:_rio
update_fn	src/config.c	/^    int (*update_fn)(char* val, char* prev, const char **err); \/* Optional function to apply new value at runtime (generic doc above) *\/$/;"	m	struct:stringConfigData	file:
update_fn	src/config.c	/^    int (*update_fn)(int val, int prev, const char **err); \/* Optional function to apply new value at runtime (generic doc above) *\/$/;"	m	struct:boolConfigData	file:
update_fn	src/config.c	/^    int (*update_fn)(int val, int prev, const char **err); \/* Optional function to apply new value at runtime (generic doc above) *\/$/;"	m	struct:enumConfigData	file:
update_fn	src/config.c	/^    int (*update_fn)(long long val, long long prev, const char **err); \/* Optional function to apply new value at runtime (generic doc above) *\/$/;"	m	struct:numericConfigData	file:
update_fn	src/config.c	/^    int (*update_fn)(sds val, sds prev, const char **err); \/* Optional function to apply new value at runtime (generic doc above) *\/$/;"	m	struct:sdsConfigData	file:
update_iterated_values	deps/hdr_histogram/hdr_histogram.c	/^static void update_iterated_values(struct hdr_iter* iter, int64_t new_value_iterated_to)$/;"	f	file:
update_min_max	deps/hdr_histogram/hdr_histogram.c	/^static void update_min_max(struct hdr_histogram* h, int64_t value)$/;"	f	file:
update_min_max_atomic	deps/hdr_histogram/hdr_histogram.c	/^static void update_min_max_atomic(struct hdr_histogram* h, int64_t value)$/;"	f	file:
update_zmalloc_stat_alloc	src/zmalloc.c	83;"	d	file:
update_zmalloc_stat_free	src/zmalloc.c	84;"	d	file:
updated_slots	src/redis-benchmark.c	/^    int *updated_slots;         \/* Used by updateClusterSlotsConfiguration *\/$/;"	m	struct:clusterNode	file:
updated_slots_count	src/redis-benchmark.c	/^    int updated_slots_count;    \/* Used by updateClusterSlotsConfiguration *\/$/;"	m	struct:clusterNode	file:
upper_bound	src/config.c	/^    long long upper_bound; \/* The upper bound of this numeric value *\/$/;"	m	struct:numericConfigData	file:
uptime	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	nstime_t		uptime;$/;"	m	struct:arena_stats_s
upval	deps/lua/src/lparser.c	/^  lu_byte upval;  \/* true if some variable in the block is an upvalue *\/$/;"	m	struct:BlockCnt	file:
upvaldesc	deps/lua/src/lparser.h	/^typedef struct upvaldesc {$/;"	s
upvaldesc	deps/lua/src/lparser.h	/^} upvaldesc;$/;"	t	typeref:struct:upvaldesc
upvals	deps/lua/src/lobject.h	/^  UpVal *upvals[1];$/;"	m	struct:LClosure
upvalue	deps/lua/src/lobject.h	/^  TValue upvalue[1];$/;"	m	struct:CClosure
upvalues	deps/lua/src/lobject.h	/^  TString **upvalues;  \/* upvalue names *\/$/;"	m	struct:Proto
upvalues	deps/lua/src/lparser.h	/^  upvaldesc upvalues[LUAI_MAXUPVALUES];  \/* upvalues *\/$/;"	m	struct:FuncState
usUntilEarliestTimer	src/ae.c	/^static int64_t usUntilEarliestTimer(aeEventLoop *eventLoop) {$/;"	f	file:
usage	deps/lua/src/luac.c	/^static void usage(const char* message)$/;"	f	file:
usage	src/redis-cli.c	/^static void usage(void) {$/;"	f	file:
usage	src/server.c	/^void usage(void) {$/;"	f
useDisklessLoad	src/replication.c	/^static int useDisklessLoad() {$/;"	f	file:
use_exit_on_panic	src/server.h	/^    int use_exit_on_panic;          \/* Use exit() on panic and assert rather than$/;"	m	struct:redisServer
usec	deps/hiredis/test.c	/^static long long usec(void) {$/;"	f	file:
usec	src/intset.c	/^static long long usec(void) {$/;"	f	file:
usec	src/ziplist.c	/^static long long usec(void) {$/;"	f	file:
used	deps/hiredis/dict.h	/^    unsigned long used;$/;"	m	struct:dict
used	src/aof.c	/^    unsigned long used, free;$/;"	m	struct:aofrwblock	file:
used	src/dict.h	/^    unsigned long used;$/;"	m	struct:dictht
used	src/geo.h	/^    size_t used;$/;"	m	struct:geoArray
used	src/module.c	/^    uint32_t used;$/;"	m	struct:RedisModulePoolAllocBlock	file:
used	src/server.h	/^    size_t size, used;$/;"	m	struct:clientReplyBlock
used_memory	src/zmalloc.c	/^static redisAtomic size_t used_memory = 0;$/;"	v	file:
usedby	src/module.c	/^    list *usedby;   \/* List of modules using APIs from this one. *\/$/;"	m	struct:RedisModule	file:
user	src/module.c	/^    user *user; \/* Reference to the real redis user *\/$/;"	m	struct:RedisModuleUser	file:
user	src/redis-benchmark.c	/^    const char *user;$/;"	m	struct:config	file:
user	src/redis-cli.c	/^    char *user;$/;"	m	struct:config	file:
user	src/server.h	/^    user *user;             \/* User associated with this connection. If the$/;"	m	struct:client
user	src/server.h	/^} user;$/;"	t	typeref:struct:__anon18
user_data	src/module.c	/^    void* user_data;$/;"	m	struct:__anon66	file:
user_data	src/module.c	/^    void* user_data;$/;"	m	struct:__anon67	file:
userdata	src/t_zset.c	/^    void                                *userdata;$/;"	m	struct:zrange_result_handler	file:
username	src/acl.c	/^    sds username;       \/* User the client is authenticated with. *\/$/;"	m	struct:ACLLogEntry	file:
using	src/module.c	/^    list *using;    \/* List of modules we use some APIs of. *\/$/;"	m	struct:RedisModule	file:
ustime	src/quicklist.c	/^static long long ustime(void) {$/;"	f	file:
ustime	src/redis-benchmark.c	/^static long long ustime(void) {$/;"	f	file:
ustime	src/redis-cli.c	/^static long long ustime(void) {$/;"	f	file:
ustime	src/server.c	/^long long ustime(void) {$/;"	f
ustime	src/server.h	/^    ustime_t ustime;            \/* 'unixtime' in microseconds. *\/$/;"	m	struct:redisServer
ustime_t	src/server.h	/^typedef long long ustime_t; \/* microsecond time type. *\/$/;"	t
utilTest	src/util.c	/^int utilTest(int argc, char **argv, int accurate) {$/;"	f
uv	deps/lua/src/lobject.h	/^  } uv;$/;"	m	union:Udata	typeref:struct:Udata::__anon108
uv	deps/lua/src/lstate.h	/^  struct UpVal uv;$/;"	m	union:GCObject	typeref:struct:GCObject::UpVal
uvalue	deps/lua/src/lobject.h	97;"	d
uvhead	deps/lua/src/lstate.h	/^  UpVal uvhead;  \/* head of double-linked list of all open upvalues *\/$/;"	m	struct:global_State
v	deps/lua/src/lobject.h	/^  TValue *v;  \/* points to stack or to its own value *\/$/;"	m	struct:UpVal
v	deps/lua/src/lparser.c	/^  expdesc v;  \/* last list item read *\/$/;"	m	struct:ConsControl	file:
v	deps/lua/src/lparser.c	/^  expdesc v;  \/* variable (global, local, upvalue, or indexed) *\/$/;"	m	struct:LHS_assign	file:
v	src/dict.h	/^    } v;$/;"	m	struct:dictEntry	typeref:union:dictEntry::__anon29
va_copy	deps/hiredis/win32.h	20;"	d
val	deps/hiredis/dict.h	/^    void *val;$/;"	m	struct:dictEntry
val	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^	tsd_t val;$/;"	m	struct:__anon142
val	deps/jemalloc/include/jemalloc/internal/tsd_win.h	/^	tsd_t val;$/;"	m	struct:__anon141
val	src/config.c	/^    const int val;$/;"	m	struct:configEnum	file:
val	src/dict.h	/^        void *val;$/;"	m	union:dictEntry::__anon29
val	src/module.c	/^    } val;$/;"	m	struct:RedisModuleCallReply	typeref:union:RedisModuleCallReply::__anon65	file:
valDestructor	deps/hiredis/dict.h	/^    void (*valDestructor)(void *privdata, void *obj);$/;"	m	struct:dictType
valDestructor	src/dict.h	/^    void (*valDestructor)(void *privdata, void *obj);$/;"	m	struct:dictType
valDup	deps/hiredis/dict.h	/^    void *(*valDup)(void *privdata, const void *obj);$/;"	m	struct:dictType
valDup	src/dict.h	/^    void *(*valDup)(void *privdata, const void *obj);$/;"	m	struct:dictType
valid_number_character	deps/lua/src/fpconv.c	/^static inline int valid_number_character(char ch)$/;"	f	file:
validateClusterManagerCommand	src/redis-cli.c	/^static clusterManagerCommandProc *validateClusterManagerCommand(void) {$/;"	f	file:
validateProcTitleTemplate	src/server.c	/^int validateProcTitleTemplate(const char *template) {$/;"	f
validate_fill	deps/jemalloc/test/integration/rallocx.c	/^validate_fill(const void *p, uint8_t c, size_t offset, size_t len) {$/;"	f	file:
validate_fill	deps/jemalloc/test/integration/xallocx.c	/^validate_fill(const void *p, uint8_t c, size_t offset, size_t len) {$/;"	f	file:
valiswhite	deps/lua/src/lgc.h	75;"	d
valloc	deps/jemalloc/src/zone.c	/^	void *(*valloc)(struct _malloc_zone_t *, size_t);$/;"	m	struct:_malloc_zone_t	file:
value	deps/hdr_histogram/hdr_histogram.h	/^    int64_t value;$/;"	m	struct:hdr_iter
value	deps/lua/src/lobject.h	/^    TValue value;  \/* the value (when closed) *\/$/;"	m	union:UpVal::__anon109
value	deps/lua/src/lua_cjson.c	/^    } value;$/;"	m	struct:__anon103	typeref:union:__anon103::__anon104	file:
value	src/adlist.h	/^    void *value;$/;"	m	struct:listNode
value	src/module.c	/^    robj *value;    \/* Value object, or NULL if the key was not found. *\/$/;"	m	struct:RedisModuleKey	file:
value	src/modules/hellotype.c	/^    int64_t value;$/;"	m	struct:HelloTypeNode	file:
value	src/quicklist.h	/^    unsigned char *value;$/;"	m	struct:quicklistEntry
value	src/server.h	/^    void *value;$/;"	m	struct:moduleValue
value	src/sparkline.h	/^    double value;$/;"	m	struct:sample
value	tests/modules/test_lazyfree.c	/^    int64_t value;$/;"	m	struct:LazyFreeLinkNode	file:
value_buf	src/stream.h	/^    unsigned char value_buf[LP_INTBUF_SIZE];$/;"	m	struct:streamIterator
value_from_index	deps/hdr_histogram/hdr_histogram.c	/^static int64_t value_from_index(int32_t bucket_index, int32_t sub_bucket_index, int32_t unit_magnitude)$/;"	f	file:
value_iterated_from	deps/hdr_histogram/hdr_histogram.h	/^    int64_t value_iterated_from;$/;"	m	struct:hdr_iter
value_iterated_to	deps/hdr_histogram/hdr_histogram.h	/^    int64_t value_iterated_to;$/;"	m	struct:hdr_iter
value_or_delete	tests/modules/hash.c	/^static RedisModuleString *value_or_delete(RedisModuleString *s) {$/;"	f	file:
value_units_per_bucket	deps/hdr_histogram/hdr_histogram.h	/^    int64_t value_units_per_bucket;$/;"	m	struct:hdr_iter_linear
values	tests/modules/defragtest.c	/^    void **values;$/;"	m	struct:FragObject	file:
varname	deps/lua/src/lobject.h	/^  TString *varname;$/;"	m	struct:LocVar
vec	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	void			*vec[1];$/;"	m	struct:prof_gctx_s
vec	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	void			*vec[PROF_BT_MAX];$/;"	m	struct:prof_tdata_s
vec	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	void		**vec;$/;"	m	struct:prof_bt_s
vec_recursion	deps/jemalloc/test/include/test/SFMT-alti.h	/^vector unsigned int vec_recursion(vector unsigned int a,$/;"	f
vecswap	src/pqsort.c	86;"	d	file:
vectors_sip64	src/siphash.c	/^const uint8_t vectors_sip64[64][8] = {$/;"	v
ver	src/cluster.h	/^    uint16_t ver;       \/* Protocol version, currently set to 1. *\/$/;"	m	struct:__anon43
ver	src/module.c	/^    int ver;        \/* Module version. We use just progressive integers. *\/$/;"	m	struct:RedisModule	file:
ver	src/server.h	/^    int ver;            \/* Module serialization version: 1 (old),$/;"	m	struct:RedisModuleIO
verbose	deps/jemalloc/test/unit/stats_print.c	/^	bool verbose;$/;"	m	struct:parser_s	file:
verbose	src/redis-cli.c	/^    int verbose;$/;"	m	struct:config	file:
verbosity	src/server.h	/^    int verbosity;                  \/* Loglevel in redis.conf *\/$/;"	m	struct:redisServer
verify	src/ziplist.c	/^static void verify(unsigned char *zl, zlentry *e) {$/;"	f	file:
verifyClusterConfigWithData	src/cluster.c	/^int verifyClusterConfigWithData(void) {$/;"	f
verifyDumpPayload	src/cluster.c	/^int verifyDumpPayload(unsigned char *p, size_t len) {$/;"	f
verify_hostname_announced	tests/sentinel/tests/08-hostname-conf.tcl	/^proc verify_hostname_announced {hostname} {$/;"	p
verify_log_message	tests/support/util.tcl	/^proc verify_log_message {srv_idx pattern from_line} {$/;"	p
version	deps/jemalloc/src/zone.c	/^	unsigned version;$/;"	m	struct:_malloc_zone_t	file:
version	src/redismodule.h	/^    uint64_t version;       \/* Not used since this structure is never passed$/;"	m	struct:RedisModuleCronLoopInfo
version	src/redismodule.h	/^    uint64_t version;       \/* Not used since this structure is never passed$/;"	m	struct:RedisModuleFlushInfo
version	src/redismodule.h	/^    uint64_t version;       \/* Not used since this structure is never passed$/;"	m	struct:RedisModuleLoadingProgressInfo
version	src/redismodule.h	/^    uint64_t version;       \/* Not used since this structure is never passed$/;"	m	struct:RedisModuleModuleChange
version	src/redismodule.h	/^    uint64_t version;       \/* Not used since this structure is never passed$/;"	m	struct:RedisModuleReplicationInfo
version	src/redismodule.h	/^    uint64_t version;       \/* Not used since this structure is never passed$/;"	m	struct:RedisModuleSwapDbInfo
version	src/redismodule.h	/^    uint64_t version;       \/* Version of this structure for ABI compat. *\/$/;"	m	struct:RedisModuleClientInfo
version	src/redismodule.h	/^    uint64_t version;$/;"	m	struct:RedisModuleTypeMethods
version	src/server.c	/^void version(void) {$/;"	f
vm_range_recorder_t	deps/jemalloc/src/zone.c	/^typedef void vm_range_recorder_t(task_t, void *, unsigned type, vm_range_t *, unsigned);$/;"	t	file:
vm_range_t	deps/jemalloc/src/zone.c	/^} vm_range_t;$/;"	t	typeref:struct:__anon127	file:
voted_time	src/cluster.h	/^    mstime_t voted_time;     \/* Last time we voted for a slave of this master *\/$/;"	m	struct:clusterNode
votes	src/sentinel.c	/^    unsigned long votes;$/;"	m	struct:sentinelLeader	file:
vptr	src/server.h	/^    unsigned char *fptr, *vptr;$/;"	m	struct:__anon26
vsalloc	deps/jemalloc/test/unit/arena_reset.c	/^vsalloc(tsdn_t *tsdn, const void *ptr) {$/;"	f	file:
vtype	deps/hiredis/hiredis.h	/^    char vtype[4]; \/* Used for REDIS_REPLY_VERB, contains the null$/;"	m	struct:redisReply
w128_t	deps/jemalloc/test/src/SFMT.c	/^typedef struct W128_T w128_t;$/;"	t	typeref:struct:W128_T	file:
w128_t	deps/jemalloc/test/src/SFMT.c	/^typedef union W128_T w128_t;$/;"	t	typeref:union:W128_T	file:
waitCommand	src/replication.c	/^void waitCommand(client *c) {$/;"	f
waitForBgrewriteaof	tests/support/util.tcl	/^proc waitForBgrewriteaof r {$/;"	p
waitForBgsave	tests/support/util.tcl	/^proc waitForBgsave r {$/;"	p
wait_done_loading	tests/support/util.tcl	/^proc wait_done_loading r {$/;"	p
wait_for_blocked_client	tests/unit/type/list.tcl	/^proc wait_for_blocked_client {} {$/;"	p
wait_for_child_exit	deps/jemalloc/test/unit/fork.c	/^wait_for_child_exit(int pid) {$/;"	f	file:
wait_for_cluster_propagation	tests/cluster/cluster.tcl	/^proc wait_for_cluster_propagation {} {$/;"	p
wait_for_condition	tests/support/test.tcl	/^proc wait_for_condition {maxtries delay e _else_ elsescript} {$/;"	p
wait_for_log_messages	tests/support/util.tcl	/^proc wait_for_log_messages {srv_idx patterns from_line maxtries delay} {$/;"	p
wait_for_ofs_sync	tests/support/util.tcl	/^proc wait_for_ofs_sync {r1 r2} {$/;"	p
wait_for_sync	tests/support/util.tcl	/^proc wait_for_sync r {$/;"	p
wait_server_started	tests/support/server.tcl	/^proc wait_server_started {config_file stdout pid} {$/;"	p
wantRead	deps/hiredis/ssl.c	/^    int wantRead;$/;"	m	struct:redisSSL	file:
watchCommand	src/multi.c	/^void watchCommand(client *c) {$/;"	f
watchForKey	src/multi.c	/^void watchForKey(client *c, robj *key) {$/;"	f
watch_for_junking	deps/jemalloc/test/unit/junk.c	/^static void *watch_for_junking;$/;"	v	file:
watch_junking	deps/jemalloc/test/unit/junk.c	/^watch_junking(void *p) {$/;"	f	file:
watchdogScheduleSignal	src/debug.c	/^void watchdogScheduleSignal(int period) {$/;"	f
watchdogSignalHandler	src/debug.c	/^void watchdogSignalHandler(int sig, siginfo_t *info, void *secret) {$/;"	f
watchdog_period	src/server.h	/^    int watchdog_period;  \/* Software watchdog period in ms. 0 = off *\/$/;"	m	struct:redisServer
watchedKey	src/multi.c	/^typedef struct watchedKey {$/;"	s	file:
watchedKey	src/multi.c	/^} watchedKey;$/;"	t	typeref:struct:watchedKey	file:
watched_keys	src/server.h	/^    dict *watched_keys;         \/* WATCHED keys for MULTI\/EXEC CAS *\/$/;"	m	struct:redisDb
watched_keys	src/server.h	/^    list *watched_keys;     \/* Keys WATCHED for MULTI\/EXEC CAS *\/$/;"	m	struct:client
weak	deps/lua/src/lstate.h	/^  GCObject *weak;  \/* list of weak tables (to be cleared) *\/$/;"	m	struct:global_State
weak_import	deps/jemalloc/src/zone.c	/^JEMALLOC_ATTR(weak_import);$/;"	v
weight	src/redis-cli.c	/^    char **weight;$/;"	m	struct:clusterManagerCommand	file:
weight	src/redis-cli.c	/^    float weight;   \/* Weight used by rebalance *\/$/;"	m	struct:clusterManagerNode	file:
weight	src/t_zset.c	/^    double weight;$/;"	m	struct:__anon2	file:
weight_argc	src/redis-cli.c	/^    int weight_argc;$/;"	m	struct:clusterManagerCommand	file:
west	src/geohash.h	/^    GeoHashBits west;$/;"	m	struct:__anon50
wev	deps/hiredis/adapters/libev.h	/^    ev_io rev, wev;$/;"	m	struct:redisLibevEvents
wfds	src/ae_select.c	/^    fd_set rfds, wfds;$/;"	m	struct:aeApiState	file:
wfileProc	src/ae.h	/^    aeFileProc *wfileProc;$/;"	m	struct:aeFileEvent
what	deps/lua/src/lua.h	/^  const char *what;	\/* (S) `Lua', `C', `main', `tail' *\/$/;"	m	struct:lua_Debug
what 	deps/lua/etc/strict.lua	/^local function what ()$/;"	f
when	src/ae.h	/^    monotime when;$/;"	m	struct:aeTimeEvent
wherefrom	src/server.h	/^        int wherefrom;      \/* Where to pop from *\/$/;"	m	struct:blockingState::listPos
whereto	src/server.h	/^        int whereto;        \/* Where to push to *\/$/;"	m	struct:blockingState::listPos
whileBlockedCron	src/server.c	/^void whileBlockedCron() {$/;"	f
whilestat	deps/lua/src/lparser.c	/^static void whilestat (LexState *ls, int line) {$/;"	f	file:
white2gray	deps/lua/src/lgc.c	37;"	d	file:
width	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	int width;$/;"	m	struct:emitter_col_s
width	src/geohash.h	/^            double width;$/;"	m	struct:__anon51::__anon52::__anon53
width	src/lolwut.h	/^    int width;$/;"	m	struct:lwCanvas
width	src/lolwut6.c	/^    int width;      \/* Pixels width. *\/$/;"	m	struct:skyscraper	file:
win32_bind	deps/hiredis/sockcompat.c	/^int win32_bind(SOCKET sockfd, const struct sockaddr *addr, socklen_t addrlen) {$/;"	f
win32_close	deps/hiredis/sockcompat.c	/^int win32_close(SOCKET fd) {$/;"	f
win32_connect	deps/hiredis/sockcompat.c	/^int win32_connect(SOCKET sockfd, const struct sockaddr *addr, socklen_t addrlen) {$/;"	f
win32_freeaddrinfo	deps/hiredis/sockcompat.c	/^void win32_freeaddrinfo(struct addrinfo *res) {$/;"	f
win32_gai_strerror	deps/hiredis/sockcompat.c	/^const char *win32_gai_strerror(int errcode) {$/;"	f
win32_getaddrinfo	deps/hiredis/sockcompat.c	/^int win32_getaddrinfo(const char *node, const char *service, const struct addrinfo *hints, struct addrinfo **res) {$/;"	f
win32_getsockopt	deps/hiredis/sockcompat.c	/^int win32_getsockopt(SOCKET sockfd, int level, int optname, void *optval, socklen_t *optlen) {$/;"	f
win32_ioctl	deps/hiredis/sockcompat.c	/^int win32_ioctl(SOCKET fd, unsigned long request, unsigned long *argp) {$/;"	f
win32_poll	deps/hiredis/sockcompat.c	/^int win32_poll(struct pollfd *fds, nfds_t nfds, int timeout) {$/;"	f
win32_recv	deps/hiredis/sockcompat.c	/^ssize_t win32_recv(SOCKET sockfd, void *buf, size_t len, int flags) {$/;"	f
win32_send	deps/hiredis/sockcompat.c	/^ssize_t win32_send(SOCKET sockfd, const void *buf, size_t len, int flags) {$/;"	f
win32_setsockopt	deps/hiredis/sockcompat.c	/^int win32_setsockopt(SOCKET sockfd, int level, int optname, const void *optval, socklen_t optlen) {$/;"	f
win32_socket	deps/hiredis/sockcompat.c	/^SOCKET win32_socket(int domain, int type, int protocol) {$/;"	f
windows	src/lolwut6.c	/^    int windows;    \/* Draw windows if true. *\/$/;"	m	struct:skyscraper	file:
withscores	src/t_zset.c	/^    int                                  withscores;$/;"	m	struct:zrange_result_handler	file:
witness	deps/jemalloc/include/jemalloc/internal/mutex.h	/^		witness_t			witness;$/;"	m	union:malloc_mutex_s::__anon157
witness	deps/jemalloc/include/jemalloc/internal/mutex.h	/^	witness_t			witness;$/;"	m	struct:malloc_mutex_s
witness_assert_depth	deps/jemalloc/include/jemalloc/internal/witness.h	/^witness_assert_depth(witness_tsdn_t *witness_tsdn, unsigned depth) {$/;"	f
witness_assert_depth_to_rank	deps/jemalloc/include/jemalloc/internal/witness.h	/^witness_assert_depth_to_rank(witness_tsdn_t *witness_tsdn,$/;"	f
witness_assert_lockless	deps/jemalloc/include/jemalloc/internal/witness.h	/^witness_assert_lockless(witness_tsdn_t *witness_tsdn) {$/;"	f
witness_assert_not_owner	deps/jemalloc/include/jemalloc/internal/witness.h	/^witness_assert_not_owner(witness_tsdn_t *witness_tsdn,$/;"	f
witness_assert_owner	deps/jemalloc/include/jemalloc/internal/witness.h	/^witness_assert_owner(witness_tsdn_t *witness_tsdn, const witness_t *witness) {$/;"	f
witness_comp	deps/jemalloc/test/unit/witness.c	/^witness_comp(const witness_t *a, void *oa, const witness_t *b, void *ob) {$/;"	f	file:
witness_comp_reverse	deps/jemalloc/test/unit/witness.c	/^witness_comp_reverse(const witness_t *a, void *oa, const witness_t *b,$/;"	f	file:
witness_comp_t	deps/jemalloc/include/jemalloc/internal/witness.h	/^typedef int witness_comp_t (const witness_t *, void *, const witness_t *,$/;"	t
witness_depth_error	deps/jemalloc/src/witness.c	/^witness_depth_error_t *JET_MUTABLE witness_depth_error =$/;"	v
witness_depth_error_impl	deps/jemalloc/src/witness.c	/^witness_depth_error_impl(const witness_list_t *witnesses,$/;"	f	file:
witness_depth_error_intercept	deps/jemalloc/test/unit/witness.c	/^witness_depth_error_intercept(const witness_list_t *witnesses,$/;"	f	file:
witness_depth_error_orig	deps/jemalloc/test/unit/witness.c	/^static witness_depth_error_t *witness_depth_error_orig;$/;"	v	file:
witness_depth_error_t	deps/jemalloc/include/jemalloc/internal/witness.h	/^typedef void (witness_depth_error_t)(const witness_list_t *,$/;"	t
witness_init	deps/jemalloc/src/witness.c	/^witness_init(witness_t *witness, const char *name, witness_rank_t rank,$/;"	f
witness_list_t	deps/jemalloc/include/jemalloc/internal/witness.h	/^typedef ql_head(witness_t) witness_list_t;$/;"	t
witness_lock	deps/jemalloc/include/jemalloc/internal/witness.h	/^witness_lock(witness_tsdn_t *witness_tsdn, witness_t *witness) {$/;"	f
witness_lock_error	deps/jemalloc/src/witness.c	/^witness_lock_error_t *JET_MUTABLE witness_lock_error = witness_lock_error_impl;$/;"	v
witness_lock_error_impl	deps/jemalloc/src/witness.c	/^witness_lock_error_impl(const witness_list_t *witnesses,$/;"	f	file:
witness_lock_error_intercept	deps/jemalloc/test/unit/witness.c	/^witness_lock_error_intercept(const witness_list_t *witnesses,$/;"	f	file:
witness_lock_error_orig	deps/jemalloc/test/unit/witness.c	/^static witness_lock_error_t *witness_lock_error_orig;$/;"	v	file:
witness_lock_error_t	deps/jemalloc/include/jemalloc/internal/witness.h	/^typedef void (witness_lock_error_t)(const witness_list_t *, const witness_t *);$/;"	t
witness_not_owner_error	deps/jemalloc/src/witness.c	/^witness_not_owner_error_t *JET_MUTABLE witness_not_owner_error =$/;"	v
witness_not_owner_error_impl	deps/jemalloc/src/witness.c	/^witness_not_owner_error_impl(const witness_t *witness) {$/;"	f	file:
witness_not_owner_error_intercept	deps/jemalloc/test/unit/witness.c	/^witness_not_owner_error_intercept(const witness_t *witness) {$/;"	f	file:
witness_not_owner_error_orig	deps/jemalloc/test/unit/witness.c	/^static witness_not_owner_error_t *witness_not_owner_error_orig;$/;"	v	file:
witness_not_owner_error_t	deps/jemalloc/include/jemalloc/internal/witness.h	/^typedef void (witness_not_owner_error_t)(const witness_t *);$/;"	t
witness_owner	deps/jemalloc/include/jemalloc/internal/witness.h	/^witness_owner(witness_tsd_t *witness_tsd, const witness_t *witness) {$/;"	f
witness_owner_error	deps/jemalloc/src/witness.c	/^witness_owner_error_t *JET_MUTABLE witness_owner_error =$/;"	v
witness_owner_error_impl	deps/jemalloc/src/witness.c	/^witness_owner_error_impl(const witness_t *witness) {$/;"	f	file:
witness_owner_error_intercept	deps/jemalloc/test/unit/witness.c	/^witness_owner_error_intercept(const witness_t *witness) {$/;"	f	file:
witness_owner_error_orig	deps/jemalloc/test/unit/witness.c	/^static witness_owner_error_t *witness_owner_error_orig;$/;"	v	file:
witness_owner_error_t	deps/jemalloc/include/jemalloc/internal/witness.h	/^typedef void (witness_owner_error_t)(const witness_t *);$/;"	t
witness_postfork_child	deps/jemalloc/src/witness.c	/^witness_postfork_child(witness_tsd_t *witness_tsd) {$/;"	f
witness_postfork_parent	deps/jemalloc/src/witness.c	/^witness_postfork_parent(witness_tsd_t *witness_tsd) {$/;"	f
witness_prefork	deps/jemalloc/src/witness.c	/^witness_prefork(witness_tsd_t *witness_tsd) {$/;"	f
witness_rank_t	deps/jemalloc/include/jemalloc/internal/witness.h	/^typedef unsigned witness_rank_t;$/;"	t
witness_s	deps/jemalloc/include/jemalloc/internal/witness.h	/^struct witness_s {$/;"	s
witness_t	deps/jemalloc/include/jemalloc/internal/witness.h	/^typedef struct witness_s witness_t;$/;"	t	typeref:struct:witness_s
witness_tsd	deps/jemalloc/include/jemalloc/internal/witness.h	/^	witness_tsd_t witness_tsd;$/;"	m	struct:witness_tsdn_s
witness_tsd_s	deps/jemalloc/include/jemalloc/internal/witness.h	/^struct witness_tsd_s {$/;"	s
witness_tsd_t	deps/jemalloc/include/jemalloc/internal/witness.h	/^typedef struct witness_tsd_s witness_tsd_t;$/;"	t	typeref:struct:witness_tsd_s
witness_tsd_tsdn	deps/jemalloc/include/jemalloc/internal/witness.h	/^witness_tsd_tsdn(witness_tsd_t *witness_tsd) {$/;"	f
witness_tsdn_null	deps/jemalloc/include/jemalloc/internal/witness.h	/^witness_tsdn_null(witness_tsdn_t *witness_tsdn) {$/;"	f
witness_tsdn_s	deps/jemalloc/include/jemalloc/internal/witness.h	/^struct witness_tsdn_s {$/;"	s
witness_tsdn_t	deps/jemalloc/include/jemalloc/internal/witness.h	/^typedef struct witness_tsdn_s witness_tsdn_t;$/;"	t	typeref:struct:witness_tsdn_s
witness_tsdn_tsd	deps/jemalloc/include/jemalloc/internal/witness.h	/^witness_tsdn_tsd(witness_tsdn_t *witness_tsdn) {$/;"	f
witness_unlock	deps/jemalloc/include/jemalloc/internal/witness.h	/^witness_unlock(witness_tsdn_t *witness_tsdn, witness_t *witness) {$/;"	f
witnesses	deps/jemalloc/include/jemalloc/internal/witness.h	/^	witness_list_t witnesses;$/;"	m	struct:witness_tsd_s
witnesses_cleanup	deps/jemalloc/src/witness.c	/^witnesses_cleanup(witness_tsd_t *witness_tsd) {$/;"	f
woff	src/server.h	/^    long long woff;         \/* Last write global replication offset. *\/$/;"	m	struct:client
worker	tests/modules/blockedclient.c	/^void *worker(void *arg) {$/;"	f
write	deps/hiredis/adapters/qt.h	/^        void write() { redisAsyncHandleWrite(m_ctx); }$/;"	f	class:RedisQtAdapter
write	deps/hiredis/hiredis.h	/^    ssize_t (*write)(struct redisContext *);$/;"	m	struct:redisContextFuncs
write	deps/jemalloc/include/jemalloc/internal/hooks.h	11;"	d
write	src/connection.h	/^    int (*write)(struct connection *conn, const void *data, size_t data_len);$/;"	m	struct:ConnectionType
write	src/rio.h	/^    size_t (*write)(struct _rio *, const void *buf, size_t len);$/;"	m	struct:_rio
writeCommandsDeniedByDiskError	src/server.c	/^int writeCommandsDeniedByDiskError(void) {$/;"	f
writeHandler	src/redis-benchmark.c	/^static void writeHandler(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	file:
writeToClient	src/networking.c	/^int writeToClient(client *c, int handler_installed) {$/;"	f
write_cb	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	void (*write_cb)(void *, const char *);$/;"	m	struct:emitter_s
write_cb	deps/jemalloc/test/unit/stats_print.c	/^write_cb(void *opaque, const char *str) {$/;"	f
write_cli	tests/integration/redis-cli.tcl	/^    proc write_cli {fd buf} {$/;"	p
write_handler	src/connection.h	/^    ConnectionCallbackFunc write_handler;$/;"	m	struct:connection
write_log_line	tests/support/util.tcl	/^proc write_log_line {srv_idx msg} {$/;"	p
write_tmpfile	tests/integration/redis-cli.tcl	/^    proc write_tmpfile {contents} {$/;"	p
writer	deps/lua/src/ldump.c	/^ lua_Writer writer;$/;"	m	struct:__anon115	file:
writer	deps/lua/src/lstrlib.c	/^static int writer (lua_State *L, const void* b, size_t size, void* B) {$/;"	f	file:
writer	deps/lua/src/luac.c	/^static int writer(lua_State* L, const void* p, size_t size, void* u)$/;"	f	file:
writing	deps/hiredis/adapters/ae.h	/^    int reading, writing;$/;"	m	struct:redisAeEvents
writing	deps/hiredis/adapters/libev.h	/^    int reading, writing;$/;"	m	struct:redisLibevEvents
writing	src/sentinel.c	/^    int reading, writing;$/;"	m	struct:redisAeEvents	file:
written	src/redis-benchmark.c	/^    size_t written;         \/* Bytes of 'obuf' already written *\/$/;"	m	struct:_client	file:
wrongtypeerr	src/server.h	/^    *emptyarray, *wrongtypeerr, *nokeyerr, *syntaxerr, *sameobjecterr,$/;"	m	struct:sharedObjectsStruct
wrtmessage	deps/jemalloc/src/malloc_io.c	/^wrtmessage(void *cbopaque, const char *s) {$/;"	f	file:
ws	src/memtest.c	/^static struct winsize ws;$/;"	v	typeref:struct:winsize	file:
x	deps/jemalloc/test/unit/mtx.c	/^	unsigned	x;$/;"	m	struct:__anon119	file:
x	src/rand.c	/^static uint32_t x[3] = { X0, X1, X2 }, a[3] = { A0, A1, A2 }, c = C;$/;"	v	file:
x	src/server.h	/^    unsigned char x[20];    \/* Xored elements. *\/$/;"	m	struct:RedisModuleDigest
x2s	deps/jemalloc/src/malloc_io.c	/^x2s(uintmax_t x, bool alt_form, bool uppercase, char *s, size_t *slen_p) {$/;"	f	file:
xackCommand	src/t_stream.c	/^void xackCommand(client *c) {$/;"	f
xaddCommand	src/t_stream.c	/^void xaddCommand(client *c) {$/;"	f
xautoclaimCommand	src/t_stream.c	/^void xautoclaimCommand(client *c) {$/;"	f
xclaim	src/server.h	/^    *emptyscan, *multi, *exec, *left, *right, *hset, *srem, *xgroup, *xclaim,  $/;"	m	struct:sharedObjectsStruct
xclaimCommand	src/server.h	/^                        *expireCommand, *pexpireCommand, *xclaimCommand,$/;"	m	struct:redisServer	typeref:struct:redisServer::
xclaimCommand	src/t_stream.c	/^void xclaimCommand(client *c) {$/;"	f
xdelCommand	src/t_stream.c	/^void xdelCommand(client *c) {$/;"	f
xgroup	src/server.h	/^    *emptyscan, *multi, *exec, *left, *right, *hset, *srem, *xgroup, *xclaim,  $/;"	m	struct:sharedObjectsStruct
xgroupCommand	src/server.h	/^                        *xgroupCommand, *rpoplpushCommand, *lmoveCommand;$/;"	m	struct:redisServer	typeref:struct:redisServer::
xgroupCommand	src/t_stream.c	/^void xgroupCommand(client *c) {$/;"	f
xinfoCommand	src/t_stream.c	/^void xinfoCommand(client *c) {$/;"	f
xinfoReplyWithStreamInfo	src/t_stream.c	/^void xinfoReplyWithStreamInfo(client *c, stream *s) {$/;"	f
xlenCommand	src/t_stream.c	/^void xlenCommand(client *c) {$/;"	f
xmallctl	deps/jemalloc/include/jemalloc/internal/ctl.h	104;"	d
xmallctlbymib	deps/jemalloc/include/jemalloc/internal/ctl.h	122;"	d
xmallctlnametomib	deps/jemalloc/include/jemalloc/internal/ctl.h	114;"	d
xoff	src/lolwut6.c	/^    int xoff;       \/* X offset. *\/$/;"	m	struct:skyscraper	file:
xorDigest	src/debug.c	/^void xorDigest(unsigned char *digest, void *ptr, size_t len) {$/;"	f
xorObjectDigest	src/debug.c	/^void xorObjectDigest(redisDb *db, robj *keyobj, unsigned char *digest, robj *o) {$/;"	f
xorStringObjectDigest	src/debug.c	/^void xorStringObjectDigest(unsigned char *digest, robj *o) {$/;"	f
xorshift64star_next	src/memtest.c	131;"	d	file:
xpendingCommand	src/t_stream.c	/^void xpendingCommand(client *c) {$/;"	f
xrangeCommand	src/t_stream.c	/^void xrangeCommand(client *c) {$/;"	f
xrangeGenericCommand	src/t_stream.c	/^void xrangeGenericCommand(client *c, int rev) {$/;"	f
xreadCommand	src/t_stream.c	/^void xreadCommand(client *c) {$/;"	f
xreadGetKeys	src/db.c	/^int xreadGetKeys(struct redisCommand *cmd, robj **argv, int argc, getKeysResult *result) {$/;"	f
xread_consumer	src/server.h	/^    robj *xread_consumer;   \/* XREADGROUP consumer name. *\/$/;"	m	struct:blockingState
xread_count	src/server.h	/^    size_t xread_count;     \/* XREAD COUNT option. *\/$/;"	m	struct:blockingState
xread_group	src/server.h	/^    robj *xread_group;      \/* XREADGROUP group name. *\/$/;"	m	struct:blockingState
xread_group_noack	src/server.h	/^    int xread_group_noack;$/;"	m	struct:blockingState
xrevrangeCommand	src/t_stream.c	/^void xrevrangeCommand(client *c) {$/;"	f
xsetidCommand	src/t_stream.c	/^void xsetidCommand(client *c) {$/;"	f
xtrimCommand	src/t_stream.c	/^void xtrimCommand(client *c) {$/;"	f
xy	src/geohash.h	/^    double xy[2]; \/* search center point, xy[0]: lon, xy[1]: lat *\/$/;"	m	struct:__anon51
yell	src/quicklist.c	1521;"	d	file:
yesno	src/config.c	/^    boolConfigData yesno;$/;"	m	union:typeData	file:
yesnotoi	src/config.c	/^int yesnotoi(char *s) {$/;"	f
yindex	deps/lua/src/lparser.c	/^static void yindex (LexState *ls, expdesc *v) {$/;"	f	file:
z	deps/lua/src/ldo.c	/^  ZIO *z;$/;"	m	struct:SParser	file:
z	deps/lua/src/llex.h	/^  ZIO *z;  \/* input stream *\/$/;"	m	struct:LexState
zaddCommand	src/t_zset.c	/^void zaddCommand(client *c) {$/;"	f
zaddGenericCommand	src/t_zset.c	/^void zaddGenericCommand(client *c, int flags) {$/;"	f
zarndmemberReplyWithZiplist	src/t_zset.c	/^static void zarndmemberReplyWithZiplist(client *c, unsigned int count, ziplistEntry *keys, ziplistEntry *vals) {$/;"	f	file:
zcalloc	src/zmalloc.c	/^void *zcalloc(size_t size) {$/;"	f
zcalloc_usable	src/zmalloc.c	/^void *zcalloc_usable(size_t size, size_t *usable) {$/;"	f
zcardCommand	src/t_zset.c	/^void zcardCommand(client *c) {$/;"	f
zcountCommand	src/t_zset.c	/^void zcountCommand(client *c) {$/;"	f
zdiff	src/t_zset.c	/^static void zdiff(zsetopsrc *src, long setnum, zset *dstzset, size_t *maxelelen) {$/;"	f	file:
zdiffAlgorithm1	src/t_zset.c	/^static void zdiffAlgorithm1(zsetopsrc *src, long setnum, zset *dstzset, size_t *maxelelen) {$/;"	f	file:
zdiffAlgorithm2	src/t_zset.c	/^static void zdiffAlgorithm2(zsetopsrc *src, long setnum, zset *dstzset, size_t *maxelelen) {$/;"	f	file:
zdiffCommand	src/t_zset.c	/^void zdiffCommand(client *c) {$/;"	f
zdiffstoreCommand	src/t_zset.c	/^void zdiffstoreCommand(client *c) {$/;"	f
zero	deps/jemalloc/src/jemalloc.c	/^	bool zero;$/;"	m	struct:dynamic_opts_s	file:
zfree	src/zmalloc.c	/^void zfree(void *ptr) {$/;"	f
zfree_no_tcache	src/zmalloc.c	/^void zfree_no_tcache(void *ptr) {$/;"	f
zfree_usable	src/zmalloc.c	/^void zfree_usable(void *ptr, size_t *usable) {$/;"	f
zgetc	deps/lua/src/lzio.h	22;"	d
zi	src/quicklist.h	/^    unsigned char *zi;$/;"	m	struct:quicklistEntry
zi	src/quicklist.h	/^    unsigned char *zi;$/;"	m	struct:quicklistIter
zincrbyCommand	src/t_zset.c	/^void zincrbyCommand(client *c) {$/;"	f
zinterCommand	src/t_zset.c	/^void zinterCommand(client *c) {$/;"	f
zinterstoreCommand	src/t_zset.c	/^void zinterstoreCommand(client *c) {$/;"	f
zipAssertValidEntry	src/ziplist.c	/^static inline void zipAssertValidEntry(unsigned char* zl, size_t zlbytes, unsigned char *p) {$/;"	f	file:
zipEncodingLenSize	src/ziplist.c	/^static inline unsigned int zipEncodingLenSize(unsigned char encoding) {$/;"	f	file:
zipEntry	src/ziplist.c	/^static inline void zipEntry(unsigned char *p, zlentry *e) {$/;"	f	file:
zipEntrySafe	src/ziplist.c	/^static inline int zipEntrySafe(unsigned char* zl, size_t zlbytes, unsigned char *p, zlentry *e, int validate_prevlen) {$/;"	f	file:
zipIntSize	src/ziplist.c	/^static inline unsigned int zipIntSize(unsigned char encoding) {$/;"	f	file:
zipLoadInteger	src/ziplist.c	/^int64_t zipLoadInteger(unsigned char *p, unsigned char encoding) {$/;"	f
zipPrevLenByteDiff	src/ziplist.c	/^int zipPrevLenByteDiff(unsigned char *p, unsigned int len) {$/;"	f
zipRawEntryLength	src/ziplist.c	/^static inline unsigned int zipRawEntryLength(unsigned char *p) {$/;"	f	file:
zipRawEntryLengthSafe	src/ziplist.c	/^static inline unsigned int zipRawEntryLengthSafe(unsigned char* zl, size_t zlbytes, unsigned char *p) {$/;"	f	file:
zipSaveInteger	src/ziplist.c	/^void zipSaveInteger(unsigned char *p, int64_t value, unsigned char encoding) {$/;"	f
zipStoreEntryEncoding	src/ziplist.c	/^unsigned int zipStoreEntryEncoding(unsigned char *p, unsigned char encoding, unsigned int rawlen) {$/;"	f
zipStorePrevEntryLength	src/ziplist.c	/^unsigned int zipStorePrevEntryLength(unsigned char *p, unsigned int len) {$/;"	f
zipStorePrevEntryLengthLarge	src/ziplist.c	/^int zipStorePrevEntryLengthLarge(unsigned char *p, unsigned int len) {$/;"	f
zipTryEncoding	src/ziplist.c	/^int zipTryEncoding(unsigned char *entry, unsigned int entrylen, long long *v, unsigned char *encoding) {$/;"	f
ziplistBlobLen	src/ziplist.c	/^size_t ziplistBlobLen(unsigned char *zl) {$/;"	f
ziplistCompare	src/ziplist.c	/^unsigned int ziplistCompare(unsigned char *p, unsigned char *sstr, unsigned int slen) {$/;"	f
ziplistDelete	src/ziplist.c	/^unsigned char *ziplistDelete(unsigned char *zl, unsigned char **p) {$/;"	f
ziplistDeleteRange	src/ziplist.c	/^unsigned char *ziplistDeleteRange(unsigned char *zl, int index, unsigned int num) {$/;"	f
ziplistEntry	src/ziplist.h	/^} ziplistEntry;$/;"	t	typeref:struct:__anon70
ziplistFind	src/ziplist.c	/^unsigned char *ziplistFind(unsigned char *zl, unsigned char *p, unsigned char *vstr, unsigned int vlen, unsigned int skip) {$/;"	f
ziplistGet	src/ziplist.c	/^unsigned int ziplistGet(unsigned char *p, unsigned char **sstr, unsigned int *slen, long long *sval) {$/;"	f
ziplistGetObject	src/t_zset.c	/^sds ziplistGetObject(unsigned char *sptr) {$/;"	f
ziplistIndex	src/ziplist.c	/^unsigned char *ziplistIndex(unsigned char *zl, int index) {$/;"	f
ziplistInsert	src/ziplist.c	/^unsigned char *ziplistInsert(unsigned char *zl, unsigned char *p, unsigned char *s, unsigned int slen) {$/;"	f
ziplistLen	src/ziplist.c	/^unsigned int ziplistLen(unsigned char *zl) {$/;"	f
ziplistMerge	src/ziplist.c	/^unsigned char *ziplistMerge(unsigned char **first, unsigned char **second) {$/;"	f
ziplistNew	src/ziplist.c	/^unsigned char *ziplistNew(void) {$/;"	f
ziplistNext	src/ziplist.c	/^unsigned char *ziplistNext(unsigned char *zl, unsigned char *p) {$/;"	f
ziplistPrev	src/ziplist.c	/^unsigned char *ziplistPrev(unsigned char *zl, unsigned char *p) {$/;"	f
ziplistPush	src/ziplist.c	/^unsigned char *ziplistPush(unsigned char *zl, unsigned char *s, unsigned int slen, int where) {$/;"	f
ziplistRandomPair	src/ziplist.c	/^void ziplistRandomPair(unsigned char *zl, unsigned long total_count, ziplistEntry *key, ziplistEntry *val) {$/;"	f
ziplistRandomPairs	src/ziplist.c	/^void ziplistRandomPairs(unsigned char *zl, unsigned int count, ziplistEntry *keys, ziplistEntry *vals) {$/;"	f
ziplistRandomPairsUnique	src/ziplist.c	/^unsigned int ziplistRandomPairsUnique(unsigned char *zl, unsigned int count, ziplistEntry *keys, ziplistEntry *vals) {$/;"	f
ziplistReplace	src/ziplist.c	/^unsigned char *ziplistReplace(unsigned char *zl, unsigned char *p, unsigned char *s, unsigned int slen) {$/;"	f
ziplistRepr	src/ziplist.c	/^void ziplistRepr(unsigned char *zl) {$/;"	f
ziplistResize	src/ziplist.c	/^unsigned char *ziplistResize(unsigned char *zl, unsigned int len) {$/;"	f
ziplistSaveValue	src/ziplist.c	/^static inline void ziplistSaveValue(unsigned char *val, unsigned int len, long long lval, ziplistEntry *dest) {$/;"	f	file:
ziplistTest	src/ziplist.c	/^int ziplistTest(int argc, char **argv, int accurate) {$/;"	f
ziplistValidateEntryCB	src/ziplist.h	/^typedef int (*ziplistValidateEntryCB)(unsigned char* p, void* userdata);$/;"	t
ziplistValidateIntegrity	src/ziplist.c	/^int ziplistValidateIntegrity(unsigned char *zl, size_t size, int deep,$/;"	f
zipmapBlobLen	src/zipmap.c	/^size_t zipmapBlobLen(unsigned char *zm) {$/;"	f
zipmapDecodeLength	src/zipmap.c	/^static unsigned int zipmapDecodeLength(unsigned char *p) {$/;"	f	file:
zipmapDel	src/zipmap.c	/^unsigned char *zipmapDel(unsigned char *zm, unsigned char *key, unsigned int klen, int *deleted) {$/;"	f
zipmapEncodeLength	src/zipmap.c	/^static unsigned int zipmapEncodeLength(unsigned char *p, unsigned int len) {$/;"	f	file:
zipmapExists	src/zipmap.c	/^int zipmapExists(unsigned char *zm, unsigned char *key, unsigned int klen) {$/;"	f
zipmapGet	src/zipmap.c	/^int zipmapGet(unsigned char *zm, unsigned char *key, unsigned int klen, unsigned char **value, unsigned int *vlen) {$/;"	f
zipmapGetEncodedLengthSize	src/zipmap.c	/^static unsigned int zipmapGetEncodedLengthSize(unsigned char *p) {$/;"	f	file:
zipmapLen	src/zipmap.c	/^unsigned int zipmapLen(unsigned char *zm) {$/;"	f
zipmapLookupRaw	src/zipmap.c	/^static unsigned char *zipmapLookupRaw(unsigned char *zm, unsigned char *key, unsigned int klen, unsigned int *totlen) {$/;"	f	file:
zipmapNew	src/zipmap.c	/^unsigned char *zipmapNew(void) {$/;"	f
zipmapNext	src/zipmap.c	/^unsigned char *zipmapNext(unsigned char *zm, unsigned char **key, unsigned int *klen, unsigned char **value, unsigned int *vlen) {$/;"	f
zipmapRawEntryLength	src/zipmap.c	/^static unsigned int zipmapRawEntryLength(unsigned char *p) {$/;"	f	file:
zipmapRawKeyLength	src/zipmap.c	/^static unsigned int zipmapRawKeyLength(unsigned char *p) {$/;"	f	file:
zipmapRawValueLength	src/zipmap.c	/^static unsigned int zipmapRawValueLength(unsigned char *p) {$/;"	f	file:
zipmapRepr	src/zipmap.c	/^static void zipmapRepr(unsigned char *p) {$/;"	f	file:
zipmapRequiredLength	src/zipmap.c	/^static unsigned long zipmapRequiredLength(unsigned int klen, unsigned int vlen) {$/;"	f	file:
zipmapResize	src/zipmap.c	/^static inline unsigned char *zipmapResize(unsigned char *zm, unsigned int len) {$/;"	f	file:
zipmapRewind	src/zipmap.c	/^unsigned char *zipmapRewind(unsigned char *zm) {$/;"	f
zipmapSet	src/zipmap.c	/^unsigned char *zipmapSet(unsigned char *zm, unsigned char *key, unsigned int klen, unsigned char *val, unsigned int vlen, int *update) {$/;"	f
zipmapTest	src/zipmap.c	/^int zipmapTest(int argc, char *argv[], int accurate) {$/;"	f
zipmapValidateIntegrity	src/zipmap.c	/^int zipmapValidateIntegrity(unsigned char *zm, size_t size, int deep) {$/;"	f
zl	src/quicklist.h	/^    unsigned char *zl;$/;"	m	struct:quicklistNode
zl	src/t_zset.c	/^                unsigned char *zl;$/;"	m	struct:__anon2::__anon3::_iterzset::__anon6	file:
zl	src/t_zset.c	/^            } zl;$/;"	m	union:__anon2::__anon3::_iterzset	typeref:struct:__anon2::__anon3::_iterzset::__anon6	file:
zlentry	src/ziplist.c	/^typedef struct zlentry {$/;"	s	file:
zlentry	src/ziplist.c	/^} zlentry;$/;"	t	typeref:struct:zlentry	file:
zlexcountCommand	src/t_zset.c	/^void zlexcountCommand(client *c) {$/;"	f
zlexrangespec	src/server.h	/^} zlexrangespec;$/;"	t	typeref:struct:__anon28
zlibc_free	src/zmalloc.c	/^void zlibc_free(void *ptr) {$/;"	f
zlistAlikeSort	tests/support/util.tcl	/^proc zlistAlikeSort {a b} {$/;"	p
zmalloc	src/zmalloc.c	/^void *zmalloc(size_t size) {$/;"	f
zmalloc_default_oom	src/zmalloc.c	/^static void zmalloc_default_oom(size_t size) {$/;"	f	file:
zmalloc_get_allocator_info	src/zmalloc.c	/^int zmalloc_get_allocator_info(size_t *allocated,$/;"	f
zmalloc_get_memory_size	src/zmalloc.c	/^size_t zmalloc_get_memory_size(void) {$/;"	f
zmalloc_get_private_dirty	src/zmalloc.c	/^size_t zmalloc_get_private_dirty(long pid) {$/;"	f
zmalloc_get_rss	src/zmalloc.c	/^size_t zmalloc_get_rss(void) {$/;"	f
zmalloc_get_smap_bytes_by_field	src/zmalloc.c	/^size_t zmalloc_get_smap_bytes_by_field(char *field, long pid) {$/;"	f
zmalloc_no_tcache	src/zmalloc.c	/^void *zmalloc_no_tcache(size_t size) {$/;"	f
zmalloc_oom_handler	src/zmalloc.c	/^static void (*zmalloc_oom_handler)(size_t) = zmalloc_default_oom;$/;"	v	file:
zmalloc_set_oom_handler	src/zmalloc.c	/^void zmalloc_set_oom_handler(void (*oom_handler)(size_t)) {$/;"	f
zmalloc_size	src/zmalloc.c	/^size_t zmalloc_size(void *ptr) {$/;"	f
zmalloc_size	src/zmalloc.h	43;"	d
zmalloc_size	src/zmalloc.h	53;"	d
zmalloc_size	src/zmalloc.h	61;"	d
zmalloc_size	src/zmalloc.h	87;"	d
zmalloc_test	src/zmalloc.c	/^int zmalloc_test(int argc, char **argv, int accurate) {$/;"	f
zmalloc_usable	src/zmalloc.c	/^void *zmalloc_usable(size_t size, size_t *usable) {$/;"	f
zmalloc_usable_size	src/zmalloc.c	/^size_t zmalloc_usable_size(void *ptr) {$/;"	f
zmalloc_usable_size	src/zmalloc.h	134;"	d
zmalloc_used	src/server.h	/^    size_t zmalloc_used;$/;"	m	struct:malloc_stats
zmalloc_used_memory	src/zmalloc.c	/^size_t zmalloc_used_memory(void) {$/;"	f
zmscoreCommand	src/t_zset.c	/^void zmscoreCommand(client *c) {$/;"	f
zone_batch_free	deps/jemalloc/src/zone.c	/^zone_batch_free(struct _malloc_zone_t *zone, void **to_be_freed,$/;"	f	file:
zone_batch_malloc	deps/jemalloc/src/zone.c	/^zone_batch_malloc(struct _malloc_zone_t *zone, size_t size, void **results,$/;"	f	file:
zone_calloc	deps/jemalloc/src/zone.c	/^zone_calloc(malloc_zone_t *zone, size_t num, size_t size) {$/;"	f	file:
zone_check	deps/jemalloc/src/zone.c	/^zone_check(malloc_zone_t *zone) {$/;"	f	file:
zone_default_get	deps/jemalloc/src/zone.c	/^zone_default_get(void) {$/;"	f	file:
zone_destroy	deps/jemalloc/src/zone.c	/^zone_destroy(malloc_zone_t *zone) {$/;"	f	file:
zone_enumerator	deps/jemalloc/src/zone.c	/^zone_enumerator(task_t task, void *data, unsigned type_mask,$/;"	f	file:
zone_force_lock	deps/jemalloc/src/zone.c	/^zone_force_lock(malloc_zone_t *zone) {$/;"	f	file:
zone_force_lock_pid	deps/jemalloc/src/zone.c	/^static pid_t zone_force_lock_pid = -1;$/;"	v	file:
zone_force_unlock	deps/jemalloc/src/zone.c	/^zone_force_unlock(malloc_zone_t *zone) {$/;"	f	file:
zone_free	deps/jemalloc/src/zone.c	/^zone_free(malloc_zone_t *zone, void *ptr) {$/;"	f	file:
zone_free_definite_size	deps/jemalloc/src/zone.c	/^zone_free_definite_size(malloc_zone_t *zone, void *ptr, size_t size) {$/;"	f	file:
zone_good_size	deps/jemalloc/src/zone.c	/^zone_good_size(malloc_zone_t *zone, size_t size) {$/;"	f	file:
zone_init	deps/jemalloc/src/zone.c	/^zone_init(void) {$/;"	f	file:
zone_locked	deps/jemalloc/src/zone.c	/^	boolean_t (*zone_locked)(malloc_zone_t *);$/;"	m	struct:malloc_introspection_t	file:
zone_locked	deps/jemalloc/src/zone.c	/^zone_locked(malloc_zone_t *zone) {$/;"	f	file:
zone_log	deps/jemalloc/src/zone.c	/^zone_log(malloc_zone_t *zone, void *address) {$/;"	f	file:
zone_malloc	deps/jemalloc/src/zone.c	/^zone_malloc(malloc_zone_t *zone, size_t size) {$/;"	f	file:
zone_memalign	deps/jemalloc/src/zone.c	/^zone_memalign(malloc_zone_t *zone, size_t alignment, size_t size) {$/;"	f	file:
zone_name	deps/jemalloc/src/zone.c	/^	const char *zone_name;$/;"	m	struct:_malloc_zone_t	file:
zone_pressure_relief	deps/jemalloc/src/zone.c	/^zone_pressure_relief(struct _malloc_zone_t *zone, size_t goal) {$/;"	f	file:
zone_print	deps/jemalloc/src/zone.c	/^zone_print(malloc_zone_t *zone, boolean_t verbose) {$/;"	f	file:
zone_promote	deps/jemalloc/src/zone.c	/^zone_promote(void) {$/;"	f	file:
zone_realloc	deps/jemalloc/src/zone.c	/^zone_realloc(malloc_zone_t *zone, void *ptr, size_t size) {$/;"	f	file:
zone_reinit_lock	deps/jemalloc/src/zone.c	/^zone_reinit_lock(malloc_zone_t *zone) {$/;"	f	file:
zone_size	deps/jemalloc/src/zone.c	/^zone_size(malloc_zone_t *zone, const void *ptr) {$/;"	f	file:
zone_statistics	deps/jemalloc/src/zone.c	/^zone_statistics(malloc_zone_t *zone, malloc_statistics_t *stats) {$/;"	f	file:
zone_valloc	deps/jemalloc/src/zone.c	/^zone_valloc(malloc_zone_t *zone, size_t size) {$/;"	f	file:
zpopmax	src/server.h	/^    *rpop, *lpop, *lpush, *rpoplpush, *lmove, *blmove, *zpopmin, *zpopmax,$/;"	m	struct:sharedObjectsStruct
zpopmaxCommand	src/server.h	/^                        *zpopmaxCommand, *sremCommand, *execCommand,$/;"	m	struct:redisServer	typeref:struct:redisServer::
zpopmaxCommand	src/t_zset.c	/^void zpopmaxCommand(client *c) {$/;"	f
zpopmin	src/server.h	/^    *rpop, *lpop, *lpush, *rpoplpush, *lmove, *blmove, *zpopmin, *zpopmax,$/;"	m	struct:sharedObjectsStruct
zpopminCommand	src/server.h	/^                        *lpopCommand, *rpopCommand, *zpopminCommand,$/;"	m	struct:redisServer	typeref:struct:redisServer::
zpopminCommand	src/t_zset.c	/^void zpopminCommand(client *c) {$/;"	f
zrandmemberCommand	src/t_zset.c	/^void zrandmemberCommand(client *c) {$/;"	f
zrandmemberWithCountCommand	src/t_zset.c	/^void zrandmemberWithCountCommand(client *c, long l, int withscores) {$/;"	f
zrangeCommand	src/t_zset.c	/^void zrangeCommand(client *c) {$/;"	f
zrangeGenericCommand	src/t_zset.c	/^void zrangeGenericCommand(zrange_result_handler *handler, int argc_start, int store,$/;"	f
zrangeResultBeginClient	src/t_zset.c	/^static void zrangeResultBeginClient(zrange_result_handler *handler) {$/;"	f	file:
zrangeResultBeginFunction	src/t_zset.c	/^typedef void (*zrangeResultBeginFunction)(zrange_result_handler *c);$/;"	t	file:
zrangeResultBeginStore	src/t_zset.c	/^static void zrangeResultBeginStore(zrange_result_handler *handler)$/;"	f	file:
zrangeResultEmitCBufferForStore	src/t_zset.c	/^static void zrangeResultEmitCBufferForStore(zrange_result_handler *handler,$/;"	f	file:
zrangeResultEmitCBufferFunction	src/t_zset.c	/^typedef void (*zrangeResultEmitCBufferFunction)($/;"	t	file:
zrangeResultEmitCBufferToClient	src/t_zset.c	/^static void zrangeResultEmitCBufferToClient(zrange_result_handler *handler,$/;"	f	file:
zrangeResultEmitLongLongForStore	src/t_zset.c	/^static void zrangeResultEmitLongLongForStore(zrange_result_handler *handler,$/;"	f	file:
zrangeResultEmitLongLongFunction	src/t_zset.c	/^typedef void (*zrangeResultEmitLongLongFunction)($/;"	t	file:
zrangeResultEmitLongLongToClient	src/t_zset.c	/^static void zrangeResultEmitLongLongToClient(zrange_result_handler *handler,$/;"	f	file:
zrangeResultFinalizeClient	src/t_zset.c	/^static void zrangeResultFinalizeClient(zrange_result_handler *handler,$/;"	f	file:
zrangeResultFinalizeFunction	src/t_zset.c	/^typedef void (*zrangeResultFinalizeFunction)($/;"	t	file:
zrangeResultFinalizeStore	src/t_zset.c	/^static void zrangeResultFinalizeStore(zrange_result_handler *handler, size_t result_count)$/;"	f	file:
zrangeResultHandlerDestinationKeySet	src/t_zset.c	/^static void zrangeResultHandlerDestinationKeySet (zrange_result_handler *handler,$/;"	f	file:
zrangeResultHandlerInit	src/t_zset.c	/^static void zrangeResultHandlerInit(zrange_result_handler *handler,$/;"	f	file:
zrangeResultHandlerScoreEmissionEnable	src/t_zset.c	/^static void zrangeResultHandlerScoreEmissionEnable(zrange_result_handler *handler) {$/;"	f	file:
zrange_consumer_type	src/t_zset.c	/^} zrange_consumer_type;$/;"	t	typeref:enum:__anon10	file:
zrange_direction	src/t_zset.c	/^} zrange_direction;$/;"	t	typeref:enum:__anon9	file:
zrange_result_handler	src/t_zset.c	/^struct zrange_result_handler {$/;"	s	file:
zrange_result_handler	src/t_zset.c	/^typedef struct zrange_result_handler zrange_result_handler;$/;"	t	typeref:struct:zrange_result_handler	file:
zrange_type	src/t_zset.c	/^} zrange_type;$/;"	t	typeref:enum:__anon1	file:
zrangebylexCommand	src/t_zset.c	/^void zrangebylexCommand(client *c) {$/;"	f
zrangebyscoreCommand	src/t_zset.c	/^void zrangebyscoreCommand(client *c) {$/;"	f
zrangespec	src/server.h	/^} zrangespec;$/;"	t	typeref:struct:__anon27
zrangestoreCommand	src/t_zset.c	/^void zrangestoreCommand (client *c) {$/;"	f
zrankCommand	src/t_zset.c	/^void zrankCommand(client *c) {$/;"	f
zrankGenericCommand	src/t_zset.c	/^void zrankGenericCommand(client *c, int reverse) {$/;"	f
zrealloc	src/zmalloc.c	/^void *zrealloc(void *ptr, size_t size) {$/;"	f
zrealloc_usable	src/zmalloc.c	/^void *zrealloc_usable(void *ptr, size_t size, size_t *usable) {$/;"	f
zremCommand	src/t_zset.c	/^void zremCommand(client *c) {$/;"	f
zremrangeGenericCommand	src/t_zset.c	/^void zremrangeGenericCommand(client *c, zrange_type rangetype) {$/;"	f
zremrangebylexCommand	src/t_zset.c	/^void zremrangebylexCommand(client *c) {$/;"	f
zremrangebyrankCommand	src/t_zset.c	/^void zremrangebyrankCommand(client *c) {$/;"	f
zremrangebyscoreCommand	src/t_zset.c	/^void zremrangebyscoreCommand(client *c) {$/;"	f
zrevrangeCommand	src/t_zset.c	/^void zrevrangeCommand(client *c) {$/;"	f
zrevrangebylexCommand	src/t_zset.c	/^void zrevrangebylexCommand(client *c) {$/;"	f
zrevrangebyscoreCommand	src/t_zset.c	/^void zrevrangebyscoreCommand(client *c) {$/;"	f
zrevrankCommand	src/t_zset.c	/^void zrevrankCommand(client *c) {$/;"	f
zs	src/defrag.c	/^    zset *zs;$/;"	m	struct:__anon71	file:
zs	src/t_zset.c	/^                zset *zs;$/;"	m	struct:__anon2::__anon3::_iterzset::__anon7	file:
zscanCommand	src/t_zset.c	/^void zscanCommand(client *c) {$/;"	f
zscoreCommand	src/t_zset.c	/^void zscoreCommand(client *c) {$/;"	f
zset	src/module.c	/^        } zset;$/;"	m	union:RedisModuleKey::__anon62	typeref:struct:RedisModuleKey::__anon62::__anon63	file:
zset	src/server.h	/^typedef struct zset {$/;"	s
zset	src/server.h	/^} zset;$/;"	t	typeref:struct:zset
zset	src/t_zset.c	/^        } zset;$/;"	m	union:__anon2::__anon3	typeref:union:__anon2::__anon3::_iterzset	file:
zsetAdd	src/t_zset.c	/^int zsetAdd(robj *zobj, double score, sds ele, int in_flags, int *out_flags, double *newscore) {$/;"	f
zsetChooseDiffAlgorithm	src/t_zset.c	/^static int zsetChooseDiffAlgorithm(zsetopsrc *src, long setnum) {$/;"	f	file:
zsetConvert	src/t_zset.c	/^void zsetConvert(robj *zobj, int encoding) {$/;"	f
zsetConvertToZiplistIfNeeded	src/t_zset.c	/^void zsetConvertToZiplistIfNeeded(robj *zobj, size_t maxelelen) {$/;"	f
zsetDel	src/t_zset.c	/^int zsetDel(robj *zobj, sds ele) {$/;"	f
zsetDictGetMaxElementLength	src/t_zset.c	/^static int zsetDictGetMaxElementLength(dict *d) {$/;"	f	file:
zsetDictType	src/server.c	/^dictType zsetDictType = {$/;"	v
zsetDup	src/t_zset.c	/^robj *zsetDup(robj *o) {$/;"	f
zsetInitLexRange	src/module.c	/^int zsetInitLexRange(RedisModuleKey *key, RedisModuleString *min, RedisModuleString *max, int first) {$/;"	f
zsetInitScoreRange	src/module.c	/^int zsetInitScoreRange(RedisModuleKey *key, double min, double max, int minex, int maxex, int first) {$/;"	f
zsetKeyReset	src/module.c	/^void zsetKeyReset(RedisModuleKey *key) {$/;"	f
zsetLength	src/t_zset.c	/^unsigned long zsetLength(const robj *zobj) {$/;"	f
zsetRank	src/t_zset.c	/^long zsetRank(robj *zobj, sds ele, int reverse) {$/;"	f
zsetRemoveFromSkiplist	src/t_zset.c	/^static int zsetRemoveFromSkiplist(zset *zs, sds ele) {$/;"	f	file:
zsetReplyFromZiplistEntry	src/t_zset.c	/^void zsetReplyFromZiplistEntry(client *c, ziplistEntry *e) {$/;"	f
zsetScore	src/t_zset.c	/^int zsetScore(robj *zobj, sds member, double *score) {$/;"	f
zsetSdsFromZiplistEntry	src/t_zset.c	/^sds zsetSdsFromZiplistEntry(ziplistEntry *e) {$/;"	f
zsetTypeRandomElement	src/t_zset.c	/^void zsetTypeRandomElement(robj *zsetobj, unsigned long zsetsize, ziplistEntry *key, double *score) {$/;"	f
zsetZiplistValidateIntegrity	src/t_zset.c	/^int zsetZiplistValidateIntegrity(unsigned char *zl, size_t size, int deep) {$/;"	f
zset_max_ziplist_entries	src/server.h	/^    size_t zset_max_ziplist_entries;$/;"	m	struct:redisServer
zset_max_ziplist_value	src/server.h	/^    size_t zset_max_ziplist_value;$/;"	m	struct:redisServer
zset_rem	tests/modules/zset.c	/^int zset_rem(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
zsetopsrc	src/t_zset.c	/^} zsetopsrc;$/;"	t	typeref:struct:__anon2	file:
zsetopval	src/t_zset.c	/^} zsetopval;$/;"	t	typeref:struct:__anon8	file:
zskiplist	src/server.h	/^typedef struct zskiplist {$/;"	s
zskiplist	src/server.h	/^} zskiplist;$/;"	t	typeref:struct:zskiplist
zskiplistLevel	src/server.h	/^    struct zskiplistLevel {$/;"	s	struct:zskiplistNode
zskiplistNode	src/server.h	/^typedef struct zskiplistNode {$/;"	s
zskiplistNode	src/server.h	/^} zskiplistNode;$/;"	t	typeref:struct:zskiplistNode
zsl	src/server.h	/^    zskiplist *zsl;$/;"	m	struct:zset
zslCreate	src/t_zset.c	/^zskiplist *zslCreate(void) {$/;"	f
zslCreateNode	src/t_zset.c	/^zskiplistNode *zslCreateNode(int level, double score, sds ele) {$/;"	f
zslDefrag	src/defrag.c	/^double *zslDefrag(zskiplist *zsl, double score, sds oldele, sds newele) {$/;"	f
zslDelete	src/t_zset.c	/^int zslDelete(zskiplist *zsl, double score, sds ele, zskiplistNode **node) {$/;"	f
zslDeleteNode	src/t_zset.c	/^void zslDeleteNode(zskiplist *zsl, zskiplistNode *x, zskiplistNode **update) {$/;"	f
zslDeleteRangeByLex	src/t_zset.c	/^unsigned long zslDeleteRangeByLex(zskiplist *zsl, zlexrangespec *range, dict *dict) {$/;"	f
zslDeleteRangeByRank	src/t_zset.c	/^unsigned long zslDeleteRangeByRank(zskiplist *zsl, unsigned int start, unsigned int end, dict *dict) {$/;"	f
zslDeleteRangeByScore	src/t_zset.c	/^unsigned long zslDeleteRangeByScore(zskiplist *zsl, zrangespec *range, dict *dict) {$/;"	f
zslFirstInLexRange	src/t_zset.c	/^zskiplistNode *zslFirstInLexRange(zskiplist *zsl, zlexrangespec *range) {$/;"	f
zslFirstInRange	src/t_zset.c	/^zskiplistNode *zslFirstInRange(zskiplist *zsl, zrangespec *range) {$/;"	f
zslFree	src/t_zset.c	/^void zslFree(zskiplist *zsl) {$/;"	f
zslFreeLexRange	src/t_zset.c	/^void zslFreeLexRange(zlexrangespec *spec) {$/;"	f
zslFreeNode	src/t_zset.c	/^void zslFreeNode(zskiplistNode *node) {$/;"	f
zslGetElementByRank	src/t_zset.c	/^zskiplistNode* zslGetElementByRank(zskiplist *zsl, unsigned long rank) {$/;"	f
zslGetRank	src/t_zset.c	/^unsigned long zslGetRank(zskiplist *zsl, double score, sds ele) {$/;"	f
zslInsert	src/t_zset.c	/^zskiplistNode *zslInsert(zskiplist *zsl, double score, sds ele) {$/;"	f
zslIsInLexRange	src/t_zset.c	/^int zslIsInLexRange(zskiplist *zsl, zlexrangespec *range) {$/;"	f
zslIsInRange	src/t_zset.c	/^int zslIsInRange(zskiplist *zsl, zrangespec *range) {$/;"	f
zslLastInLexRange	src/t_zset.c	/^zskiplistNode *zslLastInLexRange(zskiplist *zsl, zlexrangespec *range) {$/;"	f
zslLastInRange	src/t_zset.c	/^zskiplistNode *zslLastInRange(zskiplist *zsl, zrangespec *range) {$/;"	f
zslLexValueGteMin	src/t_zset.c	/^int zslLexValueGteMin(sds value, zlexrangespec *spec) {$/;"	f
zslLexValueLteMax	src/t_zset.c	/^int zslLexValueLteMax(sds value, zlexrangespec *spec) {$/;"	f
zslParseLexRange	src/t_zset.c	/^int zslParseLexRange(robj *min, robj *max, zlexrangespec *spec) {$/;"	f
zslParseLexRangeItem	src/t_zset.c	/^int zslParseLexRangeItem(robj *item, sds *dest, int *ex) {$/;"	f
zslParseRange	src/t_zset.c	/^static int zslParseRange(robj *min, robj *max, zrangespec *spec) {$/;"	f	file:
zslRandomLevel	src/t_zset.c	/^int zslRandomLevel(void) {$/;"	f
zslUpdateNode	src/defrag.c	/^void zslUpdateNode(zskiplist *zsl, zskiplistNode *oldnode, zskiplistNode *newnode, zskiplistNode **update) {$/;"	f
zslUpdateScore	src/t_zset.c	/^zskiplistNode *zslUpdateScore(zskiplist *zsl, double curscore, sds ele, double newscore) {$/;"	f
zslValueGteMin	src/t_zset.c	/^int zslValueGteMin(double value, zrangespec *spec) {$/;"	f
zslValueLteMax	src/t_zset.c	/^int zslValueLteMax(double value, zrangespec *spec) {$/;"	f
zstrdup	src/zmalloc.c	/^char *zstrdup(const char *s) {$/;"	f
ztrycalloc	src/zmalloc.c	/^void *ztrycalloc(size_t size) {$/;"	f
ztrycalloc_usable	src/zmalloc.c	/^void *ztrycalloc_usable(size_t size, size_t *usable) {$/;"	f
ztrymalloc	src/zmalloc.c	/^void *ztrymalloc(size_t size) {$/;"	f
ztrymalloc_usable	src/zmalloc.c	/^void *ztrymalloc_usable(size_t size, size_t *usable) {$/;"	f
ztryrealloc	src/zmalloc.c	/^void *ztryrealloc(void *ptr, size_t size) {$/;"	f
ztryrealloc_usable	src/zmalloc.c	/^void *ztryrealloc_usable(void *ptr, size_t size, size_t *usable) {$/;"	f
zuiBufferFromValue	src/t_zset.c	/^int zuiBufferFromValue(zsetopval *val) {$/;"	f
zuiClearIterator	src/t_zset.c	/^void zuiClearIterator(zsetopsrc *op) {$/;"	f
zuiCompareByCardinality	src/t_zset.c	/^int zuiCompareByCardinality(const void *s1, const void *s2) {$/;"	f
zuiCompareByRevCardinality	src/t_zset.c	/^static int zuiCompareByRevCardinality(const void *s1, const void *s2) {$/;"	f	file:
zuiFind	src/t_zset.c	/^int zuiFind(zsetopsrc *op, zsetopval *val, double *score) {$/;"	f
zuiInitIterator	src/t_zset.c	/^void zuiInitIterator(zsetopsrc *op) {$/;"	f
zuiLength	src/t_zset.c	/^unsigned long zuiLength(zsetopsrc *op) {$/;"	f
zuiLongLongFromValue	src/t_zset.c	/^int zuiLongLongFromValue(zsetopval *val) {$/;"	f
zuiNewSdsFromValue	src/t_zset.c	/^sds zuiNewSdsFromValue(zsetopval *val) {$/;"	f
zuiNext	src/t_zset.c	/^int zuiNext(zsetopsrc *op, zsetopval *val) {$/;"	f
zuiSdsFromValue	src/t_zset.c	/^sds zuiSdsFromValue(zsetopval *val) {$/;"	f
zunionCommand	src/t_zset.c	/^void zunionCommand(client *c) {$/;"	f
zunionInterAggregate	src/t_zset.c	/^inline static void zunionInterAggregate(double *target, double val, int aggregate) {$/;"	f	file:
zunionInterDictValue	src/t_zset.c	2345;"	d	file:
zunionInterDiffGenericCommand	src/t_zset.c	/^void zunionInterDiffGenericCommand(client *c, robj *dstkey, int numkeysIndex, int op) {$/;"	f
zunionInterDiffGetKeys	src/db.c	/^int zunionInterDiffGetKeys(struct redisCommand *cmd, robj **argv, int argc, getKeysResult *result) {$/;"	f
zunionInterDiffStoreGetKeys	src/db.c	/^int zunionInterDiffStoreGetKeys(struct redisCommand *cmd, robj **argv, int argc, getKeysResult *result) {$/;"	f
zunionstoreCommand	src/t_zset.c	/^void zunionstoreCommand(client *c) {$/;"	f
zzlCompareElements	src/t_zset.c	/^int zzlCompareElements(unsigned char *eptr, unsigned char *cstr, unsigned int clen) {$/;"	f
zzlDelete	src/t_zset.c	/^unsigned char *zzlDelete(unsigned char *zl, unsigned char *eptr) {$/;"	f
zzlDeleteRangeByLex	src/t_zset.c	/^unsigned char *zzlDeleteRangeByLex(unsigned char *zl, zlexrangespec *range, unsigned long *deleted) {$/;"	f
zzlDeleteRangeByRank	src/t_zset.c	/^unsigned char *zzlDeleteRangeByRank(unsigned char *zl, unsigned int start, unsigned int end, unsigned long *deleted) {$/;"	f
zzlDeleteRangeByScore	src/t_zset.c	/^unsigned char *zzlDeleteRangeByScore(unsigned char *zl, zrangespec *range, unsigned long *deleted) {$/;"	f
zzlFind	src/t_zset.c	/^unsigned char *zzlFind(unsigned char *zl, sds ele, double *score) {$/;"	f
zzlFirstInLexRange	src/t_zset.c	/^unsigned char *zzlFirstInLexRange(unsigned char *zl, zlexrangespec *range) {$/;"	f
zzlFirstInRange	src/t_zset.c	/^unsigned char *zzlFirstInRange(unsigned char *zl, zrangespec *range) {$/;"	f
zzlGetScore	src/t_zset.c	/^double zzlGetScore(unsigned char *sptr) {$/;"	f
zzlInsert	src/t_zset.c	/^unsigned char *zzlInsert(unsigned char *zl, sds ele, double score) {$/;"	f
zzlInsertAt	src/t_zset.c	/^unsigned char *zzlInsertAt(unsigned char *zl, unsigned char *eptr, sds ele, double score) {$/;"	f
zzlIsInLexRange	src/t_zset.c	/^int zzlIsInLexRange(unsigned char *zl, zlexrangespec *range) {$/;"	f
zzlIsInRange	src/t_zset.c	/^int zzlIsInRange(unsigned char *zl, zrangespec *range) {$/;"	f
zzlLastInLexRange	src/t_zset.c	/^unsigned char *zzlLastInLexRange(unsigned char *zl, zlexrangespec *range) {$/;"	f
zzlLastInRange	src/t_zset.c	/^unsigned char *zzlLastInRange(unsigned char *zl, zrangespec *range) {$/;"	f
zzlLength	src/t_zset.c	/^unsigned int zzlLength(unsigned char *zl) {$/;"	f
zzlLexValueGteMin	src/t_zset.c	/^int zzlLexValueGteMin(unsigned char *p, zlexrangespec *spec) {$/;"	f
zzlLexValueLteMax	src/t_zset.c	/^int zzlLexValueLteMax(unsigned char *p, zlexrangespec *spec) {$/;"	f
zzlNext	src/t_zset.c	/^void zzlNext(unsigned char *zl, unsigned char **eptr, unsigned char **sptr) {$/;"	f
zzlPrev	src/t_zset.c	/^void zzlPrev(unsigned char *zl, unsigned char **eptr, unsigned char **sptr) {$/;"	f
zzlStrtod	src/t_zset.c	/^double zzlStrtod(unsigned char *vstr, unsigned int vlen) {$/;"	f
~RedisQtAdapter	deps/hiredis/adapters/qt.h	/^        ~RedisQtAdapter() {$/;"	f	class:RedisQtAdapter
